package pb2_re34_alt_fla
{
   import CPMStar.*;
   import com.adobe.crypto.MD5;
   import com.adobe.images.*;
   import com.hurlant.util.*;
   import com.jac.mouse.*;
   import fl.motion.*;
   import flash.accessibility.*;
   import flash.display.*;
   import flash.errors.*;
   import flash.events.*;
   import flash.external.*;
   import flash.filters.*;
   import flash.geom.*;
   import flash.media.*;
   import flash.net.*;
   import flash.net.drm.*;
   import flash.system.*;
   import flash.text.*;
   import flash.text.ime.*;
   import flash.ui.*;
   import flash.utils.*;
   
   public dynamic class MainTimeline extends MovieClip
   {
	  public var RUN_CATEGORY = "IL";
	   
	  public var temp_timer = 0;	   
	   
	  public var LESS_NOISE = false;
	   
	  public var slots = new Vector.<MovieClip>(27);
	   
	  public var slotstotal = 0;
	   
	  public var previous_channel = 0;
	   
	  public var game_x = 0;
	   
	  public var game_y = 0;
	   
	  public var fps_toggle_perf = false;
	   
	  public var bottomsurface = [];
	   
	  public var bottomsurfacebox = [];
	   
	  public var topsurface = [];
	   
	  public var topsurfacebox = [];
	   
	  public var bgtexture = [];
	   
	  public var ledgebox = [];
	   
	  public var decorbox = [];
	   
	  public var gamedoor = [];
	   
	  public var gamebox = [];
	  
	  public var bgbox = [];
	   
	  public var ui_elements_x = [];
	   
	  public var ui_elements_y = [];
	   
	  public var ui_elements_visible = [];
	  
	  public var preview_elements_visible = [];
	  
	  public var preview_elements_x = [];
	  
	  public var preview_elements_y = [];
	   
	  public var custom_text = "";
	  
	  public var gt_counter = 0;
	  
	  public var gt_ms_text = "000";
	  
	  public var gt_s = 0;
	  
	  public var gt_ms = 0;
	  
	  public var gt_h = 0;
	  
	  public var gt_m = 0;
	  
	  public var rt_counter = 0;
	  
	  public var rt_ms_text = "000";
	  
	  public var rt_s = 0;
	  
	  public var rt_ms = 0;
	  
	  public var rt_h = 0;
	  
	  public var rt_m = 0;
	  
	  public var start_ms = 0;
	  
	  public var end_ms = 0;
	  
	  public var losses = 0;
	  
	  public var frames_display = 0;
	  
	  public var prev_frames = 0;
	  
	  public var temp_fps = 0;
	  
	  public var temp_variable = 0;
	  
	  public var mc_ct:MovieClip;
	  
	  public var gt_real:MovieClip;
	  
	  public var rt_real:MovieClip;
	  
	  public var df_preview:MovieClip;
	  
	  public var fr_preview:MovieClip;
	   
	  public var MP_map_preview_server:String;
	   
	  public var DRAW_EARTH:Boolean;
      
      public var pb2:MovieClip;
      
      public var e_1:MovieClip;
      
      public var sc_up1:SimpleButton;
      
      public var curserv2:SimpleButton;
      
      public var body1_prev:SimpleButton;
      
      public var menu_start2:SimpleButton;
      
      public var errmenu:MovieClip;
      
      public var cmid:TextField;
      
      public var gamemenu:MovieClip;
      
      public var pcg:MovieClip;
      
      public var pb3:MovieClip;
      
      public var ggg:MovieClip;
      
      public var map_preview_big_lobby:MovieClip;
      
      public var hf_1:MovieClip;
      
      public var e_2:MovieClip;
      
      public var sc_scrool:SimpleButton;
      
      public var sc_up2:SimpleButton;
      
      public var hit_1:MovieClip;
      
      public var v_1x:MovieClip;
      
      public var mp_auto_con_1:MovieClip;
      
      public var nologin_start:SimpleButton;
      
      public var body1_next:SimpleButton;
      
      public var legs0_prev:SimpleButton;
      
      public var body0_prev:SimpleButton;
      
      public var menu_back2:SimpleButton;
      
      public var game_state_text:TextField;
      
      public var dif_extreme_text:TextField;
      
      public var pb4:MovieClip;
      
      public var hf_2:MovieClip;
      
      public var ch_n:TextField;
      
      public var hit_2:MovieClip;
      
      public var v_1:MovieClip;
      
      public var camp_score:MovieClip;
      
      public var legs1_prev:SimpleButton;
      
      public var body0_next:SimpleButton;
      
      public var menu_noback:SimpleButton;
      
      public var txt:TextField;
      
      public var earth:MovieClip;
      
      public var mdialog:MovieClip;
      
      public var error_game_state:TextField;
      
      public var cmap_pl:SimpleButton;
      
      public var nodif_cancel:SimpleButton;
      
      public var conmenu:MovieClip;
      
      public var graphics_3d_front:MovieClip;
      
      public var gupd_mid:TextField;
      
      public var f_1:MovieClip;
      
      public var frr_1:MovieClip;
      
      public var ph_1:MovieClip;
      
      public var q_1:MovieClip;
      
      public var it_is_beta:MovieClip;
      
      public var login_guest:SimpleButton;
      
      public var curserv1:SimpleButton;
      
      public var arms0_prev:SimpleButton;
      
      public var menu_buttons2:MovieClip;
      
      public var exp_bar_shadow:MovieClip;
      
      public var weps:MovieClip;
      
      public var simplegui:MovieClip;
      
      public var a_1:MovieClip;
      
      public var f_2:MovieClip;
      
      public var p_1:MovieClip;
      
      public var mw_1:MovieClip;
      
      public var frr_2:MovieClip;
      
      public var ph_2:MovieClip;
      
      public var q_2:MovieClip;
      
      public var arms1_prev:SimpleButton;
      
      public var skin0:MovieClip;
      
      public var menu_pb1:SimpleButton;
      
      public var pauze:MovieClip;
      
      public var qmenu:MovieClip;
      
      public var a_2:MovieClip;
      
      public var p_2:MovieClip;
      
      public var rrefresh:SimpleButton;
      
      public var mw_2:MovieClip;
      
      public var m2_1:MovieClip;
      
      public var frr_3:MovieClip;
      
      public var s_1:MovieClip;
      
      public var mpcoverup:MovieClip;
      
      public var runner:MovieClip;
      
      public var cust_m:SimpleButton;
      
      public var no_proxy:MovieClip;
      
      public var head0_prev:SimpleButton;
      
      public var skin1:MovieClip;
      
      public var menu_fail_mp:SimpleButton;
      
      public var loa2:TextField;
      
      public var adBox:MovieClip;
      
      public var conmenu_set:MovieClip;
      
      public var hintf:MovieClip;
      
      public var lags:MovieClip;
      
      public var nrg:MovieClip;
      
      public var vehhp:MovieClip;
      
      public var mapname_lobby:TextField;
      
      public var a_3:MovieClip;
      
      public var list2:MovieClip;
      
      public var rec_1:MovieClip;
      
      public var s_2:MovieClip;
      
      public var c_1:MovieClip;
      
      public var cont_back1:SimpleButton;
      
      public var game:MovieClip;
      
      public var char1_prev:SimpleButton;
      
      public var head1_prev:SimpleButton;
      
      public var equipment:SimpleButton;
      
      public var back1:SimpleButton;
      
      public var conti:SimpleButton;
      
      public var intro_graph:MovieClip;
      
      public var tooltip_dif2:TextField;
      
      public var click_reg:MovieClip;
      
      public var chat_win:MovieClip;
      
      public var list3:MovieClip;
      
      public var ran_1:MovieClip;
      
      public var a_4:MovieClip;
      
      public var back2:SimpleButton;
      
      public var rec_2:MovieClip;
      
      public var opt_controls:SimpleButton;
      
      public var c_2:MovieClip;
      
      public var flogin:TextField;
      
      public var back1e1:SimpleButton;
      
      public var char0:TextField;
      
      public var char0_prev:SimpleButton;
      
      public var menu_fail_faq:SimpleButton;
      
      public var tooltip_dif3:TextField;
      
      public var hp_box:MovieClip;
      
      public var tinted_hp_prog:MovieClip;
      
      public var back3:SimpleButton;
      
      public var errmenu_mp:MovieClip;
      
      public var ran_2:MovieClip;
      
      public var opt_export_progress:SimpleButton;
      
      public var se_1:MovieClip;
      
      public var vi_1:MovieClip;
      
      public var m_1:MovieClip;
      
      public var server_list_box:MovieClip;
      
      public var login_cancel:SimpleButton;
      
      public var back1e2:SimpleButton;
      
      public var eq_pcg:SimpleButton;
      
      public var bt_1:MovieClip;
      
      public var flike:SimpleButton;
      
      public var darkness:MovieClip;
      
      public var dif_hard:SimpleButton;
      
      public var tooltip_dif:TextField;
      
      public var a_6:MovieClip;
      
      public var exp_1:MovieClip;
      
      public var se_2:MovieClip;
      
      public var dch_0:MovieClip;
      
      public var cur_1:MovieClip;
      
      public var vi_2:MovieClip;
      
      public var nologin_cancel:SimpleButton;
      
      public var bt_2:MovieClip;
      
      public var char1_next:SimpleButton;
      
      public var intro_vers:TextField;
      
      public var ach_txt:TextField;
      
      public var cmap_canc:SimpleButton;
      
      public var need_heal:MovieClip;
      
      public var graphics_3d:MovieClip;
      
      public var map_preview_big:MovieClip;
      
      public var match_lobby:TextField;
      
      public var gupd_gname:TextField;
      
      public var list:MovieClip;
      
      public var os_1:MovieClip;
      
      public var exp_2:MovieClip;
      
      public var dch_1:MovieClip;
      
      public var hi_1:MovieClip;
      
      public var cur_2:MovieClip;
      
      public var fpassword:TextField;
      
      public var equipment2:SimpleButton;
      
      public var char0_next:SimpleButton;
      
      public var camp_list:MovieClip;
      
      public var flike2:SimpleButton;
      
      public var cap:TextField;
      
      public var new_active:MovieClip;
      
      public var ap_1:MovieClip;
      
      public var nnew:SimpleButton;
      
      public var os_2:MovieClip;
      
      public var dch_2:MovieClip;
      
      public var exp_3:MovieClip;
      
      public var hi_2:MovieClip;
      
      public var tt_1:MovieClip;
      
      public var n_1:MovieClip;
      
      public var head0_next:SimpleButton;
      
      public var exp_bar:MovieClip;
      
      public var conti_loading:SimpleButton;
      
      public var dif_extreme:SimpleButton;
      
      public var flike4:SimpleButton;
      
      public var dif_normal:SimpleButton;
      
      public var herolist:MovieClip;
      
      public var sky:MovieClip;
      
      public var server_lobby:TextField;
      
      public var ap_2:MovieClip;
      
      public var screenfade_2:MovieClip;
      
      public var csh_1:MovieClip;
      
      public var m_1x:MovieClip;
      
      public var tt_2:MovieClip;
      
      public var n_2:MovieClip;
      
      public var head1_next:SimpleButton;
      
      public var menu_buttons:MovieClip;
      
      public var map_quickpick:MovieClip;
      
      public var whitness:MovieClip;
      
      public var intro_btcb:SimpleButton;
      
      public var flike5:SimpleButton;
      
      public var ach_done:SimpleButton;
      
      public var whitesimple:MovieClip;
      
      public var screenf:MovieClip;
      
      public var sc_down2:SimpleButton;
      
      public var screenfade_1:MovieClip;
      
      public var csh_2:MovieClip;
      
      public var cust_back1:SimpleButton;
      
      public var next_lev:SimpleButton;
      
      public var errtxt:TextField;
      
      public var mupd:MovieClip;
      
      public var loa:TextField;
      
      public var cont_back_progress:SimpleButton;
      
      public var cmap_crt:SimpleButton;
      
      public var sc_down1:SimpleButton;
      
      public var beep_1:MovieClip;
      
      public var curserver:TextField;
      
      public var login_login:SimpleButton;
      
      public var eq_pcg2:SimpleButton;
      
      public var achives:SimpleButton;
      
      public var creds:TextField;
      
      public var myCursor:MovieClip;
      
      public var load_error_field:TextField;
      
      public var intro_base:MovieClip;
      
      public var team_red:MovieClip;
      
      public var team_blue:MovieClip;
      
      public var pb0:MovieClip;
      
      public var ggpp:MovieClip;
      
      public var beep_2:MovieClip;
      
      public var m2_1x:MovieClip;
      
      public var cm_1:MovieClip;
      
      public var mp_auto_con_2:MovieClip;
      
      public var legs0_next:SimpleButton;
      
      public var arms0_next:SimpleButton;
      
      public var cont_apply_state:SimpleButton;
      
      public var sc_scroolBBB:MovieClip;
      
      public var dif_easy:SimpleButton;
      
      public var gamechatbox2:MovieClip;
      
      public var pb1:MovieClip;
      
      public var need_slot:SimpleButton;
      
      public var rready:MovieClip;
      
      public var cm_2:MovieClip;
      
      public var legs1_next:SimpleButton;
      
      public var arms1_next:SimpleButton;
      
      public var menu_mold:SimpleButton;
      
      public var GAME_VERSION:String;
      
      public var GAME_VERSION_SIMPLE:String;
      
      public var proper_scale_mode:String;
      
      public var proper_stage_align:String;
      
      public var only_global_loader;
      
      public var http_probability:int;
      
      public var https_probability:int;
      
      public var myRequest:URLRequest;
      
      public var myRequest_parallel:URLRequest;
      
      public var myLoader;
      
      public var myRateLoader;
      
      public var myDeRateLoader;
      
      public var myLoader2;
      
      public var myLoader2noserver;
      
      public var mySaveLoadLoader;
      
      public var myVariables:URLVariables;
      
      public var myVariables_parallel:URLVariables;
      
      public var myReportLoader;
      
      public var MP_server:String;
      
      public var MP_mrate_server:String;
      
      public var MP_screenshot_server:String;
      
      public var MP_exp_server:String;
      
      public var MP_public_stat_server:String;
      
      public var NetworkLoad_triesleft:int;
      
      public var NetworkLoad_complete:Boolean;
      
      public var NetworkLoad_failed:Boolean;
      
      public var NetworkSave_triesleft:int;
      
      public var NetworkSave_data:String;
      
      public var my_so;
      
      public var edidumb:int;
      
      public var _flash_version:Number;
      
      public var _fullInfo:String;
      
      public var _osSplitArr:Array;
      
      public var _versionSplitArr:Array;
      
      public var _versionInfo:String;
      
      public var intro_first:Boolean;
      
      public var myMenu:ContextMenu;
      
      public var theDate:Date;
      
      public var spec_debug:Boolean;
      
      public var loaded:Number;
      
      public var total:Number;
      
      public var ldd:Boolean;
      
      public var percent:Number;
      
      public var lastperc:Number;
      
      public var times:Number;
      
      public var totalseconds:Number;
      
      public var waitfor:Number;
      
      public var pass:Boolean;
      
      public var death_cam:int;
      
      public var fir:int;
      
      public var pType:String;
      
      public var CPMStarContentSpotID:String;
      
      public var ad:DisplayObject;
      
      public var intro_glowings:Array;
      
      public var rifle_glow:MovieClip;
      
      public var intro_speculars:Array;
      
      public var sinus:Number;
      
      public var main_y:Number;
      
      public var USE_HTML_WHEEL_EVENTS:Boolean;
      
      public var mh:String;
      
      public var map_quick_picks_max:int;
      
      public var map_qp_ani;
      
      public var map_qp_sp:String;
      
      public var map_qp_mp:String;
      
      public var override_login_password:Boolean;
      
      public var def_login;
      
      public var def_password;
	  
	  public var autostart_mp;
	  
	  public var autostart_mp_server;
	  
	  public var autostart_mp_create;
	  
	  public var autostart_mp_join;
	  
	  public var autostart_bot;
      
      public var menu_hue:Number;
      
      public var LAST_ERROR:String;
      
      public var gamechatbox_text:String;
      
      public var normal_spine_length:Number;
      
      public var normal_shoulder_length:Number;
      
      public var TRIGGER_PLAYER_INITIATOR:int;
      
      public var TRIGGER_PLAYER_KILLER:int;
      
      public var TRIGGER_PROJECTILE_POWER:Number;
      
      public var GAMEPLAY_MODIFICATIONS:String;
      
      public var ANONYMOUS_MODE:Boolean;
      
      public var ALLOW_VAR_SYNC:Boolean;
      
      public var ALLOW_LIGHT_BREAK:Boolean;
      
      public var NAIVE_HIT_CONFIRMATION:Boolean;
      
      public var GLOBAL_REGEN_SPEED:Number;
      
      public var GLOBAL_REGEN_DELAY:Number;
      
      public var FREEZE_OFFSCREEN_ENTITIES:Boolean;
      
      public var GLOBAL_FALL_DAMAGE_MULT:Number;
      
      public var GLOBAL_FALL_SENSITIVITY_MULT:Number;
      
      public var GLOBAL_FALL_DAMAGE_MULT_LIMBS:Number;
      
      public var BOOST_MULT:Number;
      
      public var BOOST_HIGH_PHYSICS:Number;
      
      public var BOOST_LOW_PHYSICS:Number;
      
      public var custom_songs:Vector.<Object>;
      
      public var custom_images:Vector.<Object>;
      
      public var allow_screenshoting:Boolean;
      
      public var images_expected:int;
      
      public var images_loaded:int;
      
      public var images_data_loaded:int;
      
      public var images_ready_to_render:int;
      
      public var images_finished_loading:int;
      
      public var song_with_callback_allowed;
      
      public var gametim:uint;
      
      public var gtlt:int;
      
      public var gtrec:int;
      
      public var gtwi:int;
      
      public var _mp_ping_rl:int;
      
      public var a_int:int;
      
      public var mc:MovieClip;
      
      public var mcc:MovieClip;
      
      public var allow_unlag_fps:Boolean;
      
      public var i:int;
      
      public var i2:int;
      
      public var i3:int;
      
      public var i4:int;
      
      public var i5:int;
      
      public var i6:int;
      
      public var i7:int;
      
      public var spawn_text_for:int;
      
      public var GUEST_ACCESS:Boolean;
      
      public var MP_default_set:int;
      
      public var MP_enc_deaths:int;
      
      public var MP_real_deaths:int;
      
      public var MP_enc_restarts:int;
      
      public var MP_gbd:int;
      
      public var MP_last_message_patience:int;
      
      public var MP_last_message:int;
      
      public var MP_BAD_WORDS_SAID:int;
      
      public var MP_last_linked:int;
      
      public var MP_myspecials:Array;
      
      public var MP_myspecials_total:int;
      
      public var MP_assigning_special:int;
      
      public var MP_specials:Array;
      
      public var MP_start_grenades_count:int;
      
      public var MP_start_grenades_port_count:int;
      
      public var MP_start_grenades_sh_count:int;
      
      public var ENEMY_SENDER_i:int;
      
      public var ENEMY_SENDER_last:int;
      
      public var ENEMY_SENDER_lowestping:Boolean;
      
      public var ENTER_TICKED:Boolean;
      
      public var SP_unlimit_framerate:Boolean;
      
      public var MP_startbarrels:Array;
      
      public var PSYCHOBLOOD_MODE:int;
      
      public var FRAMERATE:int;
      
      public var PREDEF_TEAMS:Array;
      
      public var PREDEF_COLORS:Array;
      
      public var PREDEF_COLORS_ALT:Array;
      
      public var WATER_NAME:String;
      
      public var ACID_NAME:String;
      
      public var c_str:String;
      
      public var c_i:int;
      
      public var c_i2:int;
      
      public var pres_left;
      
      public var pres_right;
      
      public var pres_top;
      
      public var pres_bottom;
      
      public var pres_ok:Boolean;
      
      public var BAD_WORDS_PATTERN:String;
      
      public var BAD_WORDS:Array;
      
      public var LAST_VOTE:int;
      
      public var MP_login_name:String;
      
      public var LAST_BADGE:int;
      
      public var CREDITS_BY_GAME_END:Boolean;
      
      public var BADGES_ENABLED:Boolean;
      
      public var BADGES_TOTAL:int;
      
      public var BADGE_STAT:Array;
      
      public var BADGE_STAT_MAX:Array;
      
      public var BADGE_TITLE:Array;
      
      public var BADGE_REACHED:Array;
      
      public var MP_socket:Socket;
      
      public var ss_info:s_info;
      
      public var ss_info_off:s_info_off;
      
      public var ss_info_act:s_info_act;
      
      public var MP_SERVER_IP:String;
      
      public var MP_SERVER_NAME:String;
      
      public var MP_login_auto_try:Boolean;
      
      public var MP_SERVER_PORT:int;
      
      public var MP_SERVER_GOT:String;
      
      public var CURRENT_HINT:String;
      
      public var THIS_HINT:String;
      
      public var PITIMER:Number;
      
      public var SHAKEAMMOUT:Number;
      
      public var LAST_SERVER_UID:int;
      
      public var MP_errored_out:Boolean;
      
      public var MP_SERVER_GOT_CUR:String;
      
      public var received_packets:Object;
      
      public var MP_last_received_packet:int;
      
      public var spawn:Boolean;
      
      public var allowedText:String;
      
      public var FIRST_TIME:Boolean;
      
      public var game_scale:Number;
      
      public var lgame_scale:Number;
      
      public var hscreenX:Number;
      
      public var hscreenY:Number;
      
      public var screenX:Number;
      
      public var screenY:Number;
      
      public var lock_camera_region:Object;
      
      public var lock_camera_intensity:Number;
      
      public var MP_spectator:Boolean;
      
      public var MP_room:String;
      
      public var MP_room_name:String;
      
      public var MP_map_name:String;
      
      public var MP_pass:String;
      
      public var MP_channel:String;
      
      public var MP_channel_name:String;
      
      public var MP_myid:int;
      
      public var MP_team:int;
      
      public var MP_total:int;
      
      public var MP_mode:Boolean;
      
      public var MP_clan:String;
      
      public var MP_last_clear_shot_time;
      
      public var temp_ignore_gun_pick:Vector.<Object>;
      
      public var MP_favor_the_shooter:Boolean;
      
      public var MP_allow_client_side_kills:Boolean;
      
      public var temp_keep_dmg_belows:Vector.<Object>;
      
      public var CASUAL_MODE:Boolean;
      
      public var NOBASE:Boolean;
      
      public var PLAZMA_GAME:Boolean;
      
      public var AUTO_REVIVE:Boolean;
      
      public var STRICT_MODE:Boolean;
      
      public var MEAT_MODE:Boolean;
      
      public var PRO_BOTS:Boolean;
      
      public var ARCADE_GAME_MODE:Boolean;
      
      public var KINETIC_MODULE_ENABLED:Boolean;
      
      public var LEVELS_TOTAL:int;
      
      public var LEVELS_PASSED:int;
      
      public var CMPG_THIS_LEVEL:int;
      
      public var AWARD:Boolean;
      
      public var MP_last_chat:String;
      
      public var MP_ping1:int;
      
      public var MP_ping2:int;
      
      public var MP_pwarn:Boolean;
      
      public var MP_ping_last:int;
      
      public var INLAG:Boolean;
      
      public var MP_ready:Boolean;
      
      public var MP_type:int;
      
      public var MP_half_bot:Boolean;
      
      public var MP_let_alive_players_hear_dead:Boolean;
      
      public var MP_allow_leaderboard_details:Boolean;
      
      public var MP_kills_in_a_row:int;
      
      public var MP_kills_in_a_row_top:int;
      
      public var LEVEL_END_FORCE:String;
      
      public var CMPG_name:String;
      
      public var EXOS_NAME:String;
      
      public var NOIR_NAME:String;
      
      public var PROXY_NAME:String;
      
      public var CMPG_money:int;
      
      public var MP_nick:String;
      
      public var SUPER_COMPUTER:Boolean;
      
      public var RAGDOLL_COLLIDE:Boolean;
      
      public var IM_A_CHEATER:Boolean;
      
      public var LITE_PHYS:Boolean;
      
      public var AUTO_PICK_NEW_WEPS:Boolean;
      
      public var SOFT_SCREEN:Boolean;
      
      public var SCREEN_EFFECTS:Boolean;
      
      public var VIOLENCE:Boolean;
	  
	  public var MODERATE_VIOLENCE:Boolean;
      
      public var ALTCUR:Boolean;
      
      public var CENSORESHIP:Boolean;
      
      public var DISPLAY_CHAT:int;
      
      public var FX_VOLUME:Number;
      
      public var MUSIC_VOLUME:Number;
      
      public var CUSTOM_MUSIC_VOLUME:Number;
      
      public var CUR_MUSIC_VOLUME:Number;
      
      public var MUSIC_COLDDOWN:int;
      
      public var HQ:Boolean;
      
      public var MOUSE_WHEEL:Boolean;
      
      public var OVERSCROLL:Boolean;
      
      public var EASY_MODE:Boolean;
      
      public var LOW_HPS:Boolean;
      
      public var RECONNECT_ON_LOST_CONNECTION:Boolean;
      
      public var BEEP_ON_DEATH:Boolean;
      
      public var HIT_SOUNDS:Boolean;
      
      public var SCREEN_FADE_EFFECTS:Boolean;
      
      public var SHOW_EXP_BAR:int;
      
      public var MP_AUTO_LOGIN:Boolean;
      
      public var GSPEED:Number;
      
      public var GSPEED2:Number;
      
      public var WSPEED:Number;
      
      public var DEFAULT_FPS:Number;
      
      public var MP_fps:Number;
      
      public var MP_pl:Number;
      
      public var MP_pbug:int;
      
      public var max_after_impact_speed:Number;
      
      public var MP_app:Boolean;
      
      public var temp2:Array;
      
      public var temp;
      
      public var ch_total:int;
      
      public var ch_links:Array;
      
      public var ch_names:Array;
      
      public var ch_pass:Array;
      
      public var ch_app:Array;
      
      public var ch_map:Array;
      
      public var chat_lastid:int;
      
      public var skin_model:Array;
      
      public var skin_color_head:Array;
      
      public var skin_color_body:Array;
      
      public var skin_color_arms:Array;
      
      public var skin_color_legs:Array;
      
      public var clrs:Array;
      
      public var matrix:Array;
      
      public var inventoryA:Array;
      
      public var inventoryB:Array;
      
      public var inventoryC:Array;
      
      public var inventoryD:Array;
      
      public var curA:String;
      
      public var curB:String;
      
      public var armorA:int;
      
      public var armorB:int;
      
      public var MPclr;
      
      public var FIRST_RUN:Boolean;
      
      public var save_i:int;
      
      public var NONMUTE:Boolean;
      
      public var s_channel:Array;
      
      public var vol3d:Array;
      
      public var max_channels:int;
      
      public var last_channel:int;
      
      public var vol;
      
      public var vol2;
      
      public var vol2Custom;
      
      public var DEFAULT_MAP;
      
      public var smod:Number;
      
      public var smod2:Number;
      
      public var dist_to_face:Number;
      
      public var s_chat:chat;
      
      public var s_badge_earned:badge_earned;
      
      public var s_coolbuddy2:coolbuddy2;
      
      public var s_mission_done:mission_done;
      
      public var s_team_switch:team_switch;
      
      public var s_corvett_die:corvett_die;
      
      public var s_test_sound:test_sound;
      
      public var s_hint_appear:hint_appear;
      
      public var s_hint_disappear:hint_disappear;
      
      public var s_ship_incoming:ship_incoming;
      
      public var s_ship_explosion:ship_explosion;
      
      public var s_robo_bug_jump:robo_bug_jump;
      
      public var s_robo_bug_launch:robo_bug_launch;
      
      public var s_robo_bug_hit:robo_bug_hit;
      
      public var s_s_gun_rayrifle:s_gun_rayrifle;
      
      public var m_dist:int;
      
      public var momove:Boolean;
      
      public var debug_screen:Shape;
      
      public var DEBUG_MODE:Boolean;
      
      public var lastcurx:int;
      
      public var lastcury:int;
      
      public var lastcurmove:int;
      
      public var str3:String;
      
      public var str4;
      
      public var str5:String;
      
      public var last_psi:int;
      
      public var shadowbmp:Bitmap;
      
      public var dying_after:Number;
      
      public var HUNT_LOST:int;
      
      public var MP_teamkills:int;
      
      public var MP_round:int;
      
      public var MP_gamestate:int;
      
      public var tooltip_updated:Boolean;
      
      public var TOOLTIPS:Boolean;
      
      public var HINTS:Boolean;
      
      public var gamechat_input_text:String;
      
      public var MP_playerstotal:int;
      
      public var PLAYER_WIDTH:Number;
      
      public var MP_start_x:Number;
      
      public var MP_start_y:Number;
      
      public var MP_force_disconnect:Boolean;
      
      public var MP_chat_input:Boolean;
      
      public var MP_chat_input_for:String;
      
      public var MP_custom_events:String;
      
      public var MP_deaths:int;
      
      public var MP_kills:int;
      
      public var hero:Array;
      
      public var hpwarning:Boolean;
      
      public var hpbeepch:SoundChannel;
      
      public var hp_warn_max:Number;
      
      public var s_hp_warn:hp_warn;
      
      public var s_hp_dead:hp_dead;
      
      public var gravitatorch:SoundChannel;
      
      public var s_gravitator:gravitator2;
      
      public var wind_base:Number;
      
      public var musch:SoundChannel;
      
      public var s_gameplay_song:gameplay_song;
      
      public var main_song_ch:SoundChannel;
      
      public var s_main_song:main_song;
      
      public var am_base_ch:SoundChannel;
      
      public var s_am_base:am_base;
      
      public var am_wind_ch:SoundChannel;
      
      public var s_am_wind:am_wind;
      
      public var timeshiftch:SoundChannel;
      
      public var s_slow_down:slow_down;
      
      public var s_slow_up:slow_up;
      
      public var upd_weps_i;
      
      public var upd_weps_i2:int;
      
      public var grenades_total:int;
      
      public var grenades_port_total:int;
      
      public var grenades_sh_total:int;
      
      public var cwp;
      
      public var cwp_d:Number;
      
      public var c_sim_rt:int;
      
      public var c_sim_rt2:int;
      
      public var c_sim_stress:Boolean;
      
      public var g_minx:int;
      
      public var g_miny:int;
      
      public var g_maxx:int;
      
      public var g_maxy:int;
      
      public var OpenTop:Boolean;
      
      public var system_non_stop:Boolean;
      
      public var stoped_by_focus:Boolean;
      
      public var last_gun_b4_psi:int;
      
      public var mini_scenario_cur:int;
      
      public var mini_scenario_phase:Number;
      
      public var fps_last:uint;
      
      public var fps_ticks:uint;
      
      public var fps_now:uint;
      
      public var fps_delta:uint;
      
      public var fps_fps:Number;
      
      public var color_player;
      
      public var color_friendly;
      
      public var color_enemy;
      
      public var color_player_over;
      
      public var color_friendly_over;
      
      public var color_enemy_over;
      
      public var firstframe:Boolean;
      
      public var g_scale_outcar:Number;
      
      public var s_t_switch1:t_switch1;
      
      public var s_t_switch2:t_switch2;
      
      public var s_t_switch_denied:t_switch_denied;
      
      public var s_t_door1_start:t_door1_start;
      
      public var s_t_door1_stop:t_door1_stop;
      
      public var s_step1:step1;
      
      public var s_step2:step2;
      
      public var s_step3:step3;
      
      public var s_step4:step4;
      
      public var s_robo_step1:robo_step1;
      
      public var s_robo_step2:robo_step2;
      
      public var s_robo_step3:robo_step3;
      
      public var s_robo_step4:robo_step4;
      
      public var s_body0:body0;
      
      public var s_body1:body1;
      
      public var s_body2:body2;
      
      public var s_body3:body3;
      
      public var s_metal0:metal_hor;
      
      public var s_metal1:metal_ver1;
      
      public var s_metal2:metal_ver2;
      
      public var s_metal3:metal_ver3;
      
      public var s_metal_gib:metal_gib;
      
      public var s_steel_low:steel_low;
      
      public var s_steel_med:steel_med;
      
      public var s_steel_hor:steel_hor;
      
      public var s_steel_hard:steel_hard;
      
      public var s_glass1:glass1;
      
      public var s_glass2:glass2;
      
      public var s_barrel:barrel;
      
      public var s_barrel2:barrel2;
      
      public var s_enemy_hurt1:enemy_hurt1;
      
      public var s_enemy_hurt_1:enemy_hurt_1;
      
      public var s_enemy_hurt_2:enemy_hurt_2;
      
      public var s_enemy_hurt_3:enemy_hurt_3;
      
      public var s_enemy_die1:enemy_die1;
      
      public var s_enemy_die_1:enemy_die_1;
      
      public var s_enemy_die_2:enemy_die_2;
      
      public var s_enemy_die_3:enemy_die_3;
      
      public var s_enemy_die_4:enemy_die_4;
      
      public var s_enemy_alert:enemy_alert;
      
      public var s_usurpation_hurt:usurpation_hurt;
      
      public var s_usurpation_death2:usurpation_death2;
      
      public var s_usurpation_death3:usurpation_death3;
      
      public var s_usurpation_alert:usurpation_alert;
      
      public var s_usurpation_dying:usurpation_dying;
      
      public var s_noir_die:noir_die;
      
      public var s_noir_hurt1:noir_hurt1;
      
      public var s_noir_hurt2:noir_hurt2;
      
      public var s_teleport:teleport_spawn;
      
      public var s_portnade_explode:portnade_explode;
      
      public var s_portnade_act2:portnade_act2;
      
      public var s_shnade_act:shnade_act;
      
      public var s_shnade_explode:shnade_explode;
      
      public var s_shnade_hit:shnade_hit;
      
      public var s_shnade_hit_low:shnade_hit_low;
      
      public var s_shnade_offline:shnade_offline;
      
      public var s_bounce_bullet:bounce_bullet;
      
      public var s_wea_rail_alt2:wea_rail_alt2;
      
      public var s_wea_android_sniper:wea_android_sniper;
      
      public var s_wea_crossfire2:wea_crossfire2;
      
      public var s_wea_incompetence_archetype_27xx_fire:wea_incompetence_archetype_27xx_fire;
      
      public var s_wea_thetoppestkek_shotgun_nxs25:wea_thetoppestkek_shotgun_nxs25;
      
      public var s_wea_moonhawk_railgun:wea_moonhawk_railgun;
      
      public var s_dart4:dart4;
      
      public var s_wea_glhf:wea_glhf;
      
      public var s_wea_lazyrain_gravy_rl;
      
      public var s_wea_m202:wea_m202;
      
      public var s_wea_android_shotgun:wea_android_shotgun;
      
      public var s_wea_plasma_shotgun:wea_plasma_shotgun;
      
      public var s_wea_ditzy_cs_ik:wea_ditzy_cs_ik;
      
      public var s_wea_ditzy_cs_ik2:wea_ditzy_cs_ik2;
      
      public var s_wea_ph01:wea_ph01;
      
      public var s_wea_rail_toxic2:wea_rail_toxic2;
      
      public var s_wea_auto_sg2:wea_auto_sg2;
      
      public var s_wea_darkstar_rl3:wea_darkstar_rl3;
      
      public var s_wea_alien_rail_sg:wea_alien_rail_sg;
      
      public var s_wea_bison:wea_bison;
      
      public var s_wea_phanx:wea_phanx;
      
      public var s_wea_ditzy_energy_rifle:wea_ditzy_energy_rifle;
      
      public var s_wea_rifle_nade:wea_rifle_nade;
      
      public var s_wea_revolver5:wea_revolver5;
      
      public var s_wea_android_railgun:wea_android_railgun;
      
      public var s_wea_plasma_smg:wea_plasma_smg;
      
      public var s_wea_acid_gl3:wea_acid_gl3;
      
      public var s_grenade_wet:grenade_wet;
      
      public var s_hit_dmg:hit_dmg;
      
      public var s_hit_dmg2:hit_dmg2;
      
      public var s_hit_dmg3:hit_dmg3;
      
      public var s_hit_frag:hit_frag;
      
      public var s_sd_death:sd_death;
      
      public var s_sd_hurt1:sd_hurt1;
      
      public var s_sd_hurt2:sd_hurt2;
      
      public var s_sd_welcome2:sd_welcome2;
      
      public var s_wea_lmg:wea_lmg;
      
      public var s_exp_level:exp_level;
      
      public var s_exp_tick:exp_tick;
      
      public var s_exp_event_stop:exp_event_stop;
      
      public var s_android_miner_die:android_miner_die;
      
      public var s_android_miner_enemy_down:android_miner_enemy_down;
      
      public var s_android_miner_welcome2:android_miner_welcome2;
      
      public var s_android_miner_hurt:android_miner_hurt;
      
      public var s_reakhohsha_welcome1:reakhohsha_welcome1;
      
      public var s_reakhohsha_welcome2:reakhohsha_welcome2;
      
      public var s_reakhohsha_hurt1:reakhohsha_hurt1;
      
      public var s_reakhohsha_hurt2:reakhohsha_hurt2;
      
      public var s_reakhohsha_hurt3:reakhohsha_hurt3;
      
      public var s_reakhohsha_death3:reakhohsha_death3;
      
      public var s_hexagon_welcome1:hexagon_welcome1;
      
      public var s_hexagon_welcome2:hexagon_welcome2;
      
      public var s_hexagon_welcome3:hexagon_welcome3;
      
      public var s_hexagon_death1:hexagon_death1;
      
      public var s_hexagon_death2:hexagon_death2;
      
      public var s_hexagon_pain1:hexagon_pain1;
      
      public var s_hexagon_pain2:hexagon_pain2;
      
      public var s_hexagon_pain3:hexagon_pain3;
      
      public var s_hexagon_pain4:hexagon_pain4;
      
      public var s_beam1:beam1;
      
      public var s_beam5:beam5;
      
      public var s_beam1_recharge:beam1_recharge;
      
      public var s_beam1_rechargeB:beam1_rechargeB;
      
      public var s_beam5_recharge:beam5_recharge;
      
      public var s_beam5_rechargeB:beam5_rechargeB;
      
      public var s_wea_roxxar_rifle:wea_roxxar_rifle;
      
      public var s_wea_moonhawk_smg2:wea_moonhawk_smg2;
      
      public var s_fail_shot:fail_shot;
      
      public var s_psi1:sou_blade_swing1;
      
      public var s_psi2:sou_blade_swing2;
      
      public var s_psi3:sou_blade_swing3;
      
      public var s_water_splash1:water_splash1;
      
      public var s_water_splash2:water_splash2;
      
      public var s_water_splash3:water_splash3;
      
      public var s_blood_hit:blood_hit;
      
      public var s_blood_hit_sword:blood_hit_sword;
      
      public var s_blood_head:blood_head;
      
      public var s_blood_head2:blood_head2;
      
      public var s_blood_body:blood_body;
      
      public var s_blood_body2:blood_body2;
      
      public var s_blood_leg_arm:blood_leg_arm;
      
      public var s_body_fall:body_fall;
      
      public var s_metal_hit:metal_hit;
      
      public var s_wea1:wea1;
      
      public var s_wea2:wea2;
      
      public var s_wea_pickup:wea_pickup;
      
      public var s_charged_explosion:charged_explosion;
      
      public var s_silenced:silenced;
      
      public var s_wea_sniper:wea_sniper;
      
      public var s_wea_minigun2:wea_mingun2;
      
      public var s_wea_plasmagun:wea_plasmagun;
      
      public var s_wea_apistol:wea_apistol;
      
      public var s_wea_pistol:wea_pistol;
      
      public var s_wea_pistol2:wea_pistol2;
      
      public var s_wea_shotgun:wea_shotgun;
      
      public var s_wea_rifle:wea_rifle;
      
      public var s_wea_rocket:wea_rocket_launch;
      
      public var s_wea_railgun:wea_railgun;
      
      public var s_wea_railgun2:wea_rail_alt;
      
      public var s_wea_mingun:wea_mingun;
      
      public var s_wea_gl:wea_gl;
      
      public var s_wea_vehcannon:wea_vehcannon;
      
      public var s_wea_impulse:wea_impulse;
      
      public var s_wea_rail_alt:wea_rail_alt;
      
      public var s_wea_energy:wea_energy;
      
      public var s_wea_evil_shot:wea_evil_shot;
      
      public var s_wea_rifle_alt:wea_rifle_alt;
      
      public var s_wea_shotgun_alt:wea_shotgun_alt;
      
      public var s_wea_defibrillator:wea_defibrillator;
      
      public var s_wea_vehminigun:wea_vehminigun;
      
      public var s_wea_real_shotgun:wea_real_shotgun;
      
      public var s_wea_real_shotgun_r:wea_real_shotgun_r;
      
      public var s_wea_real_rifle:wea_real_rifle;
      
      public var s_walker_step:walker_step;
      
      public var s_walker_phase1:walker_phase1;
      
      public var s_walker_phase2:walker_phase2;
      
      public var s_walker_die:walker_die;
      
      public var s_capsule_hit1:capsule_hit1;
      
      public var s_capsule_hit2:capsule_hit2;
      
      public var s_explode1:explode1;
      
      public var s_explode2:explode2;
      
      public var s_explode_bfg:explode_bfg;
      
      public var s_reload:reload;
      
      public var s_rl_reload:rl_reload;
      
      public var s_hero_death1:hero_death1;
      
      public var s_hero_death2:hero_death2;
      
      public var s_hero_pain1:hero_pain1;
      
      public var s_hero_pain2:hero_pain2;
      
      public var s_hero_pain3:hero_pain3;
      
      public var s_hero_pain4:hero_pain4;
      
      public var s_android2_die:android2_die;
      
      public var s_android2_hurt:android2_hurt;
      
      public var s_android2_welcome2:android2_welcome2;
      
      public var s_android_die:android_die_1;
      
      public var s_android_welcome1:android_welcome1;
      
      public var s_android_welcome2:android_welcome2;
      
      public var s_android_welcome3:android_welcome3;
      
      public var s_android_hurt:android_hurt;
      
      public var s_android_enemy_down1:android_enemy_down1;
      
      public var s_f_death1:f_death1;
      
      public var s_f_death2:f_death2;
      
      public var s_f_death3:f_death3;
      
      public var s_f_pain2:f_pain2;
      
      public var s_f_pain3:f_pain3;
      
      public var s_f_pain4:f_pain4;
      
      public var s_f_welcome1:f_welcome1;
      
      public var s_g_death1:g_death1;
      
      public var s_g_death2:g_death2;
      
      public var s_g_death3:g_death3;
      
      public var s_g_pain1:g_pain1;
      
      public var s_g_pain2:g_pain2;
      
      public var s_g_pain3:g_pain3;
      
      public var s_g_welcome1:g_welcome1;
      
      public var s_fp_death1:fp_death1;
      
      public var s_fp_death2:fp_death2;
      
      public var s_fp_death3:fp_death3;
      
      public var s_fp_pain2:fp_pain2;
      
      public var s_fp_pain3:fp_pain3;
      
      public var s_fp_pain4:fp_pain4;
      
      public var s_fp_welcome1:fp_welcome1;
      
      public var s_marine_death1:marine_death1;
      
      public var s_marine_death2:marine_death2;
      
      public var s_marine_death3:marine_death3;
      
      public var s_marine_pain1:marine_hurt1;
      
      public var s_marine_pain2:marine_hurt2;
      
      public var s_marine_pain3:marine_hurt3;
      
      public var s_marine_alert:marine_alert;
      
      public var s_marine_alert2:marine_alert2;
      
      public var s_marine_alert3:marine_alert3;
      
      public var s_marine_alert4:marine_alert4;
      
      public var s_marine_dying:marine_dying;
      
      public var s_slicer_alert:slicer_alert;
      
      public var s_slicer_die:slicer_die;
      
      public var s_hero_welcome1:hero_welcome1;
      
      public var s_hero_welcome2:hero_welcome2;
      
      public var s_hero_welcome3:hero_welcome3;
      
      public var s_grenade:grenade;
      
      public var s_grenade_act:grenade_act;
      
      public var s_nade_throw:nade_throw;
      
      public var s_explode_underwater:explode_underwater;
      
      public var s_plasma_explosion:plasma_explosion;
      
      public var s_box_low:box_ver1;
      
      public var s_box_med:box_ver2;
      
      public var s_box_hor:box_hor;
      
      public var s_box_hard:box_ver3;
      
      public var s_box_die:box_die;
      
      public var s_drone_die:drone_die;
      
      public var s_drone_hurt:drone_hurt;
      
      public var src:Sound;
      
      public var voices:Object;
      
      public var hit_frame_damage:Number;
      
      public var hit_frags:Vector.<Object>;
      
      public var hit_frags_timer:Number;
      
      public var expl_hurt_full:Boolean;
      
      public var joint_cycle:int;
      
      public var hpmax:Number;
      
      public var maxbulletlife:Number;
      
      public var boxx:Array;
      
      public var boxy:Array;
      
      public var boxw:Array;
      
      public var boxh:Array;
      
      public var boxmat:Array;
      
      public var bgx:Array;
      
      public var bgy:Array;
      
      public var bgw:Array;
      
      public var bgh:Array;
      
      public var bg_cast:Array;
      
      public var pushx:Array;
      
      public var pushy:Array;
      
      public var pushtox:Array;
      
      public var pushtoy:Array;
      
      public var pushstab:Array;
      
      public var pushdamage:Array;
      
      public var pushw:Array;
      
      public var pushh:Array;
      
      public var flare:Array;
      
      public var flare_power:Array;
      
      public var flarestotal:int;
      
      public var wax:Array;
      
      public var way:Array;
      
      public var waw:Array;
      
      public var wah:Array;
      
      public var wadamage:Array;
      
      public var wa_friction:Array;
      
      public var ax:Array;
      
      public var ay:Array;
      
      public var lax:Array;
      
      public var lay:Array;
      
      public var atox:Array;
      
      public var atoy:Array;
      
      public var aio:Array;
      
      public var aof:Array;
      
      public var arad:Array;
      
      public var around:Array;
      
      public var amat:Array;
      
      public var atim:Array;
      
      public var acollided:Array;
      
      public var ainwater:Array;
      
      public var ablood:Array;
      
      public var aactive:Array;
      
      public var ainwater_shape:Array;
      
      public var atom_first_position_corrections:Vector.<Object>;
      
      public var pspeed:Number;
      
      public var weapon_penetration_factor:Number;
      
      public var rocket_speed_mult:Number;
      
      public var grenade_speed_mult:Number;
      
      public var plasma_speed_mult:Number;
      
      public var chtypa:Array;
      
      public var chP:Array;
      
      public var chC:Array;
      
      public var chdef:Array;
      
      public var chdamp:Array;
      
      public var chio:Array;
      
      public var chtsilp:Array;
      
      public var atotal:int;
      
      public var chtotal:int;
      
      public var startatotal:int;
      
      public var startchtotal:int;
      
      public var bounce:Number;
      
      public var friction:Number;
      
      public var gravity:Number;
      
      public var barrels:Array;
      
      public var guns:Array;
      
      public var mens:Array;
      
      public var vehicles:Array;
      
      public var doors:Array;
      
      public var decors:Array;
      
      public var triggers:Array;
      
      public var timers:Array;
      
      public var regions:Array;
      
      public var attachments:Array;
      
      public var _root:MovieClip;
      
      public var regionstotal:int;
      
      public var triggerstotal:int;
      
      public var timerstotal:int;
      
      public var doorstotal:int;
      
      public var bgstotal:int;
      
      public var playerstotal:int;
      
      public var boxestotal:int;
      
      public var lampstotal:int;
      
      public var watertotal:int;
      
      public var gunstotal:int;
      
      public var pushstotal:int;
      
      public var vehiclestotal:int;
      
      public var barrelstotal:int;
      
      public var decorstotal:int;
      
      public var str:String;
      
      public var cx:Number;
      
      public var cy:Number;
      
      public var xx:Number;
      
      public var yy:Number;
      
      public var u:Number;
      
      public var v:Number;
      
      public var u2:Number;
      
      public var v2:Number;
      
      public var mc2:MovieClip;
      
      public var mc3:MovieClip;
      
      public var ok:Boolean;
      
      public var ok2:Boolean;
      
      public var ok3:Boolean;
      
      public var hup:Boolean;
      
      public var bugs:Boolean;
      
      public var injured:Boolean;
      
      public var fire:Boolean;
      
      public var sitmax:Number;
      
      public var key_left:Boolean;
      
      public var key_right:Boolean;
      
      public var key_up:Boolean;
      
      public var key_down:Boolean;
      
      public var key_grenade:Boolean;
      
      public var key_pick:Boolean;
      
      public var key_alt:Boolean;
      
      public var key_grab:Boolean;
      
      public var key_kinetic:Boolean;
      
      public var key_fall:Boolean;
      
      public var key_ctrl:Boolean;
      
      public var cinetic_target:int;
      
      public var timeshift:int;
	  
	  public var is_firing:Boolean;
      
      public var energy_max:Number;
      
      public var energy:Number;
      
      public var ALLOW_TIMESHIFT:Boolean;
      
      public var joint_align:int;
      
      public var puls:Array;
      
      public var pulscur:int;
      
      public var pulsmax:int;
      
      public var xx2:Number;
      
      public var yy2:Number;
      
      public var x3:Number;
      
      public var y3:Number;
      
      public var x4:Number;
      
      public var y4:Number;
      
      public var retux:Number;
      
      public var retuy:Number;
      
      public var rx:Number;
      
      public var ry:Number;
      
      public var surf_lnk:Array;
      
      public var surf_lnk_to:Array;
      
      public var ef:Array;
      
      public var nextef:int;
      
      public var maxef:int;
      
      public var eftemp:Number;
      
      public var effcolor:int;
      
      public var shnades:Array;
      
      public var shnades_total:int;
      
      public var shnades_next:int;
      
      public var lamps_x:Array;
      
      public var lamps_y:Array;
      
      public var lamps_power:Array;
      
      public var lamps_power2:Array;
      
      public var lamps_skips:int;
      
      public var lamps_sprites:Array;
      
      public var tr;
      
      public var tr2;
      
      public var tr3:int;
      
      public var hurt_x4;
      
      public var hurt_y4;
      
      public var hurt_xx2;
      
      public var hurt_yy2:Number;
      
      public var n2:int;
      
      public var chat_i:int;
      
      public var chat_i2:int;
      
      public var chat_i3:int;
      
      public var chat_xx:Number;
      
      public var alert_tes:Number;
      
      public var minX:Number;
      
      public var maxX:Number;
      
      public var minY:Number;
      
      public var maxY:Number;
      
      public var a_rectangleMinX:Number;
      
      public var a_rectangleMinY:Number;
      
      public var a_rectangleMaxX:Number;
      
      public var a_rectangleMaxY:Number;
      
      public var b:Number;
      
      public var dx:Number;
      
      public var tmp2:Number;
      
      public var thispulspeed:Number;
      
      public var a_p1x:Number;
      
      public var a_p1y:Number;
      
      public var a_p2x:Number;
      
      public var a_p2y:Number;
      
      public var tracer_ok:Boolean;
      
      public var NextMapTemp:String;
      
      public var render_minX:int;
      
      public var render_minY:int;
      
      public var render_maxX:int;
      
      public var render_maxY:int;
      
      public var rnd:Number;
      
      public var Disable_next_click:Boolean;
      
      public var FORCE_SNOW:Boolean;
      
      public var flakes_total:int;
      
      public var flakes:Vector.<MovieClip>;
      
      public var flakes_spreadout:Number;
      
      public var flakes_letitsnow:Boolean;
      
      public var vtr_i2:int;
      
      public var ef_xx;
      
      public var ef_yy:Number;
      
      public var nextpuli:int;
      
      public var nextpulf:Boolean;
      
      public var nextsh_i:int;
      
      public var nextsh_i2:int;
      
      public var cr_i4:int;
      
      public var crjoint_cycle:int;
      
      public var mcz:MovieClip;
      
      public var mShape:Sprite;
      
      public var step_size:int;
      
      public var bmpData:BitmapData;
      
      public var bmpData_backed:BitmapData;
      
      public var lightmap_ma:Matrix;
      
      public var optimalupd:Boolean;
      
      public var all_doors:Array;
      
      public var NearBoxBSP_stepsize:int;
      
      public var NearBoxBSP:Vector.<Vector.<Vector.<int>>>;
      
      public var NearBoxBSP_empty:Vector.<int>;
      
      public var NearBoxBSP_width:int;
      
      public var NearBoxBSP_height:int;
      
      public var NearBoxBSP_left:Number;
      
      public var NearBoxBSP_right:Number;
      
      public var NearBoxBSP_top:Number;
      
      public var NearBoxBSP_bottom:Number;
      
      public var synonym_uid:Array;
      
      public var synonym_id:Array;
      
      public var user_says_id:int;
      
      public var user_says_text:String;
      
      public var user_says_trigger:int;
      
      public var SHOW_FRAG_MESSAGES:Boolean;
      
      public var trigger_to_key_binds_down:Object;
      
      public var trigger_to_key_binds_up:Object;
      
      public var on_user_connected_trigger:int;
      
      public var mxnds1:int;
      
      public var mxnds2:int;
      
      public var mxnds3:int;
      
      public var tnds:int;
      
      public var stable;
      
      public var unstable:int;
      
      public var unstable_m:String;
      
      public var MP_start_guns_total:int;
      
      public var qpack_pattern:Array;
      
      public var qpack_pattern_length:int;
      
      public var qpack_pattern_simcalc:int;
      
      public var qpack_base:String;
      
      public var INTRUDER_DATABASE:Object;
      
      public var INTRUDER_DATABASE_length:int;
      
      public var ENABLE_LEVEL_LOGIC_ERRORS:Boolean;
      
      public var trigger_loops:int;
      
      public var level_variables:Object;
      
      public var dm_slots_on_spawn:Array;
      
      public var dm_max_guns_on_spawn:int;
      
      public var session_variables:Object;
      
      public var session_variables_source_id:Object;
      
      public var hurt_i4:int;
      
      public var is2:int;
      
      public var allow:Boolean;
      
      public var explx;
      
      public var exply:Number;
      
      public var temp_tb:Number;
      
      public var alert_i5:int;
      
      public var pb2Bullet;
      
      public var atom_pos_buffer;
      
      public var tracer_i4:int;
      
      public var TraceLine_lasttime:uint;
      
      public var tracer_i5:int;
      
      public var tracep:int;
      
      public var NO_PSI:Boolean;
      
      public var START_CUSTOM_MAP:Boolean;
      
      public var CUR_CUSTOM_MAP:String;
      
      public var CACHED_MAPS:Array;
      
      public var CUR_LOADING:String;
      
      public var GET_TRIES:int;
      
      public var MP_send:String;
      
      public var MP_waiting_for_answer:Boolean;
      
      public var last_net_error;
      
      public var trans:Number;
      
      public var minus_trans:Number;
      
      public var players_online:int;
      
      public var temp_str:String;
      
      public var connection_lost_ping:int;
      
      public var MP_get_done_STR:String;
      
      public var MP_get_done_HAP:Boolean;
      
      public var array:Array;
      
      public var param:Array;
      
      public var array2:Array;
      
      public var array3:Array;
      
      public var last_mp_param:Array;
      
      public var exec_measures_len:uint;
      
      public var exec_measures_rate:uint;
      
      public var exec_measures_rate_passed:uint;
      
      public var exec_measures_tot:Vector.<uint>;
      
      public var exec_measures_calls:Vector.<uint>;
      
      public var exec_measures_peak:Vector.<uint>;
      
      public var exec_measures_start:Vector.<uint>;
      
      public var LITE_PHYS_tim:Boolean;
      
      public var LITE_PHYS_from:int;
      
      public var LITE_PHYS_notfrom:int;
      
      public var LITE_PHYS_size:int;
      
      public var extra_low_mult:Number;
      
      public var offset_balance:Number;
      
      public var temp_coef:Number;
      
      public var f_ok:Boolean;
      
      public var near_atom:Vector.<int>;
      
      public var f_min:Number;
      
      public var phys_stress:int;
      
      public var phys_got_stress:Boolean;
      
      public var last_key_code:int;
      
      public var keys_are_being_pressed:Boolean;
      
      public var let_scroll_last:int;
      
      public var game_focus_ever_lost:Boolean;
      
      public var maximum_hit_delay_time;
      
      public var hit_retry_time;
      
      public var possible_bullet_data:Vector.<Object>;
      
      public var vc_cache:Array;
      
      public var vc_fresh:Boolean;
      
      public var vs_salt:int;
      
      public var mouse_x:Number;
      
      public var mouse_y:Number;
      
      public var set_timeouts:Vector.<Object>;
      
      public var respawn_logic_last_addr:int;
      
      public var gravitatorTransform:SoundTransform;
      
      public var musTransform:SoundTransform;
      
      public var am_base_Transform:SoundTransform;
      
      public var am_wind_Transform:SoundTransform;
      
      public var main_song_Transform:SoundTransform;
      
      public var grav_working:Boolean;
      
      public var mus_working:Boolean;
      
      public var am_base_working:Boolean;
      
      public var am_wind_working:Boolean;
      
      public var main_song_working:Boolean;
      
      public var talkerch:SoundChannel;
      
      public var multiplayer_repsawn_timer_speed:Number;
      
      public var dti:int;
      
      public var voice_pressure:Number;
      
      public var FUN_NICE_BULLETS:int;
      
      public var FUN_SPENT_BULLETS:int;
      
      public var FUN_DAMAGE_MADE:Number;
      
      public var FUN_HEADSHOTS_MADE:int;
      
      public var FUN_DAMAGE_TAKEN:Number;
      
      public var FUN_TIME_SPEND:Number;
      
      public var FUN_ELEMINATED:Number;
      
      public var FORCE_CUSTOM_MAP:Boolean;
      
      public var EXP_TYPE_DEATH_IN_APPROVED:int;
      
      public var EXP_TYPE_SYNC_SKILL_POINTS:int;
      
      public var EXP_TYPE_PLAYING_CAMPAIGN:int;
      
      public var EXP_TYPE_PLAYING_CUSTOM:int;
      
      public var EXP_TYPE_PLAYING_CUSTOM_MP:int;
      
      public var EXP_TYPE_PLAYING_IN_APPROVED:int;
      
      public var EXP_TYPE_BEAT_CUSTOM:int;
      
      public var EXP_TYPE_HEAL_AND_TEAMMATE_SURVIVED_IN_APPROVED:int;
      
      public var EXP_TYPE_KILL_IN_APPROVED:int;
      
      public var EXP_TYPE_KILL_ENEMY_NON_PLAYER:int;
      
      public var EXP_TYPE_BEAT_CAMPAIGN_LEVEL:int;
      
      public var EXP_TYPE_KILL_TEAMMATE_MP:int;
      
      public var EXP_TYPE_CHECK_OUT_MULTIPLAYER:int;
      
      public var EXP_TYPE_SYNC:int;
      
      public var EXP_TYPE_KILL_PLAYER_USING_GRENADE_IN_APPROVED:int;
      
      public var EXP_TYPE_KILL_PLAYER_WITH_HEADSHOT_IN_APPROVED:int;
      
      public var EXP_TYPE_KILL_PLAYER_USING_WALL_OR_ACID_IN_APPROVED:int;
      
      public var EXP_TYPE_KILL_PLAYER_USING_SWORDS_IN_APPROVED:int;
      
      public var EXP_TYPE_KILL_PLAYER_WITHOUT_LEGS_IN_APPROVED:int;
      
      public var EXP_TYPE_KILL_PLAYER_WITH_DEFIBRILLATOR_IN_APPROVED:int;
      
      public var EXP_TYPE_BREAK_ALIVE_PLAYERS_ARMS_IN_APPROVED:int;
      
      public var EXP_TYPE_BREAK_ALIVE_PLAYERS_LEGS_IN_APPROVED:int;
      
      public var EXP_TYPE_KILL_PLAYER_MIDAIR_IN_APPROVED:int;
      
      public var EXP_TYPE_TRY_CUSTOM:int;
      
      public var EXP_TYPE_STREAK:int;
      
      public var EXP_TYPE_LEGEND:int;
      
      public var EXP_TYPE_AFK_KILL:int;
      
      public var exp_titles:Vector.<String>;
      
      public var exp_tried_custom_maps:Object;
      
      public var exp_points:Number;
      
      public var exp_points_target:Number;
      
      public var exp_timer:uint;
      
      public var SKILL_POINTS_SCALE:Number;
      
      public var exp_first_sync_await:Boolean;
      
      public var exp_last_level:Number;
      
      public var exp_points_per_level:Number;
      
      public var exp_min_level:int;
      
      public var exp_max_level:int;
      
      public var exp_max_level_this_time:int;
      
      public var myExpLoader;
      
      public var exp_alive:Boolean;
      
      public var exp_mp_enter_once:Boolean;
      
      public var exp_scheduled:Vector.<Object>;
      
      public var exp_busy:Boolean;
      
      public var skill_points_tim:uint;
      
      public var skill_points_change_expect_tries:int;
      
      public var can_get_exp_for_level:Boolean;
      
      public var exp_heal_tracked_players:Array;
      
      public var myMPlayerInfoLoader;
      
      public var player_info_busy:Boolean;
      
      public var exp_legens:Object;
      
      public var last_server_list_str:String;
      
      public var menu_buttons_tot:int;
      
      public var allow_mp_connect:Boolean;
      
      public var m:int;
      
      public var lm_active:int;
      
      public var m_active:int;
      
      public var m_time:Number;
      
      public var m_hold:int;
      
      public var earth_pos1:Number;
      
      public var new_nick;
      
      public var new_nick2:String;
      
      public var newString:String;
      
      public var pattern_no_nix:String;
      
      public var blink_main:int;
      
      public var MUSIC_START:int;
      
      public var TROOPS_GONE:Boolean;
      
      public var menu_hue_timeout;
      
      public var camp_btn:Array;
      
      public var gunsA;
      
      public var gunsAt;
      
      public var gunsAl;
      
      public var gunsB;
      
      public var gunsBt;
      
      public var gunsBl;
      
      public var STOP_SCROLL:Boolean;
      
      public var credits_low_limit:Number;
      
      public var credits_high_limit:Number;
      
      public var credits_stop_frames:Number;
      
      public var credits_target_offset:Number;
      
      public var coverup_active:Boolean;
      
      public var server_cur:int;
      
      public var servers_uid:Array;
      
      public var CUR_SERVER_NAME:String;
      
      public var login_warned:Boolean;
      
      public var auto_proceed:Boolean;
      
      public var last_loaded_sever_uid;
      
      public var servers_name:Array;
      
      public var servers_ip:Array;
      
      public var servers_port:Array;
      
      public var gm_ranked:String;
      
      public var gm_type:int;
      
      public var gm_max:int;
      
      public var MPLIST_GAMENAME;
      
      public var MPLIST_MAPID;
      
      public var MPLIST_MODE;
      
      public var MPLIST_PUBLIC;
      
      public var MPLIST_APPROVED;
      
      public var MPLIST_RANKED;
      
      public var MPLIST_WITH_FRIENDS;
      
      public var MPLIST_NO_ENEMIES;
      
      public var MPLIST_HIDE_FULL;
      
      public var rech_started;
      
      public var MP_slot_reset:Boolean;
      
      public var MP_slot_try:int;
      
      public var got_map_data:Boolean;
      
      public var myTimer_loading:Timer;
      
      public var hero_list_frame_offset:int;
      
      public var hero_list_scale;
      
      public var format:TextFormat;
      
      public var TIME_PLAYED_MULTI:int;
      
      public var nonblockrate:Boolean;
      
      public var TakeScreenShot_allow:Boolean;
      
      public var TakeScreenShot_delay:int;
      
      public var uncncld:Boolean;
      
      public var achive_obj;
      
      public var INTRO_DONE:Boolean;
      
      public var test;
      
      public var inter_progress;
      
      public var game_state_timer;
      
      public var __animFactory_menu_buttonsaf1:AnimatorFactory3D;
      
      public var __animArray_menu_buttonsaf1:Array;
      
      public var ____motion_menu_buttonsaf1_mat3DVec__:Vector.<Number>;
      
      public var ____motion_menu_buttonsaf1_matArray__:Array;
      
      public var __motion_menu_buttonsaf1:MotionBase;
      
      public var __animFactory_menu_buttons2af1:AnimatorFactory3D;
      
      public var __animArray_menu_buttons2af1:Array;
      
      public var ____motion_menu_buttons2af1_mat3DVec__:Vector.<Number>;
      
      public var ____motion_menu_buttons2af1_matArray__:Array;
      
      public var __motion_menu_buttons2af1:MotionBase;
      
      public function MainTimeline()
      {
         super();
		 DRAW_EARTH = true;
		 init3DMenu();
      }
  
      public function updateMap()
      {
		 try {
         this.game.x = this.game_x;
		 this.game.y = this.game_y;
	     this.graphics_3d_front.x = this.graphics_3d.x = this.game_x;
	     this.graphics_3d_front.y = this.graphics_3d.y = this.game_y;
		 } catch(e:*) {
			 trace("PROBLEMS WITH UPDATING MAP");
			 trace("Error uM:" + e.message);
		 }
      }
  
      public function updateEffects()
      {
		 try {
			 var i = 0;
			 while(i < this.maxef) {
				 if(this.ef[i] != null) {
					 this.ef[i].x = this.ef[i].x_;
					 this.ef[i].y = this.ef[i].y_;
				 }
				 i++;
			 }
		 } catch(e:*) {
			 trace("PROBLEMS WITH UPDATING EFFECTS");
			 trace("Error uE:" + e.message);
		 }
      }
  
	  public function fr_func() {
		  try {
			  if(this.LEVEL_END_FORCE == "" && this.fr_real != null) {
				++this.frames_display;
				if(getTimer() - this.prev_frames >= 500)
				{
				   this.temp_fps = this.frames_display * 1000 / (getTimer() - this.prev_frames);
				   var fps_txt = Math.round(this.temp_fps);
				   this.fr_real.fps.text = fps_txt.toString().concat(" FPS");
				   this.prev_frames = getTimer();
				   this.frames_display = 0;
				}
			  }
		  } catch(e:*) {
			  trace("PROBLEMS WITH FRAMERATE COUNTER");
			  trace("Error FR:" + e.message);
		  }
	  }
  
	  public function gt_func() {
		  try {
			 if(this.system_non_stop && !this.pauze.visible) {
				 if(this.LEVEL_END_FORCE == "") {
					 this.end_ms = getTimer();
					 this.gt_ms = Math.max(0,this.end_ms - this.start_ms - this.losses);
					 this.gt_ms_text = this.gt_ms - (Math.floor(this.gt_ms / 1000) * 1000);
					 
					 if(this.gt_ms / 1000 >= this.gt_counter) {
						 this.gt_counter += 1;
						 this.gt_ms_text = 0;
						 this.gt_s++;
					 }
					 if(this.gt_s >= 60) {
						this.gt_s = 0;
						this.gt_m++;
					 }
					 if(this.gt_m >= 60) {
						this.gt_m = 0;
						this.gt_h++;
					 }
				
					 if(String(this.gt_ms_text).length == 1) {
						this.gt_ms_text = "0".concat("0", this.gt_ms_text);
					 }
					 if(String(this.gt_ms_text).length == 2) {
						this.gt_ms_text = "0".concat(this.gt_ms_text);
					 }
				 
					 if(String(this.gt_s).length == 1) {
						 this.gt_s = "0".concat(this.gt_s);
					 }
					 if(String(this.gt_m).length == 1) {
						 this.gt_m = "0".concat(this.gt_m);
					 }
					 if(String(this.gt_h).length == 1) {
						 this.gt_h = "0".concat(this.gt_h);
					 }
				 
					 if(String(this.gt_m).length == 0) {
						 this.gt_m = "00";
					 }
					
					 if(this.ui_elements_visible[3] && this.gt_real != null) {
						 if(this.gt_h <= 0) {
							this.gt_real.time.text = "GT ".concat(this.gt_m, ":", this.gt_s, ".", this.gt_ms_text);
						 } else {
							this.gt_real.time.text = "GT ".concat(this.gt_h, " ", this.gt_m, ":", this.gt_s, "." , this.gt_ms_text);
						 }
					 }
				}
			 } else {
				 if(this.LEVEL_END_FORCE == "") {
					 this.loss_time = getTimer();
					 this.loss_time = Math.min(getTimer(), getTimer() - this.loss_time);
					 this.losses += this.loss_time;
					 this.losses = Math.min(getTimer() - this.start_ms,this.losses);
					 this.gt_counter = Math.max(0,getTimer() - this.start_ms - this.losses + 1) / 1000;
				 }
			 }
		  } catch(e:*) {
			  trace("PROBLEMS WITH GAME TIMER");
			  trace("Error FR:" + e.message);
		  }
	  }
  
  
	  public function rt_func() {
		  try {
			  if(this.ui_elements_visible[2] && this.rt_real != null) 
			  {
				 if(this.LEVEL_END_FORCE == "" && this.RUN_CATEGORY == "IL" || this.RUN_CATEGORY == "ANY%" && !(this.LEVEL_END_FORCE == "complete" && this.CMPG_THIS_LEVEL == 41)) {
					 this.end_ms = getTimer();
					 this.rt_ms = this.end_ms - this.start_ms;
					 this.rt_ms_text = this.rt_ms - (Math.floor(this.rt_ms / 1000) * 1000);
					 
					 if(this.rt_ms / 1000 >= this.rt_counter) {
						 this.rt_counter += 1;
						 this.rt_ms_text = 0;
						 this.rt_s++;
					 }
					 if(this.rt_s >= 60) {
						this.rt_s = 0;
						this.rt_m++;
					 }
					 if(this.rt_m >= 60) {
						this.rt_m = 0;
						this.rt_h++;
					 }
				 
					
					 if(String(this.rt_ms_text).length == 1) {
						 this.rt_ms_text = "0".concat("0", this.rt_ms_text);
					 }
					 if(String(this.rt_ms_text).length == 2) {
						 this.rt_ms_text = "0".concat(this.rt_ms_text);
					 }
				 
					 if(String(this.rt_s).length == 1) {
						 this.rt_s = "0".concat(this.rt_s);
					 }
					 if(String(this.rt_m).length == 1) {
						 this.rt_m = "0".concat(this.rt_m);
					 }
					 if(String(this.rt_h).length == 1) {
						 this.rt_h = "0".concat(this.rt_h);
					 }
					 
					 if(String(this.rt_m).length == 0) {
						 this.rt_m = "00";
					 }
				
					 if(this.rt_h <= 0) {
						this.rt_real.time.text = String(this.rt_m).concat(":", this.rt_s, ".", this.rt_ms_text);
					 } else {
						this.rt_real.time.text = String(this.rt_h).concat(":", this.rt_m, ":", this.rt_s, ".", this.rt_ms_text);
					 }
				 }
			  }
		  } catch(e:*) {
			  trace("PROBLEMS WITH REAL TIMER");
			  trace("Error RT:" + e.message);
		  }
	  }
  
	  public function init3DMenu() : void {
		 addEventListener(Event.ADDED_TO_STAGE,this.__setPerspectiveProjection_);
         if(this.__animFactory_menu_buttonsaf1 == null)
         {
            this.__animArray_menu_buttonsaf1 = [];
            this.__motion_menu_buttonsaf1 = new MotionBase();
            this.__motion_menu_buttonsaf1.duration = 1;
            this.__motion_menu_buttonsaf1.overrideTargetTransform();
            this.__motion_menu_buttonsaf1.addPropertyArray("visible",[true]);
            this.__motion_menu_buttonsaf1.addPropertyArray("cacheAsBitmap",[false]);
            this.__motion_menu_buttonsaf1.addPropertyArray("blendMode",["normal"]);
            this.__motion_menu_buttonsaf1.addPropertyArray("opaqueBackground",[null]);
            this.__motion_menu_buttonsaf1.is3D = true;
            this.__motion_menu_buttonsaf1.motion_internal::spanStart = 3;
            this.____motion_menu_buttonsaf1_matArray__ = [];
            this.____motion_menu_buttonsaf1_mat3DVec__ = new Vector.<Number>(16);
            this.____motion_menu_buttonsaf1_mat3DVec__[0] = 0.604228;
            this.____motion_menu_buttonsaf1_mat3DVec__[1] = 0.010887;
            this.____motion_menu_buttonsaf1_mat3DVec__[2] = 0.796737;
            this.____motion_menu_buttonsaf1_mat3DVec__[3] = 0;
            this.____motion_menu_buttonsaf1_mat3DVec__[4] = -0.021959;
            this.____motion_menu_buttonsaf1_mat3DVec__[5] = 0.999754;
            this.____motion_menu_buttonsaf1_mat3DVec__[6] = 0.002992;
            this.____motion_menu_buttonsaf1_mat3DVec__[7] = 0;
            this.____motion_menu_buttonsaf1_mat3DVec__[8] = -0.796509;
            this.____motion_menu_buttonsaf1_mat3DVec__[9] = -0.019304;
            this.____motion_menu_buttonsaf1_mat3DVec__[10] = 0.604318;
            this.____motion_menu_buttonsaf1_mat3DVec__[11] = 0;
            this.____motion_menu_buttonsaf1_mat3DVec__[12] = -40.754143;
            this.____motion_menu_buttonsaf1_mat3DVec__[13] = 171.169342;
            this.____motion_menu_buttonsaf1_mat3DVec__[14] = 74.118401;
            this.____motion_menu_buttonsaf1_mat3DVec__[15] = 1;
            this.____motion_menu_buttonsaf1_matArray__.push(new Matrix3D(this.____motion_menu_buttonsaf1_mat3DVec__));
            this.__motion_menu_buttonsaf1.addPropertyArray("matrix3D",this.____motion_menu_buttonsaf1_matArray__);
            this.__animArray_menu_buttonsaf1.push(this.__motion_menu_buttonsaf1);
            this.__animFactory_menu_buttonsaf1 = new AnimatorFactory3D(null,this.__animArray_menu_buttonsaf1);
            this.__animFactory_menu_buttonsaf1.sceneName = "Scene 1";
            this.__animFactory_menu_buttonsaf1.addTargetInfo(this,"menu_buttons",0,true,0,true,null,-1);
         }
         if(this.__animFactory_menu_buttons2af1 == null)
         {
            this.__animArray_menu_buttons2af1 = [];
            this.__motion_menu_buttons2af1 = new MotionBase();
            this.__motion_menu_buttons2af1.duration = 1;
            this.__motion_menu_buttons2af1.overrideTargetTransform();
            this.__motion_menu_buttons2af1.addPropertyArray("visible",[true]);
            this.__motion_menu_buttons2af1.addPropertyArray("cacheAsBitmap",[false]);
            this.__motion_menu_buttons2af1.addPropertyArray("blendMode",["normal"]);
            this.__motion_menu_buttons2af1.addPropertyArray("opaqueBackground",[null]);
            this.__motion_menu_buttons2af1.is3D = true;
            this.__motion_menu_buttons2af1.motion_internal::spanStart = 3;
            this.____motion_menu_buttons2af1_matArray__ = [];
            this.____motion_menu_buttons2af1_mat3DVec__ = new Vector.<Number>(16);
            this.____motion_menu_buttons2af1_mat3DVec__[0] = 0.604228;
            this.____motion_menu_buttons2af1_mat3DVec__[1] = 0.010887;
            this.____motion_menu_buttons2af1_mat3DVec__[2] = 0.796737;
            this.____motion_menu_buttons2af1_mat3DVec__[3] = 0;
            this.____motion_menu_buttons2af1_mat3DVec__[4] = -0.021959;
            this.____motion_menu_buttons2af1_mat3DVec__[5] = 0.999754;
            this.____motion_menu_buttons2af1_mat3DVec__[6] = 0.002992;
            this.____motion_menu_buttons2af1_mat3DVec__[7] = 0;
            this.____motion_menu_buttons2af1_mat3DVec__[8] = -0.796509;
            this.____motion_menu_buttons2af1_mat3DVec__[9] = -0.019304;
            this.____motion_menu_buttons2af1_mat3DVec__[10] = 0.604318;
            this.____motion_menu_buttons2af1_mat3DVec__[11] = 0;
            this.____motion_menu_buttons2af1_mat3DVec__[12] = -47.500088;
            this.____motion_menu_buttons2af1_mat3DVec__[13] = 170.84906;
            this.____motion_menu_buttons2af1_mat3DVec__[14] = 72.27739;
            this.____motion_menu_buttons2af1_mat3DVec__[15] = 1;
            this.____motion_menu_buttons2af1_matArray__.push(new Matrix3D(this.____motion_menu_buttons2af1_mat3DVec__));
            this.__motion_menu_buttons2af1.addPropertyArray("matrix3D",this.____motion_menu_buttons2af1_matArray__);
            this.__animArray_menu_buttons2af1.push(this.__motion_menu_buttons2af1);
            this.__animFactory_menu_buttons2af1 = new AnimatorFactory3D(null,this.__animArray_menu_buttons2af1);
            this.__animFactory_menu_buttons2af1.sceneName = "Scene 1";
            this.__animFactory_menu_buttons2af1.addTargetInfo(this,"menu_buttons2",0,true,0,true,null,-1);
		}
	  }
      
      public function GetNewURLLoader() : *
      {
         var r:* = undefined;
         var loader:* = undefined;
         var my_last_url_request:* = undefined;
         var DataUpdater:* = undefined;
         var errorHandler:* = undefined;
         DataUpdater = function():*
         {
            if(loader.bytesLoaded > 0)
            {
               if(my_last_url_request.url.indexOf("https://") !== -1)
               {
                  ++https_probability;
               }
               else
               {
                  ++http_probability;
               }
            }
            r.data = loader.data;
            r.bytesLoaded = loader.bytesLoaded;
            r.bytesTotal = loader.bytesTotal;
            r.dataFormat = loader.dataFormat;
         };
         errorHandler = function(param1:*):*
         {
            var e:* = param1;
            setTimeout(function():*
            {
               var _loc1_:* = my_last_url_request.url.split("https://").join("http://");
               if(_loc1_ != my_last_url_request.url)
               {
                  my_last_url_request.url = my_last_url_request.url.split("https://").join("http://");
                  r.load(my_last_url_request);
               }
            },1000);
         };
         r = new Object();
         loader = new URLLoader();
         my_last_url_request = null;
         r.load = function(param1:*):*
         {
            var url_request:* = param1;
            my_last_url_request = url_request;
            try
            {
               loader.load(url_request);
            }
            catch(e:*)
            {
               errorHandler();
            }
         };
         r.close = function():*
         {
            loader.close();
         };
         r.addEventListener = function(param1:*, param2:*):*
         {
            loader.addEventListener(param1,param2);
         };
         r.removeEventListener = function(param1:*, param2:*):*
         {
            loader.removeEventListener(param1,param2);
         };
         r.addEventListener(Event.COMPLETE,DataUpdater);
         r.addEventListener(IOErrorEvent.IO_ERROR,errorHandler);
         r.addEventListener(SecurityErrorEvent.SECURITY_ERROR,errorHandler);
         return r;
      }
      
      public function NetworkLoad() : void
      {
         if(this.loaderInfo.parameters.l != undefined && this.loaderInfo.parameters.l != "")
         {
            this.NetworkLoad_triesleft = 10;
            this.NetworkLoad_complete = false;
            this.NetworkLoad_failed = false;
            this.NetworkLoadNow();
         }
         else
         {
            this.NetworkLoad_complete = true;
         }
      }
      
      public function NetworkLoadNow() : void
      {
         if(this.NetworkLoad_triesleft > 0)
         {
            this.myRequest = new URLRequest(this.MP_server);
            this.myVariables = new URLVariables();
            this.myVariables.rq = "load";
            this.myVariables.l = this.loaderInfo.parameters.l;
            this.myVariables.p = this.loaderInfo.parameters.p;
            this.myRequest.method = URLRequestMethod.POST;
            this.myRequest.data = this.myVariables;
            this.mySaveLoadLoader.addEventListener(Event.COMPLETE,this.NetworkLoadOk);
            this.mySaveLoadLoader.addEventListener(IOErrorEvent.IO_ERROR,this.NetworkLoadError);
            this.mySaveLoadLoader.load(this.myRequest);
         }
      }
      
      public function LoadSaveDataFromString(param1:String, param2:Boolean = true) : void
      {
         var vars:Array = null;
         var i:int = 0;
         var pair:Array = null;
         var n:String = null;
         var v:* = undefined;
         var mySaveLoadLoader_data:String = param1;
         var with_history:Boolean = param2;
         if(mySaveLoadLoader_data != "x" && mySaveLoadLoader_data.indexOf("Error: ") != 0)
         {
            if(mySaveLoadLoader_data != ".")
            {
               vars = String(mySaveLoadLoader_data).split(";");
               i = 0;
               for(; i < vars.length; i++)
               {
                  pair = vars[i].split("=");
                  n = String(pair[0]).split("^1").join(";").split("^2").join("=");
                  v = String(pair[1]).split("^1").join(";").split("^2").join("=");
                  if(v == "undefined" || v == "NaN")
                  {
                     if(this.my_so.data[n] + "" != "undefined")
                     {
                        if(this.my_so.data[n] + "" != "NaN")
                        {
                           continue;
                        }
                     }
                     v = 0;
                  }
                  else if(v == "true")
                  {
                     v = true;
                  }
                  else if(v == "false")
                  {
                     v = false;
                  }
                  else if(Number(v) + "" != "NaN")
                  {
                     v = Number(v);
                  }
                  if(!(!with_history && (n == "first_uid" || n == "first_login")))
                  {
                     if(n.indexOf("skin_allowed") != 0)
                     {
                        this.my_so.data[n] = v;
                     }
                  }
               }
               try
               {
                  this.my_so.flush();
               }
               catch(e:Error)
               {
                  LAST_ERROR = "Warning: Save data might be not available without account (Flash Player and/or web browser issue).";
               }
            }
            else
            {
               this.load_error_field.text = "Response: " + mySaveLoadLoader_data;
            }
         }
         else
         {
            this.load_error_field.text = "Response: " + mySaveLoadLoader_data;
         }
      }
      
      public function NetworkLoadOk(param1:Event) : void
      {
         var e:Event = param1;
         this.mySaveLoadLoader.removeEventListener(Event.COMPLETE,this.NetworkLoadOk);
         this.mySaveLoadLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.NetworkLoadError);
         try
         {
            if(!this.NetworkLoad_complete)
            {
               this.LoadSaveDataFromString(this.mySaveLoadLoader.data);
            }
            this.NetworkLoad_complete = true;
         }
         catch(err:*)
         {
            load_error_field.text = "LoadSaveDataFromString decode error (" + NetworkLoad_triesleft + "): " + err;
         }
      }
      
      public function NetworkLoadError(param1:IOErrorEvent) : void
      {
         this.mySaveLoadLoader.removeEventListener(Event.COMPLETE,this.NetworkLoadOk);
         this.mySaveLoadLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.NetworkLoadError);
         this.NetworkLoad_triesleft = this.NetworkLoad_triesleft - 1;
         this.NetworkLoad_failed = true;
         this.NetworkLoadNow();
         this.load_error_field.text = "IOErrorEvent (" + this.NetworkLoad_triesleft + "," + this.myVariables.l + "): " + param1;
      }
      
      public function ProduceSaveString(param1:Boolean = true) : String
      {
         var _loc3_:* = undefined;
         var _loc4_:String = null;
         var _loc5_:* = undefined;
         var _loc2_:* = "";
         for(_loc3_ in this.my_so.data)
         {
            _loc4_ = _loc3_.split(";").join("^1").split("=").join("^2");
            _loc5_ = String(this.my_so.data[_loc3_]).split(";").join("^1").split("=").join("^2");
            if(!(!param1 && (_loc4_ == "first_uid" || _loc4_ == "first_login")))
            {
               if(!(_loc4_.indexOf("skin_allowed") == 0 || _loc5_ == "NaN" || _loc5_ == "undefined"))
               {
                  _loc2_ += _loc4_;
                  _loc2_ += "=";
                  _loc2_ += _loc5_;
                  _loc2_ += ";";
               }
            }
         }
         return _loc2_;
      }
      
      public function NetworkSave() : void
      {
         var _loc1_:String = null;
         if(this.loaderInfo.parameters.l != undefined && this.loaderInfo.parameters.l != "")
         {
            this.NetworkSave_triesleft = 10;
            _loc1_ = this.ProduceSaveString();
            this.NetworkSave_data = _loc1_;
            this.NetworkSaveNow();
         }
      }
      
      public function NetworkSaveNow() : void
      {
         if(this.NetworkSave_triesleft > 0)
         {
            this.myRequest = new URLRequest(this.MP_server);
            this.myVariables = new URLVariables();
            this.myVariables.rq = "save";
            this.myVariables.l = this.loaderInfo.parameters.l;
            this.myVariables.p = this.loaderInfo.parameters.p;
            this.myVariables.str = this.NetworkSave_data;
            this.myRequest.method = URLRequestMethod.POST;
            this.myRequest.data = this.myVariables;
            this.mySaveLoadLoader.addEventListener(Event.COMPLETE,this.NetworkSaveOk);
            this.mySaveLoadLoader.addEventListener(IOErrorEvent.IO_ERROR,this.NetworkSaveError);
            this.mySaveLoadLoader.load(this.myRequest);
         }
      }
      
      public function NetworkSaveOk(param1:Event) : void
      {
         this.mySaveLoadLoader.removeEventListener(Event.COMPLETE,this.NetworkSaveOk);
         this.mySaveLoadLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.NetworkSaveError);
      }
      
      public function NetworkSaveError(param1:IOErrorEvent) : void
      {
         this.mySaveLoadLoader.removeEventListener(Event.COMPLETE,this.NetworkSaveOk);
         this.mySaveLoadLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.NetworkSaveError);
         this.NetworkSave_triesleft = this.NetworkSave_triesleft - 1;
         this.NetworkSaveNow();
      }
      
      public function edumb() : void
      {
         if(stage.numChildren > 1)
         {
            stage.removeChildAt(1);
            SoundMixer.stopAll();
            if(currentFrame > 1)
            {
               this.CreateRestoreLoopSounds();
            }
         }
      }
      
      public function kedumb() : void
      {
         if(this.edidumb != -1)
         {
            clearInterval(this.edidumb);
            this.edidumb = -1;
         }
      }
      

      
      public function firtim() : *
      {
         if(currentFrame == 1)
         {
            this.totalseconds = Number(getTimer()) / 1000;
            if(this.loaded < 1)
            {
               this.loaded = 1;
            }
            this.waitfor = Math.round(this.totalseconds / this.loaded * (this.total - this.loaded));
            if(this.waitfor < 0)
            {
               this.waitfor = 0;
            }
            if(this.waitfor < 60)
            {
               this.loa2.htmlText = this.waitfor + " seconds";
            }
            else if(this.waitfor / 60 < 60)
            {
               this.loa2.htmlText = Math.floor(this.waitfor / 60) + " minutes " + (this.waitfor - Math.floor(this.waitfor / 60) * 60) + " seconds";
            }
         }
      }
      
      public function handleProgress(param1:Event) : void
      {
         if(currentFrame == 1)
         {
            this.loaded = stage.loaderInfo.bytesLoaded;
            this.percent = Math.round(this.loaded / this.total * 100);
            if(this.percent > 100)
            {
               this.percent = 100;
            }
            if(this.percent < 0)
            {
               this.percent = 0;
            }
            if(this.lastperc != this.percent)
            {
               this.times = 10;
            }
            else
            {
               --this.times;
            }
            if(this.times > 0)
            {
               this.loa.htmlText = "<B><FONT COLOR=\"#FFFFFF\">.:</FONT></B> " + this.percent + " <B><FONT COLOR=\"#FFFFFF\">:.</FONT></B>";
            }
            else if(this.times > -5)
            {
               this.loa.htmlText = "<B><FONT COLOR=\"#AAAAAA\">.:</FONT></B> " + this.percent + " <B><FONT COLOR=\"#AAAAAA\">:.</FONT></B>";
            }
            else if(this.times > -40)
            {
               this.loa.htmlText = "<B><FONT>.:</FONT></B> " + this.percent + " <B><FONT>:.<FONT></B>";
            }
            else
            {
               this.loa.htmlText = "<B><FONT COLOR=\"#FF0000\">.:</FONT></B> " + this.percent + " <B><FONT COLOR=\"#FF0000\">:.</FONT></B>";
            }
            Mouse.show();
            if(this.framesLoaded == this.totalFrames)
            {
               if(this.pass || (this.autostart_mp != undefined))
               {
                  if(this.adBox.alpha > 0)
                  {
                     this.adBox.alpha -= 0.1 * 30 / stage.frameRate;
                     this.intro_btcb.alpha -= 0.1 * 30 / stage.frameRate;
                     this.conti.alpha -= 0.1 * 30 / stage.frameRate;
                  }
                  else
                  {
                     /*if(AdLoader.cpmstar_loaded_object != null)
                     {
                        AdLoader.cpmstar_loaded_object.unloadAndStop();
                     }*/
                     removeChild(this.adBox);
                     //AdLoader.cpmstar_loaded_object = null;
                     //AdLoader.context = null;
                     clearInterval(this.fir);
                     SoundMixer.stopAll();
                     SoundMixer.soundTransform = new SoundTransform(1,0);
                     gotoAndStop("intro");
                  }
               }
               else
               {
                  this.loa.visible = false;
                  this.loa2.visible = false;
                  if(this.NetworkLoad_complete)
                  {
					 if (this.conti_loading != null) {
                       this.conti_loading.visible = false;
					 }
                     this.conti.visible = true;
                  }
                  else
                  {
					 if (this.conti_loading != null) {
                       this.conti_loading.visible = true;
					 }
                     this.conti.visible = false;
                  }
                  this.darkness.visible = false;
                  this.darkness.alpha = 0;
               }
            }
            else if(this.darkness.alpha > 0)
            {
               this.darkness.alpha -= 0.05;
            }
            else
            {
               this.darkness.visible = false;
            }
            this.lastperc = this.percent;
         }
         if(currentFrame <= 2)
         {
            this.IntroThink();
         }
         else
         {
            removeEventListener(Event.ENTER_FRAME,this.handleProgress);
         }
      }
      
      public function IntroThink() : void
      {
         var _loc1_:MovieClip = null;
         var _loc2_:Number = NaN;
         var _loc3_:MovieClip = null;
         if(this.intro_first)
         {
            this.main_y = this.intro_base.hero.y;
            this.intro_first = false;
            this.sinus = 0;
         }
         else
         {
            this.intro_base.hero.rotationZ = -0.2 + Math.sin(this.sinus) * 0.2;
            this.intro_base.hero.y = this.main_y + 0.2 + Math.cos(this.sinus) * 0.2;
            this.sinus += 0.08 * 30 / stage.frameRate;
            this.intro_base.hero.intro_head.rotationZ = -Number(this.intro_base.hero.rotationZ);
            this.intro_base.hero.intro_arm1.rotationZ = this.intro_base.hero.intro_arm2.rotationZ = -Number(this.intro_base.hero.rotationZ);
            this.intro_base.hero.intro_gun.rotationZ = -Number(this.intro_base.hero.rotationZ) * 0.5;
            if(this.intro_glowings != null && this.intro_glowings.length > 0)
            {
               for each(_loc1_ in this.intro_glowings)
               {
                  _loc2_ = 0.3;
                  _loc2_ -= _loc1_.y * 0.005;
                  _loc1_.alpha = (_loc1_.alpha * 2 + Math.random() * _loc2_) * 0.33;
                  if(_loc1_.parent == this.intro_base.hero)
                  {
                     _loc1_.rotationZ = -Number(this.intro_base.hero.rotationZ);
                  }
                  else
                  {
                     _loc1_.rotationZ = -Number(this.intro_base.hero.rotationZ) - _loc1_.parent.rotationZ;
                  }
               }
            }
            if(this.rifle_glow != null)
            {
               this.rifle_glow.alpha = (this.rifle_glow.alpha + Math.pow(Math.sin(this.sinus) * 0.3 + 0.3 + Math.random() * 0.4,4)) * 0.5;
               this.rifle_glow.rotationZ = -Number(this.intro_base.hero.rotationZ) - this.rifle_glow.parent.rotationZ;
            }
            if(this.intro_speculars != null && this.intro_speculars.length > 0)
            {
               for each(_loc3_ in this.intro_speculars)
               {
                  _loc3_.alpha = Math.pow(Math.sin(this.sinus) * 0.5 + 0.5,1);
               }
            }
         }
      }
      
      public function register_glow(param1:MovieClip) : void
      {
         if(this.intro_glowings == null)
         {
            this.intro_glowings = [];
         }
         this.intro_glowings.push(param1);
      }
      
      public function register_glow2(param1:MovieClip) : void
      {
         this.rifle_glow = param1;
      }
      
      public function register_specular(param1:MovieClip) : void
      {
         if(this.intro_speculars == null)
         {
            this.intro_speculars = [];
         }
         this.intro_speculars.push(param1);
      }
      
      public function getTextFromJavaScript(param1:*) : void
      {
         var _loc2_:Array = null;
         var _loc3_:MouseEvent = null;
         if(param1 != "term")
         {
            if(param1 == "html_wheel_events")
            {
               this.USE_HTML_WHEEL_EVENTS = true;
            }
            else
            {
               _loc2_ = param1.split(":");
               if(_loc2_[0] == "rt")
               {
                  if(_loc2_[2] == "sp")
                  {
                     if(currentFrameLabel == "menu")
                     {
                        removeEventListener(Event.ENTER_FRAME,this.onEnterFrame2);
                     }
                     gotoAndStop("custom");
                     this.FORCE_CUSTOM_MAP = true;
                     this.CUR_CUSTOM_MAP = _loc2_[1];
                     gotoAndStop("difch");
                  }
                  else if(_loc2_[2] == "mp")
                  {
                  }
               }
               else if(_loc2_[0] == "w")
               {
                  if(this.USE_HTML_WHEEL_EVENTS)
                  {
                     _loc3_ = new MouseEvent(MouseEvent.MOUSE_WHEEL);
                     _loc3_.delta = int(_loc2_[1]);
                     this.onMouseWheelEvent(_loc3_);
                  }
               }
            }
         }
      }
      
      public function RememberMapID(param1:*, param2:*) : void
      {
         var _loc3_:* = undefined;
         param1 = param1.split("&").join("");
         param1 = param1.split(",").join("+");
         param1 = param1.split("=").join("");
         param1 = param1.toLowerCase();
         if(param2 == 1)
         {
            _loc3_ = this.map_qp_sp.split(",");
         }
         if(param2 == 2)
         {
            _loc3_ = this.map_qp_mp.split(",");
         }
         if(_loc3_.indexOf(param1) != -1)
         {
            _loc3_.splice(_loc3_.indexOf(param1),1);
         }
         _loc3_.unshift(param1);
         if(_loc3_.length > 20)
         {
            _loc3_ = _loc3_.slice(0,20);
         }
         if(param2 == 1)
         {
            this.map_qp_sp = _loc3_.join(",");
         }
         if(param2 == 2)
         {
            this.map_qp_mp = _loc3_.join(",");
         }
         this.SaveGame();
      }
      
      public function CallQuickPick(param1:*, param2:*, param3:*, param4:*) : void
      {
         var flip:* = undefined;
         var maps:* = undefined;
         var appear:* = undefined;
         var i:* = undefined;
         var x:* = param1;
         var y:* = param2;
         var map_group:* = param3;
         var paste_target:* = param4;
         var SaveBack:* = function():*
         {
            if(map_group == 1)
            {
               map_qp_sp = maps.join(",");
            }
            if(map_group == 2)
            {
               map_qp_mp = maps.join(",");
            }
            SaveGame();
         };
         if(this.map_quickpick.visible)
         {
            return;
         }
         //this.map_quickpick.gotoAndStop(2);
         this.map_quickpick.gotoAndStop(1);
         this.map_quickpick.visible = true;
         this.map_quickpick.alpha = 0;
         this.map_quickpick.x = x;
         this.map_quickpick.y = y;
         flip = map_group == 1;
         if(flip)
         {
            this.map_quickpick.scaleY = -1;
         }
         else
         {
            this.map_quickpick.scaleY = 1;
         }
         maps = null;
         if(map_group == 1)
         {
            maps = this.map_qp_sp.split(",");
         }
         if(map_group == 2)
         {
            maps = this.map_qp_mp.split(",");
         }
         appear = true;
         while(maps.indexOf("") != -1)
         {
            maps.splice(maps.indexOf(""),1);
         }
         i = 0;
         while(i < this.map_quick_picks_max)
         {
            if(i < maps.length)
            {
               var tf:Function = function(param1:MovieClip):void
               {
                  var list_element:* = param1;
                  list_element.visible = true;
                  list_element.txt.text = maps[i].split("+").join(",");
                  if(flip)
                  {
                     list_element.scaleY = -1;
                     list_element.y = i * 18 + 5 + 18;
                  }
                  else
                  {
                     list_element.scaleY = 1;
                     list_element.y = i * 18 + 5;
                  }
                  list_element.map_id = maps[i];
                  NoMouse2(list_element.txt);
                  list_element.btn.addEventListener(MouseEvent.CLICK,function():*
                  {
                     paste_target.text = list_element.map_id.split("+").join(",");
                     appear = false;
                  });
                  list_element.del.addEventListener(MouseEvent.CLICK,function():*
                  {
                     maps.splice(maps.indexOf(list_element.map_id),1);
                     SaveBack();
                     var _loc1_:* = map_quickpick.alpha;
                     map_quickpick.visible = false;
                     CallQuickPick(x,y,map_group,paste_target);
                     map_quickpick.alpha = _loc1_;
                     stage.stageFocusRect = false;
                     stage.focus = map_quickpick;
                  });
               };
			   tf(this.map_quickpick["qp" + i]);
            }
            else
            {
               this.map_quickpick["qp" + i].visible = false;
            }
            i++;
         }
         this.map_quickpick.bg.scaleY = (Number(maps.length) * 18 + 10) / 136;
         if(this.map_qp_ani != -1)
         {
            clearInterval(this.map_qp_ani);
            this.map_qp_ani = -1;
         }
         this.map_qp_ani = setInterval(function():*
         {
            if(appear)
            {
               if(map_quickpick.alpha < 1)
               {
                  map_quickpick.alpha = Math.min(1,map_quickpick.alpha + 0.2);
               }
               if(stage.focus != paste_target)
               {
                  if(stage.focus != map_quickpick)
                  {
                     if(stage.focus != map_quickpick.bg)
                     {
                        if(stage.focus != map_quickpick.qp0)
                        {
                           if(stage.focus != map_quickpick.qp1)
                           {
                              if(stage.focus != map_quickpick.qp2)
                              {
                                 if(stage.focus != map_quickpick.qp3)
                                 {
                                    if(stage.focus != map_quickpick.qp4)
                                    {
                                       if(stage.focus != map_quickpick.qp5)
                                       {
                                          if(stage.focus != map_quickpick.qp6)
                                          {
                                             if(stage.focus != map_quickpick.qp0.btn)
                                             {
                                                if(stage.focus != map_quickpick.qp1.btn)
                                                {
                                                   if(stage.focus != map_quickpick.qp2.btn)
                                                   {
                                                      if(stage.focus != map_quickpick.qp3.btn)
                                                      {
                                                         if(stage.focus != map_quickpick.qp4.btn)
                                                         {
                                                            if(stage.focus != map_quickpick.qp5.btn)
                                                            {
                                                               if(stage.focus != map_quickpick.qp6.btn)
                                                               {
                                                                  if(stage.focus != map_quickpick.qp0.del)
                                                                  {
                                                                     if(stage.focus != map_quickpick.qp1.del)
                                                                     {
                                                                        if(stage.focus != map_quickpick.qp2.del)
                                                                        {
                                                                           if(stage.focus != map_quickpick.qp3.del)
                                                                           {
                                                                              if(stage.focus != map_quickpick.qp4.del)
                                                                              {
                                                                                 if(stage.focus != map_quickpick.qp5.del)
                                                                                 {
                                                                                    if(stage.focus != map_quickpick.qp6.del)
                                                                                    {
                                                                                       appear = false;
                                                                                    }
                                                                                 }
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
            else if(map_quickpick.alpha > 0)
            {
               map_quickpick.alpha = Math.max(0,map_quickpick.alpha - 0.2);
            }
            else
            {
               clearInterval(map_qp_ani);
               map_qp_ani = -1;
               map_quickpick.visible = false;
               stage.stageFocusRect = true;
            }
         },16);
      }
      
      public function cet(param1:String, param2:String, param3:int) : String
      {
         var n:Vector.<int> = null;
         var str:String = param1;
         var hash:String = param2;
         var len:int = param3;
         try
         {
            if(str.length != len || hash != MD5.hash(str))
            {
               this.unstable = 9;
               this.unstable_m = this.CUR_SERVER_NAME + "." + this.MP_room_name + "." + this.MP_map_name + " :: che(" + str + ", " + hash + ", " + len + ")";
               if(Math.random() > 0.8)
               {
                  return "";
               }
               if(Math.random() > 0.8)
               {
                  n = new Vector.<int>(-1);
               }
            }
            return str;
         }
         catch(e:Error)
         {
            n = new Vector.<int>(-1);
            return "";
         }
		 return "";
      }
      
      public function GET_LITE_PHYS() : Boolean
      {
         if(this.MP_mode)
         {
            if(this.MP_app)
            {
               return false;
            }
         }
         return this.LITE_PHYS;
      }
      
      public function SetMCFrame(param1:MovieClip, param2:int, param3:int = 0) : void
      {
         if(param1.isPlaying || param3 == 0 && param1.currentFrame != param2 || param3 > 0 && Math.abs(param1.currentFrame - param2) >= param3)
         {
            param1.gotoAndStop(param2);
         }
      }
      
      /*public function GCTime() : void
      {
         System.pauseForGCIfCollectionImminent(0.1);
      }*/
      
      public function CustomImageRegister(param1:int, param2:int, param3:int) : void
      {
         var loader:Loader;
         var img_req_vars:URLVariables;
         var request:URLRequest;
         var variables:*;
         var img:Object = null;
         var img_req:URLRequest = null;
         var completeHandler:* = undefined;
         var id:int = param1;
         var width:int = param2;
         var height:int = param3;
         completeHandler = function(param1:Event):void
         {
            var html:String = null;
            var event:Event = param1;
            try
            {
               html = event.target.data;
               if(html == "no")
               {
                  allow_screenshoting = false;
               }
               ++images_loaded;
            }
            catch(e:*)
            {
               SpawnLevelLogicErrorIfNeeded(e,"CustomImageApprovalStatus");
            }
         };
         if(this.custom_images.length > 200)
         {
            throw new Error("No more than 200 custom images are allowed per level.");
         }
         img = {};
         ++this.images_expected;
         img.id = id;
         img.bitmap = null;
         img.bitmap_data = null;
         img.load_callbacks = new Vector.<Function>();
         img.load_callback_params = new Vector.<Object>();
         img.width = width;
         img.height = height;
         loader = new Loader();
         loader.contentLoaderInfo.addEventListener(Event.COMPLETE,function(param1:Event):void
         {
            var i:int = 0;
            var event:Event = param1;
            ++images_finished_loading;
            try
            {
               images_data_loaded += LoaderInfo(event.target).bytesTotal;
               if(images_data_loaded > 1024 * 1024 * 10)
               {
                  throw new Error("Attempted to download too much image data (" + images_data_loaded + " out of allowed " + 1024 * 1024 * 10 + " bytes)");
               }
               img.bitmap = Bitmap(LoaderInfo(event.target).content);
               img.bitmap_data = img.bitmap.bitmapData;
               i = 0;
               while(i < img.load_callbacks.length)
               {
                  img.load_callbacks[i](img.load_callback_params[i]);
                  i++;
               }
               img.load_callback_params = null;
               img.load_callbacks = null;
               ++images_ready_to_render;
            }
            catch(e:*)
            {
               SpawnLevelLogicErrorIfNeeded(e,"CustomImageData");
            }
         });
         if(this.https_probability >= this.http_probability)
         {
            img_req = new URLRequest("https://www.plazmaburst2.com/mimage_cache.php?image_id=" + id);
         }
         else
         {
            img_req = new URLRequest("http://www.plazmaburst2.com/mimage_cache.php?image_id=" + id);
         }
         img_req_vars = new URLVariables();
         if(this.def_login != undefined && this.def_login != "")
         {
            img_req_vars.l = this.def_login;
            img_req_vars.p = this.def_password;
         }
         img_req.data = img_req_vars;
         loader.load(img_req);
         request = new URLRequest("https://www.plazmaburst2.com/mimage_cache.php?image_id=" + id + "&approved_status_only=1");
         variables = this.GetNewURLLoader();
         variables.addEventListener(Event.COMPLETE,completeHandler);
         try
         {
            variables.load(request);
         }
         catch(error:Error)
         {
            throw new Error("Unable to load URL: " + error);
         }
         this.custom_images.push(img);
      }
      
      public function FindCustomImageObject(param1:int) : Object
      {
         var _loc2_:int = 0;
         while(_loc2_ < this.custom_images.length)
         {
            if(this.custom_images[_loc2_].id == param1)
            {
               return this.custom_images[_loc2_];
            }
            _loc2_++;
         }
         return null;
      }
      
      public function CustomSongRegister(param1:String, param2:Number, param3:Boolean = false, param4:* = undefined) : void
      {
         var completeHandler:*;
         var s:Object = null;
         var request:URLRequest = null;
         var variables:* = undefined;
         var parts:Array = null;
         var url_cache:String = null;
         var url:String = param1;
         var volume_scale:Number = param2;
         var loop:Boolean = param3;
         var callback:* = param4;
         url = url.split("http://").join("https://");
         s = {};
         if(this.custom_songs.length >= 8)
         {
            throw new Error("Too many songs (you can\'t have more than 8 on one map)");
         }
         s.url = url;
         s.sound = new Sound();
         s.channel = new SoundChannel();
         s.volume = 0;
         s.volume_scale = Math.max(0,Math.min(2,volume_scale));
         if(callback != undefined && callback != -1)
         {
            s.callback = callback;
         }
         else
         {
            s.callback = -1;
         }
         s.loadingSince = getTimer();
         s.loop = loop;
         if(!(url.length == 0 || url == "0"))
         {
            if(url.indexOf("https://freemusicarchive.org") == 0)
            {
               completeHandler = function(param1:Event):void
               {
                  var html:String = null;
                  var title_download:int = 0;
                  var href:int = 0;
                  var last_quote:* = undefined;
                  var final_url:String = null;
                  var event:Event = param1;
                  try
                  {
                     html = event.target.data;
                     title_download = html.indexOf("\" title=\"Download\"");
                     if(title_download === -1)
                     {
                        throw new Error("Song does not appear available right now (" + url + ").");
                     }
                     href = html.lastIndexOf("href=\"",title_download);
                     last_quote = html.indexOf("\"",href + 6);
                     final_url = html.slice(href + 6,last_quote);
                     if(https_probability >= http_probability)
                     {
                        s.sound.load(new URLRequest(final_url));
                     }
                     else
                     {
                        s.sound.load(new URLRequest(final_url.split("https://").join("http://")));
                     }
                  }
                  catch(e:*)
                  {
                     SpawnLevelLogicErrorIfNeeded(e,"Song");
                  }
               };
               request = new URLRequest(url);
               variables = this.GetNewURLLoader();
               variables.addEventListener(Event.COMPLETE,completeHandler);
               try
               {
                  variables.load(request);
               }
               catch(error:Error)
               {
                  throw new Error("Unable to load URL: " + error);
               }
            }
            else
            {
               if(url.indexOf("https://www.newgrounds.com/audio/") != 0)
               {
                  throw new Error("Unknown song source");
               }
               completeHandler = function(param1:Event):void
               {
                  var html:String = null;
                  var parts:Array = null;
                  var cache_version:String = null;
                  var event:Event = param1;
                  try
                  {
                     html = event.target.data;
                     if(html != "ok")
                     {
                        throw new Error(html);
                     }
                     parts = url.split("/");
                     cache_version = "&2";
                     if(https_probability >= http_probability)
                     {
                        s.sound.load(new URLRequest("https://www.plazmaburst2.com/msong_cache.php?verify=0&resource=newgrounds&song_id=" + parts[parts.length - 1] + cache_version));
                     }
                     else
                     {
                        s.sound.load(new URLRequest("http://www.plazmaburst2.com/msong_cache.php?verify=0&resource=newgrounds&song_id=" + parts[parts.length - 1] + cache_version));
                     }
                  }
                  catch(e:*)
                  {
                     SpawnLevelLogicErrorIfNeeded(e,"Song");
                  }
               };
               parts = url.split("/");
               url_cache = "https://www.plazmaburst2.com/msong_cache.php?verify=1&resource=newgrounds&song_id=" + parts[parts.length - 1] + "&" + Math.random();
               request = new URLRequest(url_cache);
               variables = this.GetNewURLLoader();
               variables.addEventListener(Event.COMPLETE,completeHandler);
               try
               {
                  variables.load(request);
               }
               catch(error:Error)
               {
                  throw new Error("Unable to load URL: " + error);
               }
            }
         }
         this.custom_songs.push(s);
      }
      
      public function CustomSongPlay(param1:int) : void
      {
         var inter:* = undefined;
         var fade_mode:Boolean = false;
         var SongSwitch:* = undefined;
         var id:int = param1;
         SongSwitch = function():void
         {
            var i:int = 0;
            var new_ch:* = undefined;
            var that:* = undefined;
            var SongCallback:* = undefined;
            if(custom_songs.length == 0)
            {
               clearInterval(inter);
               return;
            }
            if(fade_mode)
            {
               ok = true;
               i = 0;
               while(i < custom_songs.length)
               {
                  if(custom_songs[i].volume > 0)
                  {
                     custom_songs[i].volume -= 0.02;
                     ok = false;
                  }
                  i++;
               }
               if(ok)
               {
                  fade_mode = false;
               }
            }
            else
            {
               if(id >= 0)
               {
                  custom_songs[id].volume = 1;
                  if(custom_songs[id].channel)
                  {
                     custom_songs[id].channel.stop();
                  }
                  new_ch = null;
                  if(custom_songs[id].sound.bytesTotal > 0 || custom_songs[id].sound.bytesTotal == 0 && custom_songs[id].sound.bytesLoaded > 0 && custom_songs[id].sound.bytesLoaded >= custom_songs[id].sound.bytesTotal)
                  {
                     new_ch = custom_songs[id].sound.play(0,!!custom_songs[id].loop ? 999 : 0);
                  }
                  else if(custom_songs[id].sound.bytesTotal == 0)
                  {
                     SpawnLevelLogicErrorIfNeeded(new Error("Song file size is 0 bytes, connection error saved to server cache instead of actual song? Or not loaded yet?"),"Song");
                  }
                  if(new_ch == null)
                  {
                     if(custom_songs[id].sound.bytesTotal != 0 || getTimer() < custom_songs[id].loadingSince + 15000)
                     {
                        return;
                     }
                  }
                  else
                  {
                     SongCallback = function(param1:Event):*
                     {
                        that.channel.removeEventListener(Event.SOUND_COMPLETE,SongCallback);
                        if(that == song_with_callback_allowed)
                        {
                           if(that.callback != -1)
                           {
                              EXEC_TRIGGER(that.callback);
                           }
                        }
                     };
                     custom_songs[id].channel = new_ch;
                     that = custom_songs[id];
                     that.channel.addEventListener(Event.SOUND_COMPLETE,SongCallback);
                  }
               }
               clearInterval(inter);
            }
            CustomSongUpdateVolumes();
         };
         this.song_with_callback_allowed = this.custom_songs[id];
         fade_mode = true;
         inter = setInterval(SongSwitch,16);
      }
      
      public function CustomSongUpdateVolumes() : void
      {
         var _loc2_:* = undefined;
         var _loc1_:int = 0;
         while(_loc1_ < this.custom_songs.length)
         {
            _loc2_ = new SoundTransform();
            _loc2_.volume = Number(this.custom_songs[_loc1_].volume) * this.CUSTOM_MUSIC_VOLUME * Number(this.custom_songs[_loc1_].volume_scale);
            this.custom_songs[_loc1_].channel.soundTransform = _loc2_;
            _loc1_++;
         }
      }
      
      public function DropGameTimer() : void
      {
         this.MP_spectator = false;
         var _loc1_:int = 0;
         while(_loc1_ < this.custom_songs.length)
         {
            if(this.custom_songs[_loc1_])
            {
               if(this.custom_songs[_loc1_].channel)
               {
                  this.custom_songs[_loc1_].channel.stop();
               }
            }
            _loc1_++;
         }
         this.custom_songs.length = 0;
         removeEventListener(Event.ENTER_FRAME,this.onEnterFrame);
         if(this.MP_mode)
         {
            clearInterval(this.gametim);
         }
         /*stage.removeEventListener(MouseEvent.RIGHT_MOUSE_DOWN,this.r_down);*/
      }
      
      public function StartGameTimer() : void
      {
         addEventListener(Event.ENTER_FRAME,this.onEnterFrame);
         /*if(this.MP_mode)
         {
            this.gametim = setInterval(this.onEnterFrame_alt,this.gtwi);
            this.gtlt = getTimer();
         }
         stage.addEventListener(MouseEvent.RIGHT_MOUSE_DOWN,this.r_down);*/
      }
      

      
      public function UpdateFramerate() : void
      {
		 if(this.FRAMERATE == 20) {
			 stage.frameRate = 20;
		 } else if(this.FRAMERATE == 30) {
			 stage.frameRate = 30;
		 } else {
			 stage.frameRate = 60;
		 }
      }
      
      /*public function AskForCache(param1:MovieClip) : void
      {
      }*/
      
      public function decode(param1:String) : String
      {
         var _loc2_:* = "";
         this.i = 0;
         while(this.i < param1.length)
         {
            if(param1.charAt(this.i) == ";")
            {
               _loc2_ += "|";
            }
            else
            {
               _loc2_ += String.fromCharCode(param1.charCodeAt(this.i) - 1);
            }
            ++this.i;
         }
         return _loc2_;
      }
      
      public function Censored(param1:String, param2:Boolean = false) : String
      {
         if(this.CENSORESHIP || param2)
         {
            this.ok2 = true;
            while(this.ok2)
            {
               this.ok2 = false;
               this.c_i = 0;
               while(this.c_i < this.BAD_WORDS.length)
               {
                  this.c_str = param1.toLowerCase();
                  this.c_i2 = this.c_str.indexOf(this.BAD_WORDS[this.c_i]);
                  if(this.c_i2 != -1)
                  {
                     param1 = param1.substr(0,this.c_i2) + " [ censored ] " + param1.substr(this.c_i2 + this.BAD_WORDS[this.c_i].length,param1.length - this.c_i2 - Number(this.BAD_WORDS[this.c_i].length));
                     this.ok2 = true;
                  }
                  ++this.c_i;
               }
            }
         }
         return param1;
      }
      
      public function UpdateTeamTable() : *
      {
         if(this.MP_type == 3)
         {
            this.team_blue.visible = true;
            this.team_red.visible = true;
            this.team_blue.gotoAndStop(1);
            this.team_red.gotoAndStop(1);
            if(this.mens[this.MP_myid].team == 13)
            {
               this.team_blue.gotoAndStop(3);
            }
            else
            {
               this.team_red.gotoAndStop(3);
            }
         }
         else
         {
            this.team_blue.visible = false;
            this.team_red.visible = false;
         }
      }
      
      public function addBadge(param1:int, param2:String, param3:int) : void
      {
         this.BADGE_STAT[param1] = 0;
         this.BADGE_STAT_MAX[param1] = param3;
         this.BADGE_TITLE[param1] = param2;
         this.BADGE_REACHED[param1] = false;
      }
      
      public function incBadge(param1:int) : void
      {
         if(this.BADGES_ENABLED)
         {
            if(!this.FORCE_CUSTOM_MAP)
            {
               if(!this.BADGE_REACHED[param1])
               {
                  if(!this.MP_mode)
                  {
                     ++this.BADGE_STAT[param1];
                     if(this.BADGE_STAT[param1] >= this.BADGE_STAT_MAX[param1])
                     {
                        this.BADGE_STAT[param1] = this.BADGE_STAT_MAX[param1];
                        this.BADGE_REACHED[param1] = true;
                        this.PlaySound_full(this.s_badge_earned);
                        this.DialogSay("Achievement unlocked \'\'" + this.BADGE_TITLE[param1] + "\'\'","#00FF00");
                        this.LAST_BADGE = getTimer();
                     }
					 this.my_so.data["bdg" + param1] = this.BADGE_STAT[param1];
                  }
               }
            }
         }
      }
      

      public function IgnoreGunPickTemp(param1:*) : void
      {
         var _loc2_:int = 0;
         while(_loc2_ < this.temp_ignore_gun_pick.length)
         {
            if(this.temp_ignore_gun_pick[_loc2_].mc == param1)
            {
               this.temp_ignore_gun_pick[_loc2_].timer = getTimer();
               return;
            }
            _loc2_++;
         }
         this.temp_ignore_gun_pick.push({
            "mc":param1,
            "timer":getTimer()
         });
      }
      
      public function IgnoreGunPickTempCanI(param1:*) : Boolean
      {
         var _loc2_:int = 0;
         while(_loc2_ < this.temp_ignore_gun_pick.length)
         {
            if(this.temp_ignore_gun_pick[_loc2_].mc == param1)
            {
               if(getTimer() < this.temp_ignore_gun_pick[_loc2_].timer + 1000)
               {
                  return false;
               }
               this.temp_ignore_gun_pick.splice(_loc2_,1);
               break;
            }
            _loc2_++;
         }
         return true;
      }
      
      public function ApplyLoweredHP(param1:*, param2:*, param3:*, param4:*) : void
      {
         var _loc5_:int = 0;
         while(_loc5_ < this.temp_keep_dmg_belows.length)
         {
            if(this.temp_keep_dmg_belows[_loc5_].mc == param1)
            {
               this.temp_keep_dmg_belows[_loc5_].timer = getTimer();
               this.temp_keep_dmg_belows[_loc5_].hea = Math.min(param2,this.temp_keep_dmg_belows[_loc5_].hea);
               this.temp_keep_dmg_belows[_loc5_].min_hp = Math.max(param4,this.temp_keep_dmg_belows[_loc5_].min_hp);
               if(this.temp_keep_dmg_belows[_loc5_].min_hp > param2)
               {
                  this.temp_keep_dmg_belows[_loc5_].min_hp = param2;
               }
               if(param3)
               {
                  this.temp_keep_dmg_belows[_loc5_].dying = param3;
               }
               return;
            }
            _loc5_++;
         }
         this.temp_keep_dmg_belows.push({
            "mc":param1,
            "timer":getTimer(),
            "hea":param2,
            "min_hp":param4,
            "dying":param3
         });
      }
      
      public function GetPlayerTempAffectionObj(param1:*) : Object
      {
         var _loc2_:int = 0;
         while(_loc2_ < this.temp_keep_dmg_belows.length)
         {
            if(this.temp_keep_dmg_belows[_loc2_].mc == param1)
            {
               if(getTimer() < this.temp_keep_dmg_belows[_loc2_].timer + Number(param1.ping) * 3 + Number(this.mens[this.MP_myid].ping) * 3 + 150)
               {
                  return this.temp_keep_dmg_belows[_loc2_];
               }
               this.temp_keep_dmg_belows.splice(_loc2_,1);
               break;
            }
            _loc2_++;
         }
         return null;
      }
      
      public function AdjustToPlayerAllowedHP(param1:*, param2:*) : Number
      {
         var _loc3_:Object = this.GetPlayerTempAffectionObj(param1);
         if(_loc3_ == null)
         {
            return param2;
         }
         if(param2 > _loc3_.hea)
         {
            param2 = _loc3_.hea;
         }
         if(param2 < _loc3_.min_hp)
         {
            param2 = _loc3_.min_hp;
         }
         return param2;
      }
      
      public function GetPlayerShouldBeDying(param1:*) : Boolean
      {
         var _loc2_:Object = this.GetPlayerTempAffectionObj(param1);
         if(_loc2_ == null)
         {
            return false;
         }
         return _loc2_.dying;
      }
      
      public function GetPlayerAllowLimbHPStabChange(param1:*) : Boolean
      {
         var _loc2_:Object = this.GetPlayerTempAffectionObj(param1);
         if(_loc2_ == null)
         {
            return true;
         }
         return false;
      }
      
      public function IncludeRegenInHPLimit(param1:*, param2:*) : void
      {
         var _loc3_:Object = this.GetPlayerTempAffectionObj(param1);
         if(_loc3_ == null)
         {
            return;
         }
         _loc3_.hea += param2;
      }
      
      public function AllowExtraBulletClassSync(param1:MovieClip) : Boolean
      {
         return param1.cclass == 1 || param1.cclass == 4 || param1.cclass == 5 || param1.cclass == 6 && param1.nadekind != 1 && param1.nadekind != 2 && param1.nadekind != 3;
      }
      
      public function SyncBulletApprox(param1:*) : void
      {
         if(this.MP_mode)
         {
            if(param1.master == this.MP_myid)
            {
               if(this.AllowExtraBulletClassSync(param1))
               {
                  this.MP_custom_events += ";t|" + [this.MP_myid,this.r2(param1.x),this.r2(param1.y),Number(param1.currentFrame) * (!!param1.visible ? 1 : -1)].join("#");
               }
            }
         }
import flash.display.MovieClip;
import flash.geom.Matrix;
import flash.display.Sprite;

      }
      
      public function AddItemToHero1(param1:String, param2:int) : void
      {
         var _loc3_:* = this.inventoryA.length;
         this.inventoryA[_loc3_] = new Object();
         this.inventoryA[_loc3_].mdl = param1;
         this.inventoryA[_loc3_].upg = param2;
      }
      
      public function AddItemToHero2(param1:String, param2:int) : void
      {
         var _loc3_:* = this.inventoryB.length;
         this.inventoryB[_loc3_] = new Object();
         this.inventoryB[_loc3_].mdl = param1;
         this.inventoryB[_loc3_].upg = param2;
      }
      
      public function AddItemToHero3(param1:String, param2:int) : void
      {
         var _loc3_:* = this.inventoryC.length;
         this.inventoryC[_loc3_] = new Object();
         this.inventoryC[_loc3_].mdl = param1;
         this.inventoryC[_loc3_].upg = param2;
      }
      
      public function AddItemToHero4(param1:String, param2:int) : void
      {
         var _loc3_:* = this.inventoryD.length;
         this.inventoryD[_loc3_] = new Object();
         this.inventoryD[_loc3_].mdl = param1;
         this.inventoryD[_loc3_].upg = param2;
      }
      
      public function RestoreLimbColor(param1:MovieClip) : void
      {
         //param1.filters = new Array(this.clrs[0]);
		  // FILTERS
      }
      
      public function UpdatePlayerColorSP(param1:MovieClip, param2:int) : void
      {
         if(!this.MP_mode)
         {
            if(param2 == 0 || param2 == 1)
            {
               param1.head.filters = new Array(this.clrs[this.skin_color_head[param2]]);
               param1.body.filters = new Array(this.clrs[this.skin_color_body[param2]]);
               param1.arm1.upper.filters = new Array(this.clrs[this.skin_color_arms[param2]]);
               param1.arm1.lower.filters = new Array(this.clrs[this.skin_color_arms[param2]]);
               param1.arm2.upper.filters = new Array(this.clrs[this.skin_color_arms[param2]]);
               param1.arm2.lower.filters = new Array(this.clrs[this.skin_color_arms[param2]]);
               param1.leg1.upper.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
               param1.leg1.middle.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
               param1.leg1.lower.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
               param1.leg2.upper.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
               param1.leg2.middle.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
               param1.leg2.lower.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
               param1.toe.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
			   // FILTER
            }
         }
      }
      
      public function BlueHue(param1:String)// : ColorMatrixFilter
      {
		 return;
         var _loc3_:* = undefined;
         var _loc4_:* = undefined;
         var _loc5_:Number = NaN;
         var _loc6_:* = undefined;
         //var _loc2_:ColorMatrixFilter = new ColorMatrixFilter();
         if(param1 != "-")
         {
            if(!isNaN(parseInt(param1,10)) && this.clrs[parseInt(param1,10)] != undefined)
            {
               _loc2_ = this.clrs[int(param1)];
            }
            else
            {
               _loc3_ = this.MPclr[param1][0];
               _loc4_ = this.MPclr[param1][1];
               _loc5_ = Number(this.MPclr[param1][2]);
               _loc6_ = (_loc6_ = (_loc6_ = (_loc6_ = (_loc6_ = []).concat([_loc3_ * 0.3,_loc3_ * 0.4 + _loc4_ * 0.2,_loc3_ * 0.6 + _loc5_ * 0.2,0,0])).concat([_loc4_ * 0.3 + _loc3_ * 0.2,_loc4_ * 0.4,_loc4_ * 0.6 + _loc5_ * 0.2,0,0])).concat([_loc5_ * 0.3 + _loc3_ * 0.2,_loc5_ * 0.4 + _loc4_ * 0.2,_loc5_ * 0.6,0,0])).concat([0,0,0,1,0]);
               //_loc2_.matrix = _loc6_;
            }
         }
         return _loc2_;
      }
      
      public function UpdatePlayerColorMP(param1:MovieClip, param2:Boolean = false) : void
      {
         //var _loc3_:ColorMatrixFilter = this.BlueHue(param1.palette[0]);
         //var _loc4_:ColorMatrixFilter = this.BlueHue(param1.palette[1]);
         //var _loc5_:ColorMatrixFilter = this.BlueHue(param1.palette[2]);
         //var _loc6_:ColorMatrixFilter = this.BlueHue(param1.palette[3]);
         /*param1.head.filters = new Array(_loc3_);
         param1.body.filters = new Array(_loc6_);
         param1.arm1.upper.filters = new Array(_loc4_);
         param1.arm1.lower.filters = new Array(_loc4_);
         param1.arm2.upper.filters = new Array(_loc4_);
         param1.arm2.lower.filters = new Array(_loc4_);
         param1.leg1.upper.filters = new Array(_loc5_);
         param1.leg1.middle.filters = new Array(_loc5_);
         param1.leg1.lower.filters = new Array(_loc5_);
         param1.leg2.upper.filters = new Array(_loc5_);
         param1.leg2.middle.filters = new Array(_loc5_);
         param1.leg2.lower.filters = new Array(_loc5_);
         param1.toe.filters = new Array(_loc5_);*/
		  // FILTERS
      }
      
      public function LoadGame() : void
      {
         if(this.my_so.data.plays == 0 || isNaN(this.my_so.data.plays))
         {
            this.FIRST_RUN = true;
            this.my_so.data.plays = 1;
            this.FIRST_TIME = true;
            this.my_so.data["skin_model" + 0] = 40;
            this.my_so.data["skin_model" + 1] = 60;
            this.my_so.data["skin_model" + 2] = 2;
            this.my_so.data["armorA"] = 0;
            this.my_so.data["armorB"] = 0;
            this.my_so.data["curA"] = 0;
            this.my_so.data["curB"] = 0;
            this.my_so.data["last_mp"] = this.loaderInfo.parameters.default_server != undefined ? int(this.loaderInfo.parameters.default_server) : 0;
            this.my_so.data["psychoblood_mode"] = 1;
            this.my_so.data["framerate"] = 60;
            this.i = 0;
            while(this.i < this.BADGES_TOTAL)
            {
               this.my_so.data["bdg" + this.i] = 0;
               ++this.i;
            }
            this.my_so.data["cmpg_nick"] = "";
            this.my_so.data["lvls_passed"] = 0;
            this.my_so.data["money"] = 200;
            this.i = 0;
            while(this.i < 3)
            {
               this.my_so.data["skin_color_head" + this.i] = 0;
               this.my_so.data["skin_color_body" + this.i] = 0;
               this.my_so.data["skin_color_arms" + this.i] = 0;
               this.my_so.data["skin_color_legs" + this.i] = 0;
               ++this.i;
            }
            this.my_so.data["inv1_len"] = 3;
            this.my_so.data["inv1_0mdl"] = "gun_pistol";
            this.my_so.data["inv1_1mdl"] = "gun_rifle";
            this.my_so.data["inv1_2mdl"] = "gun_shotgun";
            this.my_so.data["inv1_3mdl"] = "item_grenade";
            this.my_so.data["inv1_4mdl"] = "item_grenade";
            this.my_so.data["inv1_5mdl"] = "item_grenade";
            this.my_so.data["inv1_0upg"] = 0;
            this.my_so.data["inv1_1upg"] = 0;
            this.my_so.data["inv1_2upg"] = 0;
            this.my_so.data["inv1_3upg"] = 0;
            this.my_so.data["inv1_4upg"] = 0;
            this.my_so.data["inv1_5upg"] = 0;
            this.my_so.data["inv2_len"] = 1;
            this.my_so.data["inv2_0mdl"] = "gun_real_shotgun";
            this.my_so.data["inv2_0upg"] = 0;
            this.my_so.data["MP_default_set"] = 1;
            this.my_so.data["mouse_wheel"] = true;
            this.my_so.data["OVERSCROLL"] = true;
            this.my_so.data["RECONNECT_ON_LOST_CONNECTION"] = true;
            this.my_so.data["BEEP_ON_DEATH"] = true;
            this.my_so.data["HIT_SOUNDS"] = false;
            this.my_so.data["SCREEN_FADE_EFFECTS"] = true;
            this.my_so.data["SHOW_EXP_BAR"] = 2;
            this.my_so.data["MP_AUTO_LOGIN"] = false;
            this.my_so.data["super_computer"] = false;
            this.my_so.data["ragdoll_collide"] = false;
            this.my_so.data["im_a_cheater"] = false;
            this.my_so.data["lite_phys"] = false;
            this.my_so.data["auto_pick_new_weps"] = true;
            this.my_so.data["soft_screen"] = true;
            this.my_so.data["screen_effects"] = true;
            this.my_so.data["violence"] = true;
			this.my_so.data["moderate_violence"] = false;
            this.my_so.data["altcur"] = true;
            this.my_so.data["censoreship"] = false;
            this.my_so.data["display_chat"] = 2;
            this.my_so.data["fx_vol"] = 0.5;
            this.my_so.data["music_vol"] = 0.5;
            this.my_so.data["CUSTOM_MUSIC_VOLUME"] = 0.5;
			this.my_so.data["LESS_NOISE"] = false;
            this.my_so.data["hq"] = true;
            this.my_so.data["easy_mode"] = false;
            this.my_so.data["pro_bots"] = false;
            this.my_so.data["LOW_HPS"] = false;
            this.my_so.data["hints"] = true;
            this.my_so.data["tooltips"] = true;
            this.my_so.data["menu_hue"] = 0;
            this.my_so.data["map_qp_sp"] = "";
            this.my_so.data["map_qp_mp"] = "";
         }
         else
         {
            ++this.my_so.data.plays;
            this.FIRST_RUN = false;
         }
         this.skin_model[0] = int(this.my_so.data["skin_model" + 0]);
         this.skin_model[1] = int(this.my_so.data["skin_model" + 1]);
         this.skin_model[2] = int(this.my_so.data["skin_model" + 2]);
         this.armorA = int(this.my_so.data["armorA"]);
         this.armorB = int(this.my_so.data["armorB"]);
         this.curA = this.my_so.data["curA"];
         this.curB = this.my_so.data["curB"];
         this.LAST_SERVER_UID = int(this.my_so.data["last_mp"]);
         this.CMPG_money = int(this.my_so.data["money"]);
         this.CMPG_name = String(this.my_so.data["cmpg_nick"]);
         this.LEVELS_PASSED = int(this.my_so.data["lvls_passed"]);
         this.i = 0;
         while(this.i < 3)
         {
            this.skin_color_head[this.i] = int(this.my_so.data["skin_color_head" + this.i]);
            this.skin_color_body[this.i] = int(this.my_so.data["skin_color_body" + this.i]);
            this.skin_color_arms[this.i] = int(this.my_so.data["skin_color_arms" + this.i]);
            this.skin_color_legs[this.i] = int(this.my_so.data["skin_color_legs" + this.i]);
            ++this.i;
         }
         this.i = 0;
         while(this.i < this.BADGES_TOTAL)
         {
            this.BADGE_STAT[this.i] = this.my_so.data["bdg" + this.i];
            if(this.BADGE_STAT[this.i] >= this.BADGE_STAT_MAX[this.i])
            {
               this.BADGE_REACHED[this.i] = true;
            }
            else
            {
               this.BADGE_REACHED[this.i] = false;
            }
            ++this.i;
         }
         this.inventoryA = [];
         this.inventoryB = [];
         this.i2 = int(this.my_so.data["inv1_len"]);
         this.i = 0;
         while(this.i < this.i2)
         {
            this.AddItemToHero1(this.my_so.data["inv1_" + this.i + "mdl"],int(this.my_so.data["inv1_" + this.i + "upg"]));
            ++this.i;
         }
         this.i2 = int(this.my_so.data["inv2_len"]);
         this.i = 0;
         while(this.i < this.i2)
         {
            this.AddItemToHero2(this.my_so.data["inv2_" + this.i + "mdl"],int(this.my_so.data["inv2_" + this.i + "upg"]));
            ++this.i;
         }
         this.SUPER_COMPUTER = Boolean(this.my_so.data["super_computer"]);
         this.RAGDOLL_COLLIDE = Boolean(this.my_so.data["ragdoll_collide"]);
         this.IM_A_CHEATER = this.my_so.data["im_a_cheater"];
         this.LITE_PHYS = Boolean(this.my_so.data["lite_phys"]);
         this.AUTO_PICK_NEW_WEPS = Boolean(this.my_so.data["auto_pick_new_weps"]);
         this.SOFT_SCREEN = Boolean(this.my_so.data["soft_screen"]);
         this.SCREEN_EFFECTS = Boolean(this.my_so.data["screen_effects"]);
         this.VIOLENCE = Boolean(this.my_so.data["violence"]);
		 this.MODERATE_VIOLENCE = Boolean(this.my_so.data["moderate_violence"]);
         this.ALTCUR = Boolean(this.my_so.data["altcur"]);
         this.CENSORESHIP = Boolean(this.my_so.data["censoreship"]);
         if(this.my_so.data["display_chat"] == undefined)
         {
            this.DISPLAY_CHAT = 2;
         }
         else if(this.my_so.data["display_chat"] is Boolean)
         {
            this.DISPLAY_CHAT = !!this.my_so.data["display_chat"] ? 2 : 1;
         }
         else
         {
            this.DISPLAY_CHAT = int(this.my_so.data["display_chat"]);
         }
         if(this.my_so.data["psychoblood_mode"] == undefined)
         {
            this.PSYCHOBLOOD_MODE = 2;
         }
         else
         {
            this.PSYCHOBLOOD_MODE = int(this.my_so.data["psychoblood_mode"]);
         }
         if(this.my_so.data["framerate"] == undefined)
         {
            this.FRAMERATE = 60;
         }
         else
         {
            this.FRAMERATE = int(this.my_so.data["framerate"]);
         }
         this.UpdateFramerate();
         this.FX_VOLUME = Number(this.my_so.data["fx_vol"]);
         this.MUSIC_VOLUME = Number(this.my_so.data["music_vol"]);
         this.CUSTOM_MUSIC_VOLUME = Number(this.my_so.data["CUSTOM_MUSIC_VOLUME"]);
		 this.LESS_NOISE = this.my_so.data["LESS_NOISE"];
         this.HQ = Boolean(this.my_so.data["hq"]);
         this.EASY_MODE = Boolean(this.my_so.data["easy_mode"]);
         this.LOW_HPS = Boolean(this.my_so.data["LOW_HPS"]);
         this.PRO_BOTS = Boolean(this.my_so.data["pro_bots"]);
         this.HINTS = Boolean(this.my_so.data["hints"]);
         this.TOOLTIPS = Boolean(this.my_so.data["tooltips"]);
         if(this.my_so.data["mouse_wheel"] == undefined)
         {
            this.MOUSE_WHEEL = true;
         }
         else
         {
            this.MOUSE_WHEEL = Boolean(this.my_so.data["mouse_wheel"]);
         }
         if(this.my_so.data["OVERSCROLL"] == undefined)
         {
            this.OVERSCROLL = true;
         }
         else
         {
            this.OVERSCROLL = Boolean(this.my_so.data["OVERSCROLL"]);
         }
         if(this.my_so.data["RECONNECT_ON_LOST_CONNECTION"] == undefined)
         {
            this.RECONNECT_ON_LOST_CONNECTION = true;
         }
         else
         {
            this.RECONNECT_ON_LOST_CONNECTION = Boolean(this.my_so.data["RECONNECT_ON_LOST_CONNECTION"]);
         }
         if(this.my_so.data["BEEP_ON_DEATH"] == undefined)
         {
            this.BEEP_ON_DEATH = true;
         }
         else
         {
            this.BEEP_ON_DEATH = Boolean(this.my_so.data["BEEP_ON_DEATH"]);
         }
         if(this.my_so.data["HIT_SOUNDS"] == undefined)
         {
            this.HIT_SOUNDS = false;
         }
         else
         {
            this.HIT_SOUNDS = Boolean(this.my_so.data["HIT_SOUNDS"]);
         }
         if(this.my_so.data["SCREEN_FADE_EFFECTS"] == undefined)
         {
            this.SCREEN_FADE_EFFECTS = true;
         }
         else
         {
            this.SCREEN_FADE_EFFECTS = Boolean(this.my_so.data["SCREEN_FADE_EFFECTS"]);
         }
         if(this.my_so.data["SHOW_EXP_BAR"] == undefined)
         {
            this.SHOW_EXP_BAR = 2;
         }
         else
         {
            this.SHOW_EXP_BAR = int(this.my_so.data["SHOW_EXP_BAR"]);
         }
         if(this.my_so.data["MP_AUTO_LOGIN"] == undefined)
         {
            this.MP_AUTO_LOGIN = false;
         }
         else
         {
            this.MP_AUTO_LOGIN = Boolean(this.my_so.data["MP_AUTO_LOGIN"]);
         }
         if(this.my_so.data["MP_default_set"] == undefined)
         {
            this.MP_default_set = 1;
         }
         else
         {
            this.MP_default_set = int(this.my_so.data["MP_default_set"]);
         }
         if(this.my_so.data["menu_hue"] == undefined)
         {
            this.menu_hue = 0;
         }
         else
         {
            this.menu_hue = Number(this.my_so.data["menu_hue"]);
         }
         if(this.my_so.data["map_qp_sp"] != undefined)
         {
            this.map_qp_sp = this.my_so.data["map_qp_sp"];
         }
         if(this.my_so.data["map_qp_mp"] != undefined)
         {
            this.map_qp_mp = this.my_so.data["map_qp_mp"];
         }
      }
      
      public function nicknameproceed() : void
      {
         if(this.mdialog.nickname.text == "")
         {
            this.mdialog.nickname.text = "Type Your Name Here";
         }
         else if(this.mdialog.nickname.text == "Type Your Name Here")
         {
            this.mdialog.nickname.text = "Type Your Name Here!";
         }
         else if(this.mdialog.nickname.text == "Type Your Name Here!")
         {
            this.mdialog.nickname.text = "Type Your Name Here!!";
         }
         else if(this.mdialog.nickname.text == "Type Your Name Here!!")
         {
            this.mdialog.nickname.text = "Type Your Name Here!!!";
         }
         else if(this.mdialog.nickname.text == "Type Your Name Here!!!")
         {
            this.i4 = Math.floor(Math.random() * 9.9);
            if(this.i4 == 0)
            {
               this.mdialog.nickname.text = "Shas\'O Kais";
            }
            if(this.i4 == 1)
            {
               this.mdialog.nickname.text = "O\'Shovah";
            }
            if(this.i4 == 2)
            {
               this.mdialog.nickname.text = "Warper";
            }
            if(this.i4 == 3)
            {
               this.mdialog.nickname.text = "The Chosen Twice";
            }
            if(this.i4 == 4)
            {
               this.mdialog.nickname.text = "Teddy Bear";
            }
            if(this.i4 == 5)
            {
               this.mdialog.nickname.text = "Super Butterfly";
            }
            if(this.i4 == 6)
            {
               this.mdialog.nickname.text = "Obi-1";
            }
            if(this.i4 == 7)
            {
               this.mdialog.nickname.text = "Tux";
            }
            if(this.i4 == 8)
            {
               this.mdialog.nickname.text = "Tootsie Poopsie";
            }
            if(this.i4 == 9)
            {
               this.mdialog.nickname.text = "Thomas Sorenson";
            }
         }
         else
         {
            if(this.FIRST_RUN)
            {
               this.MP_nick = this.mdialog.nickname.text;
            }
            if(this.CMPG_name != this.mdialog.nickname.text)
            {
               this.CMPG_name = this.mdialog.nickname.text;
               this.SaveGame();
            }
            this.mdialog.visible = false;
            removeChild(this.intro_base);
            removeChild(this.mdialog);
            removeChild(this.intro_vers);
            removeChild(this.intro_btcb);
            gotoAndStop("ads");
            if(this.MP_AUTO_LOGIN)
            {
               this.intro_done();
            }
         }
      }
      
      public function SaveGame() : void
      {
         this.my_so.data["skin_model" + 0] = this.skin_model[0];
         this.my_so.data["skin_model" + 1] = this.skin_model[1];
         this.my_so.data["skin_model" + 2] = this.skin_model[2];
         this.my_so.data["armorA"] = this.armorA;
         this.my_so.data["armorB"] = this.armorB;
         this.my_so.data["curA"] = this.curA;
         this.my_so.data["curB"] = this.curB;
         this.my_so.data["money"] = this.CMPG_money;
         this.my_so.data["cmpg_nick"] = this.CMPG_name;
         this.my_so.data["lvls_passed"] = this.LEVELS_PASSED;
         this.my_so.data["last_mp"] = this.LAST_SERVER_UID;
         this.my_so.data["psychoblood_mode"] = this.PSYCHOBLOOD_MODE;
         this.my_so.data["framerate"] = this.FRAMERATE;
         this.save_i = 0;
         while(this.i < this.save_i)
         {
            this.my_so.data["skin_color_head" + this.save_i] = this.skin_color_head[this.save_i];
            this.my_so.data["skin_color_body" + this.save_i] = this.skin_color_body[this.save_i];
            this.my_so.data["skin_color_arms" + this.save_i] = this.skin_color_arms[this.save_i];
            this.my_so.data["skin_color_legs" + this.save_i] = this.skin_color_legs[this.save_i];
            ++this.i;
         }
         this.save_i = 0;
         while(this.save_i < this.BADGES_TOTAL)
         {
            this.my_so.data["bdg" + this.save_i] = this.BADGE_STAT[this.save_i];
            ++this.save_i;
         }
         this.my_so.data["inv1_len"] = this.inventoryA.length;
         this.save_i = 0;
         while(this.save_i < this.inventoryA.length)
         {
            this.my_so.data["inv1_" + this.save_i + "mdl"] = this.inventoryA[this.save_i].mdl;
            this.my_so.data["inv1_" + this.save_i + "upg"] = this.inventoryA[this.save_i].upg;
            ++this.save_i;
         }
         this.my_so.data["inv2_len"] = this.inventoryB.length;
         this.save_i = 0;
         while(this.save_i < this.inventoryB.length)
         {
            this.my_so.data["inv2_" + this.save_i + "mdl"] = this.inventoryB[this.save_i].mdl;
            this.my_so.data["inv2_" + this.save_i + "upg"] = this.inventoryB[this.save_i].upg;
            ++this.save_i;
         }
         this.my_so.data["super_computer"] = this.SUPER_COMPUTER;
         this.my_so.data["ragdoll_collide"] = this.RAGDOLL_COLLIDE;
         this.my_so.data["im_a_cheater"] = this.IM_A_CHEATER;
         this.my_so.data["lite_phys"] = this.LITE_PHYS;
         this.my_so.data["auto_pick_new_weps"] = this.AUTO_PICK_NEW_WEPS;
         this.my_so.data["soft_screen"] = this.SOFT_SCREEN;
         this.my_so.data["screen_effects"] = this.SCREEN_EFFECTS;
         this.my_so.data["violence"] = this.VIOLENCE;
		 this.my_so.data["moderate_violence"] = this.MODERATE_VIOLENCE;
         this.my_so.data["altcur"] = this.ALTCUR;
         this.my_so.data["censoreship"] = this.CENSORESHIP;
         this.my_so.data["display_chat"] = this.DISPLAY_CHAT;
         this.my_so.data["fx_vol"] = this.FX_VOLUME;
         this.my_so.data["music_vol"] = this.MUSIC_VOLUME;
         this.my_so.data["CUSTOM_MUSIC_VOLUME"] = this.CUSTOM_MUSIC_VOLUME;
         this.my_so.data["hq"] = this.HQ;
	     this.my_so.data["LESS_NOISE"] = this.LESS_NOISE;
         this.my_so.data["mouse_wheel"] = this.MOUSE_WHEEL;
         this.my_so.data["OVERSCROLL"] = this.OVERSCROLL;
         this.my_so.data["RECONNECT_ON_LOST_CONNECTION"] = this.RECONNECT_ON_LOST_CONNECTION;
         this.my_so.data["BEEP_ON_DEATH"] = this.BEEP_ON_DEATH;
         this.my_so.data["HIT_SOUNDS"] = this.HIT_SOUNDS;
         this.my_so.data["SCREEN_FADE_EFFECTS"] = this.SCREEN_FADE_EFFECTS;
         this.my_so.data["SHOW_EXP_BAR"] = this.SHOW_EXP_BAR;
         this.my_so.data["MP_AUTO_LOGIN"] = this.MP_AUTO_LOGIN;
         this.my_so.data["easy_mode"] = this.EASY_MODE;
         this.my_so.data["LOW_HPS"] = this.LOW_HPS;
         this.my_so.data["pro_bots"] = this.PRO_BOTS;
         this.my_so.data["hints"] = this.HINTS;
         this.my_so.data["tooltips"] = this.TOOLTIPS;
         this.my_so.data["MP_default_set"] = this.MP_default_set;
         this.my_so.data["menu_hue"] = this.menu_hue;
         this.my_so.data["map_qp_sp"] = this.map_qp_sp;
         this.my_so.data["map_qp_mp"] = this.map_qp_mp;
         try
         {
            this.my_so.flush();
         }
         catch(e:Error)
         {
            LAST_ERROR = "Warning: Save data might be not available without account (Flash Player and/or web browser issue).";
         }
         this.NetworkSave();
      }
      
      public function ShowNoAch() : void
      {
         if(!this.FORCE_CUSTOM_MAP)
         {
            this.ChatNewMsg("<font color=\"#a16d4b\">WARNING: Use of cheats disables Achievements. You can clear all saved data at:</font>");
            this.ChatNewMsg("<font color=\"#a16d4b\">                    Main menu &gt; Settings &amp; Performance &gt; Export game state &gt; Clear all saved data.</font>");
         }
      }
      
      public function replace(param1:String, param2:String, param3:String) : String
      {
         if(param3 != null && param3 != "")
         {
            return param3.split(param1).join(param2);
         }
         return "";
      }
      
      public function Dist3Dm(param1:Number, param2:Number, param3:Number) : Number
      {
         return Math.sqrt(param1 * param1 + param2 * param2 + param3 * param3);
      }
  
	  /*public function FinishSound(e) {
		 var i = 0;
		 while(i < this.last_channel) {
			   if(this.s_channel[i] == e.currentTarget) {
				   this.s_channel[i] = null;
				   break;
			   }
			   i++;
		 }
	  }*/
      
      public function PlaySound(param1:*, param2:Number, param3:Number, param4:MovieClip = null) : void
      {
         var attached_mc2:MovieClip = null;
         var callb:* = undefined;
         var src:* = param1;
         var x:Number = param2;
         var y:Number = param3;
         var attached_mc:MovieClip = param4;
		 if(this.NONMUTE && this.FX_VOLUME != 0)
		 {
			if(this.game.visible)
			{
			   if(this.s_channel[this.last_channel] != null)
			   {
				  this.s_channel[this.last_channel].stop();
			   }			   
			   this.smod = this.dist_to_face / this.Dist3Dm(x * this.game_scale + this.game_x - 400 - 300,y * this.game_scale + this.game_y - 200,this.dist_to_face);
			   this.smod2 = this.dist_to_face / this.Dist3Dm(x * this.game_scale + this.game_x - 400 + 300,y * this.game_scale + this.game_y - 200,this.dist_to_face);
			   this.vol3d[this.last_channel].volume = this.vol.volume;
			   if(src.custom_volume == undefined)
			   {
				  src.custom_volume = 1;
			   }
			   else
			   {
				  this.vol3d[this.last_channel].volume *= src.custom_volume;
			   }
			   this.vol3d[this.last_channel].leftToLeft = this.smod2;
			   this.vol3d[this.last_channel].leftToRight = 0;
			   this.vol3d[this.last_channel].rightToRight = this.smod;
			   this.vol3d[this.last_channel].rightToLeft = 0;
			   this.s_channel[this.last_channel] = src.play(0,0,this.vol3d[this.last_channel]);
			   ++this.last_channel;
			   if(this.last_channel >= this.max_channels)
               {
                  this.last_channel = 0;
               }

			}
		 }
      }
      
      public function PlaySound_full(param1:*) : void
      {
         if(this.NONMUTE && this.FX_VOLUME != 0)
         {
            if(currentFrameLabel != "gaming" || this.game.visible)
            {
               if(this.s_channel[this.last_channel] != null)
               {
                  this.s_channel[this.last_channel].stop();
               }

               this.vol3d[this.last_channel].volume = this.vol.volume;
               if(param1.custom_volume == undefined)
               {
                  param1.custom_volume = 1;
               }
               else
               {
                  this.vol3d[this.last_channel].volume *= param1.custom_volume;
               }
               this.vol3d[this.last_channel].leftToLeft = 1;
               this.vol3d[this.last_channel].leftToRight = 0;
               this.vol3d[this.last_channel].rightToRight = 1;
               this.vol3d[this.last_channel].rightToLeft = 0;
               this.s_channel[this.last_channel] = param1.play(0,0,this.vol3d[this.last_channel]);
               ++this.last_channel;
               if(this.last_channel >= this.max_channels)
               {
                  this.last_channel = 0;
               }
            }
         }
      }
      
      public function StopAllSounds() : void
      {
         this.last_channel = 0;
         while(this.last_channel < this.max_channels)
         {
            if(this.s_channel[this.last_channel] != null)
            {
               this.s_channel[this.last_channel].stop();
            }
            ++this.last_channel;
         }
         this.last_channel = 0;
      }
      
      public function NoMouse(param1:MovieClip) : void
      {
         param1.mouseEnabled = false;
         param1.mouseChildren = false;
      }
      
      public function NoMouse2(param1:*) : void
      {
         param1.mouseEnabled = false;
      }
      
      public function mouseMoveHandler(param1:MouseEvent) : void
      {
         this.momove = true;
      }
      
      public function lib(param1:String, param2:Number = 1) : Sound
      {
         var _loc3_:Class = getDefinitionByName(param1) as Class;
         var _loc4_:Sound;
         (_loc4_ = new _loc3_());//.custom_volume = param2;
         return _loc4_;
      }
      
      public function LibSoundStringArray(param1:Number, param2:Array) : Array
      {
         var _loc3_:int = 0;
         while(_loc3_ < param2.length)
         {
            param2[_loc3_] = this.lib(param2[_loc3_],param1);
            _loc3_++;
         }
         return param2;
      }
      
      public function DamageReport(damage:Number) : void
      {
         if(this.HIT_SOUNDS)
         {
            this.hit_frame_damage += damage;
         }
      }
      
      public function FragReport(param1:Boolean, param2:*) : void
      {
         if(!param1)
         {
            if(!(this.MP_app && this.MP_mode && Boolean(param2.isplayer)))
            {
               if(!param2.isplayer)
               {
                  this.ExpTask(this.EXP_TYPE_KILL_ENEMY_NON_PLAYER,param2.nick);
               }
            }
         }
         if(this.HIT_SOUNDS)
         {
            if(this.hit_frags.indexOf(param2) == -1)
            {
               this.hit_frags.push(param2);
            }
         }
      }
      
      public function DamageSoundLogic(param1:Number) : void
      {
         var GSPEED:Number = param1;
         if(this.HIT_SOUNDS)
         {
            // hit_last_target = null;
            if(this.hit_frags_timer > 0)
            {
               this.hit_frags_timer -= GSPEED;
            }
            else if(this.hit_frags.length > 0)
            {
               this.hit_frags.shift();
               this.hit_frags_timer = 15;
               setTimeout(function():void
               {
                  PlaySound_full(s_hit_frag);
               },500);
            }
            if(this.hit_frame_damage > 0)
            {
               if(this.hit_frame_damage >= 100)
               {
                  this.PlaySound_full(this.s_hit_dmg3);
               }
               else if(this.hit_frame_damage >= 50)
               {
                  this.PlaySound_full(this.s_hit_dmg2);
               }
               else
               {
                  this.PlaySound_full(this.s_hit_dmg);
               }
               this.hit_frame_damage = 0;
            }
         }
      }
      
      public function SetAtomOriginalPosition(param1:int, param2:Number, param3:Number) : void
      {
         this.atom_first_position_corrections.push({
            "a":param1,
            "x":param2,
            "y":param3
         });
      }
      
      public function GetAtomOriginalPosition(param1:int) : Object
      {
         var _loc3_:Object = null;
         var _loc2_:int = 0;
         while(_loc2_ < this.atom_first_position_corrections.length)
         {
            if(this.atom_first_position_corrections[_loc2_].a == param1)
            {
               _loc3_ = this.atom_first_position_corrections[_loc2_];
               this.atom_first_position_corrections.splice(_loc2_,1);
               return _loc3_;
            }
            _loc2_++;
         }
         return null;
      }
      
      public function handleHpBeep(e:Event) : void
      {
         try
         {
            this.hpbeepch.removeEventListener(Event.SOUND_COMPLETE,this.handleHpBeep);
            if(currentLabel == "gaming")
            {
               if(this.system_non_stop)
               {
                  if(this.hpwarning)
                  {
                     if(!this.mens[this.MP_myid].dead)
                     {
                        if(Number(this.mens[this.MP_myid].hea) / Number(this.mens[this.MP_myid].hmax) < this.hp_warn_max)
                        {
                           if(!this.MP_spectator)
                           {
                              if(this.GLOBAL_REGEN_SPEED != 0)
                              {
                                 if(this.GLOBAL_REGEN_DELAY < 10)
                                 {
                                    this.hpbeepch = this.s_hp_warn.play(0,0,this.vol);
                                 }
                              }
                           }
                           this.hpbeepch.addEventListener(Event.SOUND_COMPLETE,this.handleHpBeep);
                        }
                        else
                        {
                           this.hpwarning = false;
                        }
                     }
                  }
               }
            }
         }
         catch(e:Error)
         {
         }
      }
      
      public function UpdateWeps() : void
      {
         this.upd_weps_i = 0;
         while(this.upd_weps_i <= 9)
         {
            this.slots[this.upd_weps_i].visible = false;
            this.upd_weps_i2 = 0;
            while(this.upd_weps_i2 < this.gunstotal && !this.slots[this.upd_weps_i].visible)
            {
               if(this.guns[this.upd_weps_i2].io)
               {
                  if(this.guns[this.upd_weps_i2].picken_by == this.MP_myid && !this.guns[this.upd_weps_i2].forcars)
                  {
                     if(this.guns[this.upd_weps_i2].wep == this.upd_weps_i)
                     {
                        this.slots[this.upd_weps_i].visible = true;
                        if(this.mens[this.MP_myid].curwea == this.upd_weps_i2)
                        {
                           this.slots[this.upd_weps_i].alpha = 1;
                           this.slots[this.upd_weps_i].gotoAndStop(1);
                        }
                        else
                        {
                           this.slots[this.upd_weps_i].alpha = 0.4;
                        }
                     }
                  }
               }
               ++this.upd_weps_i2;
            }
            if(this.upd_weps_i == 0)
            {
               this.slots[this.upd_weps_i].visible = true;
               if(this.mens[this.MP_myid].curwea == -1)
               {
                  this.slots[this.upd_weps_i].alpha = 1;
                  this.slots[this.upd_weps_i].gotoAndStop(1);
               }
               else
               {
                  this.slots[this.upd_weps_i].alpha = 0.4;
               }
            }
            if(this.slots[this.upd_weps_i].visible)
            {
               this.slots[this.upd_weps_i].txt.text = this.upd_weps_i;
            }
            if(this.slots[this.upd_weps_i].currentFrame == 2)
            {
               this.slots[this.upd_weps_i].alpha = 0.7;
            }
            ++this.upd_weps_i;
         }
         this.upd_weps_i = 10;
         if(this.PLAZMA_GAME)
         {
            if(!this.MP_mode)
            {
               this.upd_weps_i = 16;
               while(this.upd_weps_i <= 27)
               {
                  this.slots[this.upd_weps_i].visible = false;
                  ++this.upd_weps_i;
               }
               this.upd_weps_i = 10;
               this.upd_weps_i2 = 0;
               while(this.upd_weps_i2 < this.gunstotal)
               {
                  if(this.guns[this.upd_weps_i2].io)
                  {
                     if(this.guns[this.upd_weps_i2].model == "item_grenade")
                     {
                        if(this.guns[this.upd_weps_i2].picken_by == this.MP_myid && !this.guns[this.upd_weps_i2].forcars)
                        {
                           if(this.upd_weps_i <= 15)
                           {
                              this.slots[this.upd_weps_i].gotoAndStop(1);
                              ++this.upd_weps_i;
                           }
                        }
                     }
                  }
                  ++this.upd_weps_i2;
               }
               this.grenades_total = this.upd_weps_i - 10;
            }
            else
            {
               while(this.upd_weps_i <= 15 && this.upd_weps_i - 10 < this.grenades_total)
               {
                  this.slots[this.upd_weps_i].gotoAndStop(1);
                  ++this.upd_weps_i;
               }
               if(!this.MP_spectator)
               {
                  if(this.grenades_total > this.mxnds1 || this.grenades_port_total > this.mxnds2 || this.grenades_sh_total > this.mxnds3)
                  {
                     if(!this.firstframe)
                     {
                        this.stable = false;
                        this.unstable = 5;
                        this.unstable_m = this.CUR_SERVER_NAME + "." + this.MP_room_name + "." + this.MP_map_name + " :: " + this.grenades_total + ">" + this.mxnds1 + " || " + this.grenades_port_total + ">" + this.mxnds2 + " || " + this.grenades_sh_total + ">" + this.mxnds3;
                     }
                  }
                  if(this.MP_app)
                  {
                     if(this.mens[this.MP_myid].hea > 700 + Math.random() * 50)
                     {
                        this.stable = false;
                        this.unstable = 6;
                        this.unstable_m = this.CUR_SERVER_NAME + "." + this.MP_room_name + "." + this.MP_map_name + " :: " + this.mens[this.MP_myid].hea + "hp" + " :: " + this.mens[this.MP_myid].hmax + "hmax";
                     }
                     if(this.mens[this.MP_myid].hea > this.mens[this.MP_myid].hmax)
                     {
                        this.mens[this.MP_myid].hea = this.mens[this.MP_myid].hmax;
                     }
                  }
               }
            }
            this.upd_weps_i;
            while(this.upd_weps_i <= 15)
            {
               this.slots[this.upd_weps_i].gotoAndStop(2);
               ++this.upd_weps_i;
            }
            if(this.MP_mode)
            {
               this.upd_weps_i = 16;
               while(this.upd_weps_i <= 21 && this.upd_weps_i - 16 < this.grenades_port_total)
               {
                  this.slots[this.upd_weps_i].gotoAndStop(1);
                  ++this.upd_weps_i;
               }
               this.upd_weps_i = 16;
               while(this.upd_weps_i <= 21)
               {
                  this.slots[this.upd_weps_i].gotoAndStop(2);
                  ++this.upd_weps_i;
               }
               this.upd_weps_i = 22;
               while(this.upd_weps_i <= 27 && this.upd_weps_i - 22 < this.grenades_sh_total)
               {
                  this.slots[this.upd_weps_i].gotoAndStop(1);
                  ++this.upd_weps_i;
               }
               this.upd_weps_i = 22;
               while(this.upd_weps_i <= 27)
               {
                  this.slots[this.upd_weps_i].gotoAndStop(2);
                  ++this.upd_weps_i;
               }
            }
         }
         else
         {
            this.upd_weps_i = 10;
            while(this.upd_weps_i <= 27)
            {
               this.slots[this.upd_weps_i].visible = false;
               ++this.upd_weps_i;
            }
         }
         if(this.vehhp.visible)
         {
            this.weps.y = 41;
         }
         else
         {
            this.weps.y = 21;
         }
      }
      
      public function ExplodeShield(param1:int) : void
      {
         this.PlaySound(this.s_shnade_offline,this.shnades[param1].x,this.shnades[param1].y);
         this.Effect(this.shnades[param1].x,this.shnades[param1].y,6,0,0);
         var _loc2_:Number = 0;
         while(_loc2_ < Math.PI * 2)
         {
            this.Effect(this.shnades[param1].x + Math.sin(_loc2_) * Math.random() * 5,this.shnades[param1].y + Math.sin(_loc2_) * Math.random() * 5,8,Math.sin(_loc2_) * Math.random() * 15,Math.cos(_loc2_) * Math.random() * 15);
            _loc2_ += 0.25;
         }
      }
      
      public function CalcWepPriority(param1:MovieClip) : Number
      {
         this.cwp = 0;
         if(param1.picken_by != -1)
         {
            this.cwp_d = this.Dist2D(this.mens[param1.picken_by].x,this.mens[param1.picken_by].y,this.mens[param1.picken_by].tarx,this.mens[param1.picken_by].tary);
         }
         this.cwp += Number(param1.stat_power) * Number(param1.stat_count) / param1.totalFrames * 100;
         this.cwp += Number(param1.stat_power) * Number(param1.stat_count) * 6;
         this.cwp /= 2;
         this.cwp -= (param1.stat_averange + param1.av) * (param1.totalFrames / Number(param1.stat_count));
         if(param1.stat_class == 2)
         {
            this.cwp *= 1.1;
         }
         if(param1.stat_class == 1)
         {
            this.cwp *= 1.7;
         }
         if(param1.stat_class == 5)
         {
            this.cwp *= 1.8;
         }
         if(param1.stat_class == 4)
         {
            this.cwp *= 0.9;
         }
         if(param1.stat_class == 6)
         {
            this.cwp *= 1;
         }
         if(param1.stat_class == 7)
         {
            this.cwp = 0;
         }
         if(param1.currentFrame < param1.totalFrames - 10 && !param1.ready)
         {
            this.cwp *= 0.1;
         }
         if(param1.picken_by != -1)
         {
            if(this.mens[param1.picken_by].hunt == -1)
            {
               if(!param1.ready)
               {
                  this.cwp += 100;
               }
            }
            if(this.cwp_d < 130)
            {
               if(param1.stat_class == 1 || param1.stat_class == 5 || param1.stat_class == 4)
               {
                  this.cwp *= 0.4;
               }
            }
            if(80 / (param1.stat_averange + param1.av) > this.cwp_d || param1.stat_averange + param1.av == 0)
            {
               this.cwp *= 1.5;
            }
            if(90 / (param1.stat_averange + param1.av) > this.cwp_d || param1.stat_averange + param1.av == 0)
            {
               this.cwp *= 1.5;
            }
         }
         return this.cwp;
      }
      
      public function HealGunApplied(param1:int, param2:MovieClip, param3:Number = 1, param4:Boolean = false, param5:String = "gun_defibrillator") : void
      {
         var _loc6_:MovieClip = null;
         if(param3 < 0)
         {
            param3 = 0;
         }
         if(isNaN(param3))
         {
            param3 = 1;
         }
         if(this.MP_mode)
         {
            if(param2.idd == this.MP_myid)
            {
               if(param1 != this.MP_myid)
               {
                  if(this.mens[param1].isplayer)
                  {
                     if(this.mens[param1].hea <= 0)
                     {
                        if(this.mens[param1].team == param2.team)
                        {
                           this.ExpTrackMyHealing(this.mens[param1]);
                        }
                     }
                  }
               }
            }
         }
         if(!this.MP_mode || param1 == this.MP_myid || !this.mens[param1].isplayer || this.MP_favor_the_shooter)
         {
            if(this.mens[param1].team == param2.team)
            {
               if(this.mens[param1].hea <= 0 || this.mens[param1].dying && this.mens[param1].hea > 0 || param4)
               {
                  if(!this.mens[param1].dead || !this.MP_app || param1 != this.MP_myid || this.mens[param1].defih < 7 || Math.random() * (Number(this.mens[param1].defih) - 7) < 0.1)
                  {
                     if(this.mens[param1].dead)
                     {
                        if(this.MP_mode)
                        {
                           this.mens[param1].defih += 1;
                        }
                        this.mens[param1].effects.length = 0;
                     }
                     if(!this.mens[param1].brk_head)
                     {
                        if(!this.mens[param1].brk_body)
                        {
                           if(this.mens[param1].brk_legs)
                           {
                              if(this.mens[param1].hea < 5)
                              {
                                 this.mens[param1].hea = 10 * Math.max(1,param3);
                              }
                              else
                              {
                                 this.mens[param1].hea = Math.min(this.mens[param1].hea + 15 * param3,this.mens[param1].hmax / (param4 ? 1 : 2));
                              }
                              if(this.mens[param1].hea > 0)
                              {
                                 this.mens[param1].dead = false;
                                 this.MakeDying(this.mens[param1]);
                                 this.ChangedGun(param1);
                              }
                           }
                           else if(this.mens[param1].brk_arms)
                           {
                              if(this.mens[param1].hea < 5)
                              {
                                 this.mens[param1].hea = 10 * Math.max(1,param3);
                              }
                              else
                              {
                                 this.mens[param1].hea = Math.min(this.mens[param1].hea + 15 * param3,this.mens[param1].hmax / (param4 ? 1 : 2));
                              }
                              if(this.mens[param1].hea > 0)
                              {
                                 this.mens[param1].dead = false;
                                 this.MakeDying(this.mens[param1]);
                                 this.ChangedGun(param1);
                              }
                           }
                           else
                           {
                              if((_loc6_ = this.mens[param1]).dead)
                              {
                                 _loc6_.stability = 0.01;
                                 _loc6_.sit = 1;
                                 _loc6_.tox = this.atox[_loc6_.b_toe];
                                 _loc6_.toy = this.atoy[_loc6_.b_toe];
                                 _loc6_.x = this.ax[_loc6_.b_toe];
                                 _loc6_.y = this.ay[_loc6_.b_toe];
                              }
                              if(this.mens[param1].hea < 5)
                              {
                                 this.mens[param1].hea = 10 * Math.max(1,param3);
                              }
                              else
                              {
                                 this.mens[param1].hea = Math.max(Math.min(this.mens[param1].hea + 15 * param3,this.mens[param1].hmax / (param4 ? 1 : 2)),this.mens[param1].hea);
                              }
                              if(this.mens[param1].hea > 0)
                              {
                                 this.mens[param1].dead = false;
                                 this.mens[param1].dying = false;
                                 this.ChangedGun(param1);
                              }
                           }
                        }
                     }
                     if(Boolean(this.mens[param1].isplayer) || this.mens[param1].team == this.mens[this.MP_myid].team)
                     {
                        if(this.mens[param1].hea > 0)
                        {
                           if(this.ANONYMOUS_MODE)
                           {
                              if(param1 == this.MP_myid)
                              {
                                 this.mens[param1].gui.alpha = 1;
                                 this.mens[param1].gui.visible = true;
                              }
                           }
                           else
                           {
                              this.mens[param1].gui.alpha = 1;
                              this.mens[param1].gui.visible = true;
                           }
                           this.mens[param1].hunt = -1;
                        }
                     }
                  }
                  this.atoy[this.mens[param1].b_body] -= 8;
                  this.atoy[this.mens[param1].b_body] -= 4;
                  this.WakeUpAtom(this.mens[param1].b_body);
               }
            }
            else if(!this.mens[param1].dead)
            {
               this.mens[param1].hea -= 30 * param3;
               this.Hurt(param1);
               if(this.mens[param1].hea < 200)
               {
                  this.MakeDying(this.mens[param1]);
               }
               this.mens[param1].lastshot = "body";
               this.mens[param1].lastshotby = param2.idd;
               this.mens[param1].whenlastshot = getTimer();
               this.mens[param1].lastshotbygun = param5;
            }
         }
         if(this.MP_favor_the_shooter)
         {
            if(!this.MP_allow_client_side_kills)
            {
               if(!this.mens[param1].dead)
               {
                  this.mens[param1].hea = Math.max(10,this.mens[param1].hea);
               }
            }
            this.ApplyLoweredHP(this.mens[param1],this.mens[param1].hea,this.mens[param1].dying,this.mens[param1].hea);
         }
      }
      
      public function min_max(param1:Number, param2:Number, param3:Number) : Number
      {
         if(param2 < param1)
         {
            return param1;
         }
         if(param2 > param3)
         {
            return param3;
         }
         return param2;
      }
      
      public function zero_one(x:Number) : Number
      {
         if(x > 1)
         {
            return 1;
         }
         if(x < 0)
         {
            return 0;
         }
         return x;
      }
      
      public function difr(param1:Number, param2:Number, param3:Number) : Boolean
      {
         if(param1 > param2)
         {
            if(param1 - param2 < param3)
            {
               return true;
            }
         }
         if(param2 > param1)
         {
            if(param2 - param1 < param3)
            {
               return true;
            }
         }
         return false;
      }
      
      public function Math_abs(param1:Number) : Number
      {
         if(param1 < 0)
         {
            return -param1;
         }
         return param1;
      }
      
      public function Math_pow2(param1:Number) : Number
      {
         return param1 * param1;
      }
      
      public function get_fps() : void
      {
         this.fps_last = this.fps_now;
         this.fps_now = getTimer();
         this.fps_delta = this.fps_now - this.fps_last;
         this.GSPEED = (this.fps_delta / (1000 / this.MP_fps) + this.GSPEED * 3) / 4;
         this.GSPEED2 = (this.fps_delta / (1000 / this.MP_fps) + this.GSPEED2 * 3) / 4;
         this.WSPEED = (this.fps_delta / (1000 / 30) + this.WSPEED * 3) / 4;
         if(this.timeshift > 0 && this.ALLOW_TIMESHIFT)
         {
            this.GSPEED *= 0.25;
            this.GSPEED2 *= 0.5;
         }
         if(this.MP_mode || this.SP_unlimit_framerate)
         {
            if(this.GET_LITE_PHYS())
            {
               if(this.GSPEED > 4)
               {
                  this.GSPEED = 4;
               }
               if(this.GSPEED2 > 2)
               {
                  this.GSPEED2 = 2;
               }
            }
            else
            {
               if(this.GSPEED > 4)
               {
                  this.GSPEED = 4;
               }
               if(this.GSPEED2 > 2)
               {
                  this.GSPEED2 = 2;
               }
            }
         }
         else
         {
            if(this.GSPEED > 1.5)
            {
               this.GSPEED = 1.5;
            }
            if(this.GSPEED2 > 1.5)
            {
               this.GSPEED2 = 1.5;
            }
         }
         if(this.GSPEED < 0.01)
         {
            this.GSPEED = 0.01;
         }
         if(this.GSPEED2 < 0.01)
         {
            this.GSPEED2 = 0.01;
         }
         if(this.INLAG && this.MP_mode)
         {
            this.GSPEED2 *= 0.01;
         }
      }
      
      public function ForceRasterize(sprite:Sprite, signore:String="") : void
		{
			var bitmapData:BitmapData;
			var mtx:Matrix;
			var bitmap:Bitmap;
			var bounds:Rectangle = sprite.getBounds(sprite);
			var ignore:DisplayObject = null;
			if (signore != "") ignore = sprite.getChildByName(signore);
			if(bounds.width > 1 && bounds.height > 1 && bounds.width < 8191 && bounds.height < 8191 && bounds.width * bounds.height < 16777215)
			{
				var i = 0;
				bitmapData = new BitmapData(bounds.width, bounds.height, true, 0);
				(mtx = new Matrix()).translate(-bounds.x, -bounds.y);
				bitmapData.draw(sprite, mtx);
				while(sprite.numChildren > i)
				{
					if (ignore != null && sprite.getChildAt(i) == ignore) {
						 i++;
						 continue;
					}
					sprite.removeChildAt(i);
				}
				sprite.graphics.clear();
				if (false) {
					var byteArray:ByteArray = new ByteArray();

					bitmapData.encode(
						new Rectangle(0, 0, bounds.width, bounds.height),
						new flash.display.PNGEncoderOptions(),
						byteArray
					);
					//UploadRaster(byteArray);
				}

				(bitmap = new Bitmap(bitmapData)).x = bounds.x;
				bitmap.y = bounds.y;
				bitmap.name = "bmp";
				sprite.addChild(bitmap);
				bitmap.smoothing = this.HQ;
				sprite.cacheAsBitmap = true;
			}
		}
      
      public function link_surface(param1:DisplayObject, param2:int) : void
      {
         this.i7 = this.surf_lnk.length;
         this.surf_lnk[this.i7] = param1;
         this.surf_lnk_to[this.i7] = param2;
      }
      
      public function VerticalTrace(param1:Number, param2:Number) : Boolean
      {
         this.vtr_i2 = 0;
         while(this.vtr_i2 < this.boxestotal)
         {
            if(param1 >= this.boxx[this.vtr_i2])
            {
               if(param1 <= this.boxx[this.vtr_i2] + this.boxw[this.vtr_i2])
               {
                  if(param2 >= this.boxy[this.vtr_i2])
                  {
                     return false;
                  }
               }
            }
            ++this.vtr_i2;
         }
         this.vtr_i2 = 0;
         while(this.vtr_i2 < this.doorstotal)
         {
            if(param1 >= this.doors[this.vtr_i2].x)
            {
               if(param1 <= this.doors[this.vtr_i2].x + this.doors[this.vtr_i2].w)
               {
                  if(param2 >= this.doors[this.vtr_i2].y)
                  {
                     return false;
                  }
               }
            }
            ++this.vtr_i2;
         }
         this.vtr_i2 = 0;
         while(this.vtr_i2 < this.watertotal)
         {
            if(param1 >= this.wax[this.vtr_i2])
            {
               if(param1 <= this.wax[this.vtr_i2] + this.waw[this.vtr_i2])
               {
                  if(param2 >= this.way[this.vtr_i2])
                  {
                     if(this.wa_friction[this.vtr_i2])
                     {
                        return false;
                     }
                  }
               }
            }
            ++this.vtr_i2;
         }
         return true;
      }
      
      public function WaterTrace(param1:Number, param2:Number) : Boolean
      {
         this.i2 = 0;
         while(this.i2 < this.watertotal)
         {
            if(param1 >= this.wax[this.i2])
            {
               if(param1 <= this.wax[this.i2] + this.waw[this.i2])
               {
                  if(param2 >= this.way[this.i2])
                  {
                     if(param2 <= this.way[this.i2] + this.wah[this.i2])
                     {
                        if(this.wa_friction[this.i2])
                        {
                           return true;
                        }
                     }
                  }
               }
            }
            ++this.i2;
         }
         return false;
      }
      
      public function GenFlakes() : void
      {
         var _loc1_:Number = NaN;
         var _loc2_:Number = NaN;
         var _loc3_:Number = NaN;
         if(this.flakes_letitsnow && this.HQ && this.SUPER_COMPUTER)
         {
            this.flakes_total = 300;
            this.flakes = new Vector.<MovieClip>(this.flakes_total,true);
            this.i = 0;
            while(this.i < this.flakes_total)
            {
               _loc1_ = Math.random() * 200 - 70;
               if(_loc1_ < 0)
               {
                  this.flakes[this.i] = this.graphics_3d_front.addChild(new flake()) as MovieClip;
               }
               else
               {
                  this.flakes[this.i] = this.graphics_3d.addChildAt(new flake(),0) as MovieClip;
               }
               this.flakes[this.i]._x = Math.random() * (this.screenX + this.flakes_spreadout * 2) - this.game_x - this.flakes_spreadout;
               this.flakes[this.i]._y = Math.random() * (this.screenY + this.flakes_spreadout * 2) - this.game_y - this.flakes_spreadout;
               this.flakes[this.i]._z = _loc1_;
               _loc2_ = Math.random() * Math.PI * 2;
               _loc3_ = Math.random() * 30 - 10;
               this.flakes[this.i].origin.x = Math.sin(_loc2_) * _loc3_;
               this.flakes[this.i].origin.y = Math.cos(_loc2_) * _loc3_;
               this.flakes[this.i].origin.rotation = Math.random() * 360;
               this.flakes[this.i].rotation = Math.random() * 360;
               this.flakes[this.i].s_alpha = this.flakes[this.i].alpha = (1 - (130 - _loc1_) * 0.002) * 0.6;
               this.flakes[this.i].hit = !this.VerticalTrace(this.flakes[this.i]._x,this.flakes[this.i]._y);
               this.flakes[this.i].neverhit = false;
               if(_loc1_ > 100)
               {
                  this.flakes[this.i].neverhit = true;
                  this.flakes[this.i].hit = false;
                  this.flakes[this.i].alpha = this.flakes[this.i].s_alpha;
                  this.flakes[this.i].visible = true;
               }
               if(this.flakes[this.i].hit)
               {
                  this.flakes[this.i].alpha = 0;
                  this.flakes[this.i].visible = false;
               }
               else
               {
                  this.flakes[this.i].alpha = this.flakes[this.i].s_alpha;
                  this.flakes[this.i].visible = true;
               }
               this.flakes[this.i].tox = this.flakes[this.i].toy = this.gravity;
               this.flakes[this.i]._scale = Math.random() * 0.4 + 0.2;
               this.flakes[this.i]._z *= 0.002;
               this.NoMouse(this.flakes[this.i]);
               ++this.i;
            }
         }
         else
         {
            this.flakes_total = 0;
         }
      }
      
      public function ThinkOfFlakes() : void
      {
         this.i = 0;
         while(this.i < this.flakes_total)
         {
            if(this.flakes[this.i]._x > this.screenX - this.game_x + this.flakes_spreadout)
            {
               this.flakes[this.i]._x -= this.screenX + this.flakes_spreadout * 2;
               this.flakes[this.i]._y = Math.random() * (this.screenY + this.flakes_spreadout * 2) - this.game_y - this.flakes_spreadout;
               if(!this.VerticalTrace(this.flakes[this.i]._x,this.flakes[this.i]._y))
               {
                  this.flakes[this.i].hit = true;
               }
               else
               {
                  this.flakes[this.i].hit = false;
                  this.flakes[this.i].alpha = this.flakes[this.i].s_alpha;
                  this.flakes[this.i].visible = true;
               }
            }
            if(this.flakes[this.i]._x < -this.game_x - this.flakes_spreadout)
            {
               this.flakes[this.i]._x += this.screenX + this.flakes_spreadout * 2;
               this.flakes[this.i]._y = Math.random() * (this.screenY + this.flakes_spreadout * 2) - this.game_y - this.flakes_spreadout;
               if(!this.VerticalTrace(this.flakes[this.i]._x,this.flakes[this.i]._y))
               {
                  this.flakes[this.i].hit = true;
               }
               else
               {
                  this.flakes[this.i].hit = false;
                  this.flakes[this.i].alpha = this.flakes[this.i].s_alpha;
                  this.flakes[this.i].visible = true;
               }
            }
            if(this.flakes[this.i]._y > this.screenY - this.game_y + this.flakes_spreadout)
            {
               this.flakes[this.i]._y -= this.screenY + this.flakes_spreadout * 2;
               this.flakes[this.i].rotation = Math.random() * 360;
               this.flakes[this.i]._x = Math.random() * (this.screenX + this.flakes_spreadout * 2) - this.game_x - this.flakes_spreadout;
               if(!this.VerticalTrace(this.flakes[this.i]._x,this.flakes[this.i]._y))
               {
                  this.flakes[this.i].hit = true;
               }
               else
               {
                  this.flakes[this.i].hit = false;
                  this.flakes[this.i].alpha = this.flakes[this.i].s_alpha;
                  this.flakes[this.i].visible = true;
               }
            }
            if(this.flakes[this.i]._y < -this.game_y - this.flakes_spreadout)
            {
               this.flakes[this.i]._y += this.screenY + this.flakes_spreadout * 2;
               this.flakes[this.i]._x = Math.random() * (this.screenX + this.flakes_spreadout * 2) - this.game_x - this.flakes_spreadout;
               if(!this.VerticalTrace(this.flakes[this.i]._x,this.flakes[this.i]._y))
               {
                  this.flakes[this.i].hit = true;
               }
               else
               {
                  this.flakes[this.i].hit = false;
                  this.flakes[this.i].alpha = this.flakes[this.i].s_alpha;
                  this.flakes[this.i].visible = true;
               }
            }
            this.flakes[this.i]._x += Number(this.flakes[this.i].tox) * this.GSPEED;
            this.flakes[this.i]._y += Number(this.flakes[this.i].toy) * this.GSPEED;
            this.flakes[this.i].x = Number(this.flakes[this.i]._x) - (Number(this.flakes[this.i]._x) - this.hscreenX + this.game_x) * Number(this.flakes[this.i]._z);
            this.flakes[this.i].y = Number(this.flakes[this.i]._y) - (Number(this.flakes[this.i]._y) - this.hscreenY + this.game_y) * Number(this.flakes[this.i]._z);
            this.flakes[this.i].scaleX = this.flakes[this.i].scaleY = Number(this.flakes[this.i]._scale) * (1 - Number(this.flakes[this.i]._z));
            this.flakes[this.i].toy += this.gravity * 0.5 * this.GSPEED;
            this.flakes[this.i].tox *= Math.pow(0.8,this.GSPEED);
            this.flakes[this.i].toy *= Math.pow(0.8,this.GSPEED);
            this.flakes[this.i].rotation += Math.sin((this.flakes[this.i]._y + this.flakes[this.i]._x + this.flakes[this.i].rotation * 0.1) * 0.1 * Math.sin((Number(this.flakes[this.i]._y) * 0.1 + this.flakes[this.i]._x) * 0.001)) * 3 * this.GSPEED;
            if(!this.flakes[this.i].neverhit)
            {
               if(this.flakes[this.i].visible)
               {
                  if(this.flakes[this.i].hit)
                  {
                     if(this.flakes[this.i].alpha > 0)
                     {
                        this.flakes[this.i].alpha -= Math.max(0.01,0.05 * this.GSPEED);
                     }
                     else
                     {
                        this.flakes[this.i].visible = false;
                     }
                  }
                  else if(!this.TracePointNoRagdolls(this.flakes[this.i]._x,this.flakes[this.i]._y) || this.WaterTrace(this.flakes[this.i]._x,this.flakes[this.i]._y))
                  {
                     this.flakes[this.i].hit = true;
                  }
               }
            }
            ++this.i;
         }
      }
      
	  // x, y, type, scale1, scale2
      public function Effect(param1:Number, param2:Number, param3:int, param4:Number, param5:Number) : void
      {
         this.ok2 = false;
         if(param1 > -this.game_x / this.game_scale - 150 && param1 < -this.game_x / this.game_scale + this.screenX / this.game_scale + 150 && param2 > -this.game_y / this.game_scale - 150 && param2 < -this.game_y / this.game_scale + this.screenY / this.game_scale + 150)
         {
            this.ok2 = true;
         }
         if(this.ok2)
         {
            if(this.ef[this.nextef] != null)
            {
               if(this.game.contains(this.ef[this.nextef]))
               {
                  this.game.removeChild(this.ef[this.nextef]);
                  this.ef[this.nextef] = null;
               }
               else if(this.graphics_3d_front.contains(this.ef[this.nextef]))
               {
                  this.graphics_3d_front.removeChild(this.ef[this.nextef]);
                  this.ef[this.nextef] = null;
               }
            }
         }
         if(param3 == 0)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.game.addChild(new eff_blood());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 1;
               this.ef[this.nextef].float_frame = int(Math.random() * 10);
               this.ef[this.nextef].rotation = Math.random() * 360;
               if(this.effcolor >= 0)
               {
                  this.ef[this.nextef].transform.colorTransform = new ColorTransform(this.mens[this.effcolor].blood_red,this.mens[this.effcolor].blood_green,this.mens[this.effcolor].blood_blue,1,0,0,0,0);
               }
               else
               {
                  this.ef[this.nextef].transform.colorTransform = new ColorTransform(1.5,2,0,1,0,0,0,0);
               }
               if(!this.PLAZMA_GAME)
               {
                  this.ef[this.nextef].scaleX = 0.5;
                  this.ef[this.nextef].scaleY = 0.5;
               }
               //this.ef[this.nextef].gotoAndStop(1);
               this.ef[this.nextef].framespeed = 0.7;
            }
         }
         else if(param3 == 1)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.graphics_3d_front.addChild(new eff_iskra());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 0;
               this.ef[this.nextef].rotation = Math.random() * 360;
               param4 *= 1.25;
               this.ef[this.nextef].scaleX = this.ef[this.nextef].scaleY = Math.max(1,Math.min(param4,2));
               if(param4 < 1)
               {
                  this.ef[this.nextef].alpha = Math.max(0.5,param4);
               }
            }
            this.PAlert(param1,param2);
            this.PlaySound(this.s_fail_shot,param1,param2);
         }
         else if(param3 == 2)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.game.addChild(new eff_bubble());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 2;
               param1 += -10 + Math.random() * 20;
               param2 += -10 + Math.random() * 20;
            }
         }
         else if(param3 == 3)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.game.addChild(new eff_splash());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 0;
               if(this.Math_abs(param5) < 5)
               {
                  this.ef[this.nextef].rotation = -20 + Math.random() * 40;
               }
               if(Math.random() > 0.5)
               {
                  this.ef[this.nextef].scaleX = -1;
               }
               this.ef[this.nextef].scaleY = 1 + this.Math_abs(param5) * Math.random() * 0.1;
            }
            if(Math.random() < 0.333)
            {
               this.PlaySound(this.s_water_splash1,param1,param2);
            }
            else if(Math.random() < 0.5)
            {
               this.PlaySound(this.s_water_splash2,param1,param2);
            }
            else
            {
               this.PlaySound(this.s_water_splash3,param1,param2);
            }
         }
         else if(param3 == 4)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.graphics_3d_front.addChild(new explosion_fire());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 0;
               this.ef[this.nextef].scaleX = param4;
               this.ef[this.nextef].scaleY = param4;
               this.ef[this.nextef].rotation = Math.random() * 360;
               this.ef[this.nextef].framespeed = 2;
            }
         }
         else if(param3 == 5)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.graphics_3d_front.addChild(new rail());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 0;
               this.ef[this.nextef].rotation = param4;
               param4 = 0;
            }
         }
         else if(param3 == 6)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.graphics_3d_front.addChild(new rail_target());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 0;
            }
         }
         else if(param3 == 7)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.graphics_3d_front.addChild(new eff_firespark());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 3;
            }
         }
         else if(param3 == 8)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.graphics_3d_front.addChild(new eff_metal());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 4;
               this.ef[this.nextef].rotation = Math.random() * 360;
               this.ef[this.nextef].gotoAndPlay(1);
            }
         }
         else if(param3 != 9)
         {
            if(param3 == 10)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.game.addChild(new eff_blood_sprite());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 5;
                  this.ef[this.nextef].rotation = Math.random() * 360;
                  //this.ef[this.nextef].gotoAndStop(1);
                  this.ef[this.nextef].float_frame = 1;
                  this.ef[this.nextef].framespeed = 0.7;
                  if(this.effcolor >= 0)
                  {
                     this.ef[this.nextef].transform.colorTransform = new ColorTransform(this.mens[this.effcolor].blood_red,this.mens[this.effcolor].blood_green,this.mens[this.effcolor].blood_blue,1,0,0,0,0);
                  }
                  else
                  {
                     this.ef[this.nextef].transform.colorTransform = new ColorTransform(1.5,2,0,1,0,0,0,0);
                  }
                  if(!this.PLAZMA_GAME)
                  {
                     this.ef[this.nextef].scaleX = 0.5;
                     this.ef[this.nextef].scaleY = 0.5;
                  }
               }
            }
            else if(param3 == 11)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new explosion_bfg());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].scaleX = param4;
                  this.ef[this.nextef].scaleY = param4;
                  this.ef[this.nextef].rotation = Math.random() * 360;
                  this.ef[this.nextef].framespeed = 2;
               }
            }
            else if(param3 == 12)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.game.addChild(new eff_wood_debris());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 1;
                  this.ef[this.nextef].gotoAndPlay(1);
                  this.ef[this.nextef].picc.gotoAndStop(int(Math.random() * 2.99) + 1);
                  this.ef[this.nextef].rotation = Math.random() * 360;
                  param4 *= 16;
                  param5 *= 16;
               }
            }
            else if(param3 == 13)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new eff_cinetic());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].rotation = Math.random() * 360;
               }
            }
            else if(param3 == 14)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new eff_teleport());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
               }
               if(param4 == 0)
               {
                  this.PlaySound(this.s_teleport,param1,param2);
               }
            }
            else if(param3 == 15)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new explosion_underwater());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].scaleX = param4;
                  this.ef[this.nextef].scaleY = param4;
               }
            }
            else if(param3 == 16)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new explosion_plasma());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].scaleX = param4;
                  this.ef[this.nextef].scaleY = param4;
                  this.ef[this.nextef].rotation = Math.random() * 360;
                  this.ef[this.nextef].framespeed = 2;
               }
            }
            else if(param3 == 17)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new rail2());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].rotation = param4;
                  param4 = 0;
               }
            }
            else if(param3 == 18)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new explosion_plasma_bar());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].scaleX = param4;
                  this.ef[this.nextef].scaleY = param4;
                  this.ef[this.nextef].rotation = Math.random() * 360;
                  this.ef[this.nextef].framespeed = 2;
               }
            }
            else if(param3 == 19)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new altblood());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].scaleY = this.ef[this.nextef].scaleX = Math.sqrt(param4 * param4 + param5 * param5) * 0.05;
                  this.ef[this.nextef].typ = 0;
               }
            }
            else if(param3 == 20)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.game.addChild(new eff_text_message());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 6;
                  this.ef[this.nextef].msgtext.text = this.str;
                  this.xx = this.ef[this.nextef].msgtext.textWidth + 10;
                  this.ef[this.nextef].msgtext.x = -this.xx / 2;
                  this.ef[this.nextef].msgtext.width = this.xx;
                  this.ef[this.nextef].strquad.x = this.ef[this.nextef].msgtext.x;
                  this.ef[this.nextef].strquad.scaleX = this.xx / 100;
                  this.ef[this.nextef].attached = this.spawn_text_for;
                  if(this.mens[this.spawn_text_for].dead)
                  {
                     this.ef[this.nextef].msgtext.alpha = 0.5;
                  }
               }
            }
            else if(param3 == 21)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new rail3());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].rotation = param4;
                  param4 = 0;
               }
            }
            else if(param3 == 22)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new rail4());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].rotation = param4;
                  param4 = 0;
               }
            }
            else if(param3 == 23)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new rail5());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].rotation = param4;
                  param4 = 0;
               }
            }
            else if(param3 == 24)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new rail6());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].rotation = param4;
                  param4 = 0;
               }
            }
         }
         if(this.ok2)
         {
            this.ef[this.nextef].life = 0;
            this.ef[this.nextef].x_ = param1;
            this.ef[this.nextef].y_ = param2;
            if(this.ef[this.nextef].typ == 3)
            {
               this.ef[this.nextef].tox = param4;
               this.ef[this.nextef].toy = param5;
               this.ef[this.nextef].toang = 0;
            }
            else if(this.ef[this.nextef].typ == 1)
            {
               this.eftemp = Math.random() * 0.45 - 0.125;
               this.ef_xx = Math.random() * Math.PI * 2;
               this.ef_yy = Math.random() * 1.5;
               this.ef[this.nextef].tox = param4 * this.eftemp + Math.sin(this.ef_xx) * this.ef_yy;
               this.ef[this.nextef].toy = param5 * this.eftemp + Math.cos(this.ef_xx) * this.ef_yy - 0.5;
               if(Math.random() > 0.9)
               {
                  this.ef_xx = Math.random() * Math.PI * 2;
                  this.ef_yy = Math.random() * 4;
                  this.ef[this.nextef].tox += Math.sin(this.ef_xx) * this.ef_yy;
                  this.ef[this.nextef].toy += Math.cos(this.ef_xx) * this.ef_yy - 0.5;
               }
               this.ef[this.nextef].toang = Math.random() * 30 - 15;
            }
            else if(this.ef[this.nextef].typ == 4)
            {
               this.ef_xx = Math.random() * Math.PI * 2;
               this.ef_yy = Math.random() * 4;
               this.ef[this.nextef].tox = param4 + Math.sin(this.ef_xx) * this.ef_yy;
               this.ef[this.nextef].toy = param5 + Math.cos(this.ef_xx) * this.ef_yy - 2;
            }
            else if(this.ef[this.nextef].typ == 5)
            {
               this.ef_xx = Math.random() * Math.PI * 2;
               this.ef_yy = Math.random() * 1.5;
               this.eftemp = Math.random() * 0.45 - 0.2;
               this.ef[this.nextef].tox = param4 * this.eftemp + Math.sin(this.ef_xx) * this.ef_yy;
               this.ef[this.nextef].toy = param5 * this.eftemp + Math.cos(this.ef_xx) * this.ef_yy - 0.5;
               if(Math.random() > 0.9)
               {
                  this.ef_xx = Math.random() * Math.PI * 2;
                  this.ef_yy = Math.random() * 4;
                  this.ef[this.nextef].tox += Math.sin(this.ef_xx) * this.ef_yy;
                  this.ef[this.nextef].toy += Math.cos(this.ef_xx) * this.ef_yy - 0.5;
               }
            }
            ++this.nextef;
            if(this.nextef >= this.maxef)
            {
               this.nextef = 0;
            }
         }
      }
      
      public function FlowAt(param1:Number, param2:Number, param3:int, param4:Number, param5:Number, param6:Number) : void
      {
         if(param6 > 100)
         {
            param6 = 100;
         }
         if(this.VIOLENCE)
         {
            if(this.game_scale < 1)
            {
               param6 = Math.max(param6 * this.game_scale,1);
            }
            while(param6 > 0)
            {
               if(this.effcolor >= 0 && (param6 > 1 && this.mens[this.effcolor].armored != 0 && (this.mens[this.effcolor].armored == 2 || this.mens[this.effcolor].armored == 1 && Math.random() > 0.5) || this.mens[this.effcolor].armored == 2))
               {
                  this.Effect(param1,param2,8,-param4 * 0.05,-param5 * 0.05);
               }
               else
               {
				  if(!this.MODERATE_VIOLENCE) {
					  this.Effect(param1,param2,param3,param4,param5);
					  this.Effect(param1,param2,param3,param4,param5);
					  this.Effect(param1,param2,param3,param4,param5);
				  }
                  this.Effect(param1,param2,10,param4,param5);
               }
               param6--;
            }
         }
         else
         {
            this.Effect(param1,param2,19,param4,param5);
         }
      }
      
      public function nextpul() : void
      {
		 //this.ForceRasterize(this.puls[this.pulscur]);
         ++this.pulscur;
         if(this.pulscur > this.pulsmax)
         {
            this.pulscur = 0;
         }
         this.nextpulf = true;
         this.nextpuli = 0;
         while(this.nextpuli <= this.pulsmax)
         {
            if((this.puls[this.pulscur] == null || !this.game.contains(this.puls[this.pulscur])) && (this.puls[this.pulscur] == null || !this.graphics_3d_front.contains(this.puls[this.pulscur])))
            {
               this.nextpulf = false;
               break;
            }
            if(this.puls[this.pulscur].visible == false)
            {
               if(this.game.contains(this.puls[this.pulscur]))
               {
                  this.game.removeChild(this.puls[this.pulscur]);
               }
               if(this.graphics_3d_front.contains(this.puls[this.pulscur]))
               {
                  this.graphics_3d_front.removeChild(this.puls[this.pulscur]);
               }
               this.puls[this.pulscur] = null;
               this.nextpulf = false;
               break;
            }
            ++this.pulscur;
            if(this.pulscur > this.pulsmax)
            {
               this.pulscur = 0;
            }
            ++this.nextpuli;
         }
         if(this.nextpulf)
         {
            ++this.pulsmax;
            this.pulscur = this.pulsmax;
         }
      }
      
      public function nextsh() : void
      {
         if(this.shnades_next == this.shnades_total)
         {
            ++this.shnades_total;
            this.shnades_next = this.shnades_total;
         }
         this.nextsh_i2 = 0;
         while(this.nextsh_i2 < this.shnades_total)
         {
            if(this.shnades[this.nextsh_i2].io == false)
            {
               this.shnades_next = this.nextsh_i2;
               break;
            }
            ++this.nextsh_i2;
         }
      }
      
      public function Say(param1:MovieClip, param2:*, param3:Boolean = false) : void
      {
         var _loc5_:* = undefined;
         var _loc4_:* = getTimer();
		 if(this.NONMUTE && this.FX_VOLUME != 0 && !this.LESS_NOISE) {
			 if(param3 || _loc4_ > (param1.last_say_sound || 0) + 500)
			 {
				param1.last_say_sound = _loc4_;
				if(param1.voice_channel != null)
				{
				   param1.voice_channel.stop();
				}
				param1.voice_channel = param2.play();
				if(param1.voice_channel != null)
				{
				   this.smod = this.dist_to_face / this.Dist3Dm(param1.x * this.game_scale + this.game_x - 400 - 300,param1.y * this.game_scale + this.game_y - 200,this.dist_to_face);
				   this.smod2 = this.dist_to_face / this.Dist3Dm(param1.x * this.game_scale + this.game_x - 400 + 300,param1.y * this.game_scale + this.game_y - 200,this.dist_to_face);
				   if(param2.custom_volume == undefined)
				   {
					  param2.custom_volume = 1;
				   }
				   (_loc5_ = new SoundTransform(this.FX_VOLUME * Number(param2.custom_volume))).leftToLeft = this.smod2;
				   _loc5_.leftToRight = 0;
				   _loc5_.rightToRight = this.smod;
				   _loc5_.rightToLeft = 0;
				   param1.voice_channel.soundTransform = _loc5_;
				}
				return;
			 }
		 }
      }
      
      public function SimHitSound(param1:MovieClip, param2:Number, param3:Number, param4:int) : void
      {
         if(param4 != 2)
         {
            if(param1.armored == 2)
            {
               this.PlaySound(this.s_metal_hit,param2,param3);
            }
            else if(param4)
            {
               this.PlaySound(this.s_blood_hit_sword,param2,param3);
            }
            else
            {
               this.PlaySound(this.s_blood_hit,param2,param3);
            }
         }
      }
      
      public function Dist2D(param1:Number, param2:Number, param3:Number, param4:Number) : Number
      {
         return Math.sqrt(this.Math_pow2(param1 - param3) + this.Math_pow2(param2 - param4));
      }
      
      public function VectorDist2D(param1:Number, param2:Number) : Number
      {
         return Math.sqrt(param1 * param1 + param2 * param2);
      }
      
      public function CreatePoint(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:Boolean, param7:int, param8:int) : Number
      {
         var _loc9_:int = 0;
         this.cr_i4 = this.atotal;
         this.i5 = 0;
         while(this.i5 < this.atotal)
         {
            if(this.aio[this.i5] == -1)
            {
               this.cr_i4 = this.i5;
               _loc9_ = 0;
               while(_loc9_ < this.chtotal)
               {
                  if(this.chP[_loc9_] == this.i5 || this.chC[_loc9_] == this.i5)
                  {
                     this.chio[_loc9_] = -1;
                  }
                  _loc9_++;
               }
               break;
            }
            ++this.i5;
         }
         this.ax[this.cr_i4] = new Number(param1);
         this.ay[this.cr_i4] = new Number(param2);
         this.lax[this.cr_i4] = new Number(param1);
         this.lay[this.cr_i4] = new Number(param2);
         this.atox[this.cr_i4] = new Number(param3);
         this.atoy[this.cr_i4] = new Number(param4);
         this.aio[this.cr_i4] = true;
         this.amat[this.cr_i4] = new int(param7);
         this.arad[this.cr_i4] = new Number(param5);
         this.around[this.cr_i4] = new Boolean(param6);
         this.aof[this.cr_i4] = new int(param8);
         this.ablood[this.cr_i4] = new int(0);
         this.aactive[this.aof[this.cr_i4]] = new Boolean(false);
         this.atim[this.cr_i4] = new int(0);
         this.ainwater[this.cr_i4] = new Boolean(false);
         this.ainwater_shape[this.cr_i4] = -1;
         this.crjoint_cycle = 0;
         while(this.crjoint_cycle < this.watertotal && !this.ainwater[this.cr_i4])
         {
            if(this.ax[this.cr_i4] > this.wax[this.crjoint_cycle])
            {
               if(this.ax[this.cr_i4] < this.wax[this.crjoint_cycle] + this.waw[this.crjoint_cycle])
               {
                  if(this.ay[this.cr_i4] > this.way[this.crjoint_cycle])
                  {
                     if(this.ay[this.cr_i4] < this.way[this.crjoint_cycle] + this.wah[this.crjoint_cycle])
                     {
                        this.ainwater[this.cr_i4] = true;
                        this.ainwater_shape[this.cr_i4] = this.cr_i4;
                     }
                  }
               }
            }
            ++this.crjoint_cycle;
         }
         if(this.cr_i4 == this.atotal)
         {
            ++this.atotal;
         }
         return this.cr_i4;
      }
      
      public function WakeUpAtom(param1:int, param2:Boolean = true) : void
      {
         if(this.aio[param1] != true && this.aio[param1] != false)
         {
         }
         this.aio[param1] = true;
         if(param2)
         {
            this.atim[param1] = 0;
         }
      }
      
      public function ForceAtomSleep(param1:int) : void
      {
         if(this.aio[param1] != true && this.aio[param1] != false)
         {
         }
         this.aio[param1] = false;
      }
      
      public function DisposeAtom(param1:int) : void
      {
         var _loc2_:int = 0;
         this.GetAtomOriginalPosition(param1);
         _loc2_ = 0;
         while(_loc2_ < this.MP_myspecials_total)
         {
            if(this.MP_myspecials[_loc2_] != undefined)
            {
               if(this.MP_myspecials[_loc2_] != null)
               {
                  if(this.MP_myspecials[_loc2_].atom == param1)
                  {
                     this.MP_myspecials[_loc2_].atom = -1;
                  }
               }
            }
            _loc2_++;
         }
         _loc2_ = 0;
         while(_loc2_ < this.MP_specials.length)
         {
            if(this.MP_specials[_loc2_] != undefined)
            {
               if(this.MP_specials[_loc2_] != null)
               {
                  if(this.MP_specials[_loc2_].atom == param1)
                  {
                     this.MP_specials[_loc2_].atom = -1;
                  }
               }
            }
            _loc2_++;
         }
         this.aio[param1] = -1;
      }
      
      public function Connect(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number) : Number
      {
         this.cr_i4 = this.chtotal;
         this.i5 = 0;
         while(this.i5 < this.chtotal && this.cr_i4 != this.chtotal)
         {
            if(this.chio[this.i5] == -1)
            {
               if(this.chP[this.i5] == -1 || this.chC[this.i5] == -1)
               {
                  this.cr_i4 = this.i5;
               }
            }
            ++this.i5;
         }
         this.chP[this.cr_i4] = new int(param1);
         this.chC[this.cr_i4] = new int(param2);
         if(param4 != -1)
         {
            this.chdef[this.cr_i4] = new Number(param4);
         }
         else
         {
            this.chdef[this.cr_i4] = new Number(this.Dist2D(this.ax[param1],this.ay[param1],this.ax[param2],this.ay[param2]));
         }
         if(param5 == -1)
         {
            this.chdamp[this.cr_i4] = new Number(1);
         }
         else
         {
            this.chdamp[this.cr_i4] = new Number(param5);
         }
         this.chtypa[this.cr_i4] = new int(param3);
         this.chio[this.cr_i4] = true;
         if(this.cr_i4 == this.chtotal)
         {
            ++this.chtotal;
         }
         return this.cr_i4;
      }
      
      public function ReConnect(param1:int, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number) : void
      {
         this.chP[param1] = param2;
         this.chC[param1] = param3;
         if(param5 != -1)
         {
            this.chdef[param1] = param5;
         }
         else
         {
            this.chdef[param1] = this.Dist2D(this.ax[param2],this.ay[param2],this.ax[param3],this.ay[param3]);
         }
         if(param6 == -1)
         {
            this.chdamp[param1] = 1;
         }
         else
         {
            this.chdamp[param1] = param6;
         }
         this.chtypa[param1] = param4;
         this.chio[param1] = true;
      }
      
      public function SetPlayerScale(param1:MovieClip, param2:Number) : void
      {
         var _loc3_:Number = NaN;
         if(param2 < 0.001)
         {
            param2 = 0.001;
         }
         _loc3_ = param2 / Number(param1.scale);
         param1.scale = param2;
         this.chdef[param1.ch_leg1_max] *= _loc3_;
         this.chdef[param1.ch_leg2_max] *= _loc3_;
         this.chdef[param1.ch_leg1_min] *= _loc3_;
         this.chdef[param1.ch_leg2_min] *= _loc3_;
         this.chdef[param1.ch_leg1_damp] *= _loc3_;
         this.chdef[param1.ch_leg2_damp] *= _loc3_;
         this.chdef[param1.ch_arm1_max] *= _loc3_;
         this.chdef[param1.ch_arm2_max] *= _loc3_;
         this.chdef[param1.ch_arm1_min] *= _loc3_;
         this.chdef[param1.ch_arm2_min] *= _loc3_;
         this.chdef[param1.ch_body] *= _loc3_;
         this.chdef[param1.ch_spine] *= _loc3_;
         this.chdef[param1.ch_shoulder] *= _loc3_;
         this.chdef[param1.ch_head] *= _loc3_;
         this.chdef[param1.ch_body_ang1] *= _loc3_;
         this.chdef[param1.ch_body_ang2] *= _loc3_;
         this.chdef[param1.ch_body_ang3] *= _loc3_;
         this.chdef[param1.ch_body_ang4] *= _loc3_;
         this.chdef[param1.ch_body_ang4b] *= _loc3_;
         this.chdef[param1.ch_body_ang5] *= _loc3_;
         this.arad[param1.b_toe] *= _loc3_;
         this.arad[param1.b_leg1] *= _loc3_;
         this.arad[param1.b_leg2] *= _loc3_;
         this.arad[param1.b_arm1] *= _loc3_;
         this.arad[param1.b_arm2] *= _loc3_;
         this.arad[param1.b_body] *= _loc3_;
         this.arad[param1.b_head_start] *= _loc3_;
         this.arad[param1.b_head_end] *= _loc3_;
         this.RedrawPsi(param1.idd);
      }
  
	  public function create_slots(param1:MovieClip,param2) : void
	  {
		 this.slots[param2] = param1;
		  
	  }
      
      public function create_player(param1:MovieClip, param2:Number, param3:Number) : void
      {
         this.mens[this.playerstotal] = param1;
         param1.idd = new int(this.playerstotal);
         param1.info = undefined;
         param1.exp_potential = 0.666;
         param1.side = new Number();
         if(Math.random() > 0.5)
         {
            param1.side = 1;
         }
         else
         {
            param1.side = -1;
         }
         param1.hea = new Number(param2);
         param1.hmax = new Number(param3);
         param1.real_hea = param1.hea;
         param1.last_shoot_chance = false;
         param1.boost = new int(0);
         param1.defih = new int(0);
         param1.antigravity = 0;
         param1.antigravity_radius = 200;
         param1.can_be_hit = true;
         param1.can_drop_guns = true;
         param1.isGhost = false;
         param1.voice = this.voices.usurpation;
         param1.jump_scale = 1;
         param1.scale = 1;
         param1.sword_spam_strength = 1;
         if(!this.FORCE_CUSTOM_MAP)
         {
            if(!this.MP_mode)
            {
               if(this.PRO_BOTS)
               {
                  if(!param1.isplayer)
                  {
                     if(param1.hmax > 0)
                     {
                        if(param1.hmax < 300)
                        {
                           if(param1.hea > 0)
                           {
                              param1.hea = (param1.hea + 300) / 2;
                           }
                           param1.hmax = (param1.hmax + 300) / 2;
                        }
                     }
                  }
               }
            }
         }
         param1.palette = new Array("-","-","-","-");
         param1.mp_controlled = new Boolean(false);
         param1.mp_packets = new int(-3);
         param1.mp_aliveping = new int(0);
         param1.mp_x = new Number(0);
         param1.mp_y = new Number(0);
         param1.mp_tox = new Number(0);
         param1.mp_toy = new Number(0);
         if(this.MP_favor_the_shooter && this.MP_mode)
         {
            param1.mp_shot_correct = undefined;
         }
         else
         {
            param1.mp_offset_x = Number(0);
            param1.mp_offset_y = Number(0);
         }
         param1.mp_must_shoot_once = undefined;
         param1.login_name = new String();
         param1.login_name = "";
         param1.last_contact = new int(0);
         param1.enemy_vis_tim = new int(0);
         param1.lastshot = new String();
         param1.lastshotby = new int(param1.idd);
         param1.whenlastshot = new int(0);
         param1.lastshotbygun = new String("nothing");
         param1.botaction = 0;
         param1.io = new Boolean(true);
         param1.deadtim = new int(0);
         if(!this.MP_mode)
         {
            if(param1.isplayer)
            {
               param1.hea = 800 / param3 * param2;
               param1.hmax = 800;
               param1.nick = ".:Eric Gurt:.";
               this.aactive[this.playerstotal] = true;
            }
            else
            {
               param1.nick = "Usurpation Soldier";
            }
         }
         param1.nick = this.MP_mode ? "Marine" : this.CMPG_name;
         param1.step_sound_phase = new int(0);
         param1.pressure = new int(0);
         param1.wep_pause = new int(0);
         param1.voice_channel = new SoundChannel();
         param1.idle_phase = new Number(0);
         param1.moving_speed = new Number(0);
         param1.stand = new Boolean(false);
         param1.sit = new Number(0);
         param1.tox = new Number(0);
         param1.toy = new Number(0);
         param1.armored = new int(0);
         param1.melee_ani = new Number(0);
         param1.melee_tim = new Number(0);
         param1.tarx = new Number(0);
         param1.tary = new Number(0);
         param1.regentim = new int(0);
         param1.hunt = new int(-1);
         param1.mobility = new Number(1);
         param1.team = new int(0);
         param1.rand = new Number(Math.random());
         param1.rand2 = new Number(Math.random());
         param1.rand3 = new Number(Math.random());
         param1.randtim = new Number(0);
         param1.act_fire = new Boolean(false);
         param1.act_movex = new int(0);
         param1.act_movey = new int(0);
         param1.ltox = new Number(0);
         param1.ltoy = new Number(0);
         param1.ang = new Number(0);
         param1.incar = new int(-1);
         param1.stability = new Number(1);
         param1.curwea = new int(-1);
         param1.waiting = 0;
         param1.inwater = new Boolean(false);
         param1.dead = new Boolean(false);
         param1.blood_red = new Number(1);
         param1.blood_green = new Number(0);
         param1.blood_blue = new Number(0);
         param1.ping = new int(0);
         param1.hp_head = new Number(Math.max(Number(param1.hea) * 0.4,30));
         param1.hp_body = new Number(Math.max(Number(param1.hea) * 0.6,30));
         param1.hp_legs = new Number(Math.max(Number(param1.hea) * 0.5,30));
         param1.hp_arms = new Number(Math.max(Number(param1.hea) * 0.4,30));
         param1.brk_head = new Boolean(false);
         param1.brk_body = new Boolean(false);
         param1.brk_legs = new Boolean(false);
         param1.brk_arms = new Boolean(false);
         param1.dying = new Boolean(false);
         param1.notspawned = new Boolean(true);
         param1.notseen = new Boolean(true);
         param1.b_toe = new int(this.CreatePoint(param1.x,param1.y - 31 - 3,0,0,7,false,1,this.playerstotal));
         param1.b_leg1 = new int(this.CreatePoint(param1.x - 5,param1.y - 3,0,0,6,false,0,this.playerstotal));
         param1.b_leg2 = new int(this.CreatePoint(param1.x + 5,param1.y - 3,0,0,6,false,0,this.playerstotal));
         param1.b_arm1 = new int(this.CreatePoint(param1.x - 5,param1.y - 31 - 3 - 23 + 30,0,0,3,false,-1,this.playerstotal));
         param1.b_arm2 = new int(this.CreatePoint(param1.x + 5,param1.y - 31 - 3 - 23 + 30,0,0,3,false,-1,this.playerstotal));
         param1.b_body = new int(this.CreatePoint(param1.x,param1.y - 31 - 3 - 23,0,0,8,false,1,this.playerstotal));
         param1.b_brk1 = param1.b_body;
         param1.b_brk2 = param1.b_body;
         param1.b_head_start = new int(this.CreatePoint(param1.x,param1.y - 31 - 3 - 25 - 4,0,0,8,false,-1,this.playerstotal));
         param1.b_head_end = new int(this.CreatePoint(param1.x,param1.y - 31 - 3 - 25 - 4 - 9,0,0,8,false,1,this.playerstotal));
         param1.ch_leg1_max = new int(this.Connect(param1.b_toe,param1.b_leg1,2,31,-1));
         param1.ch_leg2_max = new int(this.Connect(param1.b_toe,param1.b_leg2,2,31,-1));
         param1.ch_leg1_min = new int(this.Connect(param1.b_toe,param1.b_leg1,1,20,-1));
         param1.ch_leg2_min = new int(this.Connect(param1.b_toe,param1.b_leg2,1,20,-1));
         param1.ch_leg1_damp = new int(this.Connect(param1.b_toe,param1.b_leg1,0,29,0.1));
         param1.ch_leg2_damp = new int(this.Connect(param1.b_toe,param1.b_leg2,0,29,0.1));
         param1.ch_arm1_max = new int(this.Connect(param1.b_body,param1.b_arm1,2,30,-1));
         param1.ch_arm2_max = new int(this.Connect(param1.b_body,param1.b_arm2,2,30,-1));
         param1.ch_arm1_min = new int(this.Connect(param1.b_body,param1.b_arm1,1,15,-1));
         param1.ch_arm2_min = new int(this.Connect(param1.b_body,param1.b_arm2,1,15,-1));
         param1.ch_body = new int(this.Connect(param1.b_toe,param1.b_body,0,this.normal_spine_length,-1));
         param1.ch_spine = new int(this.Connect(param1.b_toe,param1.b_head_start,0,this.normal_spine_length + this.normal_shoulder_length,-1));
         param1.ch_shoulder = new int(this.Connect(param1.b_body,param1.b_head_start,0,this.normal_shoulder_length,-1));
         param1.ch_head = new int(this.Connect(param1.b_head_start,param1.b_head_end,0,9,-1));
         param1.ch_body_ang1 = new int(this.Connect(param1.b_body,param1.b_leg1,1,50,-1));
         param1.ch_body_ang2 = new int(this.Connect(param1.b_body,param1.b_leg2,1,50,-1));
         param1.ch_body_ang3 = new int(this.Connect(param1.b_leg1,param1.b_leg2,1,5,0.4));
         param1.ch_body_ang4 = new int(this.Connect(param1.b_leg1,param1.b_leg2,2,30,-1));
         param1.ch_body_ang4b = new int(this.Connect(param1.b_leg1,param1.b_leg2,2,30,0.4));
         param1.ch_body_ang5 = new int(this.Connect(param1.b_toe,param1.b_head_end,1,36,-1));
		 //param1.gotoAndStop(1);
         param1.toe.bloddy.visible = false;
         param1.mdl_leg1_upper = new int(1);
         param1.mdl_leg1_middle = new int(1);
         param1.mdl_leg1_lower = new int(1);
         param1.mdl_leg2_upper = new int(1);
         param1.mdl_leg2_middle = new int(1);
         param1.mdl_leg2_lower = new int(1);
         param1.mdl_arm1_upper = new int(1);
         param1.mdl_arm1_lower = new int(1);
         param1.mdl_arm2_upper = new int(1);
         param1.mdl_arm2_lower = new int(1);
         param1.mdl_toe = new int(1);
         param1.mdl_body = new int(1);
         param1.mdl_head = new int(1);
         param1.armored = 1;
         param1.mdl_leg1_upper = 1;
         param1.mdl_leg1_middle = 1;
         param1.mdl_leg1_lower = 1;
         param1.mdl_leg2_upper = 1;
         param1.mdl_leg2_middle = 1;
         param1.mdl_leg2_lower = 1;
         param1.mdl_arm1_upper = 1;
         param1.mdl_arm1_lower = 1;
         param1.mdl_arm2_upper = 1;
         param1.mdl_arm2_lower = 1;
         param1.mdl_toe = 1;
         param1.mdl_body = 1;
         param1.mdl_head = 1;
         /*this.AskForCache(param1.head);
         this.AskForCache(param1.arm1);
         this.AskForCache(param1.arm2);
         this.AskForCache(param1.leg1);
         this.AskForCache(param1.leg2);
         this.AskForCache(param1.body);
         this.AskForCache(param1.toe);*/
         if(param1.hea <= 0)
         {
            param1.dead = true;
         }
         param1.effects = new Vector.<Object>();
         param1.gui.txt2.visible = false;
         this.RedrawPsi(this.playerstotal);
         ++this.playerstotal;
      }
      
      public function create_gun(param1:MovieClip) : void
      {
      }
      
      public function DestroyGun(param1:*) : void
      {
         var _loc2_:* = undefined;
         _loc2_ = this.guns[param1];
         _loc2_.io = false;
         _loc2_.visible = false;
         this.aactive[-1 - param1] = false;
         this.DisposeAtom(_loc2_.b_p1);
         this.DisposeAtom(_loc2_.b_p2);
         _loc2_.x = -10000;
         _loc2_.y = -10000;
         _loc2_.scaleX = 0;
         _loc2_.scaleY = 0;
         this.game.removeChild(_loc2_);
         this.guns[param1] = new Object();
         this.guns[param1].io = false;
      }
      
      public function GunModelToGunName(param1:String) : String
      {
         var _loc2_:String = null;
         _loc2_ = "";
         switch(param1)
         {
            case "gun_rifle":
               _loc2_ = "Assault Rifle C-01r";
               break;
            case "gun_rifle_b":
               _loc2_ = "Assault Rifle C-01r";
               break;
            case "gun_pistol":
               _loc2_ = "Pistol C-01p";
               break;
            case "gun_pistol_b":
               _loc2_ = "Pistol C-01p";
               break;
            case "gun_pistol2":
               _loc2_ = "Pistol CS-Pro";
               break;
            case "gun_vehgun":
               _loc2_ = "";
               break;
            case "gun_gl":
               _loc2_ = "Grenade Launcher CS-SpamThemBaby";
               break;
            case "gun_sp_sh":
               _loc2_ = "Portable Shield v07 CS-Quarium";
               break;
            case "gun_rl":
               _loc2_ = "Rocket Launcher CS-LitBro";
               break;
            case "gun_rl0":
               _loc2_ = "Not A Rocket Launcher";
               break;
            case "gun_railgun":
               _loc2_ = "Lite Railgun v01 CS-HShot";
               break;
            case "gun_railgun2":
               _loc2_ = "Heavy Railgun v04 CS-OneSOneK";
               break;
            case "gun_sniper":
               _loc2_ = "Sniper Rifle CS-YippeeKiYay";
               break;
            case "gun_shotgun":
               _loc2_ = "Shotgun C-01s";
               break;
            case "gun_shotgun_b":
               _loc2_ = "Shotgun C-01s";
               break;
            case "gun_apistol":
               _loc2_ = "Alien Pistol";
               break;
            case "gun_arifle":
               _loc2_ = "Alien Rifle";
               break;
            case "gun_arifle2":
               _loc2_ = "Alien Shotgun";
               break;
            case "gun_vehcannon":
               _loc2_ = "";
               break;
            case "gun_minigun":
               _loc2_ = "Minigun C-02m";
               break;
            case "gun_defibrillator":
               _loc2_ = "Defibrillator";
               break;
            case "gun_bfg":
               _loc2_ = "CS-BNG";
               break;
            case "gun_raygun":
               _loc2_ = "Ray Gun C-01y";
               break;
            case "gun_vehminigun":
               _loc2_ = "";
               break;
            case "gun_vehminigl":
               _loc2_ = "";
               break;
            case "gun_real_shotgun":
               _loc2_ = "Shotgun CS-DAZ";
               break;
            case "gun_real_rifle":
               _loc2_ = "Assault Rifle CS-RC";
               break;
            case "gun_oicw":
               _loc2_ = "Combat Rifle CS-OICW";
               break;
            case "gun_plasmagun":
               _loc2_ = "Plasmagun CS-Bloom";
               break;
            case "item_grenade":
               _loc2_ = "Grenade C-00n";
               break;
            case "item_port":
               _loc2_ = "Teleport Grenade v03 CS-PortNade";
               break;
            case "item_shield":
               _loc2_ = "Portable Shield v07 CS-Quarium";
               break;
            case "gun_vgun":
               _loc2_ = "Drone Gun CS-Virus";
               break;
            case "gun_rayrifle":
               _loc2_ = "Ray Rifle TCoRR";
               break;
            case "gun_pixel_rifle":
               _loc2_ = "Star Defender Rifle";
               break;
            case "gun_pixel_rl":
               _loc2_ = "Star Defender Rocket Launcher";
               break;
            case "darkstar_1_assault_rifle":
               _loc2_ = "CP-Assault Rifle";
               break;
            case "darkstar_1_gauss_rifle":
               _loc2_ = "CS-GaussRifle";
               break;
            case "darkstar_1_minigun":
               _loc2_ = "Light Machine Gun CS-LMG";
               break;
            case "darkstar_1_phanx_rifle":
               _loc2_ = "PHANX-92 Falconet";
               break;
            case "darkstar_1_usniper":
               _loc2_ = "Alien Sniper Rifle";
               break;
            case "lostmydollar_av135":
               _loc2_ = "Assault Rifle AV-135";
               break;
            case "lostmydollar_needle":
               _loc2_ = "Needle";
               break;
            case "lostmydollar_qccv50":
               _loc2_ = "QCcV-50 Little Bastard";
               break;
            case "lostmydollar_rmk36":
               _loc2_ = "RMK-36";
               break;
            case "lostmydollar_rpg":
               _loc2_ = "RPG";
               break;
            case "lazyrain_alien_laser_rifle":
               _loc2_ = "Alien Laser Rifle";
               break;
            case "lazyrain_alien_laser_rifle2":
               _loc2_ = "Alien Heater Rifle";
               break;
            case "lazyrain_cannon":
               _loc2_ = "CS-Autocannon";
               break;
            case "lazyrain_cannon2":
               _loc2_ = "CS-Autocannon";
               break;
            case "moonhawk_phantom":
               _loc2_ = "Crossfire CR-45 Phantom";
               break;
            case "moonhawk_phantom2":
               _loc2_ = "Crossfire CR-45 Phantom";
               break;
            case "moonhawk_smg":
               _loc2_ = "Crossfire CR-42 Ghost";
               break;
            case "ditzy_energy_rifle":
               _loc2_ = "Energy Rifle";
               break;
            case "roxxar_marksman_rifle":
               _loc2_ = "Falkonian Marksman Rifle";
               break;
            case "roxxar_pistol":
               _loc2_ = "Falkonian Pistol";
               break;
            case "roxxar_rifle":
               _loc2_ = "Falkonian Shotgun";
               break;
            case "roxxar_shotgun":
               _loc2_ = "Falkonian Grenade Launcher";
               break;
            case "moonhawk_crossfire":
               _loc2_ = "Crossfire CR-145 Vortex";
               break;
            case "lazyrain_psi_cutter":
               _loc2_ = "Falkonian PSI Cutter";
               break;
            case "mrjaksnes_android_sniper":
               _loc2_ = "Android Sniper Rifle";
               break;
            case "incompetence_cr30":
               _loc2_ = "OEDA CR-30 Rifle";
               break;
            case "darkstar_1_cs_ragequit":
               _loc2_ = "Heavy Sniper Rifle RQ-10";
               break;
            case "gun_fttp_vehgun":
               _loc2_ = "";
               break;
            case "thetoppestkek_shotgun_nxs25":
               _loc2_ = "Shotgun NXS-25";
               break;
            case "incompetence_archetype_27xx":
               _loc2_ = "Archetype 27XX";
               break;
            case "phsc_aug":
               _loc2_ = "Marksman Rifle CS-RM";
               break;
            case "moonhawk_railgun":
               _loc2_ = "Crossfire CR-34 Marauder";
               break;
            case "moonhawk_railgun2":
               _loc2_ = "Crossfire CR-34 Marauder";
               break;
            case "lazyrain_heal_pistol":
               _loc2_ = "Medic Pistol";
               break;
            case "incompetence_glhf":
               _loc2_ = "Grenade Launcher CS-GLHF";
               break;
            case "incompetence_glhf2":
               _loc2_ = "OEDA EA-109H Launcher";
               break;
            case "lazyrain_gravy_rl":
               _loc2_ = "Falkonian Anti-Gravity Rocket Launcher";
               break;
            case "lazyrain_gravy_rl2":
               _loc2_ = "Falkonian Anti-Gravity Rocket Launcher";
               break;
            case "darkstar_1_owo_rl":
               _loc2_ = "Rocket Launcher CS-Barrage";
               break;
            case "phsc_plasma_shotgun":
               _loc2_ = "Plasma Shotgun";
               break;
            case "phsc_android_shotgun":
               _loc2_ = "Android Shotgun";
               break;
            case "ditzy_cs_ik":
               _loc2_ = "Assault Rifle CS-IK";
               break;
            case "ditzy_cs_ik2":
               _loc2_ = "Assault Rifle NXR-17C";
               break;
            case "phsc_ph01":
               _loc2_ = "Crossfire CR-54 Viper";
               break;
            case "phsc_ph01b":
               _loc2_ = "Crossfire CR-54 Viper";
               break;
            case "darkstar_1_railgun":
               _loc2_ = "PHANX-230 Cobra";
               break;
            case "darkstar_1_railgun2":
               _loc2_ = "Eos Toxic Railgun";
               break;
            case "darkstar_1_alien_rail_sg":
               _loc2_ = "Alien Rail Shotgun";
               break;
            case "darkstar_1_nade_c9":
               _loc2_ = "Grenade Launcher C-00t";
               break;
            case "darkstar_1_nade_c9b":
               _loc2_ = "Grenade Launcher C-00t";
               break;
            case "darkstar_1_rl":
               _loc2_ = "Eos Rocket Launcher";
               break;
            case "darkstar_1_bison":
               _loc2_ = "PHANX-150 Bison";
               break;
            case "darkstar_1_auto_sg":
               _loc2_ = "Eos Auto Shotgun";
               break;
            case "ditzy_focus_beam":
               _loc2_ = "Reakhohsha Focus Beam";
               break;
            case "boom5_revolver":
               _loc2_ = "Revolver MK1";
               break;
            case "thetoppestkek_scavenger_sg":
               _loc2_ = "Scavenger Shotgun";
               break;
            case "lazyrain_acid_gl":
               _loc2_ = "Alien Acid Grenade Launcher";
               break;
            case "lazyrain_plasma_smg":
               _loc2_ = "Alien Plasma Pistol";
               break;
            case "lazyrain_plasma_smg2":
               _loc2_ = "Alien Plasma Pistol";
               break;
            case "roxxar_android_railgun":
               _loc2_ = "Android Railgun";
               break;
            case "gun_invisgun":
               _loc2_ = "";
               break;
            case "gun_sharkgun":
               _loc2_ = "Shark";
               break;
            default:
               _loc2_ = param1;
         }
         return _loc2_;
      }
      
      public function MakeGunByClass(param1:String, param2:Object, param3:Boolean = false) : *
      {
         var _loc4_:* = undefined;
         _loc4_ = null;
         if(param1 == this.cet("gun_rifle","3ab1b74070fa59c099c5ecc86f207241",9))
         {
            _loc4_ = this.game.addChildAt(new gun_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_rifle_b","3f945cfa330d80f7f4aa9b21ad2f5a42",11))
         {
            _loc4_ = this.game.addChildAt(new gun_rifle_b(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_pistol","77a0571b536742840a0279e738440627",10))
         {
            _loc4_ = this.game.addChildAt(new gun_pistol(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_pistol_b","31eda441e17305c81c05b97e018cc634",12))
         {
            _loc4_ = this.game.addChildAt(new gun_pistol_b(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_shotgun","415ef8399b45ea3a1337fe00a95d810b",11))
         {
            _loc4_ = this.game.addChildAt(new gun_shotgun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_shotgun_b","5396d129da7ece2e91d0c6c8ecd84c50",13))
         {
            _loc4_ = this.game.addChildAt(new gun_shotgun_b(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_pistol2","370fa991726bf897be0087ac9309fca8",11))
         {
            _loc4_ = this.game.addChildAt(new gun_pistol2(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_vehgun","41233a38507aab43cdb2bd7dfc260322",10))
         {
            _loc4_ = this.game.addChildAt(new gun_vehgun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_gl","124e082fd5901eef18efe64ea1ec47bd",6))
         {
            _loc4_ = this.game.addChildAt(new gun_gl(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_sp_sh","b50ce24aaa1bd1fcb57052c5ef85683d",9))
         {
            _loc4_ = this.game.addChildAt(new gun_sp_sh(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_rl","ce16e5fb81fcf5895b8f0f82c2b61931",6))
         {
            _loc4_ = this.game.addChildAt(new gun_rl(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_rl0","887559a177d6a45e29b2c3ad11bd0ade",7))
         {
            _loc4_ = this.game.addChildAt(new gun_rl0(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_vgun","c9f01cd44cbf3c3bc382c936b1578da0",8))
         {
            _loc4_ = this.game.addChildAt(new gun_vgun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_railgun","34949cbb8775a6d7f0e87bccb1052c75",11))
         {
            _loc4_ = this.game.addChildAt(new gun_railgun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_railgun2","8cb1b5adde810239b95393e735ea8d98",12))
         {
            _loc4_ = this.game.addChildAt(new gun_railgun2(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_sniper","2a6ecb6af19b45dae8e269ac8c1fc29b",10))
         {
            _loc4_ = this.game.addChildAt(new gun_sniper(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_apistol","7ad54d59cd7e1f0023233b3a3e542f4f",11))
         {
            _loc4_ = this.game.addChildAt(new gun_apistol(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_arifle","f78f35befeb63a9b9f65d25be16a8d1c",10))
         {
            _loc4_ = this.game.addChildAt(new gun_arifle(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_arifle2","d4213d2caffd7466effab9df24d0f2a4",11))
         {
            _loc4_ = this.game.addChildAt(new gun_arifle2(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_vehcannon","fcecf3096d5987bf463c6ad8c0e194d5",13))
         {
            _loc4_ = this.game.addChildAt(new gun_vehcannon(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_minigun","15fd37cf16c85d4f926db7783a6e55ac",11))
         {
            _loc4_ = this.game.addChildAt(new gun_m4a1(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_m4a1","a28254d70ae03aec8e21338d5e0abe39",8))
         {
            _loc4_ = this.game.addChildAt(new m4a1_real(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_glock","aad841f699bdd36f5c97c0e3e4c21b09",9))
         {
            _loc4_ = this.game.addChildAt(new gun_pistol3(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_defibrillator","0e0da5f8e3ee8197a5b7abe55d66cc25",17))
         {
            _loc4_ = this.game.addChildAt(new gun_defibrillator(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_bfg","f519f24bf0eb33b05af7cc56cef4bcc7",7))
         {
            _loc4_ = this.game.addChildAt(new gun_bfg(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_raygun","93292a011b8bac193d0977d6cb6c702c",10) || param1 == this.cet("gun_plasmacannon","31ebeaa0c1211f780fa83462f9a2f2dd",16))
         {
            _loc4_ = this.game.addChildAt(new gun_plasmacannon(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_vehminigun","eb216db5c09bfdd2bad7bd957ebd9f47",14))
         {
            _loc4_ = this.game.addChildAt(new gun_vehminigun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_vehminigl","14b3627ac631c7d315b5443a7b6f0be2",13))
         {
            _loc4_ = this.game.addChildAt(new gun_vehminigl(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_real_shotgun","267a94133b231f1b61984bb67b85b4cd",16))
         {
            _loc4_ = this.game.addChildAt(new gun_real_shotgun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_real_rifle","afae2f386c07ad4806d5c292d09ce59a",14))
         {
            _loc4_ = this.game.addChildAt(new gun_real_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_oicw","e99f69bfc8208ba382780144cc489a82",8))
         {
            _loc4_ = this.game.addChildAt(new gun_oicw(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_plasmagun","1bc724fe18dd3764fbe5dd45a82d0ed4",13))
         {
            _loc4_ = this.game.addChildAt(new gun_plasmagun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_rayrifle","7a81778f835168b408427c6aa36b6966",12))
         {
            _loc4_ = this.game.addChildAt(new gun_rayrifle(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_pixel_rifle","61350cd52eb6e4f67a7b3c0ef5a1bd75",15))
         {
            _loc4_ = this.game.addChildAt(new gun_pixel_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_pixel_rl","210b531c94418c4d259e3df067333403",12))
         {
            _loc4_ = this.game.addChildAt(new gun_pixel_rl(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_assault_rifle","883dfb52e34801d3a872f94090da4663",24))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_assault_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_gauss_rifle","d608d955fee67229ba7631644a68fa68",22))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_gauss_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_minigun","ac2ed4c8fadacec88cecf9d286d509b4",18))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_minigun(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_phanx_rifle","a82d357e7fdfe4678d99d522aabbe7d2",22))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_phanx_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_usniper","44589fcd8475b6336e87e9e53cc5db6a",18))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_usniper(),this.game.numChildren);
         }
         if(param1 == this.cet("lostmydollar_av135","6352455ae32e8de36677477292f766b2",18))
         {
            _loc4_ = this.game.addChildAt(new lostmydollar_av135(),this.game.numChildren);
         }
         if(param1 == this.cet("lostmydollar_needle","c09467957a7ce187555405c6c3a20744",19))
         {
            _loc4_ = this.game.addChildAt(new lostmydollar_needle(),this.game.numChildren);
         }
         if(param1 == this.cet("lostmydollar_qccv50","b7f0280c66bee8c46181ff8af01434df",19))
         {
            _loc4_ = this.game.addChildAt(new lostmydollar_qccv50(),this.game.numChildren);
         }
         if(param1 == this.cet("lostmydollar_rmk36","139bbeb4281bf164ca40c2a646fb1564",18))
         {
            _loc4_ = this.game.addChildAt(new lostmydollar_rmk36(),this.game.numChildren);
         }
         if(param1 == this.cet("lostmydollar_rpg","abefe903f1d997bccdb7fcd7189c6821",16))
         {
            _loc4_ = this.game.addChildAt(new lostmydollar_rpg(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_alien_laser_rifle","bd84840f5216bedb3c64620286ef0765",26))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_alien_laser_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_alien_laser_rifle2","7f0e016ab35bfea35a25bb1eb20200fa",27))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_alien_laser_rifle2(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_cannon","6b47cf23fe203a1cad4baa64c7db691b",15))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_cannon(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_cannon2","955dba1fbaa28c772d0b84f7315730e1",16))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_cannon2(),this.game.numChildren);
         }
         if(param1 == this.cet("moonhawk_phantom","acafe3e12644f0e2a79105284532eba3",16))
         {
            _loc4_ = this.game.addChildAt(new moonhawk_phantom(),this.game.numChildren);
         }
         if(param1 == this.cet("moonhawk_phantom2","314eb5cf7b10885a388f29efd9939831",17))
         {
            _loc4_ = this.game.addChildAt(new moonhawk_phantom2(),this.game.numChildren);
         }
         if(param1 == this.cet("moonhawk_smg","c22f2fe867fba9509adef95961017f9b",12))
         {
            _loc4_ = this.game.addChildAt(new moonhawk_smg(),this.game.numChildren);
         }
         if(param1 == this.cet("ditzy_energy_rifle","a31ab37d1f8c0ab56d5df4856bc0db9a",18))
         {
            _loc4_ = this.game.addChildAt(new ditzy_energy_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("roxxar_marksman_rifle","02e22640317636a85a7b57b46d8cf3f1",21))
         {
            _loc4_ = this.game.addChildAt(new roxxar_marksman_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("roxxar_pistol","ff5e798f12118fe1dec68db7daea066c",13))
         {
            _loc4_ = this.game.addChildAt(new roxxar_pistol(),this.game.numChildren);
         }
         if(param1 == this.cet("roxxar_rifle","564c8fd9fdc7bccb8546a8afe5946186",12))
         {
            _loc4_ = this.game.addChildAt(new roxxar_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("roxxar_shotgun","37fc4e8062034b9f271ef19537ba6319",14))
         {
            _loc4_ = this.game.addChildAt(new roxxar_shotgun(),this.game.numChildren);
         }
         if(param1 == this.cet("moonhawk_crossfire","3f1490184df93075fb98eea637b0147a",18))
         {
            _loc4_ = this.game.addChildAt(new moonhawk_crossfire(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_psi_cutter","e1f32ece83521121555329752f1d2aa7",19))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_psi_cutter(),this.game.numChildren);
         }
         if(param1 == this.cet("mrjaksnes_android_sniper","bc746ceab1eafd3a5500977bcc274ddc",24))
         {
            _loc4_ = this.game.addChildAt(new mrjaksnes_android_sniper(),this.game.numChildren);
         }
         if(param1 == this.cet("incompetence_cr30","2914f2c70e6daf33cbda17cc1789b96c",17))
         {
            _loc4_ = this.game.addChildAt(new incompetence_cr30(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_cs_ragequit","7665f1f526ca36dabfb07749dc89ba71",22))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_cs_ragequit(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_fttp_vehgun","80b85947ede838d3491c395de3cf4fec",15))
         {
            _loc4_ = this.game.addChildAt(new gun_fttp_vehgun(),this.game.numChildren);
         }
         if(param1 == this.cet("thetoppestkek_shotgun_nxs25","3a6a668564dae34d58acfaa7db15af36",27))
         {
            _loc4_ = this.game.addChildAt(new thetoppestkek_shotgun_nxs25(),this.game.numChildren);
         }
         if(param1 == this.cet("incompetence_archetype_27xx","e3087cb8a659a11b0c25666294976065",27))
         {
            _loc4_ = this.game.addChildAt(new incompetence_archetype_27xx(),this.game.numChildren);
         }
         if(param1 == this.cet("phsc_aug","8a4d2bbb684e4f8560e865450cd840fa",8))
         {
            _loc4_ = this.game.addChildAt(new phsc_aug(),this.game.numChildren);
         }
         if(param1 == this.cet("moonhawk_railgun","c2bf02b21638567b034580a9361ab6a6",16))
         {
            _loc4_ = this.game.addChildAt(new moonhawk_railgun(),this.game.numChildren);
         }
         if(param1 == this.cet("moonhawk_railgun2","f53d3873a3915d7589e7cb64b2e1d407",17))
         {
            _loc4_ = this.game.addChildAt(new moonhawk_railgun2(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_heal_pistol","14438175b8408b9212ee7e4167fd08af",20))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_heal_pistol(),this.game.numChildren);
         }
         if(param1 == this.cet("incompetence_glhf","f05573fdf3c2e80e2998c3c9aeeb8b2e",17))
         {
            _loc4_ = this.game.addChildAt(new incompetence_glhf(),this.game.numChildren);
         }
         if(param1 == this.cet("incompetence_glhf2","7a6f929f68a5c6116d1574f6b0cd57a1",18))
         {
            _loc4_ = this.game.addChildAt(new incompetence_glhf2(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_gravy_rl","f2fd4b8951982ce268f97f8b493cb57c",17))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_gravy_rl(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_gravy_rl2","174ad817ac6f8558d287722ed7dfdcee",18))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_gravy_rl2(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_owo_rl","dff826a20c11d030e6516bf8e408e2ef",17))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_owo_rl(),this.game.numChildren);
         }
         if(param1 == this.cet("phsc_plasma_shotgun","8b39cea8e27609766704e99cb8a014f0",19))
         {
            _loc4_ = this.game.addChildAt(new phsc_plasma_shotgun(),this.game.numChildren);
         }
         if(param1 == this.cet("phsc_android_shotgun","6b28b474d23a25d4590f244cf8892b8a",20))
         {
            _loc4_ = this.game.addChildAt(new phsc_android_shotgun(),this.game.numChildren);
         }
         if(param1 == this.cet("ditzy_cs_ik","00e3d52637e6eb10e98a86e3cbc37565",11))
         {
            _loc4_ = this.game.addChildAt(new ditzy_cs_ik(),this.game.numChildren);
         }
         if(param1 == this.cet("ditzy_cs_ik2","6899bda7918b527c75eb85abe539eb97",12))
         {
            _loc4_ = this.game.addChildAt(new ditzy_cs_ik2(),this.game.numChildren);
         }
         if(param1 == this.cet("phsc_ph01","686c8f82ef423644217ef665ee2635bb",9))
         {
            _loc4_ = this.game.addChildAt(new phsc_ph01(),this.game.numChildren);
         }
         if(param1 == this.cet("phsc_ph01b","f9569d214797e01d29022ae09a331264",10))
         {
            _loc4_ = this.game.addChildAt(new phsc_ph01b(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_railgun","89bfb83e37b5b5bfb78de9deaf562578",18))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_railgun(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_railgun2","d84c5ce957c9b464e6ddf709b079e120",19))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_railgun2(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_alien_rail_sg","bdd5adfe6326c1d40f83c01e42d49b77",24))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_alien_rail_sg(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_nade_c9","9871e5415c46f216b9853fa918857114",18))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_nade_c9(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_nade_c9b","3bcb0ddcdc30ffbefff58ce86faaf0a6",19))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_nade_c9b(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_rl","cb647ad03c3a40c4be779c554a192291",13))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_rl(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_bison","69e89b0086855b3193eea6fc2926b58d",16))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_bison(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_auto_sg","8c8930ea7f6d8f04f4f5ef84e1e86a48",18))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_auto_sg(),this.game.numChildren);
         }
         if(param1 == this.cet("ditzy_focus_beam","2275ed32886aa300c8f71e5a29c2760e",16))
         {
            _loc4_ = this.game.addChildAt(new ditzy_focus_beam(),this.game.numChildren);
         }
         if(param1 == this.cet("boom5_revolver","8b635d7fe87348edbabf1f15d07a71ad",14))
         {
            _loc4_ = this.game.addChildAt(new boom5_revolver(),this.game.numChildren);
         }
         if(param1 == this.cet("thetoppestkek_scavenger_sg","224e76767455a1979fa9f17b5da9983e",26))
         {
            _loc4_ = this.game.addChildAt(new thetoppestkek_scavenger_sg(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_acid_gl","d178082672c5d4517cb4381e298e69b1",16))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_acid_gl(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_plasma_smg","8849741c0b4b4d6cd0d374215eeb3ac4",19))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_plasma_smg(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_plasma_smg2","dad173507c9c3cb1f4b18a89a58bce65",20))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_plasma_smg2(),this.game.numChildren);
         }
         if(param1 == this.cet("roxxar_android_railgun","134cdcfaf8872b638bcb911c3877509c",22))
         {
            _loc4_ = this.game.addChildAt(new roxxar_android_railgun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_invisgun","d6dfda416909c1f3c792ff8a9d79efab",12))
         {
            _loc4_ = this.game.addChildAt(new gun_invisgun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_sharkgun","fd9d1584a36c420c5eb89107348a9a79",12))
         {
            _loc4_ = this.game.addChildAt(new gun_sharkgun(),this.game.numChildren);
         }
         if(param1 == this.cet("item_grenade","99a10febbc7ad986b6e20a240e978e12",12))
         {
            _loc4_ = this.game.addChildAt(new item_grenade(),this.game.numChildren);
            ++this.mxnds1;
         }
         if(param1 == this.cet("item_port","5be0e3b089b733927cfdd6cb0f27fd4a",9))
         {
            _loc4_ = this.game.addChildAt(new item_grenade_port(),this.game.numChildren);
            ++this.mxnds2;
         }
         if(param1 == this.cet("item_shield","4b7b485644d249c686e46726006cf049",11))
         {
            _loc4_ = this.game.addChildAt(new item_grenade_shield(),this.game.numChildren);
            ++this.mxnds3;
         }
         if(_loc4_ != null)
         {
            this.NoMouse(_loc4_);
            if(param2.onshot == undefined)
            {
               _loc4_.onshot = -1;
            }
            else
            {
               _loc4_.onshot = param2.onshot;
            }
            _loc4_.onreload = -1;
            if(param2.speed_multiplier == undefined)
            {
               _loc4_.speed_multiplier = 1;
            }
            else
            {
               _loc4_.speed_multiplier = param2.speed_multiplier;
            }
            if(param2.recoil_multiplier == undefined)
            {
               _loc4_.recoil_multiplier = 1;
            }
            else
            {
               _loc4_.recoil_multiplier = param2.recoil_multiplier;
            }
            if(param2.knockback_multiplier == undefined)
            {
               _loc4_.knockback_multiplier = 1;
            }
            else
            {
               _loc4_.knockback_multiplier = param2.knockback_multiplier;
            }
            if(param2.projectile_scale == undefined)
            {
               _loc4_.projectile_scale = 1;
            }
            else
            {
               _loc4_.projectile_scale = param2.projectile_scale;
            }
            _loc4_.model = param1;
            _loc4_.x = param2.x;
            _loc4_.y = param2.y;
            if(param2.startx == undefined)
            {
               _loc4_.startx = _loc4_.x;
               _loc4_.starty = _loc4_.y;
            }
            else
            {
               _loc4_.startx = param2.startx;
               _loc4_.starty = param2.starty;
            }
            _loc4_.upg = param2.upg;
            _loc4_.command = param2.command;
            _loc4_.onmade();
            if(!this.FORCE_CUSTOM_MAP)
            {
               if(!this.MP_mode)
               {
                  if(this.LOW_HPS)
                  {
                     if(_loc4_.stat_class == 2)
                     {
                        if(_loc4_.upg == 0)
                        {
                           _loc4_.stat_power *= 0.4;
                        }
                        if(_loc4_.upg == 1)
                        {
                           _loc4_.stat_power *= 0.6;
                        }
                     }
                  }
               }
            }
            _loc4_.floatframe = 2;
            _loc4_.io = true;
            _loc4_.deadtim = 0;
            _loc4_.av = _loc4_.stat_averange_min;
			var l = 0;
			var c = 1;
			while(l < _loc4_.totalFrames) {
				if(typeof _loc4_["frame" + c] === "function") {
					_loc4_.addFrameScript(l, _loc4_["frame" + c]);
				}
				l++;
				c++;
			}
            if(param3)
            {
               _loc4_.picken_by = param2.picken_by;
               _loc4_.idd = param2.idd;
               _loc4_.b_p1 = param2.b_p1;
               this.arad[_loc4_.b_p1] = _loc4_.size1;
               _loc4_.b_p2 = param2.b_p2;
               this.arad[_loc4_.b_p2] = _loc4_.size2;
               this.ReConnect(param2.ch_ch1,_loc4_.b_p1,_loc4_.b_p2,0,this.Math_abs(Number(_loc4_.len1) - Number(_loc4_.len2)),-1);
               _loc4_.ch_ch1 = param2.ch_ch1;
               this.guns[_loc4_.idd] = _loc4_;
               _loc4_.x = param2.x;
               _loc4_.y = param2.y;
               _loc4_.rotation = param2.rotation;
               _loc4_.scaleX = param2.scaleX;
               _loc4_.scaleY = param2.scaleY;
               // this.game.removeChild(param2);
            }
            else
            {
               //this.AskForCache(_loc4_);
               _loc4_.picken_by = -1;
               this.guns[this.gunstotal] = _loc4_;
               _loc4_.idd = this.gunstotal;
               _loc4_.b_p1 = this.CreatePoint(_loc4_.x + _loc4_.len1,_loc4_.y,0,0,_loc4_.size1,false,2,-this.gunstotal - 1);
               _loc4_.b_p2 = this.CreatePoint(_loc4_.x + _loc4_.len2,_loc4_.y,0,0,_loc4_.size2,false,2,-this.gunstotal - 1);
               _loc4_.ch_ch1 = this.Connect(_loc4_.b_p1,_loc4_.b_p2,0,this.Math_abs(Number(_loc4_.len1) - Number(_loc4_.len2)),-1);
               ++this.gunstotal;
            }
         }
         return _loc4_;
      }
      
      public function TraceBg(param1:Number, param2:Number) : Boolean
      {
         this.i3 = 0;
         while(this.i3 < this.bgstotal)
         {
            if(param1 >= this.bgx[this.i3])
            {
               if(param1 <= this.bgx[this.i3] + this.bgw[this.i3])
               {
                  if(param2 >= this.bgy[this.i3])
                  {
                     if(param2 <= this.bgy[this.i3] + this.bgh[this.i3])
                     {
                        return true;
                     }
                  }
               }
            }
            ++this.i3;
         }
         return false;
      }
      
      public function TraceBgFalloff(param1:Number, param2:Number, param3:Number) : Boolean
      {
         this.i3 = 0;
         while(this.i3 < this.bgstotal)
         {
            if(param1 >= Number(this.bgx[this.i3]) - param3)
            {
               if(param1 <= this.bgx[this.i3] + this.bgw[this.i3] + param3)
               {
                  if(param2 >= Number(this.bgy[this.i3]) - param3)
                  {
                     if(param2 <= this.bgy[this.i3] + this.bgh[this.i3] + param3)
                     {
                        return true;
                     }
                  }
               }
            }
            ++this.i3;
         }
         return false;
      }
      
      public function UpdateCharProps(param1:MovieClip) : void
      {
         param1.voice = this.voices.usurpation;
         if(param1.char == 1 || param1.char >= 40 && param1.char <= 49 || param1.char == 83 || param1.char == 84 || param1.char == 36 || param1.char == 37 || param1.char == 22)
         {
            param1.armored = 1;
            param1.voice = this.voices.marine;
            if(param1.char == 37)
            {
               param1.voice = this.voices.hexagon;
            }
            this.RedrawPsi(param1.idd);
            if(param1.char == 36)
            {
               param1.nick = "Hermes";
            }
            if(param1.char == 37)
            {
               param1.nick = "Hexagon";
            }
            if(!this.MP_mode)
            {
               if(param1.char == 1 || param1.char >= 40 && param1.char <= 49)
               {
                  param1.mdl_head = this.skin_model[0];
				  if(this.skin_model[0] < 40 || this.skin_model[0] > 48) {
					  param1.mdl_body = this.skin_model[0];
					  param1.mdl_leg1_upper = this.skin_model[0];
					  param1.mdl_leg1_middle = this.skin_model[0];
					  param1.mdl_leg1_lower = this.skin_model[0];
					  param1.mdl_leg2_upper = this.skin_model[0];
					  param1.mdl_leg2_middle = this.skin_model[0];
					  param1.mdl_leg2_lower = this.skin_model[0];
					  param1.mdl_arm1_upper = this.skin_model[0];
					  param1.mdl_arm1_lower = this.skin_model[0];
					  param1.mdl_arm2_upper = this.skin_model[0];
					  param1.mdl_arm2_lower = this.skin_model[0];
				  }
                  if(this.skin_model[0] == 49)
                  {
                     param1.mobility = 0.75;
                     this.arad[param1.b_body] = 8 * 2;
                     this.arad[param1.b_toe] = 7 * 2;
                     this.arad[param1.b_arm1] = 3 * 1.5;
                     this.arad[param1.b_arm2] = 3 * 1.5;
                     this.arad[param1.b_head_start] = 8 * 1.5;
                     this.arad[param1.b_head_end] = 8 * 1.5;
                  }
               }
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 2 || param1.char == 70 || param1.char == 71 || param1.char == 79 || param1.char == 80 || param1.char == 69)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            if(param1.char == 70)
            {
               param1.nick = "Usurpation Destroyer";
               param1.voice = this.voices.usurpation_destroyer;
               param1.blood_red = 1;
               param1.blood_green = 2;
               param1.blood_blue = 0;
            }
            else if(param1.char == 71)
            {
               param1.nick = "Usurpation Soldier Major";
               param1.blood_red = 0.2;
               param1.blood_green = 0.9;
               param1.blood_blue = 1;
            }
            else if(param1.char == 69)
            {
               param1.nick = "Usurpation Ranger";
               param1.blood_red = 0.3;
               param1.blood_green = 1.3;
               param1.blood_blue = 2;
            }
            else
            {
               param1.nick = "Usurpation Soldier Minor";
               param1.blood_red = 0.3;
               param1.blood_green = 1.3;
               param1.blood_blue = 2;
            }
         }
         else if(param1.char == 3 || param1.char == 61 || param1.char == 72 || param1.char == 75 || param1.char == 76 || param1.char == 35 || param1.char == 132 || param1.char == 135 || param1.char == 136 || param1.char == 138)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            param1.voice = this.voices.proxy;
            if(param1.char == 35)
            {
               param1.nick = "Zephyr";
            }
            else if(param1.char == 132)
            {
               param1.nick = "Crossfire Headhunter";
            }
            else if(param1.char == 135 || param1.char == 136)
            {
               param1.nick = "Silk";
               param1.voice = this.voices.silk;
            }
            else if(param1.char == 138)
            {
               param1.nick = "Avre";
               param1.voice = this.voices.proxy_helmetless;
            }
            else
            {
               param1.nick = this.PROXY_NAME;
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
            if(!this.MP_mode && !this.FORCE_CUSTOM_MAP && param1.char == 3)
            {
               param1.mdl_head = this.skin_model[1];
			   if(this.skin_model[1] != 3 && this.skin_model[1] != 60 && this.skin_model[1] != 61) {
				   param1.mdl_body = this.skin_model[1];
				   param1.mdl_leg1_upper = this.skin_model[1];
				   param1.mdl_leg1_middle = this.skin_model[1];
				   param1.mdl_leg1_lower = this.skin_model[1];
				   param1.mdl_leg2_upper = this.skin_model[1];
				   param1.mdl_leg2_middle = this.skin_model[1];
				   param1.mdl_leg2_lower = this.skin_model[1];
				   param1.mdl_arm1_upper = this.skin_model[1];
				   param1.mdl_arm1_lower = this.skin_model[1];
				   param1.mdl_arm2_upper = this.skin_model[1];
				   param1.mdl_arm2_lower = this.skin_model[1];
			   }
            }
            if(param1.mdl_head == 61)
            {
               param1.voice = this.voices.proxy_helmetless;
            }
            if(!this.MP_mode)
            {
               this.i3 = 1;
               this.UpdatePlayerColorSP(param1,this.i3);
            }
         }
         else if(param1.char == 4)
         {
            param1.armored = 2;
            param1.voice = this.voices.android;
            this.RedrawPsi(param1.idd);
            param1.nick = "Android T-01187";
            param1.blood_red = 0;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 33)
         {
            param1.armored = 2;
            param1.voice = this.voices.android;
            this.RedrawPsi(param1.idd);
            param1.nick = "Android ATM-105";
            param1.blood_red = 0;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 5)
         {
            param1.armored = 2;
            param1.voice = this.voices.mute;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Drone Controller";
            }
            param1.blood_red = 0;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 6)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Advanced Usurpation Soldier";
            }
            param1.blood_red = 0.1;
            param1.blood_green = 0.8;
            param1.blood_blue = 1;
         }
         else if(param1.char == 7)
         {
            param1.armored = 1;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            param1.mobility = 0.5;
            if(!param1.isplayer)
            {
               param1.nick = "Civil Security Heavy";
               this.arad[param1.b_body] = 8 * 2;
               this.arad[param1.b_toe] = 7 * 2;
               this.arad[param1.b_arm1] = 3 * 1.5;
               this.arad[param1.b_arm2] = 3 * 1.5;
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 131)
         {
            param1.armored = 1;
            param1.voice = this.voices.crossfire_sentinel;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Crossfire Sentinel";
               this.arad[param1.b_body] = 8 * 2;
               this.arad[param1.b_toe] = 7 * 2;
               this.arad[param1.b_arm1] = 3 * 1.5;
               this.arad[param1.b_arm2] = 3 * 1.5;
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 133)
         {
            param1.armored = 1;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Federation Soldier";
               this.arad[param1.b_body] = 8 * 2;
               this.arad[param1.b_toe] = 7 * 2;
               this.arad[param1.b_arm1] = 3 * 1.5;
               this.arad[param1.b_arm2] = 3 * 1.5;
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 11)
         {
            param1.armored = 1;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            param1.mobility = 1;
            param1.nick = "Civil Security Boss";
            this.arad[param1.b_body] = 8 * 2;
            this.arad[param1.b_toe] = 7 * 2;
            this.arad[param1.b_arm1] = 3 * 1.5;
            this.arad[param1.b_arm2] = 3 * 1.5;
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 12 || param1.char == 17)
         {
            param1.armored = 1;
            param1.voice = this.voices.ghost;
            this.RedrawPsi(param1.idd);
            if(param1.char == 12)
            {
               param1.isGhost = true;
            }
            param1.mobility = 1.25;
            param1.nick = "Civil Security Ghost";
            param1.blood_red = 1;
            param1.blood_green = 0.8;
            param1.blood_blue = 0.8;
         }
         else if(param1.char == 8 || param1.char == 77 || param1.char == 78)
         {
            param1.armored = 1;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Civil Security Lite";
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 137)
         {
            param1.armored = 1;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Civil Security Riot";
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 134)
         {
            param1.armored = 1;
            param1.voice = this.voices.vulture;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Vulture";
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 32 || param1.char == 89 || param1.char == 90)
         {
            param1.armored = 1;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Civil Protector";
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 9 || param1.char == 81 || param1.char == 82)
         {
            param1.armored = 2;
            param1.voice = this.voices.android;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Android SLC-56";
            }
            if(param1.char == 9)
            {
               param1.mobility = 2;
            }
            else
            {
               param1.mobility = 1;
            }
            param1.blood_red = 0;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 130)
         {
            param1.armored = 2;
            param1.voice = this.voices.mine_droid;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Mining Android";
            }
            param1.mobility = 1;
            param1.blood_red = 0;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 34)
         {
            param1.armored = 2;
            param1.voice = this.voices.hum_droid;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Android DT-148";
            }
            param1.mobility = 1;
            param1.blood_red = 0;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 13 || param1.char == 73 || param1.char == 74 || param1.char == 38 || param1.char == 39)
         {
            param1.armored = 1;
            param1.voice = this.voices.noir_lime;
            this.RedrawPsi(param1.idd);
            param1.nick = this.NOIR_NAME;
            if(param1.char == 13)
            {
               param1.mobility = 0.85;
            }
            else
            {
               param1.mobility = 1;
            }
            if(param1.char == 38)
            {
               param1.blood_red = 2;
               param1.blood_green = 2;
               param1.blood_blue = 0;
            }
            else
            {
               param1.blood_red = 1;
               param1.blood_green = 0;
               param1.blood_blue = 0;
            }
         }
         else if(param1.char == 23 || param1.char == 24 || param1.char == 25 || param1.char == 26)
         {
            param1.armored = 1;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            param1.nick = "Guard";
            param1.mobility = 1;
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 18 || param1.char == 21)
         {
            param1.armored = 1;
            if(param1.char == 18)
            {
               param1.voice = this.voices.star_defender;
            }
            else
            {
               param1.voice = this.voices.marine;
            }
            this.RedrawPsi(param1.idd);
            param1.nick = "Star Defender";
            param1.mobility = 1;
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 14 || param1.char == 15 || param1.char == 29 || param1.char == 85 || param1.char == 86)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            if(param1.char == 15)
            {
               param1.voice = this.voices.falkok_phoenix;
               param1.nick = "Phoenix Falkok";
            }
            else if(param1.char == 29)
            {
               param1.voice = this.voices.falkok_phoenix;
               param1.nick = "Falkok Boss";
            }
            else
            {
               param1.voice = this.voices.falkok;
               param1.nick = "Falkok";
            }
            param1.mobility = 0.6;
            if(param1.char == 85 || param1.char == 86)
            {
               param1.mobility = 1;
            }
            param1.blood_red = 0.31;
            param1.blood_green = 0.62;
            param1.blood_blue = 1.88;
         }
         else if(param1.char == 31)
         {
            param1.armored = 1;
            param1.voice = this.voices.reakhohsha;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Reakhohsha Operative";
            }
            param1.mobility = 0.9;
            param1.blood_red = 222 / 127;
            param1.blood_green = 129 / 127;
            param1.blood_blue = 223 / 127;
         }
         else if(param1.char == 16 || param1.char == 27 || param1.char == 28)
         {
            param1.armored = 1;
            param1.voice = this.voices.grub;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               if(param1.char == 27)
               {
                  param1.nick = "Armored Grub";
               }
               else if(param1.char == 28)
               {
                  param1.nick = "Elite Grub";
               }
               else
               {
                  param1.nick = "Grub";
               }
            }
            param1.mobility = 0.6;
            param1.blood_red = 1.8;
            param1.blood_green = 1.5;
            param1.blood_blue = 0.4;
         }
         else if(param1.char == 19 || param1.char == 87 || param1.char == 88)
         {
            param1.armored = 1;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Raven";
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char >= 139 && param1.char <= 150)
         {
            param1.armored = param1.char >= 149 ? 1 : 0;
            if(param1.char >= 149)
            {
               param1.voice = this.voices.noir_lime;
            }
            else if(param1.char == 142 || param1.char == 143 || param1.char == 144 || param1.char == 148)
            {
               param1.voice = this.voices.proxy_helmetless;
            }
            else
            {
               param1.voice = this.voices.civilian_male;
            }
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               if(param1.char == 147 || param1.char == 148)
               {
                  param1.nick = "Worker";
               }
               else if(param1.char == 149 || param1.char == 150)
               {
                  param1.nick = "S.W.A.T.";
               }
               else
               {
                  param1.nick = "Civilian";
               }
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else
         {
            param1.armored = 0;
            param1.voice = this.voices.usurpation;
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         if(Boolean(param1.charset_by_user) || this.MP_mode && this.MP_type != 2)
         {
            param1.mobility = 1;
            param1.isGhost = false;
         }
         if(this.MP_mode)
         {
            if(this.MP_myid == param1.idd)
            {
               param1.nick = this.MP_nick;
            }
         }
      }
      
      public function UpdateLightmap(param1:Boolean) : void
      {
         var a:uint = 0;
         var g:Sprite = null;
         var forced:Boolean = param1;
         if(forced || this.optimalupd)
         {
            if(this.HQ)
            {
               a = uint(getTimer());
               this.bmpData = this.bmpData_backed.clone();
               this.i4 = 0;
               while(this.i4 < this.lampstotal)
               {
                  if(this.lamps_power2[this.i4] != 0)
                  {
                     g = this.lamps_sprites[this.i4];
                     try
                     {
                        this.bmpData.drawWithQuality(g,this.lightmap_ma,null,null,null,true,StageQuality.BEST);
                     }
                     catch(e:*)
                     {
                        this.bmpData.draw(g,lightmap_ma,null,null,null,true);
                     }
                  }
                  ++this.i4;
               }
               this.bmpData.colorTransform(this.bmpData.rect,new ColorTransform(1,1,1,-1,0,0,0,255));
               this.shadowbmp.bitmapData = this.bmpData;
               this.shadowbmp.smoothing = true;
               this.optimalupd = this.MP_mode ? Number(getTimer()) - a < 50 : Number(getTimer()) - a < 250;
               if(this.LITE_PHYS)
               {
                  this.optimalupd = false;
               }
               if(!this.optimalupd)
               {
                  this.bmpData_backed.dispose();
                  this.i4 = 0;
                  while(this.i4 < this.lampstotal)
                  {
                     this.lamps_sprites[this.i4] = null;
                     ++this.i4;
                  }
                  this.lamps_sprites = [];
               }
            }
         }
      }
      
      public function DimLight(param1:int) : void
      {
         this.lamps_power2[param1] = 0;
         this.a_int = 0;
         while(this.a_int < this.flarestotal)
         {
            if(this.flare[this.a_int].x == this.lamps_x[param1])
            {
               if(this.flare[this.a_int].y == this.lamps_y[param1])
               {
                  this.flare[this.a_int].visible = false;
                  this.flare[this.a_int].scaleX = this.flare[this.a_int].scaleX = 0;
               }
            }
            ++this.a_int;
         }
         if(!this.MP_mode || this.MP_mode && this.MP_type == 2)
         {
            this.UpdateLightmap(false);
         }
      }
      
      public function EnLight(param1:int) : void
      {
         this.lamps_power2[param1] = 1;
         this.a_int = 0;
         while(this.a_int < this.flarestotal)
         {
            if(this.flare[this.a_int].x == this.lamps_x[param1])
            {
               if(this.flare[this.a_int].y == this.lamps_y[param1])
               {
                  this.flare[this.a_int].scaleX = this.flare[this.a_int].scaleX = 1;
               }
            }
            ++this.a_int;
         }
         if(!this.MP_mode || this.MP_mode && this.MP_type == 2)
         {
            this.UpdateLightmap(false);
         }
      }
      
      public function ShotLight(param1:int) : void
      {
         if(this.ALLOW_LIGHT_BREAK)
         {
            this.Effect(this.lamps_x[param1],this.lamps_y[param1],1,0,0);
            this.Effect(this.lamps_x[param1],this.lamps_y[param1],8,Math.random() - 0.5,Math.random() - 0.5);
            this.Effect(this.lamps_x[param1],this.lamps_y[param1],8,Math.random() - 0.5,Math.random() - 0.5);
            this.Effect(this.lamps_x[param1],this.lamps_y[param1],8,Math.random() - 0.5,Math.random() - 0.5);
            if(Math.random() > 0.5)
            {
               this.PlaySound(this.s_glass1,this.lamps_x[param1],this.lamps_y[param1]);
            }
            else
            {
               this.PlaySound(this.s_glass2,this.lamps_x[param1],this.lamps_y[param1]);
            }
            this.DimLight(param1);
         }
      }
      
      public function addNearBoxBSP(param1:int) : void
      {
         var _loc2_:int = 0;
         var _loc3_:int = 0;
         var _loc4_:int = 0;
         var _loc5_:int = 0;
         var _loc6_:int = 0;
         var _loc7_:int = 0;
         var _loc8_:int = 0;
         _loc2_ = this.MP_mode ? 3 : 1;
         _loc3_ = Math.floor((Number(this.boxx[param1]) - this.NearBoxBSP_left) / this.NearBoxBSP_stepsize) - _loc2_;
         _loc4_ = Math.floor((Number(this.boxy[param1]) - this.NearBoxBSP_top) / this.NearBoxBSP_stepsize) - _loc2_;
         _loc5_ = Math.ceil((this.boxx[param1] + this.boxw[param1] - this.NearBoxBSP_left) / this.NearBoxBSP_stepsize) + _loc2_;
         _loc6_ = Math.ceil((this.boxy[param1] + this.boxh[param1] - this.NearBoxBSP_top) / this.NearBoxBSP_stepsize) + _loc2_;
         _loc7_ = _loc3_;
         while(_loc7_ <= _loc5_)
         {
            _loc8_ = _loc4_;
            while(_loc8_ <= _loc6_)
            {
               this.NearBoxBSP[_loc7_][_loc8_].push(param1);
               _loc8_++;
            }
            _loc7_++;
         }
      }
      
      public function GetNearBoxBSP_at(param1:int, param2:int) : Vector.<int>
      {
         param1 = (param1 - this.NearBoxBSP_left) / this.NearBoxBSP_stepsize;
         param2 = (param2 - this.NearBoxBSP_top) / this.NearBoxBSP_stepsize;
         if(param1 < 0)
         {
            return this.NearBoxBSP_empty;
         }
         if(param1 >= this.NearBoxBSP_width)
         {
            return this.NearBoxBSP_empty;
         }
         if(param2 < 0)
         {
            return this.NearBoxBSP_empty;
         }
         if(param2 >= this.NearBoxBSP_height)
         {
            return this.NearBoxBSP_empty;
         }
         return this.NearBoxBSP[param1][param2];
      }
      
      public function PushSynonym(param1:String, param2:int) : void
      {
         if(param1 != null && param1 != "" && param1.charAt(0) == "#")
         {
            this.synonym_uid[this.synonym_uid.length] = param1;
            this.synonym_id[this.synonym_id.length] = param2;
         }
      }
      
      public function DecodeUID(param1:String) : *
      {
         if(param1 == null || param1 == "")
         {
            param1 = "-1";
         }
         if(param1.charAt(0) == "#")
         {
            if(this.synonym_id[this.synonym_uid.indexOf(param1)] == undefined)
            {
               return param1;
            }
            return this.synonym_id[this.synonym_uid.indexOf(param1)];
         }
         if(int(param1) + "" == param1)
         {
            return int(param1);
         }
         return param1;
      }
      
      public function movieClipHasLabel(param1:MovieClip, param2:String) : Boolean
      {
         var _loc3_:int = 0;
         var _loc4_:int = 0;
         var _loc5_:FrameLabel = null;
         _loc3_ = param1.currentLabels.length;
         _loc4_ = 0;
         while(_loc4_ < _loc3_)
         {
            if((_loc5_ = param1.currentLabels[_loc4_]).name == param2)
            {
               return true;
            }
            _loc4_++;
         }
         return false;
      }
      
      public function NumberLimited(param1:String) : Number
      {
         var _loc2_:Number = NaN;
         var _loc3_:* = null;
         _loc2_ = Number(param1);
         if(_loc2_ > 1000000000)
         {
            return 1000000000;
         }
         _loc3_ = _loc2_ + "";
         if(param1 != _loc3_)
         {
            return Math.pow(10,param1.length) - 1;
         }
         return _loc2_;
      }
      
      public function UserSays(param1:int, param2:String) : void
      {
         if(this.user_says_trigger >= 0)
         {
            this.user_says_id = param1;
            this.user_says_text = param2;
            this.EXEC_TRIGGER(this.user_says_trigger);
         }
      }
      
      public function LoadMap() : void
      {
         var loadmap_stage:String = null;
         var POST_ERR_CODE:* = undefined;
         var xml:XML = null;
         var a:* = undefined;
         var b:* = undefined;
         var c:* = undefined;
		 var topsurface:* = [];
		 var bottomsurface:* = [];
		 var topsurfacebox:* = [];
		 var bottomsurfacebox:* = [];
		 var mShape:* = undefined;
         var mShape_front:* = undefined;
         var bookInfo:XML = null;
         var brdr:int = 0;
         var TEST_STRING:String = null;
         var watercolor1:String = null;
         var watercolor2:String = null;
         var region_i:int = 0;
         var trigger_i:int = 0;
         var timer_i:int = 0;
         var player_i:int = 0;
         var half_step_size:int = 0;
         var ldis:Number = NaN;
         var brtns:Number = NaN;
         var col:Array = null;
         var len:int = 0;
         var i:int = 0;
         var _mtx:Matrix = null;
         var SnowShape:* = undefined;
         var my_date:Date = null;
         var traces_start:Number = NaN;
         var traces_end:* = undefined;
         var bookInfo2:XML = null;
         var foreground:Boolean = false;
         var sprite_to_draw_at:Sprite = null;
         var bitmap_data:BitmapData = null;
         var color_hex:* = undefined;
         var matr:Matrix = null;
         var offset_x:Number = NaN;
         var offset_y:Number = NaN;
         var id:int = 0;
         var custom_image:Object = null;
         var dec:uint = 0;
         var n:* = undefined;
         var model:String = null;
         var layer_to_add:int = 0;
         var new_model:String = null;
         var new_command:int = 0;
         var new_upg:int = 0;
         var GAMEPLAY_MODIFICATIONS_parts:Array = null;
         var mods:int = 0;
         var GAMEPLAY_MODIFICATIONS_parts_parts:Array = null;
         var this_limit:Number = NaN;
         var cur_label:String = null;
         var ct:ColorTransform = null;
         var corner_sample_left:* = undefined;
         var corner_sample_right:* = undefined;
         var snow:Sprite = null;
         var rad:Number = NaN;
         var global_lamps_power:Number = NaN;
         var falloff:Number = NaN;
         var fallstep:Number = NaN;
         var lamps_from:int = 0;
         var bmp_w:* = undefined;
         var bmp_h:int = 0;
         var g:Sprite = null;
         var cTransform:ColorTransform = null;
         var clrs:Array = null;
         var poss:Array = null;
         var dip:Number = NaN;
         var alphas:Array = null;
         var matr0:Matrix = null;
         var siz:Number = NaN;
         var lamp_step:Number = NaN;
         var an:Number = NaN;
         var this_rad:Number = NaN;
         var xx:* = undefined;
         var yy:Number = NaN;
         var temp_snow:* = undefined;
         var player_version_os:String = null;
         var crash_failed:* = undefined;
         var crash_done:* = undefined;
         var _fullInfo:String = null;
         var _osSplitArr:Array = null;
         var _versionSplitArr:Array = null;
         var _osInfo:String = null;
         var _versionInfo:Number = NaN;
		 var free_mc:MovieClip = null;
		 var ci = -1;
         this.tnds = 10;
         loadmap_stage = "0";
         this.mxnds1 = 0;
         this.mxnds2 = 0;
         this.mxnds3 = 0;
         this.tnds = 10;
		 try
         {
            this.optimalupd = true;
            POST_ERR_CODE = "";
            this.CUR_MUSIC_VOLUME = 0;
            this.MUSIC_COLDDOWN = 100;
            loadmap_stage = "1001";
            this.SHOW_FRAG_MESSAGES = true;
            this.level_variables = {};
            this.dm_slots_on_spawn = [];
            this.dm_max_guns_on_spawn = 3;
            this.user_says_trigger = -1;
            this.on_user_connected_trigger = -1;
            if(this.MP_mode && this.MP_app)
            {
               this.multiplayer_repsawn_timer_speed = 1.5;
            }
            else
            {
               this.multiplayer_repsawn_timer_speed = 1;
            }
            this.ENABLE_LEVEL_LOGIC_ERRORS = false;
            if(this.MP_app)
            {
               this.dm_slots_on_spawn = [6,1,4,2,3,8,5,9,7];
            }
            if(!this.MP_spectator)
            {
               Mouse.hide();
            }
            else
            {
               Mouse.show();
            }
            loadmap_stage += "; " + MovieClip(root).mapdata.slice(0,3);
            loadmap_stage += "; " + (MovieClip(root).mapdata.slice(0,3) == "<q.");
            if(MovieClip(root).mapdata.slice(0,3) == "<q.")
            {
               loadmap_stage += "; eq qp";
               MovieClip(root).mapdata = this.un_qpack(MovieClip(root).mapdata);
               loadmap_stage += "; unqp ok";
            }
            loadmap_stage += "; qp is " + this.qpack_pattern_length;
            loadmap_stage += "; pass qp eq tst";
            this.firstframe = true;
            loadmap_stage += "; bfr parse";
            xml = new XML("<r>" + MovieClip(root).mapdata + "</r>");
            loadmap_stage = "1004";
            loadmap_stage = "1005";
            if(this.PSYCHOBLOOD_MODE == 1)
            {
               this.pb4.visible = false;
               this.pb0.gotoAndStop(this.PSYCHOBLOOD_MODE);
               this.pb1.gotoAndStop(this.PSYCHOBLOOD_MODE);
               this.pb2.gotoAndStop(this.PSYCHOBLOOD_MODE);
               this.pb3.gotoAndStop(this.PSYCHOBLOOD_MODE);
            }
            else if(this.PSYCHOBLOOD_MODE == 2)
            {
               this.pb0.gotoAndStop(this.PSYCHOBLOOD_MODE);
               this.pb1.gotoAndStop(this.PSYCHOBLOOD_MODE);
               this.pb2.gotoAndStop(this.PSYCHOBLOOD_MODE);
               this.pb3.gotoAndStop(this.PSYCHOBLOOD_MODE);
            }
            loadmap_stage = "1006";
            this.pb0.alpha = 0;
            this.pb1.alpha = 0;
            this.pb2.alpha = 0;
            this.pb3.alpha = 0;
            this.pb4.alpha = 0;
            loadmap_stage = "1007";
            this.boxestotal = 0;
            this.doorstotal = 0;
            this.regionstotal = 0;
            this.lampstotal = 0;
            this.gunstotal = 0;
            this.pushstotal = 0;
            this.bgstotal = 0;
            loadmap_stage = "1008";
            this.mShape = new Sprite();
            mShape_front = new Sprite();
            loadmap_stage = "2";
			//trace("Stage 2: " + xml.children().length);
            for each(bookInfo in xml.children())
            {
			   //ci++;
               a = bookInfo.name();
               b = [];
               for each(bookInfo2 in bookInfo.attributes())
               {
                  b["#" + bookInfo2.name()] = bookInfo2;
               }
			   //trace("obj " + ci + ": " + a);
               if(a == "box")
               {
                  this.boxx[this.boxestotal] = new Number(b["#x"]);
                  this.boxy[this.boxestotal] = new Number(b["#y"]);
                  this.boxw[this.boxestotal] = new Number(b["#w"]);
                  this.boxh[this.boxestotal] = new Number(b["#h"]);
                  this.boxmat[this.boxestotal] = new int(b["#m"]);
                  if(!isNaN(this.boxx[this.boxestotal]) && !isNaN(this.boxy[this.boxestotal]) && !isNaN(this.boxw[this.boxestotal]) && !isNaN(this.boxh[this.boxestotal]) && !isNaN(this.boxmat[this.boxestotal]))
                  {
                     if(this.boxestotal == 0)
                     {
                        this.NearBoxBSP_left = this.boxx[this.boxestotal];
                        this.NearBoxBSP_top = this.boxy[this.boxestotal];
                        this.NearBoxBSP_right = this.boxx[this.boxestotal] + this.boxw[this.boxestotal];
                        this.NearBoxBSP_bottom = this.boxy[this.boxestotal] + this.boxh[this.boxestotal];
                     }
                     else
                     {
                        this.NearBoxBSP_left = Math.min(this.NearBoxBSP_left,this.boxx[this.boxestotal]);
                        this.NearBoxBSP_top = Math.min(this.NearBoxBSP_top,this.boxy[this.boxestotal]);
                        this.NearBoxBSP_right = Math.max(this.NearBoxBSP_right,this.boxx[this.boxestotal] + this.boxw[this.boxestotal]);
                        this.NearBoxBSP_bottom = Math.max(this.NearBoxBSP_bottom,this.boxy[this.boxestotal] + this.boxh[this.boxestotal]);
                     }
                     ++this.boxestotal;
                  }
                  else
                  {
                     this.ChatNewMsg("<font color=\"#FF0000\">NOTE: Wall object contains error { id:" + this.boxestotal + ", x:" + this.boxx[this.boxestotal] + ", y:" + this.boxy[this.boxestotal] + ", width:" + this.boxw[this.boxestotal] + ", height:" + this.boxh[this.boxestotal] + " }</font>".split("NaN").join("\"NOT A NUMBER\""));
                  }
               }
               if(a == "image")
               {
                  this.CustomImageRegister(b["#id"],b["#width"],b["#height"]);
               }
               if(a == "bg")
               {
                  foreground = b["#f"] == "1" || b["#f"] == "true";
                  //this.bgbox[this.bgstotal] = foreground ? mShape_front : this.mShape;
				  this.bgtexture[this.bgstotal] = new Sprite();
                  if(b["#a"] != "-1" && b["#a"] != "" && b["#a"] != undefined)
                  {
                     this.attachments.push({
                        "parent":b["#a"],
                        "child":this.bgtexture[this.bgstotal],
                        "type":1,
                        "foreground":foreground
                     });
                  }
                  bitmap_data = null;
                  color_hex = String(b["#c"]);
                  matr = null;
                  offset_x = 0;
                  offset_y = 0;
                  if(b["#u"] != undefined)
                  {
                     offset_x = Number(b["#u"]);
                  }
                  if(b["#v"] != undefined)
                  {
                     offset_y = Number(b["#v"]);
                  }
                  if(offset_x != 0 || offset_y != 0)
                  {
                     matr = new Matrix(1,0,0,1,offset_x,offset_y);
                  }
                  if(b["#m"] == "0")
                  {
                     bitmap_data = new panel_tile(0,0);
                  }
                  else if(b["#m"] == "1")
                  {
                     bitmap_data = new ground_tile(0,0);
                  }
                  else if(b["#m"] == "2")
                  {
                     bitmap_data = new panel2_tile(0,0);
                  }
                  else if(b["#m"] == "3")
                  {
                     bitmap_data = new white(0,0);
                  }
                  else if(b["#m"] == "4")
                  {
                     bitmap_data = new slider_tile(0,0);
                  }
                  else if(b["#m"] == "5")
                  {
                     bitmap_data = new panel3_tile(0,0);
                  }
                  else if(b["#m"] == "6")
                  {
                     bitmap_data = new red(0,0);
                  }
                  else if(b["#m"] == "7")
                  {
                     bitmap_data = new green(0,0);
                  }
                  else if(b["#m"] == "8")
                  {
                     bitmap_data = new blue(0,0);
                  }
                  else if(b["#m"] == "9")
                  {
                     bitmap_data = new panel4_tile(0,0);
                  }
                  else if(b["#m"] == "10")
                  {
                     bitmap_data = new panel5_tile(0,0);
                  }
                  else if(b["#m"] == "11")
                  {
                     bitmap_data = new panel6_tile(0,0);
                  }
                  else if(b["#m"] == "12")
                  {
                     bitmap_data = new panel7_tile(0,0);
                  }
                  else if(b["#m"] == "13")
                  {
                     bitmap_data = new panel8_tile(0,0);
                  }
                  else if(b["#m"] == "14")
                  {
                     bitmap_data = new pixel_wall(0,0);
                  }
                  else if(b["#m"] == "15")
                  {
                     bitmap_data = new pixel_bg(0,0);
                  }
                  else if(b["#m"] == "16")
                  {
                     bitmap_data = new pixel_open_door(0,0);
                  }
                  else
                  {
                     b["#m"] = String(b["#m"]);
                     if(b["#m"].length > 1)
                     {
                        if(b["#m"].charAt(0) == "c")
                        {
                           id = int(b["#m"].substr(1));
                           custom_image = this.FindCustomImageObject(id);
                           if(custom_image == null)
                           {
                              throw new Error("Custom image of ID " + id + " needs to be added as Custom Image object before it can be used as background wall image.");
                           }
                           bitmap_data = new BitmapData(custom_image.width,custom_image.height,true,1727987712);
                           custom_image.load_callback_params.push({
                              "bitmap_data":bitmap_data,
                              "custom_image":custom_image,
                              "color_hex":color_hex,
                              "mat":b["#m"]
                           });
                           custom_image.load_callbacks.push(function(param1:*):*
                           {
                              var _loc2_:uint = 0;
                              bitmap_data = param1.bitmap_data;
                              custom_image = param1.custom_image;
                              color_hex = param1.color_hex;
                              bitmap_data.lock();
                              bitmap_data.fillRect(bitmap_data.rect,0);
                              bitmap_data.draw(custom_image.bitmap);
                              if(color_hex != undefined)
                              {
                                 if(color_hex.length == 7)
                                 {
                                    color_hex = color_hex.substr(1);
                                    _loc2_ = uint(parseInt(color_hex,16));
                                    bitmap_data.colorTransform(bitmap_data.rect,new ColorTransform((_loc2_ >> 16 & 255) / 255 * 2,(_loc2_ >> 8 & 255) / 255 * 2,(_loc2_ & 255) / 255 * 2));
                                 }
                              }
                              bitmap_data.unlock();
                           });
                        }
                     }
                  }
                  if(bitmap_data != null)
                  {
                     if(color_hex != undefined)
                     {
                        if(color_hex.length == 7)
                        {
                           color_hex = color_hex.substr(1);
                           dec = uint(parseInt(color_hex,16));
                           bitmap_data.colorTransform(bitmap_data.rect,new ColorTransform((dec >> 16 & 255) / 255 * 2,(dec >> 8 & 255) / 255 * 2,(dec & 255) / 255 * 2));
                        }
                     }
                     this.bgtexture[this.bgstotal].graphics.beginBitmapFill(bitmap_data,matr,true,true);
                     this.bgtexture[this.bgstotal].graphics.moveTo(Number(b["#x"]),Number(b["#y"]));
                     this.bgtexture[this.bgstotal].graphics.lineTo(Number(b["#x"]) + Number(b["#w"]),Number(b["#y"]));
                     this.bgtexture[this.bgstotal].graphics.lineTo(Number(b["#x"]) + Number(b["#w"]),Number(b["#y"]) + Number(b["#h"]));
                     this.bgtexture[this.bgstotal].graphics.lineTo(Number(b["#x"]),Number(b["#y"]) + Number(b["#h"]));
                     this.bgtexture[this.bgstotal].graphics.endFill();
                  }
                  if(this.spec_debug)
                  {
                     this.doorstotal += Math.random() > 0.2 && this.CMPG_name != ".:Er" + "ic" + " " + "Gu" + "rt:." ? 1 : 0;
                  }
                  this.bgx[this.bgstotal] = new Number(b["#x"]);
                  this.bgy[this.bgstotal] = new Number(b["#y"]);
                  this.bgw[this.bgstotal] = new Number(b["#w"]);
                  this.bgh[this.bgstotal] = new Number(b["#h"]);
                  this.bg_cast[this.bgstotal] = b["#s"] != "false";
                  ++this.bgstotal;
               }
               if(a == "pushf")
               {
                  this.pushx[this.pushstotal] = new Number(b["#x"]);
                  this.pushy[this.pushstotal] = new Number(b["#y"]);
                  this.pushw[this.pushstotal] = new Number(b["#w"]) + this.pushx[this.pushstotal];
                  this.pushh[this.pushstotal] = new Number(b["#h"]) + this.pushy[this.pushstotal];
                  this.pushtox[this.pushstotal] = new Number(b["#tox"]);
                  this.pushtoy[this.pushstotal] = new Number(b["#toy"]);
                  this.pushstab[this.pushstotal] = new Number(b["#stab"]);
                  this.pushdamage[this.pushstotal] = new Number(b["#damage"]);
                  this.PushSynonym(b["#uid"],this.pushstotal);
                  if(b["#attach"] != "-1" && b["#attach"] != "" && b["#attach"] != undefined)
                  {
                     this.attachments.push({
                        "parent":b["#attach"],
                        "child":this.pushstotal,
                        "type":3
                     });
                  }
                  ++this.pushstotal;
               }
               if(a == "water")
               {
                  this.wax[this.watertotal] = new Number(b["#x"]);
                  this.way[this.watertotal] = new Number(b["#y"]);
                  this.waw[this.watertotal] = new Number(b["#w"]);
                  this.wah[this.watertotal] = new Number(b["#h"]);
                  this.wadamage[this.watertotal] = new Number(b["#damage"]);
                  this.wa_friction[this.watertotal] = b["#friction"] != "0" && b["#friction"] != "false";
                  if(!this.FORCE_CUSTOM_MAP && !this.MP_mode)
                  {
                     if(this.LOW_HPS)
                     {
                        this.wadamage[this.watertotal] = Number(this.wadamage[this.watertotal]) / 800 * 130;
                     }
                  }
                  ++this.watertotal;
               }
               if(a == "door")
               {
                  this.mc = this.graphics_3d.addChildAt(new door(),this.graphics_3d.numChildren) as MovieClip;
                  this.NoMouse(this.mc);
                  this.mc.visible = false;
                  if(b["#vis"] == "true")
                  {
                     this.mc.vis = true;
                  }
                  else
                  {
                     this.mc.vis = false;
                  }
                  this.mc.s_x = this.mc.x = new Number(b["#x"]);
                  this.mc.s_y = this.mc.y = new Number(b["#y"]);
                  this.mc.scaleX = new Number(b["#w"]) / 100;
                  this.mc.scaleY = new Number(b["#h"]) / 100;
                  this.doors[this.doorstotal] = this.mc;
                  this.mc.w = new Number(b["#w"]);
                  this.mc.h = new Number(b["#h"]);
                  this.mc.tox = new Number(0);
                  this.mc.toy = new Number(0);
                  this.mc.moving = new Boolean();
                  if(b["#moving"] == "true")
                  {
                     this.mc.moving = true;
                  }
                  else
                  {
                     this.mc.moving = false;
                  }
                  this.mc.s_moving = this.mc.moving;
                  this.mc.s_tarx = this.mc.tarx = new Number(b["#tarx"]);
                  this.mc.s_tary = this.mc.tary = new Number(b["#tary"]);
                  this.mc.use_target = new int(-1);
                  this.mc.use_on = new int(0);
                  this.mc.s_maxspeed = this.mc.maxspeed = new Number(b["#maxspeed"]);
                  this.PushSynonym(b["#uid"],this.doorstotal);
                  this.mc.onshot = -1;
                  this.mc.playsounds = true;
                  this.mc.forcehyperjump_float = 0;
                  if(b["#attach"] != "-1" && b["#attach"] != "" && b["#attach"] != undefined)
                  {
                     this.attachments.push({
                        "parent":b["#attach"],
                        "child":this.mc,
                        "type":0
                     });
                  }
                  ++this.doorstotal;
               }
               if(a == "region")
               {
                  this.regions[this.regionstotal] = new Object();
                  this.regions[this.regionstotal].x = new Number(b["#x"]);
                  this.regions[this.regionstotal].y = new Number(b["#y"]);
                  this.regions[this.regionstotal].w = new Number(b["#w"]);
                  this.regions[this.regionstotal].h = new Number(b["#h"]);
                  if(b["#use_target"].charAt(0) == "#")
                  {
                     this.regions[this.regionstotal].use_target = b["#use_target"];
                  }
                  else
                  {
                     this.regions[this.regionstotal].use_target = new int(b["#use_target"]);
                  }
                  this.regions[this.regionstotal].use_on = new int(b["#use_on"]);
                  this.regions[this.regionstotal].play_sound = true;
                  if(this.regions[this.regionstotal].use_on == 1 || this.regions[this.regionstotal].use_on == 9 || this.regions[this.regionstotal].use_on == 10)
                  {
                     this.mc;
                     if(this.regions[this.regionstotal].use_on == 1)
                     {
                        this.mc = this.game.addChildAt(new switchh(),0) as MovieClip;
                     }
                     if(this.regions[this.regionstotal].use_on == 9)
                     {
                        this.mc = this.game.addChildAt(new switchh_red(),0) as MovieClip;
                     }
                     if(this.regions[this.regionstotal].use_on == 10)
                     {
                        this.mc = this.game.addChildAt(new switchh_blue(),0) as MovieClip;
                     }
                     this.NoMouse(this.mc);
                     this.mc.x = this.regions[this.regionstotal].x + Number(this.regions[this.regionstotal].w) / 2;
                     this.mc.y = this.regions[this.regionstotal].y + Number(this.regions[this.regionstotal].h) / 2;
                     //this.mc.gotoAndStop(1);
                     this.regions[this.regionstotal].mc = this.mc;
                  }
                  if(this.regions[this.regionstotal].use_on == 8)
                  {
                     this.regions[this.regionstotal].use_on = 1;
                  }
                  if(this.regions[this.regionstotal].use_on == 11)
                  {
                     this.regions[this.regionstotal].use_on = 9;
                  }
                  if(this.regions[this.regionstotal].use_on == 12)
                  {
                     this.regions[this.regionstotal].use_on = 10;
                  }
                  if(this.regions[this.regionstotal].use_on == 15)
                  {
                     this.regions[this.regionstotal].play_sound = false;
                     this.regions[this.regionstotal].use_on = 1;
                  }
                  this.PushSynonym(b["#uid"],this.regionstotal);
                  if(b["#attach"] != "-1" && b["#attach"] != "" && b["#attach"] != undefined)
                  {
                     this.attachments.push({
                        "parent":b["#attach"],
                        "child":this.regions[this.regionstotal],
                        "type":4
                     });
                     if(this.regions[this.regionstotal].mc)
                     {
                        this.attachments.push({
                           "parent":b["#attach"],
                           "child":this.regions[this.regionstotal].mc,
                           "type":2
                        });
                     }
                  }
                  ++this.regionstotal;
               }
               if(a == "trigger")
               {
                  this.triggers[this.triggerstotal] = new Object();
                  this.triggers[this.triggerstotal].enabledd = new Boolean();
                  if(b["#enabled"] == "true")
                  {
                     this.triggers[this.triggerstotal].enabledd = true;
                  }
                  else
                  {
                     this.triggers[this.triggerstotal].enabledd = false;
                  }
                  this.triggers[this.triggerstotal].s_enabledd = this.triggers[this.triggerstotal].enabledd;
                  this.triggers[this.triggerstotal].s_maxcalls = this.triggers[this.triggerstotal].maxcalls = new int(b["#maxcalls"]);
                  this.triggers[this.triggerstotal].actions_total = new int(0);
                  this.triggers[this.triggerstotal].actions_targetA = [];
                  this.triggers[this.triggerstotal].actions_targetB = [];
                  this.triggers[this.triggerstotal].actions_type = [];
                  this.triggers[this.triggerstotal].forcehyperjump = new Boolean(false);
                  i = 1;
                  while(i <= 10)
                  {
                     if(b["#actions_" + i + "_type"] != -1)
                     {
                        this.add_action_to_trigger(this.triggerstotal,b["#actions_" + i + "_targetA"],b["#actions_" + i + "_targetB"],b["#actions_" + i + "_type"]);
                     }
                     i++;
                  }
                  this.PushSynonym(b["#uid"],this.triggerstotal);
                  this.triggers[this.triggerstotal].uid = b["#uid"];
                  ++this.triggerstotal;
               }
               if(a == "timer")
               {
                  this.timers[this.timerstotal] = new Object();
                  this.timers[this.timerstotal].enabledd = new Boolean();
                  if(b["#enabled"] == "true")
                  {
                     this.timers[this.timerstotal].enabledd = true;
                  }
                  else
                  {
                     this.timers[this.timerstotal].enabledd = false;
                  }
                  this.timers[this.timerstotal].s_enabledd = this.timers[this.timerstotal].enabledd;
                  this.timers[this.timerstotal].s_maxcalls = this.timers[this.timerstotal].maxcalls = new int(b["#maxcalls"]);
                  if(b["#target"].charAt(0) == "#")
                  {
                     this.timers[this.timerstotal].actions_target = b["#target"];
                  }
                  else
                  {
                     this.timers[this.timerstotal].actions_target = new int(b["#target"]);
                  }
                  this.timers[this.timerstotal].s_ddelay = this.timers[this.timerstotal].ddelay = new int(b["#delay"]);
                  this.timers[this.timerstotal].ticknew = new int(0);
                  this.PushSynonym(b["#uid"],this.timerstotal);
                  ++this.timerstotal;
               }
               if(a == "barrel")
               {
                  if(!this.MP_mode)
                  {
                     this.mc;
                     if(b["#model"] == "bar_orange")
                     {
                        this.mc = this.game.addChildAt(new bar_orange(),this.game.numChildren) as MovieClip;
                     }
                     else if(b["#model"] == "bar_blue")
                     {
                        this.mc = this.game.addChildAt(new bar_blue(),this.game.numChildren) as MovieClip;
                     }
                     else if(b["#model"] == "bar_red")
                     {
                        this.mc = this.game.addChildAt(new bar_red(),this.game.numChildren) as MovieClip;
                     }
                     this.NoMouse(this.mc);
                     this.mc.mdl = b["#model"];
                     this.mc.x = new Number(b["#x"]);
                     this.mc.y = new Number(b["#y"]);
                     this.mc.tox = new Number(b["#tox"]);
                     this.mc.toy = new Number(b["#toy"]);
                     this.mc.master = -1;
                     this.PushSynonym(b["#uid"],this.barrelstotal);
                     this.create_barrel(this.mc);
                  }
                  else
                  {
                     this.MP_startbarrels[this.MP_startbarrels.length] = {
                        "x":new Number(b["#x"]),
                        "y":new Number(b["#y"]),
                        "tox":new Number(b["#tox"]),
                        "toy":new Number(b["#toy"]),
                        "mdl":b["#model"]
                     };
                  }
               }
               if(a == "vehicle")
               {
                  n = -1;
				  // trace("  veh model: " + b["#model"]);
                  if(b["#model"] == "veh_jeep")
                  {
                     this.mc = this.game.addChildAt(new veh_jeep(),this.game.numChildren) as MovieClip;
                     n = 0;
                  }
                  if(b["#model"] == "veh_walker")
                  {
                     this.mc = this.game.addChildAt(new veh_walker(),this.game.numChildren) as MovieClip;
                     n = 1;
                  }
                  if(b["#model"] == "veh_capsule")
                  {
                     this.mc = this.game.addChildAt(new veh_capsule(),this.game.numChildren) as MovieClip;
                     n = 2;
                  }
                  if(b["#model"] == "veh_crate")
                  {
                     this.mc = this.game.addChildAt(new veh_crate(),this.game.numChildren) as MovieClip;
                     n = 3;
                  }
                  if(b["#model"] == "veh_drone")
                  {
                     this.mc = this.game.addChildAt(new veh_drone(),this.game.numChildren) as MovieClip;
                     n = 4;
                  }
                  if(b["#model"] == "veh_rope")
                  {
                     this.mc = this.game.addChildAt(new veh_rope(),this.game.numChildren) as MovieClip;
                     n = 5;
                  }
                  if(b["#model"] == "veh_hh")
                  {
                     this.mc = this.game.addChildAt(new veh_hh(),this.game.numChildren) as MovieClip;
                     n = 6;
                     //if(!this.HINTS)
                     //{
                     //   origin.visible = false;
                     //}
                  }
                  if(b["#model"] == "veh_corvette")
                  {
                     this.mc = this.game.addChildAt(new veh_corvette(),this.game.numChildren) as MovieClip;
                     n = 7;
                  }
                  this.NoMouse(this.mc);
                  this.mc.x = new Number(b["#x"]);
                  this.mc.y = new Number(b["#y"]);
                  this.mc.tox = new Number(b["#tox"]);
                  this.mc.toy = new Number(b["#toy"]);
                  this.PushSynonym(b["#uid"],this.vehiclestotal);
                  this.create_vehicle(this.mc,n,new Number(b["#side"]));
                  this.mc.hea *= new Number(b["#hpp"]) / 100;
                  this.mc.hmax *= new Number(b["#hpp"]) / 100;
                  if(!this.ARCADE_GAME_MODE)
                  {
                     this.mc.hea *= 0.25;
                     this.mc.hmax *= 0.25;
                  }
                  if(!this.FORCE_CUSTOM_MAP)
                  {
                     if(!this.MP_mode)
                     {
                        if(this.LOW_HPS)
                        {
                           if(n == 7)
                           {
                              this.mc.hea *= 0.25;
                              this.mc.hmax *= 0.25;
                           }
                        }
                     }
                  }
               }
            }
            this.NearBoxBSP_stepsize = Math.max(100,Math.max(this.NearBoxBSP_right - this.NearBoxBSP_left,this.NearBoxBSP_bottom - this.NearBoxBSP_top) / 64);
            this.NearBoxBSP_stepsize = Math.max(this.NearBoxBSP_stepsize,Math.sqrt((this.NearBoxBSP_right - this.NearBoxBSP_left) * (this.NearBoxBSP_bottom - this.NearBoxBSP_top) / this.boxestotal));
            brdr = this.MP_mode ? 3 : 1;
            this.NearBoxBSP_left -= this.NearBoxBSP_stepsize * brdr;
            this.NearBoxBSP_right += this.NearBoxBSP_stepsize * 2 * brdr;
            this.NearBoxBSP_top -= this.NearBoxBSP_stepsize * brdr;
            this.NearBoxBSP_bottom += this.NearBoxBSP_stepsize * 2 * brdr;
            this.NearBoxBSP_width = Math.ceil((this.NearBoxBSP_right - this.NearBoxBSP_left) / this.NearBoxBSP_stepsize);
            this.NearBoxBSP_height = Math.ceil((this.NearBoxBSP_bottom - this.NearBoxBSP_top) / this.NearBoxBSP_stepsize);
            this.NearBoxBSP = new Vector.<Vector.<Vector.<int>>>(this.NearBoxBSP_width);
            i = 0;
            while(i < this.NearBoxBSP_width)
            {
               this.NearBoxBSP[i] = new Vector.<Vector.<int>>(this.NearBoxBSP_height);
               this.i2 = 0;
               while(this.i2 < this.NearBoxBSP_height)
               {
                  this.NearBoxBSP[i][this.i2] = new Vector.<int>(0,false);
                  ++this.i2;
               }
               i++;
            }
            loadmap_stage = "3";
            i = 0;
            while(i < this.boxestotal)
            {
               this.addNearBoxBSP(i);
               xx = 75;
			   this.ledgebox[i] = undefined;
               if(this.TraceLine_no_doors(Number(this.boxx[i]) - 15,Number(this.boxy[i]) - 30,Number(this.boxx[i]) - 15,this.boxy[i] + xx))
               {
                  if(this.TraceLine_no_doors(this.boxx[i] + 5,Number(this.boxy[i]) - 5,this.boxx[i] + 5,Number(this.boxy[i]) - 50))
                  {
                     this.ledgebox[i] = this.game.addChildAt(new veh_hh(),this.game.numChildren) as MovieClip;
                     this.NoMouse(this.ledgebox[i]);
                     n = 6;
                     this.ledgebox[i].x = new Number(this.boxx[i]);
                     this.ledgebox[i].y = new Number(this.boxy[i]);
                     this.create_vehicle(this.ledgebox[i],n,new Number(1));
                  }
               }
               if(this.TraceLine_no_doors(this.boxx[i] + this.boxw[i] + 15,Number(this.boxy[i]) - 30,this.boxx[i] + this.boxw[i] + 15,this.boxy[i] + xx))
               {
                  if(this.TraceLine_no_doors(this.boxx[i] + this.boxw[i] - 5,Number(this.boxy[i]) - 5,this.boxx[i] + this.boxw[i] - 5,Number(this.boxy[i]) - 50))
                  {
                     this.ledgebox[i] = this.game.addChildAt(new veh_hh(),this.game.numChildren) as MovieClip;
                     this.NoMouse(this.ledgebox[i]);
                     n = 6;
                     this.ledgebox[i].x = new Number(this.boxx[i] + this.boxw[i]);
                     this.ledgebox[i].y = new Number(this.boxy[i]);
                     this.create_vehicle(this.ledgebox[i],n,new Number(-1));
                  }
               }
               i++;
            }
            TEST_STRING = "";
            i = 0;
            while(i < this.NearBoxBSP_width)
            {
               this.i2 = 0;
               while(this.i2 < this.NearBoxBSP_height)
               {
                  TEST_STRING += this.NearBoxBSP[i][this.i2].length + " ";
                  ++this.i2;
               }
               TEST_STRING += "\n";
               i++;
            }
            i = 0;
            while(i < this.doorstotal)
            {
               if(this.doors[i].vis)
               {
                  n = 6;
                  this.mc = this.game.addChildAt(new veh_hh(),this.game.numChildren) as MovieClip;
                  this.NoMouse(this.mc);
                  this.mc.x = this.doors[i].x;
                  this.mc.y = this.doors[i].y;
                  this.create_vehicle(this.mc,n,new Number(1));
                  this.mc.origin.visible = false;
                  this.mc.attached = i;
                  this.mc = this.game.addChildAt(new veh_hh(),this.game.numChildren) as MovieClip;
                  this.NoMouse(this.mc);
                  this.mc.x = this.doors[i].x + this.doors[i].w;
                  this.mc.y = this.doors[i].y;
                  this.create_vehicle(this.mc,n,new Number(-1));
                  this.mc.origin.visible = false;
                  this.mc.attached = i;
               }
               i++;
            }
            this.all_doors = [];
            this.i2 = 0;
            while(this.i2 < this.doorstotal)
            {
               this.all_doors.push(this.i2);
               ++this.i2;
            }
            i = 0;
            while(i < this.NearBoxBSP_width)
            {
               this.i2 = 0;
               while(this.i2 < this.NearBoxBSP_height)
               {
                  this.NearBoxBSP[i][this.i2].fixed = true;
                  ++this.i2;
               }
               i++;
            }
            loadmap_stage = "4";
            watercolor1 = "";
            watercolor2 = "";
            for each(bookInfo in xml.children())
            {
               a = bookInfo.name();
               b = [];
               for each(bookInfo2 in bookInfo.attributes())
               {
                  b["#" + bookInfo2.name()] = bookInfo2;
               }
               if(a == "decor")
               {
                  loadmap_stage = "4001";
                  model = String(b["#model"]);
                  bitmap_data = null;
                  if(model.length > 1)
                  {
                     if(model.charAt(0) == "c")
                     {
                        if(!isNaN(parseInt(model.substr(1),10)))
                        {
                           id = int(model.substr(1));
                           custom_image = this.FindCustomImageObject(id);
                           if(custom_image == null)
                           {
                              throw new Error("Custom image of ID " + id + " (" + model + ") needs to be added as Custom Image object before it can be used as decoration model.");
                           }
                           bitmap_data = new BitmapData(custom_image.width,custom_image.height,true,1727987712);
                           custom_image.load_callback_params.push({
                              "bitmap_data":bitmap_data,
                              "custom_image":custom_image
                           });
                           custom_image.load_callbacks.push(function(param1:*):*
                           {
                              bitmap_data = param1.bitmap_data;
                              custom_image = param1.custom_image;
                              bitmap_data.lock();
                              bitmap_data.fillRect(bitmap_data.rect,0);
                              bitmap_data.draw(custom_image.bitmap);
                              bitmap_data.unlock();
                           });
                        }
                     }
                  }
                  layer_to_add = 0;
                  if(bitmap_data != null || b["#f"] != undefined)
                  {
                     if(b["#f"] == "1" || b["#f"] == "true")
                     {
                        layer_to_add = 1;
                     }
                     else if(b["#f"] == "0" || b["#f"] == "false" || b["#f"] == undefined)
                     {
                        layer_to_add = 0;
                     }
                     else
                     {
                        layer_to_add = 2;
                     }
                  }
                  else
                  {
                     layer_to_add = model == "back_lamp_vertical" || model == "back_lamp_horizontal" || model == "back_lamp_vertical_on" || model == "back_lamp_horizontal_on" || model == "text" || model == "text2" || model == "text3" || model == "pixel_teleport" || model == "ditzy_flag_blue" || model == "ditzy_flag_red" || model == "ditzy_flag_dark" || model == "ditzy_flag_empty" || model == "darkstar_healing_kit" || model == "darkstar_holo_on" || model == "darkstar_holo_on_red" || model == "darkstar_holo_off" || model == "darkstar_holo_earth" || model == "darkstar_holo_c9" || model == "doomzerker_locker" || model == "doomzerker_locker2" || model == "doomzerker_locker3" || model == "darkstar_tree1" || model == "darkstar_tree2" || model == "darkstar_pot" || model == "darkstar_pot_tree1" || model == "darkstar_pot_tree2" ? 0 : 1;
                  }
                  if(layer_to_add == 0)
                  {
                     this.decorbox[this.decorstotal] = this.game.addChildAt(new decor(),0) as MovieClip;
                  }
                  else if(layer_to_add == 1)
                  {
                     this.decorbox[this.decorstotal] = this.game.addChildAt(new decor(),this.game.numChildren) as MovieClip;
                  }
                  else
                  {
                     this.decorbox[this.decorstotal] = MovieClip(root).graphics_3d_front.addChildAt(new decor(),MovieClip(root).graphics_3d_front.numChildren);
                  }
                  this.decorbox[this.decorstotal].custom_bitmap = new Bitmap();
                  this.decorbox[this.decorstotal].addChild(this.decorbox[this.decorstotal].custom_bitmap);
                  if(b["#u"] != undefined)
                  {
                     this.decorbox[this.decorstotal].custom_bitmap.x = Number(b["#u"]);
                  }
                  if(b["#v"] != undefined)
                  {
                     this.decorbox[this.decorstotal].custom_bitmap.y = Number(b["#v"]);
                  }
                  this.NoMouse(this.decorbox[this.decorstotal]);
                  this.decorbox[this.decorstotal].x = new Number(b["#x"]);
                  this.decorbox[this.decorstotal].y = new Number(b["#y"]);
                  this.decorbox[this.decorstotal].rotation = Number(b["#r"]) || 0;
                  this.decorbox[this.decorstotal].scaleX = b["#sx"] != undefined ? Number(b["#sx"]) : 1;
                  this.decorbox[this.decorstotal].scaleY = b["#sy"] != undefined ? Number(b["#sy"]) : 1;
                  if(bitmap_data == null)
                  {
                     if(!this.movieClipHasLabel(this.decorbox[this.decorstotal],model))
                     {
                        throw new Error("Decoration \"" + model + "\" does not exist in current version.");
                     }
                     this.decorbox[this.decorstotal].gotoAndStop(model);
                     this.decorbox[this.decorstotal].custom_bitmap.visible = false;
                  }
                  else
                  {
                     this.decorbox[this.decorstotal].gotoAndStop("null");
                     this.decorbox[this.decorstotal].custom_bitmap.bitmapData = bitmap_data;
                     this.decorbox[this.decorstotal].custom_bitmap.smoothing = true;
                     this.decorbox[this.decorstotal].custom_bitmap.visible = true;
                  }
                  this.decors[this.decorstotal] = this.decorbox[this.decorstotal];
                  this.PushSynonym(b["#uid"],this.decorstotal);
                  if(b["#attach"] != "-1" && b["#attach"] != "" && b["#attach"] != undefined)
                  {
                     this.attachments.push({
                        "parent":b["#attach"],
                        "child":this.decorbox[this.decorstotal],
                        "type":2
                     });
                  }
                  ++this.decorstotal;
               }
               if(a == "gun")
               {
                  loadmap_stage = "4002";
                  new_model = b["#model"];
                  new_command = int(b["#command"]);
                  new_upg = int(b["#upg"]);
                  if(this.MP_app)
                  {
                     GAMEPLAY_MODIFICATIONS_parts = this.GAMEPLAY_MODIFICATIONS.split(",");
                     mods = 0;
                     for(; mods < GAMEPLAY_MODIFICATIONS_parts.length; mods++)
                     {
                        GAMEPLAY_MODIFICATIONS_parts_parts = GAMEPLAY_MODIFICATIONS_parts[mods].split("=");
                        if(GAMEPLAY_MODIFICATIONS_parts_parts.length != 2)
                        {
                           continue;
                        }
                        if(GAMEPLAY_MODIFICATIONS_parts_parts[0] != new_model)
                        {
                           continue;
                        }
                        switch(GAMEPLAY_MODIFICATIONS_parts_parts[1])
                        {
                           case "gun_invisgun":
                              break;
                           case "gun_sharkgun":
                              break;
                           case "gun_pixel_rifle":
                              break;
                           case "gun_pixel_rl":
                              break;
                           case "gun_vehminigun":
                              break;
                           case "gun_vehminigl":
                              break;
                           case "gun_glock":
                              break;
                           case "gun_m4a1":
                              break;
                           case "gun_vehcannon":
                              break;
                           case "gun_sp_sh":
                              break;
                           case "item_grenade":
                              break;
                           case "item_port":
                              break;
                           case "item_shield":
                              break;
                           case "gun_vgun":
                              break;
                           default:
                              new_model = GAMEPLAY_MODIFICATIONS_parts_parts[1];
                              break;
                        }
                     }
                  }
                  loadmap_stage += "; " + new_model;
                  this.PushSynonym(b["#uid"],this.gunstotal);
                  if(this.LOW_HPS)
                  {
                     if(!this.MP_mode)
                     {
                        if(!this.FORCE_CUSTOM_MAP)
                        {
                           if(new_model == "gun_railgun2")
                           {
                              if(new_command != 0)
                              {
                                 if(new_upg > 1)
                                 {
                                    if(this.CUR_LOADING != "c41a")
                                    {
                                       new_model = "gun_sniper";
                                    }
                                 }
                              }
                           }
                           if(new_model == "gun_bfg")
                           {
                              if(new_command != 0)
                              {
                                 if(new_upg > 0)
                                 {
                                    new_model = "gun_sp_sh";
                                 }
                              }
                           }
                        }
                     }
                  }
                  this.mc = this.MakeGunByClass(new_model,{
                     "x":Number(b["#x"]),
                     "y":Number(b["#y"]),
                     "upg":int(new_upg),
                     "command":int(new_command)
                  });
               }
               if(a == "song")
               {
                  this.PushSynonym(b["#uid"],this.custom_songs.length);
                  this.CustomSongRegister(b["#url"],b["#volume"],b["#loop"] == true,this.DecodeUID(b["#callback"]));
               }
               if(a == "inf")
               {
                  loadmap_stage = "4003";
                  loadmap_stage += ";mrk=" + b["#mark"];
                  if(b["#mark"] == "watercolor")
                  {
                     watercolor1 = String(b["#forteam"]);
                  }
                  if(b["#mark"] == "acidcolor")
                  {
                     watercolor2 = String(b["#forteam"]);
                  }
                  if(b["#mark"] == "watertitle")
                  {
                     this.WATER_NAME = String(b["#forteam"]);
                  }
                  if(b["#mark"] == "acidtitle")
                  {
                     this.ACID_NAME = String(b["#forteam"]);
                  }
                  if(b["#mark"] == "sky")
                  {
                     this.sky.gotoAndStop(int(b["#forteam"]));
                  }
                  if(b["#mark"] == "shadowmap_size")
                  {
                     this.step_size = int(b["#forteam"]);
                  }
                  if(b["#mark"] == "gravity")
                  {
                     this.gravity = Number(b["#forteam"]);
                  }
                  if(b["#mark"] == "casual")
                  {
                     this.CASUAL_MODE = true;
                     this.new_active.visible = true;
                     this.new_active.gotoAndPlay(1);
                  }
                  if(b["#mark"] == "nobase")
                  {
                     this.NOBASE = true;
                  }
                  if(b["#mark"] == "game2")
                  {
                     this.PLAZMA_GAME = false;
                  }
                  if(b["#mark"] == "strict_casual")
                  {
                     this.CASUAL_MODE = true;
                     this.STRICT_MODE = true;
                     this.new_active.visible = true;
                     this.new_active.gotoAndPlay(1);
                  }
                  if(b["#mark"] == "no_auto_revive")
                  {
                     this.AUTO_REVIVE = false;
                  }
                  if(b["#mark"] == "meat")
                  {
                     this.MEAT_MODE = true;
                  }
                  if(b["#mark"] == "nopsi")
                  {
                     this.NO_PSI = true;
                     i = 0;
                     while(i < this.playerstotal)
                     {
                        if(this.mens[i].io)
                        {
                           if(!this.mens[i].dead)
                           {
                              this.ChangedGun(i);
                           }
                        }
                        i++;
                     }
                  }
                  if(b["#mark"] == "gamescale")
                  {
                     this.game_scale = Number(b["#forteam"]) / 100;
                     if(isNaN(this.game_scale))
                     {
                        this.game_scale = 1;
                     }
                     if(this.game_scale < 0.01)
                     {
                        this.game_scale = 0.01;
                     }
                     if(this.game_scale > 15)
                     {
                        this.game_scale = 15;
                     }
                  }
                  if(b["#mark"] == "he_nades_count")
                  {
                     this.MP_start_grenades_count = Math.max(0,this.NumberLimited(b["#forteam"]));
                     this.mxnds1 += this.MP_start_grenades_count;
                  }
                  if(b["#mark"] == "port_nades_count")
                  {
                     this.MP_start_grenades_port_count = Math.max(0,this.NumberLimited(b["#forteam"]));
                     this.mxnds2 += this.MP_start_grenades_port_count;
                  }
                  if(b["#mark"] == "sh_nades_count")
                  {
                     this.MP_start_grenades_sh_count = Math.max(0,this.NumberLimited(b["#forteam"]));
                     this.mxnds3 += this.MP_start_grenades_sh_count;
                  }
                  if(b["#mark"] == "snow")
                  {
                     this.FORCE_SNOW = true;
                  }
                  if(b["#mark"] == "level_errors")
                  {
                     this.ENABLE_LEVEL_LOGIC_ERRORS = true;
                  }
                  if(b["#mark"] == "var_sync")
                  {
                     this.ALLOW_VAR_SYNC = true;
                  }
                  if(b["#mark"] == "no_light_break")
                  {
                     this.ALLOW_LIGHT_BREAK = false;
                  }
                  if(b["#mark"] == "naive_hit_confirmation")
                  {
                     this.NAIVE_HIT_CONFIRMATION = true;
                  }
                  if(!this.MP_mode)
                  {
                     if(b["#mark"] == "hero1_guns")
                     {
                        i = 0;
                        while(i < this.inventoryA.length)
                        {
                           free_mc = this.MakeGunByClass(this.inventoryA[i].mdl,{
                              "x":Number(b["#x"]),
                              "y":Number(b["#y"]),
                              "upg":int(this.inventoryA[i].upg),
                              "command":(this.MP_mode && this.MP_type != 2 ? -1 : int(b["#forteam"]))
                           });
                           i++;
                        }
                     }
                     if(b["#mark"] == "hero2_guns")
                     {
                        i = 0;
                        while(i < this.inventoryB.length)
                        {
                           free_mc = this.MakeGunByClass(this.inventoryB[i].mdl,{
                              "x":Number(b["#x"]),
                              "y":Number(b["#y"]),
                              "upg":int(this.inventoryB[i].upg),
                              "command":(this.MP_mode && this.MP_type != 2 ? -1 : int(b["#forteam"]))
                           });
                           i++;
                        }
                     }
                     if(b["#mark"] == "hero2_guns_nonades")
                     {
                        i = 0;
                        while(i < this.inventoryB.length)
                        {
                           if(this.inventoryB[i].mdl != "item_grenade")
                           {
                              free_mc = this.MakeGunByClass(this.inventoryB[i].mdl,{
                                 "x":Number(b["#x"]),
                                 "y":Number(b["#y"]),
                                 "upg":int(this.inventoryB[i].upg),
                                 "command":(this.MP_mode && this.MP_type != 2 ? -1 : int(b["#forteam"]))
                              });
                           }
                           i++;
                        }
                     }
                     if(b["#mark"] == "hero2_guns_nades")
                     {
                        i = 0;
                        while(i < this.inventoryB.length)
                        {
                           if(this.inventoryB[i].mdl == "item_grenade")
                           {
                              free_mc = this.MakeGunByClass(this.inventoryB[i].mdl,{
                                 "x":Number(b["#x"]),
                                 "y":Number(b["#y"]),
                                 "upg":int(this.inventoryB[i].upg),
                                 "command":(this.MP_mode && this.MP_type != 2 ? -1 : int(b["#forteam"]))
                              });
                           }
                           i++;
                        }
                     }
                  }
                  else
                  {
                     if(b["#mark"] == "dm_slots_on_spawn")
                     {
                        this.dm_slots_on_spawn = b["#forteam"].split(" ").join("").split(",");
                     }
                     if(b["#mark"] == "dm_max_guns_on_spawn")
                     {
                        this.dm_max_guns_on_spawn = int(b["#forteam"]);
                     }
                  }
               }
               if(a == "lamp")
               {
                  loadmap_stage = "4004";
                  this.lamps_x[this.lampstotal] = new Number(b["#x"]);
                  this.lamps_y[this.lampstotal] = new Number(b["#y"]);
                  this.lamps_power[this.lampstotal] = Math.min(new Number(b["#power"]),100);
                  this.lamps_power2[this.lampstotal] = 2;
                  this.lamps_sprites[this.lampstotal];
                  if(!(b["#flare"] == "true" || Number(b["#flare"]) > 0))
                  {
                     this.lamps_power2[this.lampstotal] = -1;
                  }
                  if(this.lamps_power2[this.lampstotal] == 2 || this.TraceBg(this.lamps_x[this.lampstotal],this.lamps_y[this.lampstotal]))
                  {
                     this.PushSynonym(b["#uid"],this.lampstotal);
                     ++this.lampstotal;
                  }
               }
               if(a == "player" || a == "enemy")
               {
                  loadmap_stage = "4005";
                  this.mc = this.game.addChildAt(new player(),this.game.numChildren) as MovieClip;
                  this.NoMouse(this.mc);
                  this.mc.x = new Number(b["#x"]);
                  this.mc.y = new Number(b["#y"]);
                  this.mc.startx = this.mc.x;
                  this.mc.starty = this.mc.y;
                  this.PushSynonym(b["#uid"],this.playerstotal);
                  this.create_player(this.mc,b["#hea"],b["#hmax"]);
                  this.mc.tox = new Number(b["#tox"]);
                  this.mc.toy = new Number(b["#toy"]);
                  this.atox[this.mc.b_toe] = this.atox[this.mc.b_leg1] = this.atox[this.mc.b_leg2] = this.atox[this.mc.b_arm1] = this.atox[this.mc.b_arm2] = this.atox[this.mc.b_body] = this.atox[this.mc.b_brk1] = this.atox[this.mc.b_brk2] = this.atox[this.mc.b_head_start] = this.atox[this.mc.b_head_end] = this.mc.tox;
                  this.atoy[this.mc.b_toe] = this.atoy[this.mc.b_leg1] = this.atoy[this.mc.b_leg2] = this.atoy[this.mc.b_arm1] = this.atoy[this.mc.b_arm2] = this.atoy[this.mc.b_body] = this.atoy[this.mc.b_brk1] = this.atoy[this.mc.b_brk2] = this.atoy[this.mc.b_head_start] = this.atoy[this.mc.b_head_end] = this.mc.toy;
                  if(b["#ondeath"].charAt(0) == "#")
                  {
                     this.mc.ondeath = b["#ondeath"];
                  }
                  else
                  {
                     this.mc.ondeath = new int(b["#ondeath"]);
                  }
                  this.mc.team = new int(b["#team"]);
                  this.mc.botaction = new int(b["#botaction"]);
                  if(this.MP_mode && this.MP_type == 1)
                  {
                     this.mc.team = this.MP_myid + 1;
                  }
                  this.mc.side = new Number(b["#side"]);
                  this.mc.tarx = this.mc.x + Number(this.mc.side) * 100;
                  this.mc.tary = this.mc.y;
                  this.mc.armored = new Number(0);
                  if(b["#incar"].charAt(0) == "#")
                  {
                     this.mc.incar = b["#incar"];
                  }
                  else
                  {
                     this.mc.incar = int(b["#incar"]);
                  }
                  this.mc.char = new Number(b["#char"]);
                  if(!this.MP_mode || this.MP_mode && this.MP_type == 2)
                  {
                     if(this.mc.char == 2)
                     {
                        if(this.mc.hmax > 325)
                        {
                           this.mc.char = 70;
                        }
                        else if(this.mc.hmax > 170)
                        {
                           this.mc.char = 71;
                        }
                     }
                  }
                  this.mc.charset_by_user = false;
                  if(this.MP_myid == this.mc.idd)
                  {
                     if(this.MP_mode)
                     {
                        if(this.MP_type == 1)
                        {
                           this.mc.char = this.skin_model[2];
                        }
                        else if(this.MP_type == 3)
                        {
                           if(this.MP_myid % 2 == 0)
                           {
                              this.mc.team = 13;
                              this.mc.char = this.skin_model[3];
                              this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "B";
                           }
                           else
                           {
                              this.mc.team = 12;
                              this.mc.char = this.skin_model[3];
                              this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "R";
                           }
                           this.mc.hea = this.mens[0].hea;
                           this.mc.hmax = this.mens[0].hmax;
                        }
                        else if(Number(b["#char"]) == -1)
                        {
                           this.mc.char = this.skin_model[2];
                           this.mc.charset_by_user = true;
                        }
                        else if(Number(b["#char"]) == 73)
                        {
                           this.mc.char = this.skin_model[3];
                           this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "B";
                        }
                        else if(Number(b["#char"]) == 74)
                        {
                           this.mc.char = this.skin_model[3];
                           this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "R";
                        }
                     }
                  }
                  this.mc.mdl_head = this.mc.char;
                  if(this.mc.char >= 40 && this.mc.char <= 48)
                  {
                     this.mc.char = 1;
                  }
                  if(this.mc.char == 61)
                  {
                     this.mc.char = 3;
                  }
                  this.mc.mdl_leg1_upper = this.mc.char;
                  this.mc.mdl_leg1_middle = this.mc.char;
                  this.mc.mdl_leg1_lower = this.mc.char;
                  this.mc.mdl_leg2_upper = this.mc.char;
                  this.mc.mdl_leg2_middle = this.mc.char;
                  this.mc.mdl_leg2_lower = this.mc.char;
                  this.mc.mdl_arm1_upper = this.mc.char;
                  this.mc.mdl_arm1_lower = this.mc.char;
                  this.mc.mdl_arm2_upper = this.mc.char;
                  this.mc.mdl_arm2_lower = this.mc.char;
                  this.mc.mdl_toe = this.mc.char;
                  this.mc.mdl_body = this.mc.char;
                  this.UpdateCharProps(this.mc);
                  if(a == "player")
                  {
                     if(this.MP_myid == this.mc.idd)
                     {
                        this.game_x = -this.mc.x + this.hscreenX;
                        this.game_y = -this.mc.y + this.hscreenY;
                     }
                     this.mc.isplayer = new Boolean(true);
                     ++this.MP_playerstotal;
                  }
                  else
                  {
                     this.mc.isplayer = new Boolean(false);
                  }
                  if(this.MP_mode)
                  {
                     if(!this.mc.isplayer || this.ANONYMOUS_MODE && this.MP_myid != this.mc.idd)
                     {
                        this.mc.gui.visible = false;
                     }
                  }
                  else if(this.mc.team != this.mens[this.MP_myid].team)
                  {
                     this.mc.gui.visible = false;
                  }
                  if(this.MP_mode)
                  {
                     if(this.mc.isplayer)
                     {
                        if(this.mc.idd != this.MP_myid)
                        {
                           this.mc.hea = 0;
                           this.mc.dead = true;
                           this.mc.alpha = 1;
                           this.mc.io = false;
                           this.mc.visible = false;
                        }
                        if(this.mc.idd == this.MP_myid)
                        {
                           this.mc.nick_color = this.color_player;
                        }
                        else if(this.mc.team == this.MP_team && this.MP_type != 1)
                        {
                           this.mc.nick_color = this.color_friendly;
                        }
                        else
                        {
                           this.mc.nick_color = this.color_enemy;
                        }
                     }
                     else if(this.mc.team != this.MP_team)
                     {
                        this.mc.nick_color = this.color_enemy;
                     }
                     else
                     {
                        this.mc.nick_color = this.color_friendly;
                     }
                  }
                  else if(this.mc.idd == this.MP_myid || this.mc.char == 3)
                  {
                     this.mc.nick_color = this.color_player;
                     xx = 0;
                     if(this.mc.char == 1)
                     {
                        xx = this.armorA;
                     }
                     if(this.mc.char == 3)
                     {
                        xx = this.armorB;
                     }
                     if(!this.MP_mode || this.MP_mode && this.MP_type == 2)
                     {
                        if(this.mc.char == 3 || this.mc.char == 1 || this.mc.char >= 40 && this.mc.char <= 49)
                        {
                           this.mc.hea *= (500 + xx * 50) / Number(this.mc.hmax);
                           this.mc.hmax = 500 + xx * 50;
                           if(this.skin_model[0] >= 49)
                           {
                              this.mc.hea *= 1.5;
                              this.mc.hmax *= 1.5;
                           }
                        }
                     }
                  }
                  else if(this.mc.team != this.mens[this.MP_myid].team)
                  {
                     this.mc.nick_color = this.color_enemy;
                  }
                  else
                  {
                     this.mc.nick_color = this.color_friendly;
                  }
                  if(this.mc.isplayer)
                  {
                     this.SpawnPlayerImmediately(this.mc);
                  }
                  if(this.MP_mode && this.MP_type == 1)
                  {
                     if(this.mc.isplayer)
                     {
                        this.mc.mobility = 1;
                     }
                  }
                  if(!this.FORCE_CUSTOM_MAP)
                  {
                     if(!this.MP_mode)
                     {
                        if(this.LOW_HPS)
                        {
                           this_limit = 130;
                           if(this.mc.char == 3 || this.mc.char == 1 || this.mc.char >= 40 && this.mc.char <= 49)
                           {
                              this_limit = 130;
                           }
                           if(this.mc.char == 49 || this.mc.char == 1 && this.skin_model[0] == 49)
                           {
                              this_limit = 150;
                           }
                           if(this.mc.char == 13)
                           {
                              this_limit = 150;
                           }
                           if(this.mc.char == 2)
                           {
                              this_limit = 130;
                           }
                           if(this.mc.char == 4)
                           {
                              this_limit = 100;
                           }
                           if(this.mc.char == 6)
                           {
                              this_limit = 150;
                           }
                           if(this.mc.char == 7)
                           {
                              this_limit = 210;
                           }
                           if(this.mc.char == 8)
                           {
                              this_limit = 130;
                           }
                           if(this.mc.char == 9)
                           {
                              this_limit = 190;
                           }
                           if(this.mc.char == 11)
                           {
                              this_limit = 300;
                           }
                           if(this.mc.char == 14)
                           {
                              this_limit = 170;
                           }
                           if(this.mc.char == 15)
                           {
                              this_limit = 350;
                           }
                           if(this.mc.char == 16)
                           {
                              this_limit = 200;
                           }
                           if(this.mc.char == 70)
                           {
                              this_limit = 150;
                           }
                           if(this.mc.char == 71)
                           {
                              this_limit = 130;
                           }
                           if(this.CUR_LOADING == "c38a")
                           {
                              if(this.mc.char == 3)
                              {
                                 this_limit = 10000;
                              }
                           }
                           if(this.mc.hea < 2000)
                           {
                              if(this.mc.hea > this_limit)
                              {
                                 this.mc.hea = this_limit;
                              }
                              if(this.mc.hmax > this_limit)
                              {
                                 this.mc.hmax = this_limit;
                              }
                           }
                        }
                     }
                  }
                  if(this.MP_mode)
                  {
                     if(!this.mc.isplayer)
                     {
                        this.mc.startteam = this.mc.team;
                        this.mc.startside = this.mc.side;
                        this.mc.startbotaction = this.mc.botaction;
                        this.mc.startchar = this.mc.char;
                     }
                  }
               }
            }
            loadmap_stage = "5";
            loadmap_stage += "; Player does not exist. Can\'t display team table";
            if(this.MP_spectator)
            {
               this.MP_myid = 0;
            }
            this.UpdateTeamTable();
            loadmap_stage = "5001";
            region_i = 0;
            trigger_i = 0;
            timer_i = 0;
            player_i = 0;
            for each(bookInfo in xml.children())
            {
               loadmap_stage = "5002";
               a = bookInfo.name();
               loadmap_stage = "5003";
               b = [];
               loadmap_stage = "5004";
               for each(bookInfo2 in bookInfo.attributes())
               {
                  loadmap_stage = "5005";
                  b["#" + bookInfo2.name()] = bookInfo2;
                  loadmap_stage = "5006";
               }
               loadmap_stage = "5007";
               if(a == "region")
               {
                  loadmap_stage = "5008";
                  this.regions[region_i].use_target = this.DecodeUID(this.regions[region_i].use_target);
                  loadmap_stage = "5009";
                  region_i++;
               }
               else if(a == "trigger")
               {
                  loadmap_stage = "5010";
                  i = 0;
                  while(i < this.triggers[trigger_i].actions_total)
                  {
                     loadmap_stage = "5011";
                     this.triggers[trigger_i].actions_targetA[i] = this.DecodeUID(this.triggers[trigger_i].actions_targetA[i]);
                     loadmap_stage = "5012";
                     this.triggers[trigger_i].actions_targetB[i] = this.DecodeUID(this.triggers[trigger_i].actions_targetB[i]);
                     loadmap_stage = "5013";
                     i++;
                  }
                  trigger_i++;
               }
               else if(a == "timer")
               {
                  loadmap_stage = "5014";
                  this.timers[timer_i].actions_target = this.DecodeUID(this.timers[timer_i].actions_target);
                  loadmap_stage = "5015";
                  timer_i++;
               }
               else if(a == "player" || a == "enemy")
               {
                  loadmap_stage = "5016";
                  loadmap_stage += "; player_i=" + player_i;
                  loadmap_stage += "; mens[player_i]=" + this.mens[player_i];
                  loadmap_stage += "; mens[player_i].incar=" + this.mens[player_i].incar;
                  loadmap_stage += "; DecodeUID(mens[player_i].incar)=" + this.DecodeUID(this.mens[player_i].incar);
                  this.mens[player_i].incar = this.DecodeUID(this.mens[player_i].incar);
                  loadmap_stage = "5017";
                  this.mens[player_i].ondeath = this.DecodeUID(this.mens[player_i].ondeath);
                  player_i++;
               }
               loadmap_stage = "5018";
            }
            loadmap_stage = "5019";
            i = 0;
            while(i < this.playerstotal)
            {
               loadmap_stage = "5020";
               if(this.mens[i].incar == -2)
               {
                  loadmap_stage = "5021";
                  this.i2 = 0;
                  while(this.i2 < this.vehiclestotal)
                  {
                     loadmap_stage = "5022";
                     if(this.vehicles[this.i2].master == -1)
                     {
                        loadmap_stage = "5023";
                        if(this.Dist2D(this.mens[i].x,this.mens[i].y,this.vehicles[this.i2].x,this.vehicles[this.i2].y) < 100)
                        {
                           loadmap_stage = "5024";
                           this.PutInCar(i,this.i2);
                           this.i2 = this.vehiclestotal;
                        }
                     }
                     ++this.i2;
                  }
                  loadmap_stage = "5025";
                  if(this.mens[i].incar == -2)
                  {
                     this.mens[i].incar = -1;
                  }
                  loadmap_stage = "5026";
               }
               else if(this.mens[i].incar >= 0 || typeof this.mens[i].incar == "string")
               {
                  loadmap_stage = "5027";
                  this.PutInCar(i,this.DecodeUID(this.mens[i].incar));
                  loadmap_stage = "5028";
               }
               loadmap_stage = "5029";
               i++;
            }
            loadmap_stage = "6";
            i = 0;
            while(i < this.decorstotal)
            {
               cur_label = this.decors[i].currentFrameLabel;
               if(cur_label == "antigravity" || cur_label == "antigravity_left" || cur_label == "antigravity_right" || cur_label == "wall_lamp_right_on" || cur_label == "wall_lamp_left_on" || cur_label == "wall_lamp_up_on" || cur_label == "wall_lamp_down_on" || cur_label == "back_lamp_vertical_on" || cur_label == "back_lamp_horizontal_on" || cur_label == "teleport" || cur_label == "teleport2" || cur_label == "final_place2" || cur_label == "ray_left" || cur_label == "ray_right" || cur_label == "ray_floor" || cur_label == "ray_ceil" || cur_label == "column_red" || cur_label == "column_green" || cur_label == "column_blue")
               {
                  this.i2 = 0;
                  while(this.i2 < this.lampstotal)
                  {
                     if(Math.abs(Number(this.decors[i].x) - Number(this.lamps_x[this.i2])) + Math.abs(Number(this.decors[i].y) - Number(this.lamps_y[this.i2])) < 40)
                     {
                        --this.lampstotal;
                        this.i3 = this.i2;
                        while(this.i3 < this.lampstotal)
                        {
                           this.lamps_x[this.i3] = this.lamps_x[this.i3 + 1];
                           this.lamps_y[this.i3] = this.lamps_y[this.i3 + 1];
                           this.lamps_power[this.i3] = this.lamps_power[this.i3 + 1];
                           this.lamps_power2[this.i3] = this.lamps_power2[this.i3 + 1];
                           ++this.i3;
                        }
                     }
                     ++this.i2;
                  }
                  offset_x = 0;
                  offset_y = 0;
                  if(cur_label == "antigravity" || cur_label == "teleport" || cur_label == "ray_floor" || cur_label == "wall_lamp_up_on")
                  {
                     offset_y = -20;
                  }
                  if(cur_label == "teleport2" || cur_label == "final_place2" || cur_label == "ray_ceil" || cur_label == "wall_lamp_down_on")
                  {
                     offset_y = 20;
                  }
                  if(cur_label == "ray_left" || cur_label == "antigravity_right" || cur_label == "wall_lamp_right_on")
                  {
                     offset_x = 20;
                  }
                  if(cur_label == "ray_right" || cur_label == "antigravity_left" || cur_label == "wall_lamp_left_on")
                  {
                     offset_x = -20;
                  }
                  this.lamps_x[this.lampstotal] = this.decors[i].x + offset_x;
                  this.lamps_y[this.lampstotal] = this.decors[i].y + offset_y;
                  this.lamps_power[this.lampstotal] = 0.45;
                  this.lamps_power2[this.lampstotal] = -1;
                  this.lamps_sprites[this.lampstotal];
                  ++this.lampstotal;
               }
               i++;
            }
            loadmap_stage = "7";
            this.i2 = 0;
            while(this.i2 < this.lampstotal)
            {
               if(this.lamps_power2[this.i2] == 2)
               {
                  this.flare[this.flarestotal] = this.graphics_3d_front.addChildAt(new lens_flare(),this.graphics_3d_front.numChildren);
                  this.NoMouse(this.flare[this.flarestotal]);
                  this.flare[this.flarestotal].x = this.lamps_x[this.i2];
                  this.flare[this.flarestotal].y = this.lamps_y[this.i2];
                  this.flare_power[this.flarestotal] = 1;
                  this.flare[this.flarestotal].alpha = 0;
                  ++this.flarestotal;
               }
               ++this.i2;
            }
            loadmap_stage = "8";
            if(!this.SUPER_COMPUTER)
            {
               this.step_size *= 2;
            }
            half_step_size = this.step_size / 2;
            this.g_minx = this.boxx[0];
            this.g_maxx = this.boxx[0] + this.boxw[0];
            this.g_miny = this.boxy[0];
            this.g_maxy = this.boxy[0] + this.boxh[0];
            col = [];
            i = 0;
            while(i < this.boxestotal)
            {
               this.g_minx = Math.min(this.boxx[i],this.g_minx);
               this.g_miny = Math.min(this.boxy[i],this.g_miny);
               this.g_maxx = Math.max(this.boxx[i] + this.boxw[i],this.g_maxx);
               this.g_maxy = Math.max(this.boxy[i] + this.boxh[i],this.g_maxy);
			   if(bottomsurfacebox[i] != undefined) {
					this.bottomsurface[i] = this.graphics_3d.addChildAt(this.bottomsurfacebox[i],this.graphics_3d.numChildren);
			   }
			   if(topsurfacebox[i] != undefined) {
					this.topsurface[i] = this.graphics_3d.addChildAt(this.topsurfacebox[i],this.graphics_3d.numChildren);
			   }
               i++;
            }
		
			i = 0;
			while(i < this.bgstotal) {
				if(this.bgtexture[i] != undefined) {
					this.bgbox[i] = this.mShape.addChildAt(this.bgtexture[i],this.mShape.numChildren);
				}
				i++;
			}		
		
            this.cx = (this.g_maxx - this.g_minx) / 20;
            this.cy = (this.g_maxy - this.g_miny) / 20;
            this.temp = this.graphics_3d.addChildAt(this.mShape,this.graphics_3d.numChildren);
            this.graphics_3d_front.addChildAt(mShape_front,this.graphics_3d_front.numChildren);
            i = 0;
            while(i < this.attachments.length)
            {
               this.attachments[i].parent = this.doors[this.DecodeUID(this.attachments[i].parent)];
               if(this.attachments[i].type == 3)
               {
                  this.attachments[i].dx = Number(this.pushx[this.attachments[i].child]) - Number(this.attachments[i].parent.x);
                  this.attachments[i].dy = Number(this.pushy[this.attachments[i].child]) - Number(this.attachments[i].parent.y);
                  this.attachments[i].dx2 = Number(this.pushw[this.attachments[i].child]) - Number(this.attachments[i].parent.x);
                  this.attachments[i].dy2 = Number(this.pushh[this.attachments[i].child]) - Number(this.attachments[i].parent.y);
               }
               else
               {
                  this.attachments[i].dx = Number(this.attachments[i].child.x) - Number(this.attachments[i].parent.x);
                  this.attachments[i].dy = Number(this.attachments[i].child.y) - Number(this.attachments[i].parent.y);
               }
               if(this.attachments[i].type == 1)
               {
                  (!!this.attachments[i].foreground ? this.graphics_3d_front : this.graphics_3d).addChildAt(this.attachments[i].child,(!!this.attachments[i].foreground ? this.graphics_3d_front : this.graphics_3d).numChildren);
               }
               i++;
            }
            i = 0;
            while(i < this.watertotal)
            {
               if(this.wa_friction[i])
               {
                  this.temp = this.graphics_3d_front.addChildAt(new water(),this.graphics_3d_front.numChildren);
                  this.NoMouse(this.temp);
                  this.temp.x = this.wax[i];
                  this.temp.y = this.way[i];
                  this.temp.scaleX = Number(this.waw[i]) / 100;
                  this.temp.scaleY = Number(this.wah[i]) / 100;
                  if(this.wadamage[i] > 0)
                  {
                     if(watercolor2 != "")
                     {
                        this.temp.gotoAndStop(3);
                        ct = new ColorTransform();
                        ct.color = uint("0x" + watercolor2.substr(1));
                        this.temp.transform.colorTransform = ct;
                     }
                     else
                     {
                        this.temp.gotoAndStop(1);
                     }
                  }
                  else if(watercolor1 != "")
                  {
                     this.temp.gotoAndStop(3);
                     ct = new ColorTransform();
                     ct.color = uint("0x" + watercolor1.substr(1));
                     this.temp.transform.colorTransform = ct;
                  }
                  else
                  {
                     this.temp.gotoAndStop(2);
                  }
               }
               this.wax[i] -= 10;
               this.waw[i] += 20;
               this.wah[i] += 10;
               i++;
            }
            loadmap_stage = "9";
            if(!this.OpenTop)
            {
               this.temp = this.graphics_3d_front.addChildAt(new texture_front0(),this.graphics_3d_front.numChildren);
               this.NoMouse(this.temp);
               this.temp.x = this.g_minx;
               this.temp.scaleX = (this.g_maxx - this.g_minx) / 100;
               this.temp.scaleY = 1000 / 100;
               this.temp.y = this.g_miny - 1000;
            }
            this.temp = this.graphics_3d_front.addChildAt(new texture_front0(),this.graphics_3d_front.numChildren);
            this.NoMouse(this.temp);
            this.temp.x = this.g_minx - 1000;
            this.temp.scaleX = (this.g_maxx - this.g_minx + 2000) / 100;
            this.temp.scaleY = 1000 / 100;
            this.temp.y = this.g_maxy;
            if(!this.OpenTop)
            {
               this.temp = this.graphics_3d_front.addChildAt(new texture_front0(),this.graphics_3d_front.numChildren);
               this.NoMouse(this.temp);
               this.temp.x = this.g_minx - 1000;
               this.temp.scaleX = 1000 / 100;
               this.temp.scaleY = (2000 + this.g_maxy - this.g_miny) / 100;
               this.temp.y = this.g_miny - 1000;
               this.temp = this.graphics_3d_front.addChildAt(new texture_front0(),this.graphics_3d_front.numChildren);
               this.NoMouse(this.temp);
               this.temp.x = this.g_maxx;
               this.temp.scaleX = 1000 / 100;
               this.temp.scaleY = (2000 + this.g_maxy - this.g_miny) / 100;
               this.temp.y = this.g_miny - 1000;
            }
            i = 0;
            while(i < this.doorstotal)
            {
               if(this.doors[i].vis)
               {
                  this.gamedoor[i] = this.graphics_3d.addChildAt(new texture_front0(),this.graphics_3d.numChildren);
                  this.NoMouse(this.temp);
                  this.gamedoor[i].x = this.doors[i].x;
                  this.gamedoor[i].scaleX = this.doors[i].scaleX;
                  this.gamedoor[i].scaleY = this.doors[i].scaleY;
                  this.gamedoor[i].y = this.doors[i].y;
                  this.link_surface(this.gamedoor[i],i);
               }
               i++;
            }
		
            i = 0;
            while(i < this.boxestotal)
            {
			   // DOORS STUFF
               this.gamebox[i] = this.graphics_3d.addChildAt(new texture_front0(),this.graphics_3d.numChildren);
               this.NoMouse(this.gamebox[i]);
               this.gamebox[i].x = this.boxx[i];
               this.gamebox[i].scaleX = Number(this.boxw[i]) / 100;
               this.gamebox[i].scaleY = Number(this.boxh[i]) / 100;
               this.gamebox[i].y = this.boxy[i];
               i++;
            }
            loadmap_stage = "10";
            this.mShape = new Sprite();
            SnowShape = new Sprite();
            i = 0;
            while(i < this.boxestotal)
            {
               this.i2 = 0;
               while(this.i2 < Number(this.boxw[i]) / 10)
               {
                  col[this.i2] = true;
                  ++this.i2;
               }
               this.i2 = 0;
               while(this.i2 < this.boxestotal)
               {
                  if(i != this.i2)
                  {
                     if(this.boxy[i] + this.boxh[i] > this.boxy[this.i2])
                     {
                        if(this.boxy[i] + this.boxh[i] < this.boxy[this.i2] + this.boxh[this.i2])
                        {
                           if(this.boxx[this.i2] <= this.boxx[i] + this.boxw[i])
                           {
                              if(this.boxx[this.i2] + this.boxw[this.i2] >= this.boxx[i])
                              {
                                 this.i3 = 0;
                                 while(this.i3 < Number(this.boxw[i]) / 10)
                                 {
                                    if(this.boxx[i] + this.i3 * 10 >= this.boxx[this.i2])
                                    {
                                       if(this.boxx[i] + this.i3 * 10 < this.boxx[this.i2] + this.boxw[this.i2])
                                       {
                                          col[this.i3] = false;
                                       }
                                    }
                                    ++this.i3;
                                 }
                              }
                           }
                        }
                     }
                  }
                  ++this.i2;
               }
			   this.bottomsurfacebox[i] = new Shape();
               len = 0;
               this.i2 = 0;
               while(this.i2 < Number(this.boxw[i]) / 10)
               {
                  if(col[this.i2])
                  {
                     len = 0;
                     while(Boolean(col[this.i2 + len]) && this.i2 + len < Number(this.boxw[i]) / 10)
                     {
                        len++;
                     }
                     if(this.boxmat[i] == 0 || this.boxmat[i] == 18)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.beginBitmapFill(new panel_bottom(0,0),_mtx,true,true);
                        this.bottomsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                        this.bottomsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 3)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.beginBitmapFill(new panel2_bottom(0,0),_mtx,true,true);
                        this.bottomsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                        this.bottomsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 4)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.beginBitmapFill(new panel4_bottom(0,0),_mtx,true,true);
                        this.bottomsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                        this.bottomsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 7)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.beginBitmapFill(new dark_panel_clean_low(0,0),_mtx,true,true);
                        this.bottomsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                        this.bottomsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 8)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.beginBitmapFill(new light_panel_low(0,0),_mtx,true,true);
                        this.bottomsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                        this.bottomsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 9)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.beginBitmapFill(new light_panel_clean_low(0,0),_mtx,true,true);
                        this.bottomsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                        this.bottomsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 10)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.beginBitmapFill(new usurper_bottom(0,0),_mtx,true,true);
                        this.bottomsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                        this.bottomsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 11)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.beginBitmapFill(new industrial(0,0),_mtx,true,true);
                        this.bottomsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                        this.bottomsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 13)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.beginBitmapFill(new white_concrete_underside(0,0),_mtx,true,true);
                        this.bottomsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                        this.bottomsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 17)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.beginBitmapFill(new usurper2_ceiling(0,0),_mtx,true,true);
                        this.bottomsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                        this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                        this.bottomsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 3 || this.boxmat[i] == 0 || this.boxmat[i] == 10 || this.boxmat[i] == 11 || this.boxmat[i] == 13 || this.boxmat[i] == 18)
                     {
                        if(this.boxx[i] + this.i2 * 10 + len * 10 - (this.boxx[i] + this.i2 * 10) >= 20)
                        {
                           corner_sample_left = panel_bottom_left;
                           corner_sample_right = panel_bottom_right;
                           if(this.boxmat[i] == 10)
                           {
                              corner_sample_left = usurper_bottom_left;
                              corner_sample_right = usurper_bottom_right;
                           }
                           if(this.boxmat[i] == 11)
                           {
                              corner_sample_left = indrustrial_bottom_left;
                              corner_sample_right = indrustrial_bottom_right;
                           }
                           if(this.boxmat[i] == 13)
                           {
                              corner_sample_left = white_concrete_bottom_left;
                              corner_sample_right = white_concrete_bottom_right;
                           }
                           if(this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 - 5,this.boxy[i] + this.boxh[i] - 5) || !this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 - 5,this.boxy[i] + this.boxh[i] + 5) && !this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 - 5,this.boxy[i] + this.boxh[i] - 5))
                           {
                              _mtx = new Matrix();
                              _mtx.translate(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                              this.bottomsurfacebox[i].graphics.beginBitmapFill(new corner_sample_left(0,0),_mtx,true,true);
                              this.bottomsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                              this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + 12,this.boxy[i] + this.boxh[i] - 16);
                              this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + 12,this.boxy[i] + this.boxh[i]);
                              this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                              this.bottomsurfacebox[i].graphics.endFill();
                           }
                           if(this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 + len * 10 + 5,this.boxy[i] + this.boxh[i] - 5) || !this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 + len * 10 + 5,this.boxy[i] + this.boxh[i] + 5) && !this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 + len * 10 + 5,this.boxy[i] + this.boxh[i] - 5))
                           {
                              _mtx = new Matrix();
                              _mtx.translate(this.boxx[i] + this.i2 * 10 + len * 10 - 12,this.boxy[i] + this.boxh[i] - 16);
                              this.bottomsurfacebox[i].graphics.beginBitmapFill(new corner_sample_right(0,0),_mtx,true,true);
                              this.bottomsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10 + len * 10 - 12,this.boxy[i] + this.boxh[i] - 16);
                              this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                              this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                              this.bottomsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 12,this.boxy[i] + this.boxh[i]);
                              this.bottomsurfacebox[i].graphics.endFill();
                           }
                        }
                     }
                     this.i2 += len - 1;
                  }
                  ++this.i2;
               }
               i++;
            }
            loadmap_stage = "11";
            my_date = new Date();
            if(this.FORCE_SNOW || (my_date.month <= 1 || my_date.month >= 11))
            {
               this.flakes_letitsnow = true;
               if(!this.FORCE_SNOW)
               {
                  switch(this.sky.currentFrame)
                  {
                     case 5:
                        this.flakes_letitsnow = false;
                  }
               }
            }
            else
            {
               this.flakes_letitsnow = false;
            }
            if(!this.HQ)
            {
               this.flakes_letitsnow = false;
            }
            loadmap_stage = "12";
            i = 0;
            while(i < this.boxestotal)
            {
               this.i2 = 0;
               while(this.i2 < Number(this.boxw[i]) / 10)
               {
                  col[this.i2] = true;
                  ++this.i2;
               }
               this.i2 = 0;
               while(this.i2 < this.boxestotal)
               {
                  if(i != this.i2)
                  {
                     if(this.boxy[i] > this.boxy[this.i2])
                     {
                        if(this.boxy[i] <= this.boxy[this.i2] + this.boxh[this.i2])
                        {
                           if(this.boxx[this.i2] <= this.boxx[i] + this.boxw[i])
                           {
                              if(this.boxx[this.i2] + this.boxw[this.i2] >= this.boxx[i])
                              {
                                 this.i3 = 0;
                                 while(this.i3 < Number(this.boxw[i]) / 10)
                                 {
                                    if(this.boxx[i] + this.i3 * 10 >= this.boxx[this.i2])
                                    {
                                       if(this.boxx[i] + this.i3 * 10 < this.boxx[this.i2] + this.boxw[this.i2])
                                       {
                                          col[this.i3] = false;
                                       }
                                    }
                                    ++this.i3;
                                 }
                              }
                           }
                        }
                     }
                  }
                  ++this.i2;
               }
			   this.topsurfacebox[i] = new Shape();
               len = 0;
               this.i2 = 0;
               while(this.i2 < Number(this.boxw[i]) / 10)
               {
                  if(col[this.i2])
                  {
                     len = 0;
                     while(Boolean(col[this.i2 + len]) && this.i2 + len < Number(this.boxw[i]) / 10)
                     {
                        len++;
                     }
                     if(this.boxmat[i] == 0)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new panel_top(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 1)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new panel_top2(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10 + 28,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] + 38 - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + 28,this.boxy[i] + 38 - 23);
                        this.topsurfacebox[i].graphics.endFill();
                        _mtx = new Matrix();
                        _mtx.translate(this.boxx[i] + this.i2 * 10,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new panel_top2a(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10 + 1,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + 28,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + 28,this.boxy[i] + 38 - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + 1,this.boxy[i] + 38 - 23);
                        this.topsurfacebox[i].graphics.endFill();
                        _mtx = new Matrix();
                        _mtx.translate(this.boxx[i] + this.i2 * 10 + len * 10 - 28,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new panel_top2b(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 + 16 - 1,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 + 16 - 1,this.boxy[i] + 38 - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] + 38 - 23);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 2)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,Number(this.boxy[i]) - 6);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new panel_top3(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,Number(this.boxy[i]) - 6 + 1);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,Number(this.boxy[i]) - 6 + 1);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 26 - 6);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 26 - 6);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 3)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new panel2_top(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 4)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new panel4_top(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 5)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new grass2(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10 + 28,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] + 38 - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + 28,this.boxy[i] + 38 - 23);
                        this.topsurfacebox[i].graphics.endFill();
                        _mtx = new Matrix();
                        _mtx.translate(this.boxx[i] + this.i2 * 10,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new grass2b(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10 + 1,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + 28,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + 28,this.boxy[i] + 38 - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + 1,this.boxy[i] + 38 - 23);
                        this.topsurfacebox[i].graphics.endFill();
                        _mtx = new Matrix();
                        _mtx.translate(this.boxx[i] + this.i2 * 10 + len * 10 - 28,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new grass2a(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 + 16 - 1,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 + 16 - 1,this.boxy[i] + 38 - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] + 38 - 23);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 6)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new grass3(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10 + 28,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] + 38 - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + 28,this.boxy[i] + 38 - 23);
                        this.topsurfacebox[i].graphics.endFill();
                        _mtx = new Matrix();
                        _mtx.translate(this.boxx[i] + this.i2 * 10,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new grass3b(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10 + 1,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + 28,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + 28,this.boxy[i] + 38 - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + 1,this.boxy[i] + 38 - 23);
                        this.topsurfacebox[i].graphics.endFill();
                        _mtx = new Matrix();
                        _mtx.translate(this.boxx[i] + this.i2 * 10 + len * 10 - 28,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new grass3a(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 + 16 - 1,Number(this.boxy[i]) - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 + 16 - 1,this.boxy[i] + 38 - 23);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] + 38 - 23);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 7)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new dark_panel_clean(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 8)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new light_panel(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 9)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new light_panel_clean(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 10)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new usurper_floor(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 11)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new industrial(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 12)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new asphalt(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 13)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new white_concrete(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 14)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new pbfttp_concrete(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 15)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,Number(this.boxy[i]) - 6);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new wet_sand(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,Number(this.boxy[i]) - 6 + 1);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,Number(this.boxy[i]) - 6 + 1);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 26 - 6);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 26 - 6);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 16)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,Number(this.boxy[i]) - 6);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new mud(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,Number(this.boxy[i]) - 6 + 1);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,Number(this.boxy[i]) - 6 + 1);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 26 - 6);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 26 - 6);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 17)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new usurper2_bottom(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 18)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new stone_bricks(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 19)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new wood_tex(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 20)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,Number(this.boxy[i]) - 6);
                        this.topsurfacebox[i].graphics.beginBitmapFill(new rocks(0,0),_mtx,true,true);
                        this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,Number(this.boxy[i]) - 6 + 1);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,Number(this.boxy[i]) - 6 + 1);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 26 - 6);
                        this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 26 - 6);
                        this.topsurfacebox[i].graphics.endFill();
                     }
                     if(this.boxmat[i] == 3 || this.boxmat[i] == 0 || this.boxmat[i] == 10 || this.boxmat[i] == 11 || this.boxmat[i] == 13 || this.boxmat[i] == 14 || this.boxmat[i] == 18)
                     {
                        if(this.boxx[i] + this.i2 * 10 + len * 10 - (this.boxx[i] + this.i2 * 10) >= 20)
                        {
                           corner_sample_left = panel_top_left;
                           corner_sample_right = panel_top_right;
                           if(this.boxmat[i] == 10)
                           {
                              corner_sample_left = usurper_top_left;
                              corner_sample_right = usurper_top_right;
                           }
                           if(this.boxmat[i] == 11)
                           {
                              corner_sample_left = indrustrial_left;
                              corner_sample_right = indrustrial_right;
                           }
                           if(this.boxmat[i] == 13)
                           {
                              corner_sample_left = white_concrete_top_right;
                              corner_sample_right = white_concrete_top_left;
                           }
                           if(this.boxmat[i] == 14)
                           {
                              corner_sample_left = pbfttp_corner_left;
                              corner_sample_right = pbfttp_corner_right;
                           }
                           if(this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 - 5,this.boxy[i] + 5) || !this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 - 5,Number(this.boxy[i]) - 5) && !this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 - 5,this.boxy[i] + 5))
                           {
                              _mtx = new Matrix();
                              _mtx.translate(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                              this.topsurfacebox[i].graphics.beginBitmapFill(new corner_sample_left(0,0),_mtx,true,true);
                              this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                              this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + 12,this.boxy[i]);
                              this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + 12,this.boxy[i] + 16);
                              this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                              this.topsurfacebox[i].graphics.endFill();
                           }
                           if(this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 + len * 10 + 5,this.boxy[i] + 5) || !this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 + len * 10 + 5,Number(this.boxy[i]) - 5) && !this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 + len * 10 + 5,this.boxy[i] + 5))
                           {
                              _mtx = new Matrix();
                              _mtx.translate(this.boxx[i] + this.i2 * 10 + len * 10 - 12,this.boxy[i]);
                              this.topsurfacebox[i].graphics.beginBitmapFill(new corner_sample_right(0,0),_mtx,true,true);
                              this.topsurfacebox[i].graphics.moveTo(this.boxx[i] + this.i2 * 10 + len * 10 - 12,this.boxy[i]);
                              this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                              this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                              this.topsurfacebox[i].graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 12,this.boxy[i] + 16);
                              this.topsurfacebox[i].graphics.endFill();
                           }
                        }
                     }
                     if(this.flakes_letitsnow)
                     {
                        snow = new Sprite();
                        xx = 0.5;
                        while(xx <= len - 0.5)
                        {
                           if(this.VerticalTrace(this.boxx[i] + this.i2 * 10 + xx * 10,Number(this.boxy[i]) - 10 + (Math.random() * 6 - 3) - 5))
                           {
                              rad = 9 + Math.random() * 4;
                              if(xx < 3)
                              {
                                 rad = (rad * xx / 3 + rad) / 2;
                              }
                              if(xx > len - 3)
                              {
                                 rad = (rad * (len - xx) / 3 + rad) / 2;
                              }
                              snow.graphics.beginFill(16711423);
                              snow.graphics.drawRoundRect(this.boxx[i] + this.i2 * 10 + xx * 10 - rad / 2,this.boxy[i] + (Math.random() * 6 - 3) - rad * 0.8,rad,rad,rad);
                              snow.graphics.endFill();
                           }
                           xx += 0.25;
                        }
                        this.ForceRasterize(snow);
                        SnowShape.addChild(snow);
                     }
                     this.i2 += len - 1;
                  }
                  ++this.i2;
               }
               i++;
            }		
            this.temp = this.graphics_3d.addChildAt(this.mShape,this.graphics_3d.numChildren);
			i = 0;
			while(i < this.boxestotal) {
				if(this.bottomsurfacebox[i] != undefined) {
					this.bottomsurface[i] = this.graphics_3d.addChildAt(this.bottomsurfacebox[i],this.graphics_3d.numChildren);
				}
				if(this.topsurfacebox[i] != undefined) {
					this.topsurface[i] = this.graphics_3d.addChildAt(this.topsurfacebox[i],this.graphics_3d.numChildren);
				}
				i++;
			}
		
            loadmap_stage = "13";
            traces_start = Number(getTimer());
            if(this.HQ)
            {
               global_lamps_power = 0.85;
               switch(this.sky.currentFrame)
               {
                  case 1:
                     global_lamps_power = 0.52;
                     break;
                  case 2:
                     global_lamps_power = 0.8;
                     break;
                  case 3:
                     global_lamps_power = 1;
                     break;
                  case 4:
                     global_lamps_power = 0;
                     break;
                  case 5:
                     global_lamps_power = 0.25;
                     break;
                  case 6:
                     global_lamps_power = 0.36;
                     break;
                  case 7:
                     global_lamps_power = 0.87;
                     break;
                  case 8:
                     global_lamps_power = 0.34;
                     break;
                  case 9:
                     global_lamps_power = 0.83;
                     break;
                  case 10:
                     global_lamps_power = 0.8;
                     break;
                  case 11:
                     global_lamps_power = 0.18;
               }
               loadmap_stage = "1301";
               falloff = 100;
               fallstep = 50;
               lamps_from = this.lampstotal;
               xx = this.g_minx - falloff;
               while(xx <= this.g_maxx + falloff)
               {
                  yy = this.g_miny - falloff;
                  while(yy <= this.g_maxy + falloff)
                  {
                     if(this.TraceBgFalloff(xx,yy,falloff))
                     {
                        if(!this.TraceBgFalloff(xx,yy,50))
                        {
                           if(this.TracePointOnlyBoxes(xx,yy))
                           {
                              this.lamps_x[this.lampstotal] = xx;
                              this.lamps_y[this.lampstotal] = yy;
                              this.lamps_power[this.lampstotal] = 0.8 * global_lamps_power;
                              this.lamps_power2[this.lampstotal] = -1;
                              ++this.lampstotal;
                           }
                        }
                     }
                     yy += fallstep;
                  }
                  xx += fallstep;
               }
               loadmap_stage = "1302";
               this.g_minx -= this.step_size * 2;
               this.g_miny -= this.step_size * 2;
               this.g_maxx += this.step_size * 4;
               this.g_maxy += this.step_size * 4;
               loadmap_stage = "1303";
               this.lightmap_ma = new Matrix(1 / this.step_size,0,0,1 / this.step_size,-this.g_minx / this.step_size,-this.g_miny / this.step_size);
               loadmap_stage = "1304";
               bmp_w = Math.max((this.g_maxx - this.g_minx) / this.step_size,1);
               bmp_h = Math.max((this.g_maxy - this.g_miny) / this.step_size);
               loadmap_stage = "1305";
               this.bmpData = new BitmapData(bmp_w,bmp_h,true,16777216);
               loadmap_stage = "1306";
               g = new Sprite();
               loadmap_stage = "1307";
               this.i3 = 0;
               while(this.i3 < this.bgstotal)
               {
                  if(this.bg_cast[this.i3])
                  {
                     loadmap_stage = "1308";
                     g.graphics.beginFill(4278190080);
                     loadmap_stage = "1309";
                     g.graphics.drawRect(this.bgx[this.i3],this.bgy[this.i3],this.bgw[this.i3],this.bgh[this.i3]);
                     loadmap_stage = "1310";
                     g.graphics.endFill();
                  }
                  ++this.i3;
               }
               this.bg_cast = null;
               loadmap_stage = "1311";
               this.bmpData.draw(g,this.lightmap_ma,null,null,null,false);
               loadmap_stage = "1312";
               this.bmpData.colorTransform(this.bmpData.rect,new ColorTransform(1,1,1,-1 * 0.85,0,0,0,255));
               loadmap_stage = "1313";
               this.bmpData_backed = this.bmpData.clone();
               loadmap_stage = "1314";
               this.i5 = this.lampstotal;
               this.i7 = this.doorstotal;
               this.doorstotal = 0;
               this.cx = (this.g_maxx - this.g_minx) / this.step_size;
               this.cy = (this.g_maxy - this.g_miny) / this.step_size;
               loadmap_stage = "1315";
               clrs = [];
               poss = [];
               dip = 0;
               while(dip < 1)
               {
                  clrs.push(0);
                  poss.push(dip * 255);
                  dip += 0.1;
               }
               loadmap_stage = "1316";
               this.i4 = 0;
               while(this.i4 < this.i5)
               {
                  g = new Sprite();
                  alphas = [];
                  dip = 0;
                  while(dip < 1)
                  {
                     if(this.lamps_power2[this.i4] >= 0)
                     {
                        alphas.push(1 / (dip * 10 + 0.1) * Number(this.lamps_power[this.i4]));
                     }
                     else
                     {
                        alphas.push(1 / (dip * 10 + 0.1) * Number(this.lamps_power[this.i4]));
                     }
                     dip += 0.1;
                  }
                  loadmap_stage = "1317";
                  matr0 = new Matrix();
                  siz = Number(this.lamps_power[this.i4]) * 200 * 20 * 1.4;
                  loadmap_stage = "1318";
                  matr0.createGradientBox(siz,siz,0,Number(this.lamps_x[this.i4]) - siz / 2,Number(this.lamps_y[this.i4]) - siz / 2);
                  loadmap_stage = "1319";
                  g.graphics.beginGradientFill(GradientType.RADIAL,clrs,alphas,poss,matr0,SpreadMethod.PAD);
                  loadmap_stage = "1320";
                  lamp_step = this.lamps_power2[this.i4] == -1 ? Math.PI * 0.1 : Math.PI * 0.05;
                  loadmap_stage = "1321";
                  an = 0;
                  while(an < Math.PI * 2)
                  {
                     this_rad = siz / 2;
                     loadmap_stage = "1322";
                     xx = this.lamps_x[this.i4] + Math.sin(an) * this_rad;
                     yy = this.lamps_y[this.i4] + Math.cos(an) * this_rad;
                     this.xx2 = this.lamps_x[this.i4];
                     this.yy2 = this.lamps_y[this.i4];
                     this.v;
                     loadmap_stage = "1323";
                     this.i2 = 0;
                     while(this.i2 < this.boxestotal)
                     {
                        if(Math.max(this.xx2,xx) > this.boxx[this.i2] && Math.min(this.xx2,xx) < this.boxx[this.i2] + this.boxw[this.i2])
                        {
                           if(Math.max(this.yy2,yy) > this.boxy[this.i2] && Math.min(this.yy2,yy) < this.boxy[this.i2] + this.boxh[this.i2])
                           {
                              loadmap_stage = "1324";
                              if(this.CheckCrossSimpleOpti(xx,yy,this.xx2,this.yy2,this.boxx[this.i2],this.boxy[this.i2],this.boxx[this.i2] + this.boxw[this.i2],this.boxy[this.i2]))
                              {
                                 this.v = this.Dist2D(this.xx2,this.yy2,this.retux,this.retuy);
                                 if(this.v < this_rad)
                                 {
                                    xx = this.retux;
                                    yy = this.retuy;
                                    this_rad = this.v;
                                 }
                              }
                              loadmap_stage = "1325";
                              if(this.CheckCrossSimpleOpti(xx,yy,this.xx2,this.yy2,this.boxx[this.i2],this.boxy[this.i2] + this.boxh[this.i2],this.boxx[this.i2] + this.boxw[this.i2],this.boxy[this.i2] + this.boxh[this.i2]))
                              {
                                 this.v = this.Dist2D(this.xx2,this.yy2,this.retux,this.retuy);
                                 if(this.v < this_rad)
                                 {
                                    xx = this.retux;
                                    yy = this.retuy;
                                    this_rad = this.v;
                                 }
                              }
                              loadmap_stage = "1326";
                              if(this.CheckCrossSimpleOpti(xx,yy,this.xx2,this.yy2,this.boxx[this.i2],this.boxy[this.i2],this.boxx[this.i2],this.boxy[this.i2] + this.boxh[this.i2]))
                              {
                                 this.v = this.Dist2D(this.xx2,this.yy2,this.retux,this.retuy);
                                 if(this.v < this_rad)
                                 {
                                    xx = this.retux;
                                    yy = this.retuy;
                                    this_rad = this.v;
                                 }
                              }
                              loadmap_stage = "1327";
                              if(this.CheckCrossSimpleOpti(xx,yy,this.xx2,this.yy2,this.boxx[this.i2] + this.boxw[this.i2],this.boxy[this.i2],this.boxx[this.i2] + this.boxw[this.i2],this.boxy[this.i2] + this.boxh[this.i2]))
                              {
                                 this.v = this.Dist2D(this.xx2,this.yy2,this.retux,this.retuy);
                                 if(this.v < this_rad)
                                 {
                                    xx = this.retux;
                                    yy = this.retuy;
                                    this_rad = this.v;
                                 }
                              }
                              loadmap_stage = "1328";
                           }
                        }
                        ++this.i2;
                     }
                     xx = this.lamps_x[this.i4] + Math.sin(an) * this_rad;
                     yy = this.lamps_y[this.i4] + Math.cos(an) * this_rad;
                     loadmap_stage = "1329";
                     if(an == 0)
                     {
                        g.graphics.moveTo(xx,yy);
                     }
                     else
                     {
                        g.graphics.lineTo(xx,yy);
                     }
                     loadmap_stage = "1330";
                     an += lamp_step;
                  }
                  loadmap_stage = "1331";
                  g.graphics.endFill();
                  //g.filters = [new BlurFilter(1.1,1.1,3)];
				  // FILTER
                  loadmap_stage = "1332";
                  this.lamps_sprites[this.i4] = g;
                  loadmap_stage = "1333";
                  ++this.i4;
               }
               this.shadowbmp = new Bitmap(this.bmpData);
               loadmap_stage = "1334";
               this.UpdateLightmap(true);
               loadmap_stage = "1335";
               this.doorstotal = this.i7;
               loadmap_stage = "1336";
               this.shadowbmp.smoothing = true;
               loadmap_stage = "1337";
               this.temp = this.graphics_3d_front.addChildAt(this.shadowbmp,0);
               loadmap_stage = "1338";
               this.temp.x = this.g_minx;
               this.temp.y = this.g_miny;
               this.temp.scaleX = this.step_size;
               this.temp.scaleY = this.step_size;
               loadmap_stage = "1339";
               this.shadowbmp.smoothing = true;
               loadmap_stage = "1340";
               this.g_minx += this.step_size * 2;
               this.g_miny += this.step_size * 2;
               this.g_maxx -= this.step_size * 4;
               this.g_maxy -= this.step_size * 4;
            }
            loadmap_stage = "14";
            traces_end = getTimer();
            if(this.flakes_letitsnow)
            {
               temp_snow = this.graphics_3d.addChildAt(SnowShape,this.graphics_3d.numChildren);
            }
            this.startatotal = this.atotal;
            this.startchtotal = this.chtotal;
            loadmap_stage = "15";
            if(this.MP_mode)
            {
               this.grenades_total = this.MP_start_grenades_count;
               this.grenades_port_total = this.MP_start_grenades_port_count;
               this.grenades_sh_total = this.MP_start_grenades_sh_count;
            }
            loadmap_stage = "15.1";
            if(POST_ERR_CODE == "")
            {
               loadmap_stage = "16";
               this.GenFlakes();
               loadmap_stage = "17";
               this.StartGameTimer();
               loadmap_stage = "18";
               if(this.MP_mode)
               {
                  loadmap_stage = "1801";
                  loadmap_stage += "; Player does not exist";
                  this.mens[this.MP_myid].login_name = this.MP_login_name;
                  loadmap_stage = "1802";
               }
               else if(this.IM_A_CHEATER)
               {
                  loadmap_stage = "1803";
                  this.ShowNoAch();
                  this.PlaySound_full(this.s_chat);
                  loadmap_stage = "1804";
               }
               loadmap_stage = "19";
               //this.GCTime();
            }
            else
            {
               this.LAST_ERROR = "Oh! Seems like there was problem with map :(\nMap loading failed and error is:\n" + POST_ERR_CODE;
               gotoAndStop("menu");
            }
         }
         catch(error:Error)
         {
            crash_failed = function(param1:IOErrorEvent):void
            {
               myLoader.removeEventListener(Event.COMPLETE,crash_done);
               myLoader.removeEventListener(IOErrorEvent.IO_ERROR,crash_failed);
            };
            crash_done = function(param1:Event):void
            {
               myLoader.removeEventListener(Event.COMPLETE,crash_done);
               myLoader.removeEventListener(IOErrorEvent.IO_ERROR,crash_failed);
            };
            player_version_os = "User Flash Player & OS detection failed";
            try
            {
               _fullInfo = Capabilities.version;
               _osSplitArr = _fullInfo.split(" ");
               _versionSplitArr = _osSplitArr[1].split(",");
               _osInfo = _osSplitArr[0];
               _versionInfo = Number(_versionSplitArr[0]);
               player_version_os = "Flash Player version: " + _flash_version + "\nOS: " + _osInfo;
            }
            catch(e2:*)
            {
            }
            LAST_ERROR = "Oh! Something terrible happend :(\nMap loading failed. Here displayed information on error.\n Error code: " + error.errorID + "\nLoadMap_StopAddress: " + loadmap_stage + "\nMap size: " + MovieClip(root).mapdata.length + " bytes\nError message: " + error.message + "\nApplication size: " + total + "\nViewer: " + this.loaderInfo.parameters.l + "\n" + player_version_os;
            DropGameTimer();
            gotoAndStop("menu");
         }
         this.MP_start_guns_total = this.gunstotal;
      }
      
      public function qpack_rule(param1:String) : void
      {
         this.qpack_pattern[this.qpack_pattern_length] = [];
         this.qpack_pattern[this.qpack_pattern_length][0] = param1;
         this.qpack_pattern[this.qpack_pattern_length][1] = "^" + this.qpack_base.charAt(this.qpack_pattern_simcalc) + "";
         ++this.qpack_pattern_simcalc;
         ++this.qpack_pattern_length;
      }
      
      public function qpack_rule_2param(param1:String, param2:String) : void
      {
         this.qpack_pattern[this.qpack_pattern_length] = [];
         this.qpack_pattern[this.qpack_pattern_length][0] = param1;
         this.qpack_pattern[this.qpack_pattern_length][1] = param2;
         ++this.qpack_pattern_length;
      }
      
      public function un_qpack(param1:String) : String
      {
         this.i = this.qpack_pattern_length - 1;
         while(this.i >= 0)
         {
            param1 = param1.split(this.qpack_pattern[this.i][1]).join(this.qpack_pattern[this.i][0]);
            --this.i;
         }
         return param1;
      }
      
      public function SEND_INTRUDER_LIST() : void
      {
         var report:String = null;
         var key:Object = null;
         try
         {
            report = "";
            for(key in this.INTRUDER_DATABASE)
            {
               if(Number(this.INTRUDER_DATABASE[key].activity_end) - Number(this.INTRUDER_DATABASE[key].activity_start) > 3000)
               {
                  if(this.INTRUDER_DATABASE[key].registered_shots + 2 < Number(this.INTRUDER_DATABASE[key].unregistered_shots) * 0.95 && (this.INTRUDER_DATABASE[key].unregistered_shots > 5 || this.INTRUDER_DATABASE[key].registered_shots > 5) || this.INTRUDER_DATABASE[key].unregistered_shots > 10 && this.INTRUDER_DATABASE[key].seen_deaths == 0 || this.INTRUDER_DATABASE[key].seen_deaths > 0 && this.INTRUDER_DATABASE[key].min_hea > 0 || this.INTRUDER_DATABASE[key].max_hea > 300 || this.INTRUDER_DATABASE[key].max_hea > this.mens[this.MP_myid].hmax || this.INTRUDER_DATABASE[key].min_hea > 100 && this.INTRUDER_DATABASE[key].unregistered_shots > 10)
                  {
                     report += this.GAME_VERSION + ";" + this.CUR_CUSTOM_MAP + ";" + key + ";" + this.INTRUDER_DATABASE[key].unregistered_shots + ";" + this.INTRUDER_DATABASE[key].registered_shots + ";" + this.INTRUDER_DATABASE[key].activity_start + ";" + this.INTRUDER_DATABASE[key].activity_end + ";" + this.INTRUDER_DATABASE[key].ping_min + ";" + this.INTRUDER_DATABASE[key].ping_max + ";" + this.INTRUDER_DATABASE[key].seen_deaths + ";" + this.INTRUDER_DATABASE[key].max_hea + ";" + this.INTRUDER_DATABASE[key].min_hea + ";" + this.MP_ping2 + "|";
                  }
               }
            }
            this.INTRUDER_DATABASE = new Object();
            this.INTRUDER_DATABASE_length = 0;
         }
         catch(e:*)
         {
         }
      }
      
      public function add_action_to_trigger(param1:int, param2:*, param3:*, param4:int) : void
      {
         this.triggers[param1].actions_targetA[this.triggers[param1].actions_total] = param2;
         this.triggers[param1].actions_targetB[this.triggers[param1].actions_total] = param3;
         this.triggers[param1].actions_type[this.triggers[param1].actions_total] = param4;
         ++this.triggers[param1].actions_total;
      }
      
      public function PutInCar(param1:int, param2:int, param3:* = false) : void
      {
         if(!param3)
         {
            if(this.MP_mode && Boolean(this.mens[param1].isplayer))
            {
               return;
            }
         }
         this.ChangedGun(param1);
         this.vehicles[param2].master = param1;
         this.mens[param1].incar = param2;
         this.mens[param1].alpha = 0;
         this.vehicles[param2].lastgun = this.mens[param1].curwea;
         if(param1 == 0)
         {
            if(this.vehicles[param2].typ == 0)
            {
               this.game_scale = 0.75;
            }
            if(this.vehicles[param2].typ == 1)
            {
               this.game_scale = 0.5;
            }
            this.key_pick = false;
            this.vehhp.visible = true;
            this.vehicles[param2].gui.txt1.textColor = this.color_player;
         }
         else if(this.mens[param1].team == this.mens[this.MP_myid].team)
         {
            this.vehicles[param2].gui.txt1.textColor = this.color_friendly;
         }
         else
         {
            this.vehicles[param2].gui.txt1.textColor = this.color_enemy;
         }
         if(param1 == this.MP_myid)
         {
            this.UpdateWeps();
         }
      }
      
      public function PutoutCar(param1:int, param2:* = false) : void
      {
         if(!param2)
         {
            if(this.MP_mode && (this.vehicles[param1].master != -1 && this.mens[this.vehicles[param1].master].isplayer))
            {
               return;
            }
         }
         if(this.vehicles[param1].master != -1)
         {
            if(this.vehicles[param1].master == this.MP_myid)
            {
               this.game_scale = this.g_scale_outcar;
               this.key_pick = false;
               this.vehhp.visible = false;
               this.UpdateWeps();
            }
            this.ChangedGun(this.vehicles[param1].master);
            this.mens[this.vehicles[param1].master].incar = -1;
            this.mens[this.vehicles[param1].master].stability = 1;
            this.mens[this.vehicles[param1].master].y = Number(this.vehicles[param1].y) - 50;
            this.mens[this.vehicles[param1].master].tox = 0;
            this.mens[this.vehicles[param1].master].toy = 0;
            this.mens[this.vehicles[param1].master].alpha = 1;
            this.mens[this.vehicles[param1].master].curwea = this.vehicles[param1].lastgun;
            this.ChangedGun(this.vehicles[param1].master);
            this.vehicles[param1].master = -1;
         }
         this.vehicles[param1].gui.txt1.textColor = 16777215;
      }
      
      public function EXEC_TRIGGER(a:int, loop_check:Boolean = false) : Boolean
      {
         var tr:int = 0;
         var tries:* = undefined;
         var block:DisplayObject = null;
         var u:* = undefined;
         var hex:Number = NaN;
         var red:Number = NaN;
         var green:Number = NaN;
         var blue:Number = NaN;
         var rule:Boolean = false;
         var res:* = undefined;
         var power:Number = NaN;
         var count:int = 0;
         var accuracy:Number = NaN;
         var c:int = 0;
         var key:String = null;
         var phrase:String = null;
         var key2:String = null;
         var mc:* = undefined;
         var palette:* = undefined;
         var variable_to_save_name:String = null;
         var mult:Number = NaN;
         var diff:* = undefined;
         var index_value:int = 0;
         var inv:String = null;
         var hex_str:String = null;
         var r:Number = NaN;
         var str:String = null;
         var newSound:Sound = null;
         var model:String = null;
         var bitmap_data:BitmapData = null;
         var id:Number = NaN;
         var custom_image:Object = null;
         var sf:* = undefined;
         //var clrs_mov:ColorMatrixFilter = null;
         var matrix:* = undefined;
         var loader:* = undefined;
         var request:URLRequest = null;
         var variables:URLVariables = null;
         var hex_int:int = 0;
         var g:Number = NaN;
         var b:Number = NaN;
         var heal_hp:Number = NaN;
         var SoundClass:Class = null;
         if(loop_check)
         {
            if(this.trigger_loops > 2048)
            {
               return false;
            }
            ++this.trigger_loops;
         }
         else
         {
            this.trigger_loops = 0;
         }
         if(this.triggers[a] == undefined || this.triggers[a] == null)
         {
            this.SpawnLevelLogicErrorIfNeeded(new Error(),"Trigger was not found, execution depth: " + this.trigger_loops);
         }
         if(currentLabel == "gaming" && this.triggers[a].enabledd && (this.triggers[a].maxcalls == -1 || this.triggers[a].maxcalls > 0))
         {
            try
            {
               if(this.DEBUG_MODE)
               {
               }
               tr = 0;
               while(tr < this.triggers[a].actions_total)
               {
                  if(this.DEBUG_MODE)
                  {
                  }
                  switch(this.triggers[a].actions_type[tr])
                  {
                     case 0:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(this.triggers[a].forcehyperjump)
                        {
                           this.doors[this.triggers[a].actions_targetA[tr]].forcehyperjump_float = 1;
                        }
                        this.doors[this.triggers[a].actions_targetA[tr]].tarx = this.regions[this.triggers[a].actions_targetB[tr]].x;
                        this.doors[this.triggers[a].actions_targetA[tr]].tary = this.regions[this.triggers[a].actions_targetB[tr]].y;
                        this.doors[this.triggers[a].actions_targetA[tr]].moving = true;
                        if(this.doors[this.triggers[a].actions_targetA[tr]].playsounds)
                        {
                           if(this.doors[this.triggers[a].actions_targetA[tr]].vis)
                           {
                              this.PlaySound(this.s_t_door1_start,this.doors[this.triggers[a].actions_targetA[tr]].x + Number(this.doors[this.triggers[a].actions_targetA[tr]].w) / 2,this.doors[this.triggers[a].actions_targetA[tr]].y + Number(this.doors[this.triggers[a].actions_targetA[tr]].h) / 2,this.doors[this.triggers[a].actions_targetA[tr]]);
                           }
                        }
                        break;
                     case 1:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.doors[this.triggers[a].actions_targetA[tr]].maxspeed = this.triggers[a].actions_targetB[tr];
                        break;
                     case 2:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.regions[this.triggers[a].actions_targetA[tr]].x = this.regions[this.triggers[a].actions_targetB[tr]].x;
                        this.regions[this.triggers[a].actions_targetA[tr]].y = this.regions[this.triggers[a].actions_targetB[tr]].y;
                        break;
                     case 3:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.vehicles[this.triggers[a].actions_targetA[tr]].hea = Number(this.vehicles[this.triggers[a].actions_targetA[tr]].hea) / Number(this.vehicles[this.triggers[a].actions_targetA[tr]].hmax) * 100 * Number(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 4:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(!this.mens[this.triggers[a].actions_targetA[tr]].dead)
                        {
                           this.mens[this.triggers[a].actions_targetA[tr]].hea = Number(this.mens[this.triggers[a].actions_targetA[tr]].hmax) / 100 * Number(this.triggers[a].actions_targetB[tr]);
                        }
                        break;
                     case 5:
                        this.triggers[a].actions_targetA[tr] = Number(this.triggers[a].actions_targetA[tr]);
                        this.gravity = this.triggers[a].actions_targetA[tr];
                        break;
                     case 6:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = 0;
                        while(this.tr2 < this.playerstotal)
                        {
                           if(this.mens[this.tr2].io)
                           {
                              if(this.mens[this.tr2].stability > 0 && this.mens[this.tr2].hea > 0)
                              {
                                 if(this.mens[this.tr2].x > this.regions[this.triggers[a].actions_targetB[tr]].x)
                                 {
                                    if(this.mens[this.tr2].x < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                    {
                                       if(this.mens[this.tr2].y > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                       {
                                          if(this.mens[this.tr2].y < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                          {
                                             if(!this.MP_mode || this.MP_myid == this.tr2 || !this.mens[this.tr2].isplayer)
                                             {
                                                this.mens[this.tr2].hea -= this.triggers[a].actions_targetA[tr];
                                                this.mens[this.tr2].lastshot = "body";
                                                this.mens[this.tr2].lastshotbygun = "nothing";
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              else if(this.ax[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].x)
                              {
                                 if(this.ax[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                 {
                                    if(this.ay[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                    {
                                       if(this.ay[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                       {
                                          if(!this.MP_mode || this.MP_myid == this.tr2 || !this.mens[this.tr2].isplayer)
                                          {
                                             this.mens[this.tr2].hea -= this.triggers[a].actions_targetA[tr];
                                             this.mens[this.tr2].lastshot = "body";
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        break;
                     case 7:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        if(this.FORCE_CUSTOM_MAP) break;
						if(this.LEVEL_END_FORCE != "") break;
						if(this.MP_mode) break;
						this.tr3 = 0;
						while(this.tr3 < this.playerstotal)
						{
							if(this.mens[this.tr3].io)
							{
							   this.ok = false;
							   this.UpdateCurGun();
							   if(this.mens[this.tr3].char == 1 && (this.MP_myid == this.tr3 || this.mens[this.MP_myid].char != 1))
							   {
								  this.inventoryA = [];
								  this.ok = true;
							   }
							   if(this.mens[this.tr3].char == 3 && (this.MP_myid == this.tr3 || this.mens[this.MP_myid].char != 3))
							   {
								  this.inventoryB = [];
								  this.ok = true;
							   }
							   if(this.ok)
							   {
								  this.tr2 = 0;
								  while(this.tr2 < this.gunstotal)
								  {
									 if(this.guns[this.tr2].io)
									 {
										if(this.guns[this.tr2].picken_by == this.tr3)
										{
										   if(!this.guns[this.tr2].forcars)
										   {
											  if(this.mens[this.tr3].char == 1)
											  {
												 this.AddItemToHero1(this.guns[this.tr2].model,this.guns[this.tr2].upg);
											  }
											  if(this.mens[this.tr3].char == 3)
											  {
												 this.AddItemToHero2(this.guns[this.tr2].model,this.guns[this.tr2].upg);
											  }
										   }
										}
									 }
									 ++this.tr2;
								  }
							   }
							}
							++this.tr3;
						 }
						 if(this.CMPG_THIS_LEVEL == this.LEVELS_PASSED)
						 {
							++this.LEVELS_PASSED;
						 }
						 if(this.barrelstotal >= 5)
						 {
							this.ok = true;
							this.i4 = 0;
							while(this.i4 < this.barrelstotal)
							{
							   if(this.barrels[this.i4].hea > 0)
							   {
								  this.ok = false;
							   }
							   ++this.i4;
							}
							if(this.ok)
							{
							   this.incBadge(6);
							}
						 }
						 this.i4 = 0;
						 if(this.CMPG_THIS_LEVEL == 41)
						 {
							if(!this.EASY_MODE)
							{
							   this.incBadge(12);
							   this.i4 += 10000;
							}
						 }
						 if(this.PRO_BOTS)
						 {
							this.incBadge(16);
						 }
						 if(this.FUN_SPENT_BULLETS < 1 || this.FUN_DAMAGE_TAKEN < 1 || this.FUN_ELEMINATED < 1)
						 {
							this.i4 += 300;
						 }
						 if(this.FUN_SPENT_BULLETS == 0)
						 {
							if(!this.EASY_MODE)
							{
							   this.incBadge(21);
							}
						 }
						 if(this.FUN_ELEMINATED == 0)
						 {
							this.incBadge(10);
						 }
						 if(this.FUN_DAMAGE_TAKEN < 1)
						 {
							this.FUN_DAMAGE_TAKEN = 1;
						 }
						 this.i4 += Math.ceil(this.FUN_ELEMINATED * 8 + this.FUN_HEADSHOTS_MADE + this.FUN_DAMAGE_MADE / this.FUN_DAMAGE_TAKEN * 80);
						 if(this.FUN_DAMAGE_MADE >= 100)
						 {
							if(this.FUN_DAMAGE_MADE > this.FUN_DAMAGE_TAKEN * 5)
							{
							   this.incBadge(22);
							}
						 }
						 if(this.CMPG_THIS_LEVEL != 41)
						 {
							if(this.i4 > 500)
							{
							   this.i4 = 500;
							}
						 }
						 if(!this.AWARD)
						 {
							this.i4 = 0;
						 }
						 else
						 {
							this.ExpTask(this.EXP_TYPE_BEAT_CAMPAIGN_LEVEL,this.CMPG_THIS_LEVEL.toString());
						 }
						 this.CMPG_money += this.i4;
						 this.SaveGame();
						 ++this.CMPG_THIS_LEVEL;
						 this.LEVEL_END_FORCE = "complete";
					 
						 this.MP_fps = 1;
						 this.darkness.alpha = 0;
						 this.darkness.visible = true;
						 this.PlaySound_full(this.s_mission_done);
                         break;
                     case 8:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 9:
                        this.darkness.visible = true;
                        this.LAST_ERROR = this.ReplaceWithVariables(this.triggers[a].actions_targetA[tr]);
                        this.LEVEL_END_FORCE = "failed";
                        break;
                     case 10:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = 0;
                        while(this.tr2 < this.playerstotal)
                        {
                           if(this.mens[this.tr2].io)
                           {
                              if(this.mens[this.tr2].stability > 0 && this.mens[this.tr2].hea > 0)
                              {
                                 if(this.mens[this.tr2].x > this.regions[this.triggers[a].actions_targetB[tr]].x)
                                 {
                                    if(this.mens[this.tr2].x < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                    {
                                       if(this.mens[this.tr2].y > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                       {
                                          if(this.mens[this.tr2].y < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                          {
                                             this.mens[this.tr2].stability -= Number(this.triggers[a].actions_targetA[tr]) * 0.1;
                                          }
                                       }
                                    }
                                 }
                              }
                              else if(this.ax[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].x)
                              {
                                 if(this.ax[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                 {
                                    if(this.ay[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                    {
                                       if(this.ay[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                       {
                                          this.mens[this.tr2].stability -= Number(this.triggers[a].actions_targetA[tr]) * 0.1;
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        break;
                     case 11:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = 0;
                        while(this.tr2 < this.playerstotal)
                        {
                           if(this.mens[this.tr2].io)
                           {
                              if(this.mens[this.tr2].team != this.mens[this.triggers[a].actions_targetA[tr]].team)
                              {
                                 if(this.mens[this.tr2].stability > 0 && this.mens[this.tr2].hea > 0)
                                 {
                                    if(this.mens[this.tr2].x > this.regions[this.triggers[a].actions_targetB[tr]].x)
                                    {
                                       if(this.mens[this.tr2].x < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                       {
                                          if(this.mens[this.tr2].y > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                          {
                                             if(this.mens[this.tr2].y < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                             {
                                                this.mens[this.tr2].hea = 0;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 else if(this.ax[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].x)
                                 {
                                    if(this.ax[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                    {
                                       if(this.ay[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                       {
                                          if(this.ay[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                          {
                                             this.mens[this.tr2].hea = 0;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        break;
                     case 12:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = 0;
                        while(this.tr2 < this.vehiclestotal)
                        {
                           if(this.vehicles[this.tr2].hea > 0)
                           {
                              if(this.vehicles[this.tr2].x > this.regions[this.triggers[a].actions_targetA[tr]].x)
                              {
                                 if(this.vehicles[this.tr2].x < this.regions[this.triggers[a].actions_targetA[tr]].x + this.regions[this.triggers[a].actions_targetA[tr]].w)
                                 {
                                    if(this.vehicles[this.tr2].y > this.regions[this.triggers[a].actions_targetA[tr]].y)
                                    {
                                       if(this.vehicles[this.tr2].y < this.regions[this.triggers[a].actions_targetA[tr]].y + this.regions[this.triggers[a].actions_targetA[tr]].h)
                                       {
                                          this.vehicles[this.tr2].hea = 0;
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        break;
                     case 13:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(this.mens[this.triggers[a].actions_targetA[tr]].hea > 0)
                        {
                           if(this.mens[this.triggers[a].actions_targetA[tr]].incar != -1)
                           {
                              this.PutoutCar(this.mens[this.triggers[a].actions_targetA[tr]].incar,true);
                           }
                           if(this.vehicles[this.triggers[a].actions_targetB[tr]].master != -1)
                           {
                              this.PutoutCar(this.triggers[a].actions_targetB[tr],true);
                           }
                           this.PutInCar(this.triggers[a].actions_targetA[tr],this.triggers[a].actions_targetB[tr],true);
                        }
                        break;
                     case 14:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(this.mens[this.triggers[a].actions_targetA[tr]].io)
                        {
                           this.mcc = this.mens[this.triggers[a].actions_targetA[tr]];
                           if(this.mcc.hea > 0)
                           {
                              u = this.regions[this.triggers[a].actions_targetB[tr]].x + Number(this.regions[this.triggers[a].actions_targetB[tr]].w) / 2 - this.mcc.x;
                              this.v = this.regions[this.triggers[a].actions_targetB[tr]].y + Number(this.regions[this.triggers[a].actions_targetB[tr]].h) / 2 - this.mcc.y;
                              this.mcc.x = this.regions[this.triggers[a].actions_targetB[tr]].x + Number(this.regions[this.triggers[a].actions_targetB[tr]].w) / 2;
                              this.mcc.y = this.regions[this.triggers[a].actions_targetB[tr]].y + Number(this.regions[this.triggers[a].actions_targetB[tr]].h) / 2;
                              if(this.triggers[a].actions_targetA[tr] == this.MP_myid)
                              {
                                 this.game_x += u;
                                 this.game_y += this.v;
                              }
                              this.i4 = 0;
                              while(this.i4 < this.atotal)
                              {
                                 if(this.aof[this.i4] == this.triggers[a].actions_targetA[tr])
                                 {
                                    this.ax[this.i4] += u;
                                    this.ay[this.i4] += this.v;
                                    this.lax[this.i4] += u;
                                    this.lay[this.i4] += this.v;
                                 }
                                 ++this.i4;
                              }
                           }
                        }
                        break;
                     case 15:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        if(this.mcc.picken_by != -1)
                        {
                           if(this.mens[this.mcc.picken_by].curwea == this.triggers[a].actions_targetA[tr])
                           {
                              this.mens[this.mcc.picken_by].curwea = -1;
                           }
                           this.mcc.picken_by = -1;
                        }
                        this.mcc.x = this.regions[this.triggers[a].actions_targetB[tr]].x + Number(this.regions[this.triggers[a].actions_targetB[tr]].w) / 2;
                        this.mcc.y = this.regions[this.triggers[a].actions_targetB[tr]].y + Number(this.regions[this.triggers[a].actions_targetB[tr]].h) / 2;
                        this.atox[this.mcc.b_p1] = 0;
                        this.atoy[this.mcc.b_p1] = 0;
                        this.WakeUpAtom(this.mcc.b_p1);
                        this.ax[this.mcc.b_p1] = this.mcc.x - 10;
                        this.ay[this.mcc.b_p1] = this.mcc.y;
                        this.lax[this.mcc.b_p1] = this.ax[this.mcc.b_p1];
                        this.lay[this.mcc.b_p1] = this.ay[this.mcc.b_p1];
                        this.atox[this.mcc.b_p2] = 0;
                        this.atoy[this.mcc.b_p2] = 0;
                        this.WakeUpAtom(this.mcc.b_p2);
                        this.ax[this.mcc.b_p2] = this.mcc.x + 10;
                        this.ay[this.mcc.b_p2] = this.mcc.y;
                        this.lax[this.mcc.b_p2] = this.ax[this.mcc.b_p2];
                        this.lay[this.mcc.b_p2] = this.ay[this.mcc.b_p2];
                        break;
                     case 16:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.barrels[this.triggers[a].actions_targetA[tr]];
                        if(this.mcc.hea > 0)
                        {
                           this.mcc.x = this.regions[this.triggers[a].actions_targetB[tr]].x + Number(this.regions[this.triggers[a].actions_targetB[tr]].w) / 2;
                           this.mcc.y = this.regions[this.triggers[a].actions_targetB[tr]].y + Number(this.regions[this.triggers[a].actions_targetB[tr]].h) / 2;
                           this.lax[this.mcc.b_left_top] = this.mcc.x - 5;
                           this.lax[this.mcc.b_right_top] = this.mcc.x + 5;
                           this.lax[this.mcc.b_right_bottom] = this.mcc.x + 5;
                           this.lax[this.mcc.b_left_bottom] = this.mcc.x - 5;
                           this.lay[this.mcc.b_left_top] = this.mcc.y - 13;
                           this.lay[this.mcc.b_right_top] = this.mcc.y - 13;
                           this.lay[this.mcc.b_right_bottom] = this.mcc.y + 13;
                           this.lay[this.mcc.b_left_bottom] = this.mcc.y + 13;
                           this.ax[this.mcc.b_left_top] = this.mcc.x - 5;
                           this.ax[this.mcc.b_right_top] = this.mcc.x + 5;
                           this.ax[this.mcc.b_right_bottom] = this.mcc.x + 5;
                           this.ax[this.mcc.b_left_bottom] = this.mcc.x - 5;
                           this.ay[this.mcc.b_left_top] = this.mcc.y - 13;
                           this.ay[this.mcc.b_right_top] = this.mcc.y - 13;
                           this.ay[this.mcc.b_right_bottom] = this.mcc.y + 13;
                           this.ay[this.mcc.b_left_bottom] = this.mcc.y + 13;
                           this.atox[this.mcc.b_left_top] = 0;
                           this.atox[this.mcc.b_right_top] = 0;
                           this.atox[this.mcc.b_right_bottom] = 0;
                           this.atox[this.mcc.b_left_bottom] = 0;
                           this.atoy[this.mcc.b_left_top] = 0;
                           this.atoy[this.mcc.b_right_top] = 0;
                           this.atoy[this.mcc.b_right_bottom] = 0;
                           this.atoy[this.mcc.b_left_bottom] = 0;
                        }
                        break;
                     case 17:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 18:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.regions[this.triggers[a].actions_targetA[tr]].x = this.regions[this.triggers[a].actions_targetB[tr]].x + Number(this.regions[this.triggers[a].actions_targetB[tr]].w) / 2 + Number(this.regions[this.triggers[a].actions_targetA[tr]].w) / 2;
                        this.regions[this.triggers[a].actions_targetA[tr]].y = this.regions[this.triggers[a].actions_targetB[tr]].y + Number(this.regions[this.triggers[a].actions_targetB[tr]].h) / 2 + Number(this.regions[this.triggers[a].actions_targetA[tr]].h) / 2;
                        break;
                     case 19:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.triggers[this.triggers[a].actions_targetA[tr]].enabledd = false;
                        break;
                     case 20:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.triggers[this.triggers[a].actions_targetA[tr]].enabledd = true;
                        break;
                     case 21:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.triggers[this.triggers[a].actions_targetA[tr]].maxcalls = 0;
                        break;
                     case 22:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.triggers[this.triggers[a].actions_targetA[tr]].maxcalls = this.triggers[a].actions_targetB[tr];
                        break;
                     case 23:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].hea = this.triggers[a].actions_targetB[tr];
                        break;
                     case 24:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.PhysicsExplosion(this.regions[this.triggers[a].actions_targetB[tr]].x + Number(this.regions[this.triggers[a].actions_targetB[tr]].w) / 2,this.regions[this.triggers[a].actions_targetB[tr]].y + Number(this.regions[this.triggers[a].actions_targetB[tr]].h) / 2,Math.abs(Number(this.triggers[a].actions_targetA[tr]) * 5),Number(this.triggers[a].actions_targetA[tr]) * 0.6,Math.max(0,Number(this.triggers[a].actions_targetA[tr]) * 10),-1,"level");
                        if(this.triggers[a].actions_targetA[tr] >= 0)
                        {
                           this.ExplosionSound(this.regions[this.triggers[a].actions_targetB[tr]].x + Number(this.regions[this.triggers[a].actions_targetB[tr]].w) / 2,this.regions[this.triggers[a].actions_targetB[tr]].y + Number(this.regions[this.triggers[a].actions_targetB[tr]].h) / 2);
                        }
                        break;
                     case 25:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.timers[this.triggers[a].actions_targetA[tr]].forcehyperjump = this.triggers[a].forcehyperjump;
                        this.timers[this.triggers[a].actions_targetA[tr]].enabledd = true;
                        break;
                     case 26:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.timers[this.triggers[a].actions_targetA[tr]].enabledd = false;
                        break;
                     case 27:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.timers[this.triggers[a].actions_targetA[tr]].ddelay = this.triggers[a].actions_targetB[tr];
                        break;
                     case 28:
                     case 53:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(this.mens[this.triggers[a].actions_targetA[tr]].io)
                        {
                           this.mc2 = this.mens[this.triggers[a].actions_targetA[tr]];
                           this.mc3 = this.game.addChildAt(new player(),this.game.numChildren) as MovieClip;
                           this.NoMouse(this.mc3);
                           this.i3 = 0;
                           if(this.triggers[a].actions_targetB[tr] < 0)
                           {
                              this.ok = true;
                              this.i4 = -Number(this.triggers[a].actions_targetB[tr]);
                           }
                           else
                           {
                              this.ok = false;
                              u = this.regions[this.triggers[a].actions_targetB[tr]].x + Number(this.regions[this.triggers[a].actions_targetB[tr]].w) / 2;
                              this.v = this.regions[this.triggers[a].actions_targetB[tr]].y + Number(this.regions[this.triggers[a].actions_targetB[tr]].h) / 2;
                           }
                           if(this.triggers[a].actions_type[tr] == 53)
                           {
                              this.ok = true;
                              this.i4 = this.triggers[a].actions_targetB[tr];
                           }
                           tries = 0;
                           while(this.ok)
                           {
                              tries += 1;
                              if(tries > 10000)
                              {
                                 break;
                              }
                              this.ok = true;
                              u = this.regions[this.i4].x + Math.random() * Number(this.regions[this.i4].w);
                              this.v = this.g_miny + (this.g_maxy - this.g_miny) * Math.random();
                              if(this.TracePointNoRagdolls(u,this.v))
                              {
                                 if(!this.TracePointNoRagdolls(u,this.v + 100))
                                 {
                                    this.ok = false;
                                 }
                              }
                              this.i2 = 0;
                              while(this.i2 < this.watertotal)
                              {
                                 if(u > Number(this.wax[this.i2]) - 100)
                                 {
                                    if(u < this.wax[this.i2] + this.waw[this.i2] + 100)
                                    {
                                       if(this.v > Number(this.way[this.i2]) - 100)
                                       {
                                          if(this.v < this.way[this.i2] + this.wah[this.i2] + 100)
                                          {
                                             this.ok = true;
                                          }
                                       }
                                    }
                                 }
                                 ++this.i2;
                              }
                              if(this.mens[this.MP_myid].team != this.mc2.team)
                              {
                                 if(this.Dist2D(u,this.v,this.mens[this.MP_myid].x,this.mens[this.MP_myid].y) < 400)
                                 {
                                    if(this.i3 < 10)
                                    {
                                       this.ok = true;
                                       ++this.i3;
                                    }
                                 }
                              }
                           }
                           this.mc3.x = new Number(u);
                           this.mc3.y = new Number(this.v);
                           this.create_player(this.mc3,this.mc2.hea,this.mc2.hmax);
                           this.SetPlayerScale(this.mc3,this.mc2.scale);
                           this.mc3.tox = new Number(0);
                           this.mc3.toy = new Number(0);
                           this.mc3.mobility = this.mc2.mobility;
                           this.mc3.antigravity = this.mc2.antigravity;
                           this.mc3.antigravity_radius = this.mc2.antigravity_radius;
                           this.mc3.can_be_hit = this.mc2.can_be_hit;
                           this.mc3.can_drop_guns = this.mc2.can_drop_guns;
                           this.mc3.voice = this.mc2.voice;
                           this.mc3.isGhost = this.mc2.isGhost;
                           this.mc3.gui.txt1.text = this.mc2.gui.txt1.text;
                           this.mc3.nick = this.mc2.nick;
                           this.mc3.team = new Number(this.mc2.team);
                           if(this.mc3.team != this.mens[this.MP_myid].team)
                           {
                              this.mc3.gui.visible = false;
                           }
                           this.UpdateTeamColor(this.mc3);
                           this.mc3.palette = this.mc2.palette;
                           this.mc3.side = new Number(this.mc2.side);
                           this.mc3.tarx = this.mc3.x + Number(this.mc3.side) * 100;
                           this.mc3.tary = this.mc3.y;
                           this.mc3.armored = new Number(this.mc2.armored);
                           this.mc3.incar = new Number(-1);
                           this.mc3.char = new Number(this.mc2.char);
                           this.mc3.mdl_leg1_upper = new Number(this.mc2.mdl_leg1_upper);
                           this.mc3.mdl_leg1_middle = new Number(this.mc2.mdl_leg1_middle);
                           this.mc3.mdl_leg1_lower = new Number(this.mc2.mdl_leg1_lower);
                           this.mc3.mdl_leg2_upper = new Number(this.mc2.mdl_leg2_upper);
                           this.mc3.mdl_leg2_middle = new Number(this.mc2.mdl_leg2_middle);
                           this.mc3.mdl_leg2_lower = new Number(this.mc2.mdl_leg2_lower);
                           this.mc3.mdl_arm1_upper = new Number(this.mc2.mdl_arm1_upper);
                           this.mc3.mdl_arm1_lower = new Number(this.mc2.mdl_arm1_lower);
                           this.mc3.mdl_arm2_upper = new Number(this.mc2.mdl_arm2_upper);
                           this.mc3.mdl_arm2_lower = new Number(this.mc2.mdl_arm2_lower);
                           this.mc3.mdl_toe = new Number(this.mc2.mdl_toe);
                           this.mc3.mdl_body = new Number(this.mc2.mdl_body);
                           this.mc3.mdl_head = new Number(this.mc2.mdl_head);
                           if(this.mc2.arm1.lower.psi != null)
                           {
                              this.mc3.arm1.lower.psi.visible = this.mc2.arm1.lower.psi.visible;
                           }
                           if(this.mc2.arm2.lower.psi != null)
                           {
                              this.mc3.arm2.lower.psi.visible = this.mc2.arm2.lower.psi.visible;
                           }
                           this.mc3.blood_red = this.mc2.blood_red;
                           this.mc3.blood_green = this.mc2.blood_green;
                           this.mc3.blood_blue = this.mc2.blood_blue;
                           this.mc3.botaction = this.mc2.botaction;
                           this.mc3.ondeath = this.mc2.ondeath;
                           this.Effect(this.mc3.x,this.mc3.y - 41,14,0,0);
                           this.SpawnPlayerImmediately(this.mc3);
                           this.i7 = this.mc3.idd;
                           if(this.mc2.curwea != -1)
                           {
                              this.xx = this.mc3.x;
                              this.yy = this.mc3.y;
                              this.mc2 = this.guns[this.mc2.curwea];
                              this.mc3 = this.MakeGunByClass(this.mc2.model,this.mc2);
                              this.mens[this.i7].curwea = this.mc3.idd;
                              this.mc3.picken_by = this.i7;
                              this.mens[this.i7].arm1.lower.psi.visible = false;
                              this.mens[this.i7].arm2.lower.psi.visible = false;
                              this.mc3.stat_bullets = this.mc2.stat_bullets;
                              this.mc3.recoil_multiplier = this.mc2.recoil_multiplier;
                              this.mc3.speed_multiplier = this.mc2.speed_multiplier;
                              this.mc3.projectile_scale = this.mc2.projectile_scale;
                              this.mc3.knockback_multiplier = this.mc2.knockback_multiplier;
                              this.mc3.stat_power = this.mc2.stat_power;
                              this.mc3.stat_averange = this.mc2.stat_averange;
                              this.mc3.stat_count = this.mc2.stat_count;
                              this.mc3.forcars = this.mc2.forcars;
                              this.mc3.stat_class = this.mc2.stat_class;
                           }
                        }
                        break;
                     case 29:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = 0;
                        while(this.tr2 < this.playerstotal)
                        {
                           if(this.mens[this.tr2].io)
                           {
                              if(this.mens[this.tr2].team != this.mens[this.triggers[a].actions_targetA[tr]].team)
                              {
                                 if(this.mens[this.tr2].stability > 0 && this.mens[this.tr2].hea > 0)
                                 {
                                    if(this.mens[this.tr2].x > this.regions[this.triggers[a].actions_targetB[tr]].x)
                                    {
                                       if(this.mens[this.tr2].x < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                       {
                                          if(this.mens[this.tr2].y > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                          {
                                             if(this.mens[this.tr2].y < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                             {
                                                if(this.mens[this.tr2].hunt == -1)
                                                {
                                                   this.mens[this.tr2].hunt = this.triggers[a].actions_targetA[tr];
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                                 else if(this.ax[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].x)
                                 {
                                    if(this.ax[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                    {
                                       if(this.ay[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                       {
                                          if(this.ay[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                          {
                                             if(this.mens[this.tr2].hunt == -1)
                                             {
                                                this.mens[this.tr2].hunt = this.triggers[a].actions_targetA[tr];
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        break;
                     case 30:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = 0;
                        while(this.tr2 < this.playerstotal)
                        {
                           if(this.mens[this.tr2].io)
                           {
                              if(this.mens[this.tr2].x > this.regions[this.triggers[a].actions_targetA[tr]].x)
                              {
                                 if(this.mens[this.tr2].x < this.regions[this.triggers[a].actions_targetA[tr]].x + this.regions[this.triggers[a].actions_targetA[tr]].w)
                                 {
                                    if(this.mens[this.tr2].y > this.regions[this.triggers[a].actions_targetA[tr]].y)
                                    {
                                       if(this.mens[this.tr2].y < this.regions[this.triggers[a].actions_targetA[tr]].y + this.regions[this.triggers[a].actions_targetA[tr]].h)
                                       {
                                          this.mcc = this.mens[this.tr2];
                                          if(this.mcc.hea > 0)
                                          {
                                             u = this.ax[this.mcc.b_toe] - (this.regions[this.triggers[a].actions_targetB[tr]].x + Number(this.regions[this.triggers[a].actions_targetB[tr]].w) / 2);
                                             this.v = this.ay[this.mcc.b_toe] - (this.regions[this.triggers[a].actions_targetB[tr]].y + Number(this.regions[this.triggers[a].actions_targetB[tr]].h) / 2);
                                             if(this.regions[this.triggers[a].actions_targetA[tr]].w == this.regions[this.triggers[a].actions_targetB[tr]].w)
                                             {
                                                if(this.regions[this.triggers[a].actions_targetA[tr]].h == this.regions[this.triggers[a].actions_targetB[tr]].h)
                                                {
                                                   u = Number(this.regions[this.triggers[a].actions_targetA[tr]].x) - Number(this.regions[this.triggers[a].actions_targetB[tr]].x);
                                                   this.v = Number(this.regions[this.triggers[a].actions_targetA[tr]].y) - Number(this.regions[this.triggers[a].actions_targetB[tr]].y);
                                                }
                                             }
                                             if(this.tr2 == this.MP_myid)
                                             {
                                                this.game_x += u;
                                                this.game_y += this.v;
                                             }
                                             this.i4 = 0;
                                             while(this.i4 < this.atotal)
                                             {
                                                if(this.aof[this.i4] == this.mcc.idd)
                                                {
                                                   this.ax[this.i4] -= u;
                                                   this.ay[this.i4] -= this.v;
                                                   if(this.GET_LITE_PHYS())
                                                   {
                                                      this.lax[this.i4] -= u;
                                                      this.lay[this.i4] -= this.v;
                                                   }
                                                }
                                                ++this.i4;
                                             }
                                             this.Effect(this.mcc.x,this.mcc.y - 41,14,0,0);
                                             this.mcc.x -= u;
                                             this.mcc.y -= this.v;
                                             this.Effect(this.mcc.x,this.mcc.y - 41,14,0,0);
                                             this.i4 = 0;
                                             while(this.i4 < this.vehiclestotal)
                                             {
                                                if(this.vehicles[this.i4].io)
                                                {
                                                   if(this.vehicles[this.i4].master == this.mcc.idd)
                                                   {
                                                      if(this.vehicles[this.i4].typ == 5 || this.vehicles[this.i4].typ == 6)
                                                      {
                                                         this.vehicles[this.i4].master = -1;
                                                      }
                                                   }
                                                }
                                                ++this.i4;
                                             }
                                             if(this.mcc.incar != -1)
                                             {
                                                this.PutOutCar(this.mcc.incar);
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        break;
                     case 31:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = 0;
                        while(this.tr2 < this.playerstotal)
                        {
                           if(this.mens[this.tr2].io)
                           {
                              if(this.mens[this.tr2].x > this.regions[this.triggers[a].actions_targetA[tr]].x)
                              {
                                 if(this.mens[this.tr2].x < this.regions[this.triggers[a].actions_targetA[tr]].x + this.regions[this.triggers[a].actions_targetA[tr]].w)
                                 {
                                    if(this.mens[this.tr2].y > this.regions[this.triggers[a].actions_targetA[tr]].y)
                                    {
                                       if(this.mens[this.tr2].y < this.regions[this.triggers[a].actions_targetA[tr]].y + this.regions[this.triggers[a].actions_targetA[tr]].h)
                                       {
                                          this.mcc = this.mens[this.tr2];
                                          if(this.mcc.hea > 0)
                                          {
                                             u = this.ax[this.mcc.b_toe] - (this.regions[this.triggers[a].actions_targetB[tr]].x + Number(this.regions[this.triggers[a].actions_targetB[tr]].w) / 2);
                                             this.v = this.ay[this.mcc.b_toe] - (this.regions[this.triggers[a].actions_targetB[tr]].y + Number(this.regions[this.triggers[a].actions_targetB[tr]].h) / 2);
                                             if(this.tr2 == this.MP_myid)
                                             {
                                                this.game_x += u;
                                                this.game_y += this.v;
                                             }
                                             this.i4 = 0;
                                             while(this.i4 < this.atotal)
                                             {
                                                if(this.aof[this.i4] == this.mcc.idd)
                                                {
                                                   this.ax[this.i4] -= u;
                                                   this.ay[this.i4] -= this.v;
                                                   if(this.GET_LITE_PHYS())
                                                   {
                                                      this.lax[this.i4] -= u;
                                                      this.lay[this.i4] -= this.v;
                                                   }
                                                   this.atox[this.i4] = -Number(this.atox[this.i4]);
                                                }
                                                ++this.i4;
                                             }
                                             this.Effect(this.mcc.x,this.mcc.y - 41,14,0,0);
                                             this.mcc.x -= u;
                                             this.mcc.y -= this.v;
                                             this.mcc.tox = -Number(this.mcc.tox);
                                             this.mcc.side = -Number(this.mcc.side);
                                             this.Effect(this.mcc.x,this.mcc.y - 41,14,0,0);
                                             this.i4 = 0;
                                             while(this.i4 < this.vehiclestotal)
                                             {
                                                if(this.vehicles[this.i4].io)
                                                {
                                                   if(this.vehicles[this.i4].master == this.mcc.idd)
                                                   {
                                                      if(this.vehicles[this.i4].typ == 5 || this.vehicles[this.i4].typ == 6)
                                                      {
                                                         this.vehicles[this.i4].master = -1;
                                                      }
                                                   }
                                                }
                                                ++this.i4;
                                             }
                                             if(this.mcc.incar != -1)
                                             {
                                                this.PutOutCar(this.mcc.incar);
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        break;
                     case 32:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].botaction = this.triggers[a].actions_targetB[tr];
                        break;
                     case 33:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].team = this.triggers[a].actions_targetB[tr];
                        this.UpdateCharProps(this.mens[this.triggers[a].actions_targetA[tr]]);
                        this.SpawnPlayerImmediately(this.mens[this.triggers[a].actions_targetA[tr]]);
                        this.i4 = 0;
                        while(this.i4 < this.playerstotal)
                        {
                           if(this.mens[this.i4].io)
                           {
                              this.UpdateTeamColor(this.mens[this.i4]);
                           }
                           ++this.i4;
                        }
                        break;
                     case 34:
                        this.mcc = this.decors[int(this.triggers[a].actions_targetA[tr])];
                        if(this.mcc.currentFrameLabel != this.triggers[a].actions_targetB[tr] || this.movieClipHasLabel(this.mcc,this.triggers[a].actions_targetB[tr]) && this.mcc.custom_bitmap.visible)
                        {
                           if(this.mcc.onFrameChange)
                           {
                              this.mcc.onFrameChange();
                           }
                           if(this.movieClipHasLabel(this.mcc,this.triggers[a].actions_targetB[tr]))
                           {
                              this.mcc.gotoAndStop(this.triggers[a].actions_targetB[tr]);
                              this.mcc.custom_bitmap.visible = false;
                           }
                           else
                           {
                              this.mcc.custom_bitmap.visible = true;
                              model = this.triggers[a].actions_targetB[tr];
                              bitmap_data = null;
                              if(model.length > 1)
                              {
                                 if(model.charAt(0) == "c")
                                 {
                                    id = int(model.substr(1));
                                    if(isNaN(id))
                                    {
                                       throw new Error("Decoration model with ID " + id + " could not be found.");
                                    }
                                    custom_image = this.FindCustomImageObject(id);
                                    if(custom_image == null)
                                    {
                                       throw new Error("Custom image of ID " + id + " needs to be added as Custom Image object before it can be used as decoration model.");
                                    }
                                    bitmap_data = new BitmapData(custom_image.width,custom_image.height,true,1727987712);
                                    this.mcc.custom_bitmap.bitmapData = bitmap_data;
                                    this.mcc.custom_bitmap.smoothing = true;
                                    if(custom_image.load_callback_params == null)
                                    {
                                       bitmap_data.lock();
                                       bitmap_data.fillRect(bitmap_data.rect,0);
                                       bitmap_data.draw(custom_image.bitmap);
                                       bitmap_data.unlock();
                                    }
                                    else
                                    {
                                       custom_image.load_callback_params.push({
                                          "bitmap_data":bitmap_data,
                                          "custom_image":custom_image
                                       });
                                       custom_image.load_callbacks.push(function(param1:*):*
                                       {
                                          bitmap_data = param1.bitmap_data;
                                          custom_image = param1.custom_image;
                                          bitmap_data.lock();
                                          bitmap_data.fillRect(bitmap_data.rect,0);
                                          bitmap_data.draw(custom_image.bitmap);
                                          bitmap_data.unlock();
                                       });
                                    }
                                 }
                              }
                           }
                        }
                        break;
                     case 35:
                        this.i7 = int(this.triggers[a].actions_targetA[tr]);
                        this.pushtox[this.i7] = Number(this.triggers[a].actions_targetB[tr]);
                        this.i6 = 0;
                        while(this.i6 < this.atotal)
                        {
                           if(this.aio[this.i6] == false || this.aio[this.i6] == true)
                           {
                              if(this.ax[this.i6] > this.pushx[this.i7])
                              {
                                 if(this.ax[this.i6] < this.pushw[this.i7])
                                 {
                                    if(this.ay[this.i6] > this.pushy[this.i7])
                                    {
                                       if(this.ay[this.i6] < this.pushh[this.i7])
                                       {
                                          this.WakeUpAtom(this.i6);
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.i6;
                        }
                        break;
                     case 36:
                        this.i7 = int(this.triggers[a].actions_targetA[tr]);
                        this.pushtoy[this.i7] = Number(this.triggers[a].actions_targetB[tr]);
                        this.i6 = 0;
                        while(this.i6 < this.atotal)
                        {
                           if(this.aio[this.i6] == false || this.aio[this.i6] == true)
                           {
                              if(this.ax[this.i6] > this.pushx[this.i7])
                              {
                                 if(this.ax[this.i6] < this.pushw[this.i7])
                                 {
                                    if(this.ay[this.i6] > this.pushy[this.i7])
                                    {
                                       if(this.ay[this.i6] < this.pushh[this.i7])
                                       {
                                          this.WakeUpAtom(this.i6);
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.i6;
                        }
                        break;
                     case 37:
                        this.i7 = int(this.triggers[a].actions_targetA[tr]);
                        this.pushstab[this.i7] = Number(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 38:
                        this.i7 = int(this.triggers[a].actions_targetA[tr]);
                        this.pushdamage[this.i7] = Number(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 39:
                        if(Number(this.triggers[a].actions_targetA[tr]) != 0)
                        {
                           this.MP_fps = Number(this.triggers[a].actions_targetA[tr]);
                        }
                        else
                        {
                           this.MP_fps = this.DEFAULT_FPS;
                        }
                        break;
                     case 40:
                        this.i7 = int(this.triggers[a].actions_targetA[tr]);
                        if(this.i7 == 1)
                        {
                           this.CASUAL_MODE = true;
                           this.STRICT_MODE = true;
                        }
                        else
                        {
                           this.CASUAL_MODE = false;
                           this.STRICT_MODE = false;
                        }
                        break;
                     case 41:
                        this.DialogTalk(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 42:
                        this.DialogSay(this.triggers[a].actions_targetA[tr],this.triggers[a].actions_targetB[tr]);
                        break;
                     case 43:
                        if(this.triggers[a].actions_targetA[tr] == "0")
                        {
                           this.SetHint("");
                        }
                        else if(this.HINTS)
                        {
                           this.SetHint(this.triggers[a].actions_targetA[tr]);
                        }
                        break;
                     case 44:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.timers[this.triggers[a].actions_targetA[tr]].ticknew = 0;
                        break;
                     case 45:
                        if(this.triggers[a].actions_targetA[tr] == "true" || this.triggers[a].actions_targetA[tr] == "1")
                        {
                           this.AUTO_REVIVE = true;
                        }
                        else
                        {
                           this.AUTO_REVIVE = false;
                        }
                        break;
                     case 46:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.timers[this.triggers[a].actions_targetA[tr]].maxcalls = this.triggers[a].actions_targetB[tr];
                        break;
                     case 47:
                        if(!this.FORCE_CUSTOM_MAP)
                        {
                           if(!this.MP_mode)
                           {
                              this.LEVEL_END_FORCE = "credits";
                              this.CREDITS_BY_GAME_END = true;
                              if(this.PRO_BOTS)
                              {
                                 this.incBadge(14);
                              }
                              if(!this.EASY_MODE)
                              {
                                 this.incBadge(13);
                              }
                              this.incBadge(11);
                              this.MP_fps = 1;
                              this.darkness.alpha = 0;
                              this.darkness.visible = true;
                              if(this.CMPG_THIS_LEVEL == this.LEVELS_PASSED)
                              {
                                 ++this.LEVELS_PASSED;
                              }
                              this.CMPG_money += 10000;
                              this.SaveGame();
                              ++this.CMPG_THIS_LEVEL;
                           }
                        }
                        break;
                     case 48:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(!this.mens[this.triggers[a].actions_targetA[tr]].dead)
                        {
                           this.mens[this.triggers[a].actions_targetA[tr]].hea *= Number(this.triggers[a].actions_targetB[tr]) / 100;
                           this.mens[this.triggers[a].actions_targetA[tr]].hmax *= Number(this.triggers[a].actions_targetB[tr]) / 100;
                        }
                        break;
                     case 49:
                        if(this.triggers[a].actions_targetA[tr] == "true" || this.triggers[a].actions_targetA[tr] == "1" || this.triggers[a].actions_targetA[tr] == "yes")
                        {
                           this.NO_PSI = true;
                        }
                        else
                        {
                           this.NO_PSI = false;
                        }
                        this.i7 = 0;
                        while(this.i7 < this.playerstotal)
                        {
                           if(this.mens[this.i7].io)
                           {
                              if(!this.mens[this.i7].dead)
                              {
                                 this.ChangedGun(this.i7);
                              }
                           }
                           ++this.i7;
                        }
                        break;
                     case 50:
                        this.FORCE_CUSTOM_MAP = true;
                        this.MP_mode = false;
                        this.MP_fps = 1;
                        this.PlaySound_full(this.s_mission_done);
                        this.GotoMap(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 51:
                        this.game_scale = Number(this.triggers[a].actions_targetA[tr]) / 100;
                        if(isNaN(this.game_scale))
                        {
                           this.game_scale = 1;
                        }
                        if(this.game_scale < 0.01)
                        {
                           this.game_scale = 0.01;
                        }
                        if(this.game_scale > 15)
                        {
                           this.game_scale = 15;
                        }
                        break;
                     case 52:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = String(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].nick = this.triggers[a].actions_targetB[tr];
                        this.mens[this.triggers[a].actions_targetA[tr]].gui.txt1.text = this.mens[this.triggers[a].actions_targetA[tr]].nick;
                        break;
                     case 54:
                        this.EnLight(int(this.triggers[a].actions_targetA[tr]));
                        break;
                     case 55:
                        this.DimLight(int(this.triggers[a].actions_targetA[tr]));
                        break;
                     case 56:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = 0;
                        while(this.tr2 < this.playerstotal)
                        {
                           if(this.mens[this.tr2].io)
                           {
                              if(this.mens[this.tr2].stability > 0 && this.mens[this.tr2].hea > 0)
                              {
                                 if(this.mens[this.tr2].x > this.regions[this.triggers[a].actions_targetB[tr]].x)
                                 {
                                    if(this.mens[this.tr2].x < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                    {
                                       if(this.mens[this.tr2].y > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                       {
                                          if(this.mens[this.tr2].y < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                          {
                                             this.mens[this.tr2].tox *= -2;
                                          }
                                       }
                                    }
                                 }
                              }
                              else if(this.ax[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].x)
                              {
                                 if(this.ax[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                 {
                                    if(this.ay[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                    {
                                       if(this.ay[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                       {
                                          this.mens[this.tr2].tox *= -2;
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        break;
                     case 57:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = 0;
                        while(this.tr2 < this.playerstotal)
                        {
                           if(this.mens[this.tr2].io)
                           {
                              if(this.mens[this.tr2].stability > 0 && this.mens[this.tr2].hea > 0)
                              {
                                 if(this.mens[this.tr2].x > this.regions[this.triggers[a].actions_targetB[tr]].x)
                                 {
                                    if(this.mens[this.tr2].x < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                    {
                                       if(this.mens[this.tr2].y > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                       {
                                          if(this.mens[this.tr2].y < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                          {
                                             this.mens[this.tr2].toy *= -2;
                                          }
                                       }
                                    }
                                 }
                              }
                              else if(this.ax[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].x)
                              {
                                 if(this.ax[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                 {
                                    if(this.ay[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                    {
                                       if(this.ay[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                       {
                                          this.mens[this.tr2].toy *= -2;
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        break;
                     case 58:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        mc.palette[0] = mc.palette[1] = mc.palette[2] = mc.palette[3] = "-";
                        mc.char = this.triggers[a].actions_targetB[tr];
                        mc.mdl_head = mc.char;
                        mc.mdl_leg1_upper = mc.char;
                        mc.mdl_leg1_middle = mc.char;
                        mc.mdl_leg1_lower = mc.char;
                        mc.mdl_leg2_upper = mc.char;
                        mc.mdl_leg2_middle = mc.char;
                        mc.mdl_leg2_lower = mc.char;
                        mc.mdl_arm1_upper = mc.char;
                        mc.mdl_arm1_lower = mc.char;
                        mc.mdl_arm2_upper = mc.char;
                        mc.mdl_arm2_lower = mc.char;
                        mc.mdl_toe = mc.char;
                        mc.mdl_body = mc.char;
                        mc.alpha = 1;
                        this.UpdateCharProps(mc);
                        this.SpawnPlayerImmediately(mc);
                        break;
                     case 59:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.i3 = this.triggers[a].actions_targetA[tr];
                        if(this.i3 >= 0)
                        {
                           this.mens[this.i3].hea = this.mens[this.i3].hmax = this.triggers[a].actions_targetB[tr];
                           if(this.mens[this.i3].hea > 0)
                           {
                              this.mens[this.i3].dead = false;
                              this.mens[this.i3].dying = false;
                              this.ChangedGun(this.i3);
                              if(Boolean(this.mens[this.i3].isplayer) || this.mens[this.i3].team == this.mens[this.MP_myid].team)
                              {
                                 this.mens[this.i3].gui.alpha = 1;
                                 this.mens[this.i3].gui.visible = true;
                                 this.mens[this.i3].hunt = -1;
                              }
                              this.mens[this.i3].deadtim = 0;
                              this.mens[this.i3].hp_head = Math.max(Number(this.mens[this.i3].hea) * 0.4,30);
                              this.mens[this.i3].hp_body = Math.max(Number(this.mens[this.i3].hea) * 0.6,30);
                              this.mens[this.i3].hp_legs = Math.max(Number(this.mens[this.i3].hea) * 0.5,30);
                              this.mens[this.i3].hp_arms = Math.max(Number(this.mens[this.i3].hea) * 0.4,30);
                              this.Hurt_nopain(this.i3);
                              this.SpawnPlayerImmediately(this.mens[this.i3]);
                           }
                        }
                        else
                        {
                           this.SpawnLevelLogicErrorIfNeeded(new Error(),"Trigger " + this.triggers[a].uid + ", Action #" + (tr + 1) + ": Character with ID \"" + this.triggers[a].actions_targetA[tr] + "\" wasn\'t found.");
                        }
                        break;
                     case 60:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.i3 = this.triggers[a].actions_targetA[tr];
                        this.mens[this.i3].curwea = -1;
                        this.ChangedGun(this.i3);
                        this.i2 = 0;
                        while(this.i2 < this.gunstotal)
                        {
                           if(this.guns[this.i2].picken_by == this.i3)
                           {
                              if(this.guns[this.i2].picken_by == this.MP_myid)
                              {
                                 if(this.guns[this.i2].wep == -2)
                                 {
                                    if(this.guns[this.i2].nadekind == 1)
                                    {
                                       if(this.grenades_total > 0)
                                       {
                                          this.grenades_total = this.grenades_total - 1;
                                       }
                                    }
                                    if(this.guns[this.i2].nadekind == 2)
                                    {
                                       if(this.grenades_port_total > 0)
                                       {
                                          this.grenades_port_total = this.grenades_port_total - 1;
                                       }
                                    }
                                    if(this.guns[this.i2].nadekind == 3)
                                    {
                                       if(this.grenades_sh_total > 0)
                                       {
                                          this.grenades_sh_total = this.grenades_sh_total - 1;
                                       }
                                    }
                                 }
                              }
                              this.guns[this.i2].picken_by = -1;
                           }
                           ++this.i2;
                        }
                        break;
                     case 61:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        if(this.mens[this.triggers[a].actions_targetA[tr]].io)
                        {
                           this.mcc = this.mens[this.triggers[a].actions_targetA[tr]];
                           this.mcc.tox *= this.triggers[a].actions_targetB[tr];
                           this.mcc.toy *= this.triggers[a].actions_targetB[tr];
                           this.i4 = 0;
                           while(this.i4 < this.atotal)
                           {
                              if(this.aof[this.i4] == this.triggers[a].actions_targetA[tr])
                              {
                                 this.atox[this.i4] *= this.triggers[a].actions_targetB[tr];
                                 this.atoy[this.i4] *= this.triggers[a].actions_targetB[tr];
                              }
                              ++this.i4;
                           }
                        }
                        break;
                     case 62:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_count = this.triggers[a].actions_targetB[tr];
                        break;
                     case 63:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_averange = Number(this.triggers[a].actions_targetB[tr]) / 180 * Math.PI;
                        break;
                     case 64:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_power = this.triggers[a].actions_targetB[tr];
                        break;
                     case 65:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_bullets = 1;
                        this.mcc.stat_class = 0;
                        break;
                     case 66:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_bullets = 1;
                        this.mcc.stat_class = 2;
                        break;
                     case 67:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_bullets = 8;
                        this.mcc.stat_class = 4;
                        break;
                     case 68:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_bullets = 10;
                        this.mcc.stat_class = 5;
                        break;
                     case 69:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_bullets = 7;
                        this.mcc.stat_class = 1;
                        break;
                     case 70:
                     case 279:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = this.TRIGGER_PLAYER_INITIATOR;
                        if(this.mens[this.tr2].io)
                        {
                           this.mcc = this.mens[this.tr2];
                           if(this.mcc.hea > 0)
                           {
                              u = this.ax[this.mcc.b_toe] - (this.regions[this.triggers[a].actions_targetB[tr]].x + Number(this.regions[this.triggers[a].actions_targetB[tr]].w) / 2);
                              this.v = this.ay[this.mcc.b_toe] - (this.regions[this.triggers[a].actions_targetB[tr]].y + Number(this.regions[this.triggers[a].actions_targetB[tr]].h) / 2);
                              if(this.regions[this.triggers[a].actions_targetA[tr]].w == this.regions[this.triggers[a].actions_targetB[tr]].w)
                              {
                                 if(this.regions[this.triggers[a].actions_targetA[tr]].h == this.regions[this.triggers[a].actions_targetB[tr]].h)
                                 {
                                    u = Number(this.regions[this.triggers[a].actions_targetA[tr]].x) - Number(this.regions[this.triggers[a].actions_targetB[tr]].x);
                                    this.v = Number(this.regions[this.triggers[a].actions_targetA[tr]].y) - Number(this.regions[this.triggers[a].actions_targetB[tr]].y);
                                 }
                              }
                              if(this.tr2 == this.MP_myid)
                              {
                                 this.game_x += u;
                                 this.game_y += this.v;
                              }
                              this.i4 = 0;
                              while(this.i4 < this.atotal)
                              {
                                 if(this.aof[this.i4] == this.mcc.idd)
                                 {
                                    this.ax[this.i4] -= u;
                                    this.ay[this.i4] -= this.v;
                                    if(this.GET_LITE_PHYS())
                                    {
                                       this.lax[this.i4] -= u;
                                       this.lay[this.i4] -= this.v;
                                    }
                                 }
                                 ++this.i4;
                              }
                              if(this.triggers[a].actions_type[tr] == 70)
                              {
                                 this.Effect(this.mcc.x,this.mcc.y - 41,14,0,0);
                              }
                              this.mcc.x -= u;
                              this.mcc.y -= this.v;
                              if(this.triggers[a].actions_type[tr] == 70)
                              {
                                 this.Effect(this.mcc.x,this.mcc.y - 41,14,0,0);
                              }
                              this.i4 = 0;
                              while(this.i4 < this.vehiclestotal)
                              {
                                 if(this.vehicles[this.i4].io)
                                 {
                                    if(this.vehicles[this.i4].master == this.mcc.idd)
                                    {
                                       if(this.vehicles[this.i4].typ == 5 || this.vehicles[this.i4].typ == 6)
                                       {
                                          this.vehicles[this.i4].master = -1;
                                       }
                                    }
                                 }
                                 ++this.i4;
                              }
                              if(this.mcc.incar != -1)
                              {
                                 this.PutOutCar(this.mcc.incar);
                              }
                           }
                        }
                        break;
                     case 71:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = String(this.triggers[a].actions_targetB[tr]);
                        block = null;
                        sf = 0;
                        while(sf < this.surf_lnk.length)
                        {
                           if(this.surf_lnk_to[sf] == this.triggers[a].actions_targetA[tr])
                           {
                              block = this.surf_lnk[sf];
                              break;
                           }
                           sf++;
                        }
                        if(block != null)
                        {
                           hex = Number(this.triggers[a].actions_targetB[tr].replace("#","0x"));
                           red = (hex & 16711680) >> 16;
                           green = (hex & 65280) >> 8;
                           blue = hex & 255;
                           //clrs_mov = new ColorMatrixFilter();
                           matrix = [];
                           matrix = matrix.concat([1,0,0,0,red]);
                           matrix = matrix.concat([0,1,0,0,green]);
                           matrix = matrix.concat([0,0,1,0,blue]);
                           matrix = matrix.concat([0,0,0,1,0]);
                           //clrs_mov.matrix = matrix;
                           //block.filters = new Array(clrs_mov);
						   // FILTERS
                        }
                        break;
                     case 72:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        u = this.triggers[a].actions_targetB[tr];
                        this.tr2 = 0;
                        while(this.tr2 < this.playerstotal)
                        {
                           if(this.mens[this.tr2].io)
                           {
                              if(this.mens[this.tr2].x > this.regions[this.triggers[a].actions_targetA[tr]].x)
                              {
                                 if(this.mens[this.tr2].x < this.regions[this.triggers[a].actions_targetA[tr]].x + this.regions[this.triggers[a].actions_targetA[tr]].w)
                                 {
                                    if(this.mens[this.tr2].y > this.regions[this.triggers[a].actions_targetA[tr]].y)
                                    {
                                       if(this.mens[this.tr2].y < this.regions[this.triggers[a].actions_targetA[tr]].y + this.regions[this.triggers[a].actions_targetA[tr]].h)
                                       {
                                          this.mcc = this.mens[this.tr2];
                                          this.i4 = 0;
                                          while(this.i4 < this.atotal)
                                          {
                                             if(this.aof[this.i4] == this.mcc.idd)
                                             {
                                                this.atox[this.i4] *= u;
                                                this.atoy[this.i4] *= u;
                                             }
                                             ++this.i4;
                                          }
                                          this.mcc.tox *= u;
                                          this.mcc.toy *= u;
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        break;
                     case 73:
                        this.triggers[a].actions_targetA[tr] = Number(this.triggers[a].actions_targetA[tr]);
                        this.pspeed = this.triggers[a].actions_targetA[tr];
                        break;
                     case 74:
                        this.triggers[a].actions_targetA[tr] = Number(this.triggers[a].actions_targetA[tr]);
                        this.weapon_penetration_factor = this.triggers[a].actions_targetA[tr];
                        break;
                     case 75:
                        this.triggers[a].actions_targetA[tr] = Number(this.triggers[a].actions_targetA[tr]);
                        this.maxbulletlife = this.triggers[a].actions_targetA[tr];
                        break;
                     case 76:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.forcars = false;
                        break;
                     case 77:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.forcars = true;
                        break;
                     case 78:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.wep = this.triggers[a].actions_targetB[tr];
                        break;
                     case 79:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = this.TRIGGER_PLAYER_INITIATOR;
                        this.regions[this.triggers[a].actions_targetA[tr]].x = Number(this.mens[this.tr2].x) - Number(this.regions[this.triggers[a].actions_targetA[tr]].w) / 2;
                        this.regions[this.triggers[a].actions_targetA[tr]].y = Number(this.mens[this.tr2].y) - Number(this.regions[this.triggers[a].actions_targetA[tr]].h) / 2;
                        break;
                     case 80:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = this.triggers[a].actions_targetB[tr];
                        this.regions[this.triggers[a].actions_targetA[tr]].x = Number(this.mens[this.tr2].x) - Number(this.regions[this.triggers[a].actions_targetA[tr]].w) / 2;
                        this.regions[this.triggers[a].actions_targetA[tr]].y = Number(this.mens[this.tr2].y) - Number(this.regions[this.triggers[a].actions_targetA[tr]].h) / 2;
                        break;
                     case 81:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.guns[this.triggers[a].actions_targetA[tr]].onshot = this.triggers[a].actions_targetB[tr];
                        break;
                     case 82:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.doors[this.triggers[a].actions_targetA[tr]].onshot = this.triggers[a].actions_targetB[tr];
                        break;
                     case 83:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.regions[this.triggers[a].actions_targetA[tr]].x += this.triggers[a].actions_targetB[tr];
                        break;
                     case 84:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.regions[this.triggers[a].actions_targetA[tr]].y += this.triggers[a].actions_targetB[tr];
                        break;
                     case 85:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.doors[this.triggers[a].actions_targetA[tr]].playsounds = false;
                        break;
                     case 86:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.doors[this.triggers[a].actions_targetA[tr]].playsounds = true;
                        break;
                     case 87:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = this.TRIGGER_PLAYER_INITIATOR;
                        this.regions[this.triggers[a].actions_targetA[tr]].x = Number(this.mens[this.tr2].tarx) - Number(this.regions[this.triggers[a].actions_targetA[tr]].w) / 2;
                        this.regions[this.triggers[a].actions_targetA[tr]].y = Number(this.mens[this.tr2].tary) - Number(this.regions[this.triggers[a].actions_targetA[tr]].h) / 2;
                        break;
                     case 88:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].mobility = this.triggers[a].actions_targetB[tr];
                        break;
                     case 89:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].armored = this.triggers[a].actions_targetB[tr];
                        break;
                     case 90:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = String(this.triggers[a].actions_targetB[tr]);
                        hex = Number(this.triggers[a].actions_targetB[tr].replace("#","0x"));
                        red = (hex & 16711680) >> 16;
                        green = (hex & 65280) >> 8;
                        blue = hex & 255;
                        this.mens[this.triggers[a].actions_targetA[tr]].blood_red = red / 255 * 2;
                        this.mens[this.triggers[a].actions_targetA[tr]].blood_green = green / 255 * 2;
                        this.mens[this.triggers[a].actions_targetA[tr]].blood_blue = blue / 255 * 2;
                        break;
                     case 91:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(this.triggers[a].actions_targetB[tr] > 0)
                        {
                           this.triggers[a].actions_targetB[tr] = 1;
                        }
                        else if(this.triggers[a].actions_targetB[tr] < 0)
                        {
                           this.triggers[a].actions_targetB[tr] = -1;
                        }
                        else
                        {
                           this.triggers[a].actions_targetB[tr] = 0;
                        }
                        this.mens[this.triggers[a].actions_targetA[tr]].act_movex = this.triggers[a].actions_targetB[tr];
                        break;
                     case 92:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(this.triggers[a].actions_targetB[tr] > 0)
                        {
                           this.triggers[a].actions_targetB[tr] = 1;
                        }
                        else if(this.triggers[a].actions_targetB[tr] < 0)
                        {
                           this.triggers[a].actions_targetB[tr] = -1;
                        }
                        else
                        {
                           this.triggers[a].actions_targetB[tr] = 0;
                        }
                        this.mens[this.triggers[a].actions_targetA[tr]].act_movey = this.triggers[a].actions_targetB[tr];
                        break;
                     case 93:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(this.triggers[a].actions_targetB[tr] == 1)
                        {
                           this.triggers[a].actions_targetB[tr] = true;
                        }
                        else
                        {
                           this.triggers[a].actions_targetB[tr] = false;
                        }
                        this.mens[this.triggers[a].actions_targetA[tr]].act_fire = this.triggers[a].actions_targetB[tr];
                        break;
                     case 94:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].tarx = this.regions[this.triggers[a].actions_targetB[tr]].x + Number(this.regions[this.triggers[a].actions_targetB[tr]].w) * Math.random();
                        this.mens[this.triggers[a].actions_targetA[tr]].tary = this.regions[this.triggers[a].actions_targetB[tr]].y + Number(this.regions[this.triggers[a].actions_targetB[tr]].h) * Math.random();
                        break;
                     case 95:
                     case 96:
                        if(this.triggers[a].actions_type[tr] == 95)
                        {
                           rule = false;
                        }
                        else
                        {
                           rule = true;
                        }
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        res = this.TraceLineF_nopushers(this.regions[this.triggers[a].actions_targetA[tr]].x + Number(this.regions[this.triggers[a].actions_targetA[tr]].w) / 2,this.regions[this.triggers[a].actions_targetA[tr]].y + Number(this.regions[this.triggers[a].actions_targetA[tr]].h) / 2,this.regions[this.triggers[a].actions_targetB[tr]].x + Number(this.regions[this.triggers[a].actions_targetB[tr]].w) / 2,this.regions[this.triggers[a].actions_targetB[tr]].y + Number(this.regions[this.triggers[a].actions_targetB[tr]].h) / 2);
                        if(res)
                        {
                           res = this.TracePointNoRagdolls(this.regions[this.triggers[a].actions_targetA[tr]].x + Number(this.regions[this.triggers[a].actions_targetA[tr]].w) / 2,this.regions[this.triggers[a].actions_targetA[tr]].y + Number(this.regions[this.triggers[a].actions_targetA[tr]].h) / 2);
                        }
                        if(res)
                        {
                           res = this.TracePointNoRagdolls(this.regions[this.triggers[a].actions_targetB[tr]].x + Number(this.regions[this.triggers[a].actions_targetB[tr]].w) / 2,this.regions[this.triggers[a].actions_targetB[tr]].y + Number(this.regions[this.triggers[a].actions_targetB[tr]].h) / 2);
                        }
                        if(res == rule)
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 97:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(this.triggers[a].actions_targetB[tr] >= 0)
                        {
                           if(this.triggers[a].actions_targetB[tr] < this.playerstotal)
                           {
                              this.mens[this.triggers[a].actions_targetA[tr]].hunt = this.mens[this.triggers[a].actions_targetB[tr]].idd;
                           }
                        }
                        break;
                     case 98:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.regions[this.triggers[a].actions_targetA[tr]].x = this.doors[this.triggers[a].actions_targetB[tr]].x + Number(this.doors[this.triggers[a].actions_targetB[tr]].w) / 2 - Number(this.regions[this.triggers[a].actions_targetA[tr]].w) / 2;
                        this.regions[this.triggers[a].actions_targetA[tr]].y = this.doors[this.triggers[a].actions_targetB[tr]].y + Number(this.doors[this.triggers[a].actions_targetB[tr]].h) / 2 - Number(this.regions[this.triggers[a].actions_targetA[tr]].h) / 2;
                        break;
                     case 99:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.EXEC_TRIGGER(this.triggers[a].actions_targetA[tr],true);
                        break;
                     case 100:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.triggers[a].actions_targetB[tr];
                        break;
                     case 101:
                        if(this.level_variables[this.triggers[a].actions_targetA[tr]] == undefined)
                        {
                           this.level_variables[this.triggers[a].actions_targetA[tr]] = this.triggers[a].actions_targetB[tr];
                        }
                        break;
                     case 102:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Number(this.level_variables[this.triggers[a].actions_targetA[tr]]) + Number(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 103:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] *= Number(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 104:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] += Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        break;
                     case 105:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] *= Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        break;
                     case 106:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.random() * Number(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 107:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.floor(Math.random() * Number(this.triggers[a].actions_targetB[tr]));
                        break;
                     case 108:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.round(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        break;
                     case 109:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.floor(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        break;
                     case 110:
                        if(Number(this.level_variables[this.triggers[a].actions_targetA[tr]]) <= Number(this.level_variables[this.triggers[a].actions_targetB[tr]]))
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 111:
                        if(Number(this.level_variables[this.triggers[a].actions_targetA[tr]]) >= Number(this.level_variables[this.triggers[a].actions_targetB[tr]]))
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 112:
                        if(this.level_variables[this.triggers[a].actions_targetA[tr]] != this.level_variables[this.triggers[a].actions_targetB[tr]])
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 113:
                        if(this.level_variables[this.triggers[a].actions_targetA[tr]] == this.level_variables[this.triggers[a].actions_targetB[tr]])
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 114:
                        if(Number(this.level_variables[this.triggers[a].actions_targetA[tr]]) <= Number(this.triggers[a].actions_targetB[tr]))
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 115:
                        if(Number(this.level_variables[this.triggers[a].actions_targetA[tr]]) >= Number(this.triggers[a].actions_targetB[tr]))
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 116:
                        if(this.level_variables[this.triggers[a].actions_targetA[tr]] != this.triggers[a].actions_targetB[tr])
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 117:
                        if(this.level_variables[this.triggers[a].actions_targetA[tr]] == this.triggers[a].actions_targetB[tr])
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 118:
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.regions[this.triggers[a].actions_targetB[tr]].x;
                        break;
                     case 119:
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.regions[this.triggers[a].actions_targetB[tr]].y;
                        break;
                     case 120:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.regions[this.triggers[a].actions_targetA[tr]].x = Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        break;
                     case 121:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.regions[this.triggers[a].actions_targetA[tr]].y = Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        break;
                     case 122:
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[this.triggers[a].actions_targetB[tr]].hea;
                        break;
                     case 123:
                        this.triggers[a].actions_targetB[tr] = this.triggers[a].actions_targetB[tr];
                        if(String(this.level_variables[this.triggers[a].actions_targetA[tr]]) != String(this.triggers[a].actions_targetB[tr]))
                        {
                           tr++;
                        }
                        break;
                     case 124:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Number(this.level_variables[this.triggers[a].actions_targetA[tr]]) % Number(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 125:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.level_variables[this.triggers[a].actions_targetB[tr]];
                        break;
                     case 126:
                        power = Number(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.PhysicsExplosion(this.regions[this.triggers[a].actions_targetB[tr]].x + Number(this.regions[this.triggers[a].actions_targetB[tr]].w) / 2,this.regions[this.triggers[a].actions_targetB[tr]].y + Number(this.regions[this.triggers[a].actions_targetB[tr]].h) / 2,Math.abs(power * 5),power * 0.6,Math.max(0,power * 10),-1,"level");
                        if(power >= 0)
                        {
                           this.ExplosionSound(this.regions[this.triggers[a].actions_targetB[tr]].x + Number(this.regions[this.triggers[a].actions_targetB[tr]].w) / 2,this.regions[this.triggers[a].actions_targetB[tr]].y + Number(this.regions[this.triggers[a].actions_targetB[tr]].h) / 2);
                        }
                        break;
                     case 127:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Number(this.level_variables[this.triggers[a].actions_targetA[tr]]) % Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        break;
                     case 128:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        count = int(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_count = count;
                        break;
                     case 129:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        accuracy = Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_averange = accuracy / 180 * Math.PI;
                        break;
                     case 130:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        power = Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_power = power;
                        break;
                     case 131:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] /= Number(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 132:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] /= Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        break;
                     case 133:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.pow(Number(this.level_variables[this.triggers[a].actions_targetA[tr]]),Number(this.level_variables[this.triggers[a].actions_targetB[tr]]));
                        break;
                     case 134:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.pow(Number(this.level_variables[this.triggers[a].actions_targetA[tr]]),Number(this.triggers[a].actions_targetB[tr]));
                        break;
                     case 135:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.sin(Number(this.level_variables[this.triggers[a].actions_targetB[tr]]));
                        break;
                     case 136:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.cos(Number(this.level_variables[this.triggers[a].actions_targetB[tr]]));
                        break;
                     case 137:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.MP_myid;
                        break;
                     case 138:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.MP_mode ? 1 : 0;
                        break;
                     case 139:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.MP_spectator ? 1 : 0;
                        break;
                     case 140:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.GET_LITE_PHYS() ? 1 : 0;
                        break;
                     case 141:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].hp_head -= this.triggers[a].actions_targetB[tr];
                        this.Hurt(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 142:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].hp_arms -= this.triggers[a].actions_targetB[tr];
                        this.Hurt(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 143:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].hp_body -= this.triggers[a].actions_targetB[tr];
                        this.Hurt(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 144:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].hp_legs -= this.triggers[a].actions_targetB[tr];
                        this.Hurt(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 145:
                        this.triggers[a].actions_targetA[tr] = this.triggers[a].actions_targetA[tr];
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        c = 0;
                        this.tr2 = 0;
                        while(this.tr2 < this.playerstotal)
                        {
                           if(this.mens[this.tr2].io)
                           {
                              if(this.mens[this.tr2].hea > 0)
                              {
                                 if(this.ax[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].x)
                                 {
                                    if(this.ax[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                    {
                                       if(this.ay[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                       {
                                          if(this.ay[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                          {
                                             c++;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = c;
                        break;
                     case 146:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[this.TRIGGER_PLAYER_INITIATOR].login_name;
                        break;
                     case 147:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[this.TRIGGER_PLAYER_INITIATOR].nick;
                        break;
                     case 148:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.MP_room_name;
                        break;
                     case 149:
                        key = this.triggers[a].actions_targetA[tr];
                        phrase = this.triggers[a].actions_targetB[tr];
                        if(this.level_variables[key].indexOf(phrase) != -1)
                        {
                           this.level_variables[key] = 1;
                        }
                        else
                        {
                           this.level_variables[key] = 0;
                        }
                        break;
                     case 150:
                        key = this.triggers[a].actions_targetA[tr];
                        key2 = this.triggers[a].actions_targetB[tr];
                        if(this.level_variables[key].indexOf(this.level_variables[key2]) != -1)
                        {
                           this.level_variables[key] = 1;
                        }
                        else
                        {
                           this.level_variables[key] = 0;
                        }
                        break;
                     case 151:
                        key = this.triggers[a].actions_targetA[tr];
                        key2 = this.triggers[a].actions_targetB[tr];
                        this.level_variables[key] = this.level_variables[key2].length;
                        break;
                     case 152:
                        key = this.triggers[a].actions_targetA[tr];
                        key2 = this.triggers[a].actions_targetB[tr];
                        this.level_variables[key] += String(this.level_variables[key2]);
                        break;
                     case 153:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = 1 - Number(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        break;
                     case 154:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = -Number(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        break;
                     case 155:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.GSPEED;
                        break;
                     case 156:
                        this.user_says_trigger = int(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 157:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[this.user_says_id].login_name;
                        break;
                     case 158:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[this.user_says_id].nick;
                        break;
                     case 159:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.user_says_id;
                        break;
                     case 160:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.user_says_text;
                        break;
                     case 161:
                        this.session_variables = {};
                        this.session_variables_source_id = {};
                        break;
                     case 162:
                        this.session_variables_source_id[this.triggers[a].actions_targetA[tr]] = this.CUR_CUSTOM_MAP;
                        this.session_variables[this.triggers[a].actions_targetA[tr]] = this.level_variables[this.triggers[a].actions_targetB[tr]];
                        break;
                     case 163:
                        this.level_variables[this.triggers[a].actions_targetB[tr]] = this.session_variables[this.triggers[a].actions_targetA[tr]];
                        break;
                     case 164:
                        this.triggers[a].actions_targetA[tr] = Math.floor(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Math.floor(this.triggers[a].actions_targetB[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        mc.mdl_head = this.triggers[a].actions_targetB[tr];
                        this.SpawnPlayerImmediately(mc);
                        break;
                     case 165:
                        this.triggers[a].actions_targetA[tr] = Math.floor(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Math.floor(this.triggers[a].actions_targetB[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        mc.mdl_body = this.triggers[a].actions_targetB[tr];
                        this.SpawnPlayerImmediately(mc);
                        break;
                     case 166:
                        this.triggers[a].actions_targetA[tr] = Math.floor(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Math.floor(this.triggers[a].actions_targetB[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        mc.mdl_arm1_upper = this.triggers[a].actions_targetB[tr];
                        mc.mdl_arm1_lower = this.triggers[a].actions_targetB[tr];
                        mc.mdl_arm2_upper = this.triggers[a].actions_targetB[tr];
                        mc.mdl_arm2_lower = this.triggers[a].actions_targetB[tr];
                        this.SpawnPlayerImmediately(mc);
                        break;
                     case 167:
                        this.triggers[a].actions_targetA[tr] = Math.floor(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Math.floor(this.triggers[a].actions_targetB[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        mc.mdl_leg1_upper = this.triggers[a].actions_targetB[tr];
                        mc.mdl_leg1_middle = this.triggers[a].actions_targetB[tr];
                        mc.mdl_leg1_lower = this.triggers[a].actions_targetB[tr];
                        mc.mdl_leg2_upper = this.triggers[a].actions_targetB[tr];
                        mc.mdl_leg2_middle = this.triggers[a].actions_targetB[tr];
                        mc.mdl_leg2_lower = this.triggers[a].actions_targetB[tr];
                        mc.mdl_toe = this.triggers[a].actions_targetB[tr];
                        this.SpawnPlayerImmediately(mc);
                        break;
                     case 168:
                        this.triggers[a].actions_targetA[tr] = Math.floor(this.triggers[a].actions_targetA[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        palette = this.triggers[a].actions_targetB[tr] + "";
                        mc.palette[0] = palette.charAt(0);
                        mc.palette[1] = palette.charAt(1);
                        mc.palette[2] = palette.charAt(2);
                        mc.palette[3] = palette.charAt(3);
                        this.UpdatePlayerColorMP(mc,true);
                        break;
                     case 169:
                        variable_to_save_name = this.triggers[a].actions_targetB[tr];
                        if(!this.MP_spectator)
                        {
                           loader = this.GetNewURLLoader();
                           loader.addEventListener(Event.COMPLETE,function(param1:Event):void
                           {
                              level_variables[variable_to_save_name] = param1.target.data;
                           });
                           loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR,function(param1:SecurityErrorEvent):void
                           {
                              level_variables[variable_to_save_name] = "error 1";
                           });
                           loader.addEventListener(HTTPStatusEvent.HTTP_STATUS,function(param1:HTTPStatusEvent):void
                           {
                              level_variables[variable_to_save_name] = "error 2";
                           });
                           with({})
                           {
                              
                           }
                           loader.addEventListener(IOErrorEvent.IO_ERROR,this.ioErrorHandler = function(param1:IOErrorEvent):void
                           {
                              level_variables[variable_to_save_name] = "error 3";
                           });
                           this.level_variables[variable_to_save_name] = "loading...";
                           request = new URLRequest("https://www.plazmaburst2.com/pb2/custom_map_url_request.php");
                           variables = new URLVariables();
                           variables.request_url = this.level_variables[this.triggers[a].actions_targetA[tr]];
                           variables.map_id = this.MP_map_name;
                           variables.login = this.def_login;
                           variables.password = this.def_password;
                           if(this.MP_mode && this.GUEST_ACCESS)
                           {
                              variables.as_guest = "1";
                           }
                           else
                           {
                              variables.as_guest = "";
                           }
                           request.data = variables;
                           request.method = URLRequestMethod.POST;
                           try
                           {
                              loader.load(request);
                           }
                           catch(error:Error)
                           {
                              level_variables[variable_to_save_name] = "error 4";
                           }
                        }
                        else
                        {
                           this.level_variables[variable_to_save_name] = "error 5";
                        }
                        break;
                     case 170:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.speed_multiplier = this.triggers[a].actions_targetB[tr];
                        break;
                     case 171:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        mult = Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.speed_multiplier = mult;
                        break;
                     case 172:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.recoil_multiplier = this.triggers[a].actions_targetB[tr];
                        break;
                     case 173:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        mult = Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.recoil_multiplier = mult;
                        break;
                     case 174:
                        diff = int(this.triggers[a].actions_targetA[tr]);
                        this.SetAIDifficulty(diff);
                        break;
                     case 175:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_bullets = this.triggers[a].actions_targetB[tr];
                        break;
                     case 176:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        index_value = int(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_bullets = index_value;
                        break;
                     case 177:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.MP_mode ? this.MP_type : 0;
                        break;
                     case 178:
                        this.tr3 = int(this.triggers[a].actions_targetB[tr]);
                        inv = "";
                        this.tr2 = 0;
                        while(this.tr2 < this.gunstotal)
                        {
                           if(this.guns[this.tr2].io)
                           {
                              if(this.guns[this.tr2].picken_by == this.tr3)
                              {
                                 if(!this.guns[this.tr2].forcars)
                                 {
                                    if(inv != "")
                                    {
                                       inv += ";";
                                    }
                                    inv += this.guns[this.tr2].model + "^" + this.guns[this.tr2].upg + "^" + this.guns[this.tr2].command;
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = inv;
                        break;
                     case 179:
                        var anonf3:Function = function():*
                        {
                           var _loc1_:* = undefined;
                           var _loc2_:* = undefined;
                           var _loc3_:* = undefined;
                           var _loc4_:* = undefined;
                           var _loc5_:* = undefined;
                           var _loc6_:* = undefined;
                           var _loc7_:* = undefined;
                           var _loc8_:* = undefined;
                           var _loc9_:* = undefined;
                           var _loc10_:* = undefined;
                           _loc1_ = level_variables[triggers[a].actions_targetA[tr]];
                           _loc2_ = int(triggers[a].actions_targetB[tr]);
                           if(_loc1_ != "")
                           {
                              _loc3_ = _loc1_.split(";");
                              _loc4_ = mens[_loc2_].x;
                              _loc5_ = mens[_loc2_].y;
                              _loc6_ = 0;
                              while(_loc6_ < _loc3_.length)
                              {
                                 _loc8_ = (_loc7_ = _loc3_[_loc6_].split("^"))[0];
                                 _loc9_ = int(_loc7_[1]);
                                 _loc10_ = int(_loc7_[2]);
                                 mc3 = MakeGunByClass(_loc8_,{
                                    "x":_loc4_,
                                    "y":_loc5_,
                                    "upg":_loc9_,
                                    "command":_loc10_
                                 });
                                 _loc6_++;
                              }
                           }
                        };
						anonf3();
                        break;
                     case 180:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.TRIGGER_PLAYER_INITIATOR;
                        break;
                     case 181:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.TRIGGER_PLAYER_KILLER;
                        break;
                     case 182:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.TRIGGER_PLAYER_KILLER >= 0 ? this.mens[this.TRIGGER_PLAYER_KILLER].login_name : ".nobody";
                        break;
                     case 183:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.TRIGGER_PLAYER_KILLER >= 0 ? this.mens[this.TRIGGER_PLAYER_KILLER].nick : "Empty";
                        break;
                     case 184:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[int(this.triggers[a].actions_targetB[tr])].login_name;
                        break;
                     case 185:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[int(this.triggers[a].actions_targetB[tr])].nick;
                        break;
                     case 186:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[int(this.triggers[a].actions_targetB[tr])].team;
                        break;
                     case 187:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[this.level_variables[this.triggers[a].actions_targetB[tr]]].login_name;
                        break;
                     case 188:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[this.level_variables[this.triggers[a].actions_targetB[tr]]].nick;
                        break;
                     case 189:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[this.level_variables[this.triggers[a].actions_targetB[tr]]].team;
                        break;
                     case 190:
                        this.SHOW_FRAG_MESSAGES = true;
                        break;
                     case 191:
                        this.SHOW_FRAG_MESSAGES = false;
                        break;
                     case 192:
                        this.sky.gotoAndStop(int(this.triggers[a].actions_targetA[tr]));
                        break;
                     case 193:
                        hex_str = this.triggers[a].actions_targetA[tr];
                        if(hex_str.length == 7)
                        {
                           hex_int = int(parseInt(hex_str.substr(1),16));
                           r = (hex_int & 16711680) >> 16;
                           g = (hex_int & 65280) >> 8;
                           b = hex_int & 255;
                           this.sky.transform.colorTransform = new ColorTransform(r / 255 * 2,g / 255 * 2,b / 255 * 2);
                        }
                        break;
                     case 194:
                        this.multiplayer_repsawn_timer_speed = Number(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 195:
                        r = Number(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        if(this.sky.transform.colorTransform == null)
                        {
                           this.sky.transform.colorTransform = new ColorTransform(1,1,1);
                        }
                        this.sky.transform.colorTransform = new ColorTransform(r,this.sky.transform.colorTransform.greenMultiplier,this.sky.transform.colorTransform.blueMultiplier);
                        break;
                     case 196:
                        r = Number(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        if(this.sky.transform.colorTransform == null)
                        {
                           this.sky.transform.colorTransform = new ColorTransform(1,1,1);
                        }
                        this.sky.transform.colorTransform = new ColorTransform(this.sky.transform.colorTransform.redMultiplier,r,this.sky.transform.colorTransform.blueMultiplier);
                        break;
                     case 197:
                        r = Number(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        if(this.sky.transform.colorTransform == null)
                        {
                           this.sky.transform.colorTransform = new ColorTransform(1,1,1);
                        }
                        this.sky.transform.colorTransform = new ColorTransform(this.sky.transform.colorTransform.redMultiplier,this.sky.transform.colorTransform.greenMultiplier,r);
                        break;
                     case 198:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = {
                           "pitch":1,
                           "volume":1,
                           "voice":"English",
                           "rate":1
                        };
                        try
                        {
                           if(ExternalInterface.available)
                           {
                              ExternalInterface.call("TTS_Prepare()");
                           }
                        }
                        catch(e:*)
                        {
                        }
                        break;
                     case 199:
                        this.level_variables[this.triggers[a].actions_targetA[tr]].volume = Math.max(Math.min(this.triggers[a].actions_targetB[tr],1.5),0);
                        break;
                     case 200:
                        this.level_variables[this.triggers[a].actions_targetA[tr]].pitch = Math.max(Math.min(this.triggers[a].actions_targetB[tr],1.5),0);
                        break;
                     case 201:
                        this.level_variables[this.triggers[a].actions_targetA[tr]].voice = this.triggers[a].actions_targetB[tr];
                        break;
                     case 202:
                        try
                        {
                           if(ExternalInterface.available)
                           {
                              ExternalInterface.call("TTS_Speak( \"" + this.triggers[a].actions_targetB[tr].split("\\").join("\\\\").split("\"").join("\\\"") + "\", \"" + this.level_variables[this.triggers[a].actions_targetA[tr]].voice.split("\\").join("\\\\").split("\"").join("\\\"") + "\", " + this.level_variables[this.triggers[a].actions_targetA[tr]].pitch + ", " + Number(this.level_variables[this.triggers[a].actions_targetA[tr]].volume) * this.FX_VOLUME + ", " + this.level_variables[this.triggers[a].actions_targetA[tr]].rate + " )");
                           }
                        }
                        catch(e:*)
                        {
                        }
                        break;
                     case 203:
                        try
                        {
                           if(ExternalInterface.available)
                           {
                              ExternalInterface.call("TTS_Speak( \"" + this.level_variables[this.triggers[a].actions_targetB[tr]].split("\\").join("\\\\").split("\"").join("\\\"") + "\", \"" + this.level_variables[this.triggers[a].actions_targetA[tr]].voice.split("\\").join("\\\\").split("\"").join("\\\"") + "\", " + this.level_variables[this.triggers[a].actions_targetA[tr]].pitch + ", " + Number(this.level_variables[this.triggers[a].actions_targetA[tr]].volume) * this.FX_VOLUME + ", " + this.level_variables[this.triggers[a].actions_targetA[tr]].rate + " )");
                           }
                        }
                        catch(e:*)
                        {
                        }
                        break;
                     case 204:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.asin(Number(this.level_variables[this.triggers[a].actions_targetB[tr]]));
                        break;
                     case 205:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.acos(Number(this.level_variables[this.triggers[a].actions_targetB[tr]]));
                        break;
                     case 206:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.atan2(Number(this.level_variables[this.triggers[a].actions_targetA[tr]]),Number(this.level_variables[this.triggers[a].actions_targetB[tr]]));
                        break;
                     case 207:
                        this.ANONYMOUS_MODE = true;
                        break;
                     case 208:
                        this.ANONYMOUS_MODE = false;
                        break;
                     case 209:
                        this.GLOBAL_REGEN_SPEED = Number(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 210:
                        this.GLOBAL_REGEN_SPEED = Number(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        break;
                     case 211:
                        this.GLOBAL_REGEN_DELAY = Number(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 212:
                        this.GLOBAL_REGEN_DELAY = Number(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        break;
                     case 213:
                        this.GLOBAL_FALL_DAMAGE_MULT = Number(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 214:
                        this.GLOBAL_FALL_SENSITIVITY_MULT = Number(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 215:
                        this.BOOST_MULT = Number(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 216:
                        this.BOOST_HIGH_PHYSICS = Number(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 217:
                        this.BOOST_LOW_PHYSICS = Number(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 218:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.knockback_multiplier = this.triggers[a].actions_targetB[tr];
                        break;
                     case 219:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        mult = Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.knockback_multiplier = mult;
                        break;
                     case 220:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.SetPlayerScale(this.mens[this.triggers[a].actions_targetA[tr]],this.triggers[a].actions_targetB[tr]);
                        break;
                     case 221:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        mult = Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        this.SetPlayerScale(this.mens[this.triggers[a].actions_targetA[tr]],mult);
                        break;
                     case 222:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        if(this.triggers[a].actions_targetA[tr] == this.MP_myid)
                        {
                           this.game_scale = Number(this.triggers[a].actions_targetB[tr]) / 100;
                           if(isNaN(this.game_scale))
                           {
                              this.game_scale = 1;
                           }
                           if(this.game_scale < 0.01)
                           {
                              this.game_scale = 0.01;
                           }
                           if(this.game_scale > 15)
                           {
                              this.game_scale = 15;
                           }
                        }
                        break;
                     case 223:
                        if((this.triggers[a].actions_targetA[tr] + "").length > 2048)
                        {
                           throw new Error("Buffer overflow during var sync: Variable name is too long");
                        }
                        if((this.level_variables[this.triggers[a].actions_targetA[tr]] + "").length > 2048)
                        {
                           throw new Error("Buffer overflow during var sync: Variable value is too long");
                        }
                        if(!this.ALLOW_VAR_SYNC)
                        {
                           throw new Error("Variable value synchronizing trigger actions require Var Sync engine mark");
                        }
                        this.MP_custom_events += ";sync|r#" + String(this.triggers[a].actions_targetA[tr]).split("#").join("?").split(";").join("?").split("|").join("?") + "#" + String(this.level_variables[this.triggers[a].actions_targetA[tr]]).split("#").join("?").split(";").join("?").split("|").join("?");
                        break;
                     case 224:
                        if((this.triggers[a].actions_targetA[tr] + "").length > 2048)
                        {
                           throw new Error("Buffer overflow during var sync: Variable name is too long");
                        }
                        if((this.level_variables[this.triggers[a].actions_targetA[tr]] + "").length > 2048)
                        {
                           throw new Error("Buffer overflow during var sync: Variable value is too long");
                        }
                        if(!this.ALLOW_VAR_SYNC)
                        {
                           throw new Error("Variable value synchronizing trigger actions require Var Sync engine mark");
                        }
                        this.MP_custom_events += ";sync|d#" + String(this.triggers[a].actions_targetA[tr]).split("#").join("?").split(";").join("?").split("|").join("?") + "#" + String(this.level_variables[this.triggers[a].actions_targetA[tr]]).split("#").join("?").split(";").join("?").split("|").join("?");
                        break;
                     case 225:
                        if((this.triggers[a].actions_targetA[tr] + "").length > 2048)
                        {
                           throw new Error("Buffer overflow during var sync: Variable name is too long");
                        }
                        if((this.level_variables[this.triggers[a].actions_targetA[tr]] + "").length > 2048)
                        {
                           throw new Error("Buffer overflow during var sync: Variable value is too long");
                        }
                        if(!this.ALLOW_VAR_SYNC)
                        {
                           throw new Error("Variable value synchronizing trigger actions require Var Sync engine mark");
                        }
                        this.MP_custom_events += ";sync|x#" + String(this.triggers[a].actions_targetA[tr]).split("#").join("?").split(";").join("?").split("|").join("?") + "#" + String(this.level_variables[this.triggers[a].actions_targetA[tr]]).split("#").join("?").split(";").join("?").split("|").join("?");
                        break;
                     case 226:
                        if((this.triggers[a].actions_targetA[tr] + "").length > 2048)
                        {
                           throw new Error("Buffer overflow during var sync: Variable name is too long");
                        }
                        if((this.level_variables[this.triggers[a].actions_targetA[tr]] + "").length > 2048)
                        {
                           throw new Error("Buffer overflow during var sync: Variable value is too long");
                        }
                        if(!this.ALLOW_VAR_SYNC)
                        {
                           throw new Error("Variable value synchronizing trigger actions require Var Sync engine mark");
                        }
                        this.MP_custom_events += ";sync|n#" + String(this.triggers[a].actions_targetA[tr]).split("#").join("?").split(";").join("?").split("|").join("?") + "#" + String(this.level_variables[this.triggers[a].actions_targetA[tr]]).split("#").join("?").split(";").join("?").split("|").join("?");
                        break;
                     case 227:
                        if((this.triggers[a].actions_targetA[tr] + "").length > 2048)
                        {
                           throw new Error("Buffer overflow during var sync: Variable name is too long");
                        }
                        if((this.level_variables[this.triggers[a].actions_targetA[tr]] + "").length > 2048)
                        {
                           throw new Error("Buffer overflow during var sync: Variable value is too long");
                        }
                        if(!this.ALLOW_VAR_SYNC)
                        {
                           throw new Error("Variable value synchronizing trigger actions require Var Sync engine mark");
                        }
                        this.MP_custom_events += ";sync|l#" + String(this.triggers[a].actions_targetA[tr]).split("#").join("?").split(";").join("?").split("|").join("?") + "#" + String(this.level_variables[this.triggers[a].actions_targetA[tr]]).split("#").join("?").split(";").join("?").split("|").join("?");
                        break;
                     case 228:
                        this.on_user_connected_trigger = int(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 229:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.CustomSongPlay(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 230:
                        str = "," + this.triggers[a].actions_targetB[tr].toLowerCase() + ",";
                        if(str.indexOf("," + this.session_variables_source_id[this.triggers[a].actions_targetA[tr]] + ",") == -1)
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 231:
                        this.mcc = this.decors[int(this.triggers[a].actions_targetA[tr])];
                        this.mcc.txt.text = this.ReplaceWithVariables(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 232:
                        this.mcc = this.decors[int(this.triggers[a].actions_targetA[tr])];
                        hex_str = this.triggers[a].actions_targetB[tr];
                        if(hex_str.length == 7)
                        {
                           hex_int = int(parseInt(hex_str.substr(1),16));
                           r = (hex_int & 16711680) >> 16;
                           g = (hex_int & 65280) >> 8;
                           b = hex_int & 255;
                           this.mcc.transform.colorTransform = new ColorTransform(r / 255 * 2,g / 255 * 2,b / 255 * 2);
                        }
                        break;
                     case 233:
                        this.mcc = this.decors[int(this.triggers[a].actions_targetA[tr])];
                        this.mcc.scaleX = this.mcc.scaleY = Number(this.triggers[a].actions_targetB[tr]);
                        if(this.mcc.onMove)
                        {
                           this.mcc.onMove();
                        }
                        break;
                     case 234:
                        this.mcc = this.decors[int(this.triggers[a].actions_targetA[tr])];
                        this.mcc.scaleX = this.mcc.scaleY = this.level_variables[this.triggers[a].actions_targetB[tr]];
                        if(this.mcc.onMove)
                        {
                           this.mcc.onMove();
                        }
                        break;
                     case 235:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.TRIGGER_PROJECTILE_POWER;
                        break;
                     case 236:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] -= this.TRIGGER_PROJECTILE_POWER;
                        break;
                     case 237:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        accuracy = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_averange_max = accuracy;
                        break;
                     case 238:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        accuracy = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_averange_add = accuracy;
                        break;
                     case 239:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        accuracy = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_averange_substract = accuracy;
                        break;
                     case 240:
                        this.triggers[a].actions_targetA[tr] = Number(this.triggers[a].actions_targetA[tr]);
                        this.rocket_speed_mult = this.triggers[a].actions_targetA[tr];
                        break;
                     case 241:
                        this.triggers[a].actions_targetA[tr] = Number(this.triggers[a].actions_targetA[tr]);
                        this.grenade_speed_mult = this.triggers[a].actions_targetA[tr];
                        break;
                     case 242:
                        this.triggers[a].actions_targetA[tr] = Number(this.triggers[a].actions_targetA[tr]);
                        this.plasma_speed_mult = this.triggers[a].actions_targetA[tr];
                        break;
                     case 243:
                        this.TakeScreenShot(1,1,this.regions[Number(this.triggers[a].actions_targetA[tr])]);
                        break;
                     case 244:
                        this.level_variables[this.triggers[a].actions_targetA[tr]].rate = Math.max(Math.min(this.triggers[a].actions_targetB[tr],3),0.1);
                        break;
                     case 245:
                        this.lock_camera_region = this.regions[Number(this.triggers[a].actions_targetA[tr])];
                        this.lock_camera_intensity = Number(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 246:
                        this.lock_camera_region = null;
                        this.lock_camera_intensity = 0;
                        break;
                     case 247:
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[this.triggers[a].actions_targetB[tr]].act_movex;
                        break;
                     case 248:
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[this.triggers[a].actions_targetB[tr]].act_movey;
                        break;
                     case 249:
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = !!this.mens[this.triggers[a].actions_targetB[tr]].act_fire ? 1 : 0;
                        break;
                     case 250:
                        this.KINETIC_MODULE_ENABLED = true;
                        break;
                     case 251:
                        this.KINETIC_MODULE_ENABLED = false;
                        break;
                     case 252:
                        this.mcc = this.decors[int(this.triggers[a].actions_targetA[tr])];
                        this.mcc.rotation = this.level_variables[this.triggers[a].actions_targetB[tr]];
                        if(this.mcc.onMove)
                        {
                           this.mcc.onMove();
                        }
                        break;
                     case 253:
                        this.mcc = this.decors[int(this.triggers[a].actions_targetA[tr])];
                        this.mcc.rotation = Number(this.triggers[a].actions_targetB[tr]);
                        if(this.mcc.onMove)
                        {
                           this.mcc.onMove();
                        }
                        break;
                     case 254:
                        this.mcc = this.mens[this.TRIGGER_PLAYER_INITIATOR];
                        if(this.mcc.io && this.mcc.hea > 0 && this.mcc.hea < this.mcc.hmax)
                        {
                           heal_hp = Number(this.triggers[a].actions_targetA[tr]);
                           this.mcc.hea = Math.min(this.mcc.hea + heal_hp,this.mcc.hmax);
                           if(heal_hp > 0)
                           {
                              if(this.mcc.hea >= this.dying_after)
                              {
                                 this.mcc.dying = false;
                              }
                           }
                        }
                        else
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 255:
                        this.mcc = this.mens[int(this.triggers[a].actions_targetA[tr])];
                        if(this.mcc.io && this.mcc.hea > 0 && this.mcc.hea < this.mcc.hmax)
                        {
                           heal_hp = Number(this.triggers[a].actions_targetB[tr]);
                           this.mcc.hea = Math.min(this.mcc.hea + heal_hp,this.mcc.hmax);
                           if(heal_hp > 0)
                           {
                              if(this.mcc.hea >= this.dying_after)
                              {
                                 this.mcc.dying = false;
                              }
                           }
                        }
                        break;
                     case 256:
                        this.mcc = this.mens[int(this.triggers[a].actions_targetA[tr])];
                        if(this.mcc.io && this.mcc.hea > 0 && this.mcc.hea < this.mcc.hmax)
                        {
                           heal_hp = Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                           this.mcc.hea = Math.min(this.mcc.hea + heal_hp,this.mcc.hmax);
                           if(heal_hp > 0)
                           {
                              if(this.mcc.hea >= this.dying_after)
                              {
                                 this.mcc.dying = false;
                              }
                           }
                        }
                        break;
                     case 257:
                        this.mcc = this.decors[int(this.triggers[a].actions_targetA[tr])];
                        this.mcc.rotation = Number(this.level_variables[this.triggers[a].actions_targetB[tr]]) / Math.PI * 180;
                        if(this.mcc.onMove)
                        {
                           this.mcc.onMove();
                        }
                        break;
                     case 258:
                        this.mcc = this.decors[int(this.triggers[a].actions_targetA[tr])];
                        this.mcc.rotation = Number(this.triggers[a].actions_targetB[tr]) / Math.PI * 180;
                        if(this.mcc.onMove)
                        {
                           this.mcc.onMove();
                        }
                        break;
                     case 259:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = this.triggers[a].actions_targetB[tr];
                        this.regions[this.triggers[a].actions_targetA[tr]].x = Number(this.mens[this.tr2].tarx) - Number(this.regions[this.triggers[a].actions_targetA[tr]].w) / 2;
                        this.regions[this.triggers[a].actions_targetA[tr]].y = Number(this.mens[this.tr2].tary) - Number(this.regions[this.triggers[a].actions_targetA[tr]].h) / 2;
                        break;
                     case 260:
                        if(this.triggers[a].actions_targetB[tr] == "null")
                        {
                           this.guns[int(this.triggers[a].actions_targetA[tr])].sou = null;
                        }
                        else
                        {
                           SoundClass = getDefinitionByName(this.triggers[a].actions_targetB[tr]) as Class;
                           newSound = new SoundClass();
                           this.guns[int(this.triggers[a].actions_targetA[tr])].sou = newSound;
                        }
                        break;
                     case 261:
                        this.ALLOW_TIMESHIFT = true;
                        this.nrg.visible = true;
                        break;
                     case 262:
                        this.ALLOW_TIMESHIFT = false;
                        this.nrg.visible = false;
                        break;
                     case 263:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.energy;
                        break;
                     case 264:
                        this.energy = Number(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        break;
                     case 265:
                        this.energy_max = Number(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        break;
                     case 266:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.GetAIDifficulty();
                        break;
                     case 267:
                        this.mcc = this.decors[int(this.triggers[a].actions_targetA[tr])];
                        this.mcc.scaleX = Number(this.triggers[a].actions_targetB[tr]);
                        if(this.mcc.onMove)
                        {
                           this.mcc.onMove();
                        }
                        break;
                     case 268:
                        this.mcc = this.decors[int(this.triggers[a].actions_targetA[tr])];
                        this.mcc.scaleY = Number(this.triggers[a].actions_targetB[tr]);
                        if(this.mcc.onMove)
                        {
                           this.mcc.onMove();
                        }
                        break;
                     case 269:
                        break;
                     case 270:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        mc.antigravity = this.triggers[a].actions_targetB[tr];
                        break;
                     case 271:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        mc.antigravity_radius = this.triggers[a].actions_targetB[tr];
                        break;
                     case 272:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = this.triggers[a].actions_targetB[tr];
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        mc.voice = this.voices[this.triggers[a].actions_targetB[tr]];
                        break;
                     case 273:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        mc.isGhost = true;
                        break;
                     case 274:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        mc.isGhost = false;
                        mc.alpha = 1;
                        break;
                     case 275:
                        if(this.images_finished_loading < this.images_expected)
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 276:
                        if(this.images_ready_to_render < this.images_expected)
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 277:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.images_ready_to_render;
                        break;
                     case 278:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.images_expected;
                        break;
                     case 280:
                        this.ok2 = false;
                        this.ok = false;
                        if(this.mens[this.MP_myid].hunt != -1)
                        {
                           this.ok2 = true;
                        }
                        this.i = 0;
                        while(this.i < this.playerstotal && !this.ok)
                        {
                           if(this.mens[this.i].io)
                           {
                              if(!this.mens[this.i].dead)
                              {
                                 if(!this.mens[this.i].dying)
                                 {
                                    if(this.mens[this.i].team != this.mens[this.MP_myid].team)
                                    {
                                       if(this.mens[this.i].hunt == this.MP_myid)
                                       {
                                          this.ok = true;
                                       }
                                       if(!this.ok2)
                                       {
                                          if(this.Dist2D(this.mens[this.i].x,this.mens[this.i].y,this.mens[this.MP_myid].x,this.mens[this.MP_myid].y) < 400)
                                          {
                                             this.ok2 = true;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.i;
                        }
                        if(this.ok || this.ok2)
                        {
                           this.level_variables[this.triggers[a].actions_targetA[tr]] = this.ok ? 1 : 0.5;
                        }
                        else
                        {
                           this.level_variables[this.triggers[a].actions_targetA[tr]] = 0;
                        }
                        break;
                     case 281:
                        this.mens[this.TRIGGER_PLAYER_INITIATOR].effects.push({
                           "type":"DOT",
                           "power":Number(this.triggers[a].actions_targetA[tr]),
                           "duration":Number(this.triggers[a].actions_targetB[tr])
                        });
                        break;
                     case 282:
                        this.mens[this.TRIGGER_PLAYER_INITIATOR].effects.length = 0;
                        break;
                     case 283:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.effcolor = this.triggers[a].actions_targetA[tr];
                        this.FlowAt(this.regions[this.triggers[a].actions_targetB[tr]].x + Number(this.regions[this.triggers[a].actions_targetB[tr]].w) / 2,this.regions[this.triggers[a].actions_targetB[tr]].y + Number(this.regions[this.triggers[a].actions_targetB[tr]].h) / 2,0,0,0,2);
                        break;
                     case 284:
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        newSound = this.s_t_switch_denied;
                        try
                        {
                           SoundClass = getDefinitionByName(this.triggers[a].actions_targetA[tr]) as Class;
                           newSound = new SoundClass();
                        }
                        catch(error:Error)
                        {
                        }
                        this.PlaySound(newSound,this.regions[this.triggers[a].actions_targetB[tr]].x + Number(this.regions[this.triggers[a].actions_targetB[tr]].w) / 2,this.regions[this.triggers[a].actions_targetB[tr]].y + Number(this.regions[this.triggers[a].actions_targetB[tr]].h) / 2);
                        break;
                     case 285:
                        this.ExpLevelDone();
                        break;
                     case 286:
                        if(this.TRIGGER_PLAYER_INITIATOR == this.MP_myid)
                        {
                           this.ExpLevelDone();
                        }
                        break;
                     case 287:
                        this.MakeGunByClass(this.triggers[a].actions_targetB[tr],this.guns[int(this.triggers[a].actions_targetA[tr])],true);
                        break;
                     case 288:
                        this.trigger_to_key_binds_down[Keyboard[this.triggers[a].actions_targetB[tr]]] = int(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 289:
                        this.trigger_to_key_binds_up[Keyboard[this.triggers[a].actions_targetB[tr]]] = int(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 290:
                        this.triggers[a].actions_targetA[tr] = Math.floor(this.triggers[a].actions_targetA[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        palette = this.level_variables[this.triggers[a].actions_targetB[tr]] + "";
                        mc.palette[0] = palette.charAt(0);
                        mc.palette[1] = palette.charAt(1);
                        mc.palette[2] = palette.charAt(2);
                        mc.palette[3] = palette.charAt(3);
                        this.UpdatePlayerColorMP(mc,true);
                        break;
                     case 291:
                        this.FREEZE_OFFSCREEN_ENTITIES = false;
                        break;
                     case 292:
                        this.FREEZE_OFFSCREEN_ENTITIES = true;
                        break;
                     case 293:
                        this.mcc = this.decors[int(this.triggers[a].actions_targetA[tr])];
                        this.mcc.mask = this.decors[int(this.triggers[a].actions_targetB[tr])];
                        break;
                     case 294:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.level_variables[this.level_variables[this.triggers[a].actions_targetB[tr]]];
                        break;
                     case 295:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.ReplaceWithVariables(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 296:
                        this.MakeGunByClass(this.level_variables[this.triggers[a].actions_targetB[tr]],this.guns[int(this.triggers[a].actions_targetA[tr])],true);
                        break;
                     case 297:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        mc.jump_scale = this.triggers[a].actions_targetB[tr];
                        break;
                     case 298:
                        this.mcc = this.decors[int(this.triggers[a].actions_targetA[tr])];
                        this.mcc.alpha = Number(this.triggers[a].actions_targetB[tr]);
                        if(this.mcc.onMove)
                        {
                           this.mcc.onMove();
                        }
                        break;
                     case 299:
                        this.mcc = this.decors[int(this.triggers[a].actions_targetA[tr])];
                        this.mcc.alpha = Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        if(this.mcc.onMove)
                        {
                           this.mcc.onMove();
                        }
                        break;
                     case 300:
                        this.mcc = this.decors[int(this.triggers[a].actions_targetA[tr])];
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mcc.x = this.guns[this.triggers[a].actions_targetB[tr]].x;
                        this.mcc.y = this.guns[this.triggers[a].actions_targetB[tr]].y;
                        this.mcc.rotation = this.guns[this.triggers[a].actions_targetB[tr]].rotation;
                        if(this.guns[this.triggers[a].actions_targetB[tr]].scaleX > 0)
                        {
                           this.mcc.scaleX = Math.abs(this.mcc.scaleX);
                        }
                        else
                        {
                           this.mcc.scaleX = -Math.abs(this.mcc.scaleX);
                        }
                        if(this.guns[this.triggers[a].actions_targetB[tr]].scaleY > 0)
                        {
                           this.mcc.scaleY = Math.abs(this.mcc.scaleY);
                        }
                        else
                        {
                           this.mcc.scaleY = -Math.abs(this.mcc.scaleY);
                        }
                        if(this.mcc.onMove)
                        {
                           this.mcc.onMove();
                        }
                        break;
                     case 301:
                        this.guns[int(this.triggers[a].actions_targetA[tr])].projectile_scale = Number(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 302:
                        this.guns[int(this.triggers[a].actions_targetA[tr])].projectile_scale = Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        break;
                     case 303:
                        this.guns[int(this.triggers[a].actions_targetA[tr])].xpos1 = Number(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 304:
                        this.guns[int(this.triggers[a].actions_targetA[tr])].xpos2 = Number(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 305:
                        this.guns[int(this.triggers[a].actions_targetA[tr])].attachment = int(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 306:
                        this.guns[int(this.triggers[a].actions_targetA[tr])].len2 = Number(this.triggers[a].actions_targetB[tr]);
                        this.ReConnect(this.guns[int(this.triggers[a].actions_targetA[tr])].ch_ch1,this.guns[int(this.triggers[a].actions_targetA[tr])].b_p1,this.guns[int(this.triggers[a].actions_targetA[tr])].b_p2,0,this.Math_abs(Number(this.guns[int(this.triggers[a].actions_targetA[tr])].len1) - Number(this.guns[int(this.triggers[a].actions_targetA[tr])].len2)),-1);
                        break;
                     case 307:
                        this.darkness.visible = true;
                        this.darkness.alpha = 1;
                        this.LEVEL_END_FORCE = "restart";
                        break;
                     case 308:
                        this.darkness.visible = false;
                        this.darkness.alpha = 0;
                        this.LEVEL_END_FORCE = "";
                        break;
                     case 309:
                        this.darkness.visible = true;
                        this.darkness.alpha = 1;
                        this.LEVEL_END_FORCE = "exit";
                        break;
                     case 310:
                        if(this.TRIGGER_PLAYER_INITIATOR == this.MP_myid)
                        {
                           this.darkness.visible = true;
                           this.darkness.alpha = 1;
                           this.LEVEL_END_FORCE = "exit";
                        }
                        break;
                     case 311:
                        if(this.TRIGGER_PLAYER_KILLER == this.MP_myid)
                        {
                           this.darkness.visible = true;
                           this.darkness.alpha = 1;
                           this.LEVEL_END_FORCE = "exit";
                        }
                        break;
                     case 312:
                        this.mens[int(this.triggers[a].actions_targetA[tr])].curwea = int(this.triggers[a].actions_targetB[tr]);
                        this.RedrawPsi(int(this.triggers[a].actions_targetA[tr]));
                        break;
                     case 313:
                        if(this.mens[int(this.triggers[a].actions_targetA[tr])].curwea != -1)
                        {
                           this.guns[this.mens[int(this.triggers[a].actions_targetA[tr])].curwea].picken_by = -1;
                           this.mens[int(this.triggers[a].actions_targetA[tr])].curwea = -1;
                        }
                        break;
                     case 314:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = !!this.mens[int(this.triggers[a].actions_targetB[tr])].dying ? 1 : 0;
                        break;
                     case 315:
                        if(this.TRIGGER_PLAYER_INITIATOR == -1)
                        {
                           this.level_variables[this.triggers[a].actions_targetA[tr]] = 0;
                        }
                        else
                        {
                           this.level_variables[this.triggers[a].actions_targetA[tr]] = !!this.mens[this.TRIGGER_PLAYER_INITIATOR].dying ? 1 : 0;
                        }
                        break;
                     case 316:
                        if(this.TRIGGER_PLAYER_KILLER == -1)
                        {
                           this.level_variables[this.triggers[a].actions_targetA[tr]] = 0;
                        }
                        else
                        {
                           this.level_variables[this.triggers[a].actions_targetA[tr]] = !!this.mens[this.TRIGGER_PLAYER_KILLER].dying ? 1 : 0;
                        }
                        break;
                     case 317:
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.TRIGGER_PLAYER_INITIATOR].team = this.triggers[a].actions_targetB[tr];
                        this.UpdateCharProps(this.mens[this.TRIGGER_PLAYER_INITIATOR]);
                        this.SpawnPlayerImmediately(this.mens[this.TRIGGER_PLAYER_INITIATOR]);
                        this.i4 = 0;
                        while(this.i4 < this.playerstotal)
                        {
                           if(this.mens[this.i4].io)
                           {
                              this.UpdateTeamColor(this.mens[this.i4]);
                           }
                           ++this.i4;
                        }
                        break;
                     case 318:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        mc.can_be_hit = false;
                        break;
                     case 319:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        mc.can_be_hit = true;
                        break;
                     case 320:
                        var anonf4:Function = function():*
                        {
                           var _loc1_:* = undefined;
                           var _loc2_:* = undefined;
                           _loc1_ = MP_myid;
                           _loc2_ = int(triggers[a].actions_targetA[tr]);
                           if(mens[_loc2_].io)
                           {
                              MP_myid = _loc2_;
                              if(int(triggers[a].actions_targetB[tr]) == 1)
                              {
                                 GSPEED = 0.01;
                                 new_active.visible = true;
                                 new_active.gotoAndPlay(1);
                                 PlaySound_full(s_team_switch);
                              }
                              mens[_loc2_].isplayer = true;
                              mens[_loc1_].isplayer = false;
                              UpdateWeps();
                           }
                        };
						anonf4();
                        break;
                     case 321:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        mc.can_drop_guns = false;
                        break;
                     case 322:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        mc.can_drop_guns = true;
                        break;
                     case 323:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.regions[this.triggers[a].actions_targetA[tr]].x = Number(this.guns[this.triggers[a].actions_targetB[tr]].x) - Number(this.regions[this.triggers[a].actions_targetA[tr]].w) / 2;
                        this.regions[this.triggers[a].actions_targetA[tr]].y = Number(this.guns[this.triggers[a].actions_targetB[tr]].y) - Number(this.regions[this.triggers[a].actions_targetA[tr]].h) / 2;
                        break;
                     case 324:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.guns[this.triggers[a].actions_targetA[tr]].onreload = this.triggers[a].actions_targetB[tr];
                        break;
                     case 325:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.ReplaceWithVariables(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        break;
                     case 326:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.ReplaceWithVariables(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 327:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.random() * Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        break;
                     case 328:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.floor(Math.random() * (Number(this.level_variables[this.triggers[a].actions_targetB[tr]]) - 1));
                        break;
                     case 329:
                        this.triggers[a].actions_targetA[tr] = Number(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        this.triggers[a].actions_targetB[tr] = Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        this.hp_box.alpha = this.triggers[a].actions_targetA[tr];
                        this.tinted_hp_prog.alpha = this.triggers[a].actions_targetA[tr];
                        this.vehhp.alpha = this.triggers[a].actions_targetA[tr];
                        this.weps.alpha = this.triggers[a].actions_targetA[tr];
                        this.nrg.alpha = this.triggers[a].actions_targetA[tr];
                        this.pcg.alpha = this.triggers[a].actions_targetA[tr];
                        this.qmenu.alpha = this.triggers[a].actions_targetA[tr];
                        this.team_blue.alpha = this.triggers[a].actions_targetA[tr];
                        this.team_red.alpha = this.triggers[a].actions_targetA[tr];
                        if(!this.gamemenu.visible)
                        {
                           this.myCursor.alpha = this.triggers[a].actions_targetB[tr];
                        }
                        break;
                     case 330:
                        this.triggers[a].actions_targetA[tr] = Number(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.hp_box.alpha = this.triggers[a].actions_targetA[tr];
                        this.tinted_hp_prog.alpha = this.triggers[a].actions_targetA[tr];
                        this.vehhp.alpha = this.triggers[a].actions_targetA[tr];
                        this.weps.alpha = this.triggers[a].actions_targetA[tr];
                        this.nrg.alpha = this.triggers[a].actions_targetA[tr];
                        this.pcg.alpha = this.triggers[a].actions_targetA[tr];
                        this.qmenu.alpha = this.triggers[a].actions_targetA[tr];
                        this.team_blue.alpha = this.triggers[a].actions_targetA[tr];
                        this.team_red.alpha = this.triggers[a].actions_targetA[tr];
                        if(!this.gamemenu.visible)
                        {
                           this.myCursor.alpha = this.triggers[a].actions_targetB[tr];
                        }
                        break;
                     case 331:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.GAMEPLAY_MODIFICATIONS;
                        break;
                     case 332:
                        this.triggers[a].actions_targetA[tr] = this.triggers[a].actions_targetA[tr];
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(this.guns[this.triggers[a].actions_targetB[tr]].picken_by == -1 || this.mens[this.guns[this.triggers[a].actions_targetB[tr]].picken_by].curwea != this.guns[this.triggers[a].actions_targetB[tr]].idd)
                        {
                           this.level_variables[this.triggers[a].actions_targetA[tr]] = 0;
                        }
                        else
                        {
                           this.level_variables[this.triggers[a].actions_targetA[tr]] = 1;
                        }
                        break;
                     case 333:
                        this.triggers[a].actions_targetA[tr] = this.triggers[a].actions_targetA[tr];
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(this.guns[this.triggers[a].actions_targetB[tr]].picken_by == -1)
                        {
                           this.level_variables[this.triggers[a].actions_targetA[tr]] = 0;
                        }
                        else
                        {
                           this.level_variables[this.triggers[a].actions_targetA[tr]] = 1;
                        }
                        break;
                     case 334:
                        this.triggers[a].actions_targetA[tr] = this.triggers[a].actions_targetA[tr];
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = !!this.guns[this.triggers[a].actions_targetB[tr]].ready ? this.guns[this.triggers[a].actions_targetB[tr]].totalFrames : Math.max(0,Number(this.guns[this.triggers[a].actions_targetB[tr]].floatframe) - 2);
                        break;
                     case 335:
                        this.triggers[a].actions_targetA[tr] = this.triggers[a].actions_targetA[tr];
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = !!this.guns[this.triggers[a].actions_targetB[tr]].ready ? 1 : 0;
                        break;
                     case 336:
                        this.triggers[a].actions_targetA[tr] = this.triggers[a].actions_targetA[tr];
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.guns[this.triggers[a].actions_targetB[tr]].scaleY > 0 ? 1 : -1;
                        break;
                     case 337:
                        this.triggers[a].actions_targetA[tr] = this.triggers[a].actions_targetA[tr];
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[this.triggers[a].actions_targetB[tr]].scaleX > 0 ? 1 : -1;
                        break;
                     case 338:
                        this.MP_let_alive_players_hear_dead = false;
                        break;
                     case 339:
                        this.MP_let_alive_players_hear_dead = true;
                        break;
                     case 340:
                        this.MP_allow_leaderboard_details = false;
                        break;
                     case 341:
                        this.MP_allow_leaderboard_details = true;
                        break;
					 case 6969:
					    var txt:String = this.triggers[a].actions_targetA[tr];
					 	var txt2:String = "";
					    var sz:int;
					    var clr:String;
						for (var i:int=0; i<txt.length; i++) {
						  sz = i + 5;
						  clr = "";
						  for (var j:int=0; j<6; j++) {
							  if (int(Math.random() * 10) % 2) clr += String.fromCharCode(48 + Math.floor(Math.random() * 11));
							  else clr += String.fromCharCode(65 + Math.floor(Math.random() * 6));
						  }
						  txt2 += ColorizeSize(txt.slice(i, i+1), "#" + clr, sz);//Colorize(txt.slice(i, i+1), "#" + colors[i%3]);
						}
						DialogSay(txt2, "");
					 	break;
                  }
                  tr++;
               }
               if(this.triggers[a].maxcalls != -1)
               {
                  --this.triggers[a].maxcalls;
               }
            }
            catch(e:Error)
            {
               SpawnLevelLogicErrorIfNeeded(e,"Trigger " + triggers[a].uid + ", Action #" + (tr + 1));
            }
            return true;
         }
         return false;
      }
      
      public function SpawnLevelLogicErrorIfNeeded(param1:Error, param2:String) : void
      {
         if(this.ENABLE_LEVEL_LOGIC_ERRORS)
         {
            this.ChatNewMsg("<font color=\"#FF0000\">Level logic error: " + param2 + ", Engine Error: " + param1.errorID + " :: " + param1.name + " :: " + param1.message + "</font>");
         }
      }
      
      public function SetAIDifficulty(param1:int) : void
      {
         if(param1 <= 1)
         {
            this.EASY_MODE = true;
            this.PRO_BOTS = false;
         }
         else if(param1 <= 2)
         {
            this.EASY_MODE = false;
            this.PRO_BOTS = false;
         }
         else
         {
            this.EASY_MODE = false;
            this.PRO_BOTS = true;
         }
      }
      
      public function GetAIDifficulty() : int
      {
         if(this.EASY_MODE && !this.PRO_BOTS)
         {
            return 1;
         }
         if(!this.EASY_MODE && !this.PRO_BOTS)
         {
            return 2;
         }
         return 3;
      }
      
      public function GiveStarterGunsDM(param1:Number, param2:Number, param3:* = null) : void
      {
         var _loc4_:int = 0;
         var _loc5_:int = 0;
         var _loc6_:int = 0;
         var _loc7_:Vector.<int> = null;
         var _loc8_:Boolean = false;
         var _loc9_:int = 0;
         var _loc10_:MovieClip = null;
         if(this.dm_slots_on_spawn.length == 0)
         {
            return;
         }
         _loc4_ = 0;
         if(param3 != null)
         {
            _loc6_ = 0;
            while(_loc6_ < this.gunstotal)
            {
               if(this.guns[_loc6_].picken_by != -1)
               {
                  if(this.mens[this.guns[_loc6_].picken_by] == param3)
                  {
                     _loc4_++;
                  }
               }
               _loc6_++;
            }
         }
         _loc5_ = 0;
         for(; _loc5_ < this.dm_slots_on_spawn.length && _loc4_ < this.dm_max_guns_on_spawn; _loc5_++)
         {
            if(param3 != null)
            {
               _loc8_ = false;
               _loc6_ = 0;
               while(_loc6_ < this.gunstotal)
               {
                  if(this.guns[_loc6_].wep == this.dm_slots_on_spawn[_loc5_])
                  {
                     if(this.guns[_loc6_].picken_by == param3.idd)
                     {
                        _loc8_ = true;
                        break;
                     }
                  }
                  _loc6_++;
               }
               if(!_loc8_)
               {
                  _loc6_ = 0;
                  while(_loc6_ < this.temp_ignore_gun_pick.length)
                  {
                     if(this.temp_ignore_gun_pick[_loc6_].mc.wep == this.dm_slots_on_spawn[_loc5_])
                     {
                        if(getTimer() < this.temp_ignore_gun_pick[_loc6_].timer + 1000)
                        {
                           _loc8_ = true;
                           break;
                        }
                     }
                     _loc6_++;
                  }
               }
               if(_loc8_)
               {
                  continue;
               }
            }
            _loc7_ = new Vector.<int>();
            _loc6_ = 0;
            while(_loc6_ < this.gunstotal)
            {
               if(this.guns[_loc6_].wep == this.dm_slots_on_spawn[_loc5_])
               {
                  if(this.guns[_loc6_].picken_by == -1)
                  {
                     this.ok = true;
                     _loc9_ = 0;
                     while(_loc9_ < this.playerstotal)
                     {
                        if(this.mens[_loc9_].io)
                        {
                           if(this.mens[_loc9_].isplayer)
                           {
                              if(this.mens[_loc9_].hea > 0)
                              {
                                 if(Math.abs(Number(this.mens[_loc9_].x) - Number(this.guns[_loc6_].x)) < 200)
                                 {
                                    if(Math.abs(Number(this.mens[_loc9_].y) - Number(this.guns[_loc6_].y)) < 200)
                                    {
                                       this.ok = false;
                                       break;
                                    }
                                 }
                              }
                           }
                        }
                        _loc9_++;
                     }
                     if(this.ok)
                     {
                        _loc7_.push(_loc6_);
                     }
                  }
               }
               _loc6_++;
            }
            if(_loc7_.length == 0)
            {
               _loc6_ = 0;
               while(_loc6_ < this.gunstotal)
               {
                  if(this.guns[_loc6_].wep == this.dm_slots_on_spawn[_loc5_])
                  {
                     if(this.guns[_loc6_].picken_by == -1)
                     {
                        _loc7_.push(_loc6_);
                     }
                  }
                  _loc6_++;
               }
            }
            if(_loc7_.length > 0)
            {
               _loc6_ = _loc7_[Math.floor(Math.random() * _loc7_.length)];
               (_loc10_ = this.guns[_loc6_]).x = param1;
               _loc10_.y = param2 - 50;
               this.atox[_loc10_.b_p1] = 0;
               this.atoy[_loc10_.b_p1] = 0;
               this.WakeUpAtom(_loc10_.b_p1);
               this.ax[_loc10_.b_p1] = _loc10_.x - 10;
               this.ay[_loc10_.b_p1] = _loc10_.y;
               this.atox[_loc10_.b_p2] = 0;
               this.atoy[_loc10_.b_p2] = 0;
               this.WakeUpAtom(_loc10_.b_p2);
               this.ax[_loc10_.b_p2] = _loc10_.x + 10;
               this.ay[_loc10_.b_p2] = _loc10_.y;
               _loc4_++;
            }
         }
      }
      
      public function create_barrel(param1:MovieClip) : void
      {
         this.barrels[this.barrelstotal] = param1;
         param1.gotoAndStop(2);
         param1.hea = 15;
         param1.dist = 2.6;
         param1.b_left_top = this.CreatePoint(param1.x - 5,param1.y - 13,param1.tox,param1.toy,7,false,3,-this.barrelstotal - 100);
         param1.b_right_top = this.CreatePoint(param1.x + 5,param1.y - 13,param1.tox,param1.toy,7,false,3,-this.barrelstotal - 100);
         param1.b_right_bottom = this.CreatePoint(param1.x + 5,param1.y + 13,param1.tox,param1.toy,7,false,3,-this.barrelstotal - 100);
         param1.b_left_bottom = this.CreatePoint(param1.x - 5,param1.y + 13,param1.tox,param1.toy,7,false,3,-this.barrelstotal - 100);
         param1.ch_top = this.Connect(param1.b_left_top,param1.b_right_top,0,10,-1);
         param1.ch_left = this.Connect(param1.b_left_top,param1.b_left_bottom,0,26,-1);
         param1.ch_right = this.Connect(param1.b_right_top,param1.b_right_bottom,0,26,-1);
         param1.ch_bottom = this.Connect(param1.b_right_bottom,param1.b_left_bottom,0,10,-1);
         param1.ch_cross1 = this.Connect(param1.b_left_top,param1.b_right_bottom,0,Math.sqrt(100 + 676),-1);
         param1.ch_cross2 = this.Connect(param1.b_right_top,param1.b_left_bottom,0,Math.sqrt(100 + 676),-1);
         if(param1.mdl == "bar_blue")
         {
            param1.dist *= 1.5;
         }
         if(param1.mdl == "bar_red")
         {
            param1.dist *= 2;
         }
         ++this.barrelstotal;
      }
      
      public function create_vehicle(param1:MovieClip, param2:Number, param3:Number) : void
      {
         this.vehicles[this.vehiclestotal] = param1;
         param1.gotoAndStop(2);
         param1.typ = param2;
         param1.dead = false;
         param1.master = -1;
         param1.wep0 = -1;
         param1.wep1 = -1;
         param1.wep2 = -1;
         param1.side = param3;
         param1.ecosystem = false;
         param1.io = true;
         param1.nick = "";
         if(param2 == 0)
         {
            param1.nick = param1.gui.txt1.text = "Mobile r081-CS";
            param1.carbody.scaleY = param1.side;
            param1.hea = 400;
            param1.hmax = 400;
            param1.b_w1 = this.CreatePoint(param1.x + Number(param1.w1.x) * Number(param1.side),param1.y + param1.w1.y,param1.tox,param1.toy,32,true,4,-this.vehiclestotal - 200);
            param1.b_w2 = this.CreatePoint(param1.x + Number(param1.w2.x) * Number(param1.side),param1.y + param1.w2.y,param1.tox,param1.toy,32,true,4,-this.vehiclestotal - 200);
            param1.b_w1b = param1.b_w1;
            param1.b_w2b = param1.b_w2;
            param1.b_c = this.CreatePoint(param1.x,param1.y,param1.tox,param1.toy,35,false,5,-this.vehiclestotal - 200);
            param1.b_c2 = this.CreatePoint(param1.x + Number(param1.w1.x) * Number(param1.side),param1.y,param1.tox,param1.toy,40,false,5,-this.vehiclestotal - 200);
            param1.b_c3 = this.CreatePoint(param1.x + (Number(param1.w2.x) / 2 + 10) * Number(param1.side),param1.y + 20,param1.tox,param1.toy,40,false,5,-this.vehiclestotal - 200);
            this.i = 0;
            while(this.i < 2)
            {
               param1.ch_cross = this.Connect(param1.b_w1,param1.b_w2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_w1,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_w2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_w1,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_w2,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_w1,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_w2,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c2,param1.b_c3,0,-1,1);
               ++this.i;
            }
         }
         else if(param2 == 1)
         {
            param1.nick = param1.gui.txt1.text = "Hound Walker-CS";
            param1.hea = 300;
            param1.hmax = 300;
            param1.move_state = 0;
            param1.move_height = 0;
            param1.jump_state = 0;
            param1.jump_state2 = Math.PI / 2;
            param1.corpse_h = 80;
            param1.deadtim = 0;
            param1.b_p1 = this.CreatePoint(param1.x + 0 * Number(param1.side),param1.y,param1.tox,param1.toy,45,false,5,-this.vehiclestotal - 200);
            param1.b_p2 = this.CreatePoint(param1.x + 62 * Number(param1.side),param1.y,param1.tox,param1.toy,50,false,5,-this.vehiclestotal - 200);
            param1.b_p3 = this.CreatePoint(param1.x + 0 * Number(param1.side),param1.y - 50,param1.tox,param1.toy,50,false,5,-this.vehiclestotal - 200);
            param1.b_w1 = this.CreatePoint(param1.x + 5 * Number(param1.side),param1.y + 210,param1.tox,param1.toy,30,false,6,-this.vehiclestotal - 200);
            param1.b_w2 = this.CreatePoint(param1.x - 5 * Number(param1.side),param1.y + 210,param1.tox,param1.toy,30,false,6,-this.vehiclestotal - 200);
            param1.b_w1b = this.CreatePoint(param1.x + 2.5 * Number(param1.side),param1.y + 210 / 2,param1.tox,param1.toy,40,false,5,-this.vehiclestotal - 200);
            param1.b_w2b = this.CreatePoint(param1.x - 2.5 * Number(param1.side),param1.y + 210 / 2,param1.tox,param1.toy,40,false,5,-this.vehiclestotal - 200);
            this.xx = 1;
            this.i = 0;
            while(this.i < 2)
            {
               param1.ch_cross = this.Connect(param1.b_p1,param1.b_p2,0,-1,this.xx);
               param1.ch_cross = this.Connect(param1.b_p2,param1.b_p3,0,-1,this.xx);
               param1.ch_cross = this.Connect(param1.b_p1,param1.b_p3,0,-1,this.xx);
               param1.ch_cross = this.Connect(param1.b_p1,param1.b_w1,2,180,this.xx);
               param1.ch_cross = this.Connect(param1.b_p1,param1.b_w2,2,180,this.xx);
               param1.ch_cross = this.Connect(param1.b_p1,param1.b_w1,1,40,this.xx);
               param1.ch_cross = this.Connect(param1.b_p1,param1.b_w2,1,40,this.xx);
               param1.ch_cross = this.Connect(param1.b_p3,param1.b_w1,1,110,this.xx);
               param1.ch_cross = this.Connect(param1.b_p3,param1.b_w2,1,110,this.xx);
               param1.ch_cross = this.Connect(param1.b_p2,param1.b_w1,1,130,this.xx);
               param1.ch_cross = this.Connect(param1.b_p2,param1.b_w2,1,130,this.xx);
               param1.ch_leg1upper = this.Connect(param1.b_p1,param1.b_w1b,0,210 / 2,0.1);
               param1.ch_leg1lower = this.Connect(param1.b_w1,param1.b_w1b,0,210 / 2,0.1);
               param1.ch_leg2upper = this.Connect(param1.b_p1,param1.b_w2b,0,210 / 2,0.1);
               param1.ch_leg2lower = this.Connect(param1.b_w2,param1.b_w2b,0,210 / 2,0.1);
               ++this.i;
            }
            param1.ch_cross2 = this.Connect(param1.b_w1,param1.b_w2,2,150,this.xx);
            param1.leg1.x = 0;
            param1.leg1.y = 0;
            param1.leg2.x = 0;
            param1.leg2.y = 0;
            param1.leg1.scaleX = param1.side;
            param1.leg2.scaleX = param1.side;
            param1.leg1b.scaleX = param1.side;
            param1.leg2b.scaleX = param1.side;
            param1.carbody.scaleY = param1.side;
         }
         else if(param2 == 2)
         {
            param1.nick = param1.gui.txt1.text = "Life-Capsule";
            param1.side = 1;
            param1.hea = 10;
            param1.hmax = 10;
            param1.b_lt = this.CreatePoint(param1.x - 16.4,param1.y - 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_rt = this.CreatePoint(param1.x + 16.4,param1.y - 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_lb = this.CreatePoint(param1.x - 16.4,param1.y + 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_rb = this.CreatePoint(param1.x + 16.4,param1.y + 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_lt2 = this.CreatePoint(param1.x - 16.4,param1.y - 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_rt2 = this.CreatePoint(param1.x + 16.4,param1.y - 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_lb2 = this.CreatePoint(param1.x - 16.4,param1.y + 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_rb2 = this.CreatePoint(param1.x + 16.4,param1.y + 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            this.i = 0;
            while(this.i < 2)
            {
               param1.ch_cross = this.Connect(param1.b_lt,param1.b_rt,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_lb,param1.b_rb,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_lt2,param1.b_lb2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_rt2,param1.b_rb2,0,-1,1);
               ++this.i;
            }
            param1.ch_t0 = this.Connect(param1.b_lt,param1.b_lt2,0,-1,1);
            param1.ch_t1 = this.Connect(param1.b_rt,param1.b_rt2,0,-1,1);
            param1.ch_t2 = this.Connect(param1.b_lb,param1.b_lb2,0,-1,1);
            param1.ch_t3 = this.Connect(param1.b_rb,param1.b_rb2,0,-1,1);
            param1.ch_t4 = this.Connect(param1.b_lt,param1.b_rb,0,-1,1);
            param1.ch_t5 = this.Connect(param1.b_rt,param1.b_lb,0,-1,1);
            param1.ch_t6 = this.Connect(param1.b_lt2,param1.b_rb2,0,-1,1);
            param1.ch_t7 = this.Connect(param1.b_rt2,param1.b_lb2,0,-1,1);
         }
         else if(param2 == 3)
         {
            param1.gotoAndStop(1);
            param1.hea = 20;
            param1.hmax = 20;
            param1.side = 1;
            param1.grabtim = 10;
            param1.nick = param1.gui.txt1.text = "";
            param1.gui.visible = false;
            param1.b_lt = this.CreatePoint(param1.x - 20,param1.y - 20,param1.tox,param1.toy,10,false,9,-this.vehiclestotal - 200);
            param1.b_rt = this.CreatePoint(param1.x + 20,param1.y - 20,param1.tox,param1.toy,10,false,9,-this.vehiclestotal - 200);
            param1.b_lb = this.CreatePoint(param1.x - 20,param1.y + 20,param1.tox,param1.toy,10,false,9,-this.vehiclestotal - 200);
            param1.b_rb = this.CreatePoint(param1.x + 20,param1.y + 20,param1.tox,param1.toy,10,false,9,-this.vehiclestotal - 200);
            param1.b_c = this.CreatePoint(param1.x,param1.y,param1.tox,param1.toy,25,false,9,-this.vehiclestotal - 200);
            param1.ch_cross = this.Connect(param1.b_lt,param1.b_rt,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_lb,param1.b_rb,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_lt,param1.b_lb,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_rt,param1.b_rb,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_lt,param1.b_rb,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_rt,param1.b_lb,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_lt,param1.b_c,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_lb,param1.b_c,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_lt,param1.b_c,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_rt,param1.b_c,0,-1,1);
         }
         else if(param2 == 4)
         {
            param1.nick = param1.gui.txt1.text = "Drone";
            param1.ecosystem = true;
            param1.carbody.scaleY = param1.side;
            param1.hea = 100;
            param1.hmax = 100;
            param1.b_c = this.CreatePoint(param1.x,param1.y,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_c1 = this.CreatePoint(param1.x + 15 * Number(param1.side),param1.y,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_c2 = this.CreatePoint(param1.x,param1.y + 17,param1.tox,param1.toy,3,false,7,-this.vehiclestotal - 200);
            param1.b_c3 = this.CreatePoint(param1.x + 15 * Number(param1.side),param1.y + 17,param1.tox,param1.toy,3,false,7,-this.vehiclestotal - 200);
            this.i = 0;
            while(this.i < 1)
            {
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c1,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c1,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c1,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c2,param1.b_c3,0,-1,1);
               ++this.i;
            }
         }
         else if(param2 == 5)
         {
            param1.hea = 70;
            param1.hmax = 70;
            param1.nick = param1.gui.txt1.text = "";
            param1.gui.visible = false;
            param1.resttim = 0;
            this.i2 = 0;
            while(this.i2 < 2)
            {
               this.i = 0;
               while(this.i < 10)
               {
                  param1["b_c" + this.i] = this.CreatePoint(param1.x,param1.y + 20 * this.i,param1.tox,param1.toy,0,false,4,-this.vehiclestotal - 200);
                  if(this.i > 0)
                  {
                     param1.ch_cross = this.Connect(param1["b_c" + (this.i - 1)],param1["b_c" + this.i],0,-1,1);
                  }
                  if(this.i > 1)
                  {
                     param1.ch_cross = this.Connect(param1["b_c" + (this.i - 2)],param1["b_c" + this.i],0,-1,1);
                  }
                  ++this.i;
               }
               ++this.i2;
            }
         }
         else if(param2 == 6)
         {
            param1.hea = 70;
            param1.hmax = 70;
            param1.attached = -1;
            if(!this.HINTS)
            {
               param1.origin.visible = false;
            }
            param1.gui.txt1.text = "Hand holder";
            param1.gui.visible = false;
            param1.resttim = 0;
         }
         else if(param2 == 7)
         {
            param1.nick = param1.gui.txt1.text = "Corvette";
            param1.ecosystem = true;
            param1.carbody.scaleY = param1.side;
            param1.hea = 100;
            param1.hmax = 100;
            param1.b_c = this.CreatePoint(param1.x,param1.y,param1.tox,param1.toy,36,false,4,-this.vehiclestotal - 200);
            param1.b_c1 = this.CreatePoint(param1.x + 90 * Number(param1.side),param1.y,param1.tox,param1.toy,36,false,4,-this.vehiclestotal - 200);
            param1.b_c2 = this.CreatePoint(param1.x,param1.y + 26,param1.tox,param1.toy,36,false,4,-this.vehiclestotal - 200);
            param1.b_c3 = this.CreatePoint(param1.x + 90 * Number(param1.side),param1.y + 26,param1.tox,param1.toy,36,false,4,-this.vehiclestotal - 200);
            this.i = 0;
            while(this.i < 1)
            {
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c1,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c1,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c1,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c2,param1.b_c3,0,-1,1);
               ++this.i;
            }
         }
         if(this.MP_mode)
         {
            param1.gui.visible = false;
         }
         ++this.vehiclestotal;
      }
      
      public function HurtMyPlayer(param1:Number, param2:Number, param3:Number) : void
      {
		 var hurt_0;
         if(this.PSYCHOBLOOD_MODE == 1)
         {
            if(this.Math_abs(param1) > this.Math_abs(param2))
            {
               if(param1 < 0)
               {
                  this.pb0.alpha += param3 * 0.1;
               }
               else
               {
                  this.pb1.alpha += param3 * 0.1;
               }
            }
            else if(param2 < 0)
            {
               this.pb3.alpha += param3 * 0.1;
            }
            else
            {
               this.pb2.alpha += param3 * 0.1;
            }
            this.hurt_i4 = 0;
            while(this.hurt_i4 < 4)
            {
			   hurt_0 = "pb".concat(this.hurt_i4);
               this._root[hurt_0].alpha += param3 * 0.015;
               if(this._root[hurt_0].alpha > 0.9)
               {
                  this._root[hurt_0].alpha = 0.9;
				  this._root[hurt_0].visible = true;
               } else if(this._root[hurt_0].alpha < 0.1) {
				   this._root[hurt_0].visible = false;
			   } else {
				   this._root[hurt_0].visible = true;
			   }
               ++this.hurt_i4;
            }
         }
         else if(this.PSYCHOBLOOD_MODE == 2)
         {
            if(this.Math_abs(param1) > this.Math_abs(param2))
            {
               if(param1 < 0)
               {
                  this.pb0.alpha += param3 * 0.3;
               }
               else
               {
                  this.pb1.alpha += param3 * 0.3;
               }
            }
            else if(param2 < 0)
            {
               this.pb3.alpha += param3 * 0.3;
            }
            else
            {
               this.pb2.alpha += param3 * 0.3;
            }
            if(this.SCREEN_EFFECTS)
            {
               this.pb4.alpha += param3 * 0.015;
               this.hurt_i4 = 0;
               while(this.hurt_i4 < 5)
               {
				  hurt_0 = "pb" + this.hurt_i4;
                  this.pb4.visible = true;
                  if(this._root[hurt_0].alpha > 0.9)
                  {
                     this._root[hurt_0].alpha = 0.9;
					 this._root[hurt_0].visible = true;
                  } else if(this._root[hurt_0].alpha < 0.1) {
					  this._root[hurt_0].visible = false;
				  } else {
					  this._root[hurt_0].visible = true;
				  }
                  ++this.hurt_i4;
               }
            }
            else
            {
               this.hurt_i4 = 0;
               while(this.hurt_i4 < 4)
               {
				  hurt_0 = "pb" + this.hurt_i4;
                  this.pb4.visible = true;
                  if(this._root[hurt_0].alpha > 0.9)
                  {
                     this._root[hurt_0].alpha = 0.9;
					 this._root[hurt_0].visible = true;
                  } else if(this._root[hurt_0].alpha < 0.1) {
					  this._root[hurt_0].visible = false;
				  } else {
					  this._root[hurt_0].visible = true;
				  }
                  ++this.hurt_i4;
               }
            }
         }
         if(this.mxnds1 + this.mxnds2 + this.mxnds3 == 0 && this.tnds > 10)
         {
            this.stable = false;
            this.unstable = 1;
         }
         if(this.mens[this.MP_myid].hea <= 0)
         {
            if(!this.mens[this.MP_myid].dead)
            {
               this.hpwarning = false;
               if(this.hpbeepch != null)
               {
                  this.hpbeepch.stop();
               }
               if(!this.MP_spectator)
               {
                  if(this.BEEP_ON_DEATH)
                  {
                     this.hpbeepch = this.s_hp_dead.play(0,0,this.vol);
                  }
               }
            }
         }
         else if(Number(this.mens[this.MP_myid].hea) / Number(this.mens[this.MP_myid].hmax) < this.hp_warn_max)
         {
            if(!this.hpwarning)
            {
               this.hpwarning = true;
               if(this.hpbeepch != null)
               {
                  this.hpbeepch.stop();
               }
               if(!this.MP_spectator)
               {
                  if(this.GLOBAL_REGEN_SPEED != 0)
                  {
                     if(this.GLOBAL_REGEN_DELAY < 10)
                     {
                        this.hpbeepch = this.s_hp_warn.play(0,0,this.vol);
                     }
                  }
               }
               if(this.hpbeepch != null)
               {
                  this.hpbeepch.addEventListener(Event.SOUND_COMPLETE,this.handleHpBeep);
               }
            }
         }
         if(this.tnds > 12 + this.mxnds1 + this.mxnds2 + this.mxnds3)
         {
            this.stable = false;
            this.unstable = 2;
         }
      }
      
      public function Alerted(param1:MovieClip) : void
      {
         if(!param1.dying && (!param1.isplayer || !this.MP_mode || param1.team == this.mens[this.MP_myid].team))
         {
            param1.last_contact = 0;
            if(param1.hunt == -1)
            {
               if(param1.voice.enemy_spotted.length > 0)
               {
                  this.Say(param1,param1.voice.enemy_spotted[Math.floor(Math.random() * Number(param1.voice.enemy_spotted.length))]);
               }
            }
         }
      }
      
      public function Hurt_nopain(param1:Number) : void
      {
         if(this.VIOLENCE || this.CASUAL_MODE || this.MP_mode)
         {
            if(this.mens[param1].hp_legs <= 0)
            {
               if(!this.mens[param1].brk_legs)
               {
                  if(this.mens[param1].armored == 2)
                  {
                     this.PlaySound(this.s_metal_gib,this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe]);
                  }
                  else
                  {
                     this.PlaySound(this.s_blood_leg_arm,this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe]);
                  }
                  this.mens[param1].brk_legs = true;
                  if(this.VIOLENCE)
                  {
                     this.RestoreLimbColor(this.mens[param1].leg1.middle);
                     this.RestoreLimbColor(this.mens[param1].leg2.middle);
                     this.mens[param1].leg1.lower.visible = false;
                     this.mens[param1].leg2.lower.visible = false;
                     this.mens[param1].leg1.middle.gotoAndStop(30);
                     this.mens[param1].leg2.middle.gotoAndStop(30);
                     this.mens[param1].leg1.middle.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                     this.mens[param1].leg2.middle.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                  }
                  this.arad[this.mens[param1].b_leg1] *= 0.3;
                  this.arad[this.mens[param1].b_leg2] *= 0.3;
                  this.chdef[this.mens[param1].ch_leg1_max] = 20 * Number(this.mens[param1].scale);
                  this.chdef[this.mens[param1].ch_leg2_max] = 20 * Number(this.mens[param1].scale);
                  this.chio[this.mens[param1].ch_leg1_damp] = -1;
                  this.chio[this.mens[param1].ch_leg2_damp] = -1;
                  this.chdef[this.mens[param1].ch_body_ang1] *= 0.6;
                  this.chdef[this.mens[param1].ch_body_ang2] *= 0.6;
                  this.effcolor = param1;
                  this.FlowAt(this.ax[this.mens[param1].b_leg1],Number(this.ay[this.mens[param1].b_leg1]) - Math.random() * 20,0,-2 + Math.random() * 4,-2 + Math.random() * 4,6);
                  this.FlowAt(this.ax[this.mens[param1].b_leg1],Number(this.ay[this.mens[param1].b_leg1]) - Math.random() * 20,0,-2 + Math.random() * 4,-2 + Math.random() * 4,6);
                  this.MakeDying(this.mens[param1]);
                  if(Number(this.MP_mode) & Number(this.MP_app))
                  {
                     if(this.mens[param1].hea > 0)
                     {
                        if(this.mens[param1].isplayer)
                        {
                           if(this.mens[param1].lastshotby == this.MP_myid)
                           {
                              if(this.mens[param1].team != this.mens[this.MP_myid])
                              {
                                 this.ExpTask(this.EXP_TYPE_BREAK_ALIVE_PLAYERS_LEGS_IN_APPROVED,this.mens[param1].nick);
                              }
                           }
                        }
                     }
                  }
               }
            }
            else if(this.mens[param1].brk_legs)
            {
               this.mens[param1].brk_legs = false;
               this.mens[param1].leg1.lower.visible = true;
               this.mens[param1].leg2.lower.visible = true;
               this.mens[param1].leg1.middle.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
               this.mens[param1].leg2.middle.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
               this.arad[this.mens[param1].b_leg1] /= 0.3;
               this.arad[this.mens[param1].b_leg2] /= 0.3;
               this.chdef[this.mens[param1].ch_leg1_max] = 31 * Number(this.mens[param1].scale);
               this.chdef[this.mens[param1].ch_leg2_max] = 31 * Number(this.mens[param1].scale);
               this.chio[this.mens[param1].ch_leg1_damp] = true;
               this.chio[this.mens[param1].ch_leg2_damp] = true;
               this.chdef[this.mens[param1].ch_body_ang1] /= 0.6;
               this.chdef[this.mens[param1].ch_body_ang2] /= 0.6;
               this.SpawnPlayerImmediately(this.mens[param1]);
            }
            if(this.mens[param1].hp_arms <= 0)
            {
               if(!this.mens[param1].brk_arms)
               {
                  if(this.mens[param1].armored == 2)
                  {
                     this.PlaySound(this.s_metal_gib,this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe]);
                  }
                  else
                  {
                     this.PlaySound(this.s_blood_leg_arm,this.ax[this.mens[param1].b_body],this.ay[this.mens[param1].b_body]);
                  }
                  this.mens[param1].brk_arms = true;
                  if(this.VIOLENCE)
                  {
                     this.RestoreLimbColor(this.mens[param1].arm1.lower);
                     this.RestoreLimbColor(this.mens[param1].arm2.lower);
                     this.mens[param1].arm1.lower.gotoAndStop(20);
                     this.mens[param1].arm2.lower.gotoAndStop(20);
                     if(this.mens[param1].arm1.lower.psi != null)
                     {
                        this.mens[param1].arm1.lower.psi.visible = false;
                     }
                     if(this.mens[param1].arm2.lower.psi != null)
                     {
                        this.mens[param1].arm2.lower.psi.visible = false;
                     }
                  }
                  this.arad[this.mens[param1].b_arm1] *= 0.4;
                  this.arad[this.mens[param1].b_arm2] *= 0.4;
                  if(this.VIOLENCE)
                  {
                     this.mens[param1].arm1.lower.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                     this.mens[param1].arm2.lower.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                  }
                  this.effcolor = param1;
                  this.FlowAt(this.ax[this.mens[param1].b_arm1],this.ay[this.mens[param1].b_arm1],0,-2 + Math.random() * 4,-2 + Math.random() * 4,6);
                  this.FlowAt(this.ax[this.mens[param1].b_arm2],this.ay[this.mens[param1].b_arm2],0,-2 + Math.random() * 4,-2 + Math.random() * 4,6);
                  this.MakeDying(this.mens[param1]);
                  if(Number(this.MP_mode) & Number(this.MP_app))
                  {
                     if(this.mens[param1].hea > 0)
                     {
                        if(this.mens[param1].isplayer)
                        {
                           if(this.mens[param1].lastshotby == this.MP_myid)
                           {
                              if(this.mens[param1].team != this.mens[this.MP_myid])
                              {
                                 this.ExpTask(this.EXP_TYPE_BREAK_ALIVE_PLAYERS_ARMS_IN_APPROVED,this.mens[param1].nick);
                              }
                           }
                        }
                     }
                  }
               }
            }
            else if(this.mens[param1].brk_arms)
            {
               this.mens[param1].brk_arms = false;
               this.arad[this.mens[param1].b_arm1] /= 0.4;
               this.arad[this.mens[param1].b_arm2] /= 0.4;
               this.mens[param1].arm1.lower.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
               this.mens[param1].arm2.lower.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
               this.SpawnPlayerImmediately(this.mens[param1]);
            }
            if(this.mens[param1].hp_body <= 0)
            {
               if(!this.mens[param1].brk_body)
               {
                  this.mens[param1].brk_body = true;
                  if(this.mens[param1].armored == 2)
                  {
                     this.PlaySound(this.s_metal_gib,this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe]);
                  }
                  else if(Math.random() > 0.5)
                  {
                     this.PlaySound(this.s_blood_body,this.ax[this.mens[param1].b_body],this.ay[this.mens[param1].b_body]);
                  }
                  else
                  {
                     this.PlaySound(this.s_blood_body2,this.ax[this.mens[param1].b_body],this.ay[this.mens[param1].b_body]);
                  }
                  if(this.mens[param1].team != this.mens[this.MP_myid].team)
                  {
                     this.incBadge(15);
                  }
                  if(this.VIOLENCE || this.MP_mode)
                  {
                     this.RestoreLimbColor(this.mens[param1].body);
                     this.chio[this.mens[param1].ch_body] = -1;
                     this.chio[this.mens[param1].ch_spine] = -1;
                     this.chio[this.mens[param1].ch_body_ang1] = -1;
                     this.chio[this.mens[param1].ch_body_ang2] = -1;
                     this.mens[param1].toe.bloddy.visible = true;
                     this.mens[param1].body.gotoAndStop(5);
                  }
                  this.hurt_x4 = (this.ax[this.mens[param1].b_toe] + this.ax[this.mens[param1].b_body]) / 2;
                  this.hurt_y4 = (this.ay[this.mens[param1].b_toe] + this.ay[this.mens[param1].b_body]) / 2;
                  this.hurt_xx2 = (this.atox[this.mens[param1].b_toe] + this.atox[this.mens[param1].b_body]) / 2;
                  this.hurt_yy2 = (this.atoy[this.mens[param1].b_toe] + this.atoy[this.mens[param1].b_body]) / 2;
                  if(this.VIOLENCE || this.MP_mode)
                  {
                     this.mens[param1].b_brk1 = this.CreatePoint(this.hurt_x4,this.hurt_y4,(this.hurt_xx2 + this.atox[this.mens[param1].b_body]) / 2,(this.hurt_yy2 + this.atoy[this.mens[param1].b_body]) / 2,7,false,1,param1);
                     this.mens[param1].b_brk2 = this.CreatePoint(this.hurt_x4,this.hurt_y4,(this.hurt_xx2 + this.atox[this.mens[param1].b_toe]) / 2,(this.hurt_yy2 + this.atoy[this.mens[param1].b_toe]) / 2,7,false,1,param1);
                     this.mens[param1].ch_brk1 = this.Connect(this.mens[param1].b_toe,this.mens[param1].b_brk2,0,Number(this.chdef[this.mens[param1].ch_body]) * 0.75,-1);
                     this.mens[param1].ch_brk2 = this.Connect(this.mens[param1].b_body,this.mens[param1].b_brk1,0,Number(this.chdef[this.mens[param1].ch_body]) * 0.75,-1);
                     this.mens[param1].body.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                     this.mens[param1].toe.bloddy.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                  }
                  this.effcolor = param1;
                  this.FlowAt(this.ax[this.mens[param1].b_toe],Number(this.ay[this.mens[param1].b_toe]) - Math.random() * 15,0,-6 + Math.random() * 12,-6 + Math.random() * 12,7);
                  this.FlowAt(this.ax[this.mens[param1].b_toe],Number(this.ay[this.mens[param1].b_toe]) - Math.random() * 15,0,-6 + Math.random() * 12,-6 + Math.random() * 12,7);
                  this.FlowAt(this.ax[this.mens[param1].b_toe],Number(this.ay[this.mens[param1].b_toe]) - Math.random() * 15,0,-6 + Math.random() * 12,-6 + Math.random() * 12,7);
                  this.mens[param1].dying = true;
                  if(this.mens[param1].hea > 0)
                  {
                     this.mens[param1].hea = 0;
                  }
               }
            }
            else if(this.mens[param1].brk_body)
            {
               this.mens[param1].brk_body = false;
               this.chio[this.mens[param1].ch_body] = true;
               this.chio[this.mens[param1].ch_spine] = true;
               this.chio[this.mens[param1].ch_body_ang1] = true;
               this.chio[this.mens[param1].ch_body_ang2] = true;
               this.aio[this.mens[param1].b_brk1] = -1;
               this.aio[this.mens[param1].b_brk2] = -1;
               this.mens[param1].b_brk1 = this.mens[param1].b_toe;
               this.mens[param1].b_brk2 = this.mens[param1].b_body;
               this.chio[this.mens[param1].ch_brk1] = -1;
               this.chio[this.mens[param1].ch_brk2] = -1;
               this.mens[param1].ch_brk1 = this.mens[param1].ch_spine;
               this.mens[param1].ch_brk2 = this.mens[param1].ch_spine;
               this.mens[param1].toe.bloddy.visible = false;
               this.mens[param1].body.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
               this.SpawnPlayerImmediately(this.mens[param1]);
            }
            if(this.mens[param1].hp_head <= 0)
            {
               if(!this.mens[param1].brk_head)
               {
                  if(this.mens[param1].armored == 2)
                  {
                     this.PlaySound(this.s_metal_gib,this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe]);
                  }
                  else if(Math.random() > 0.5)
                  {
                     this.PlaySound(this.s_blood_head,this.ax[this.mens[param1].b_body],this.ay[this.mens[param1].b_body]);
                  }
                  else
                  {
                     this.PlaySound(this.s_blood_head2,this.ax[this.mens[param1].b_body],this.ay[this.mens[param1].b_body]);
                  }
                  if(this.VIOLENCE)
                  {
                     this.RestoreLimbColor(this.mens[param1].head);
                     this.mens[param1].head.gotoAndStop(10);
                     this.mens[param1].head.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                  }
                  this.mens[param1].brk_head = true;
                  if(this.mens[param1].hea > 0)
                  {
                     this.mens[param1].hea = 0;
                  }
                  this.arad[this.mens[param1].b_head_start] *= 0.5;
                  this.arad[this.mens[param1].b_head_end] *= 0.1;
                  this.effcolor = param1;
                  this.FlowAt(this.ax[this.mens[param1].b_head_start],Number(this.ay[this.mens[param1].b_head_start]) - Math.random() * 5,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 5,6);
                  this.FlowAt(this.ax[this.mens[param1].b_head_start],Number(this.ay[this.mens[param1].b_head_start]) - Math.random() * 5,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 10,6);
                  this.FlowAt(this.ax[this.mens[param1].b_head_start],Number(this.ay[this.mens[param1].b_head_start]) - Math.random() * 5,0,-40 + Math.random() * 80,-40 + Math.random() * 80 - 10,8);
               }
            }
            else if(this.mens[param1].brk_head)
            {
               this.mens[param1].head.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
               this.mens[param1].brk_head = false;
               this.arad[this.mens[param1].b_head_start] /= 0.5;
               this.arad[this.mens[param1].b_head_end] /= 0.1;
               this.SpawnPlayerImmediately(this.mens[param1]);
            }
            if(this.STRICT_MODE)
            {
               if(this.mens[param1].team == this.mens[this.MP_myid].team)
               {
                  if(this.mens[param1].char == 1 || this.mens[param1].char == 3 || this.mens[param1].char == 13 || this.mens[param1].char == 38)
                  {
                     if(Boolean(this.mens[param1].brk_head) || Boolean(this.mens[param1].brk_arms) || Boolean(this.mens[param1].brk_legs) || Boolean(this.mens[param1].brk_body))
                     {
                        this.darkness.visible = true;
                        if(!this.MP_mode)
                        {
                           this.LEVEL_END_FORCE = "failed";
                           if(this.mens[param1].dead)
                           {
                              this.LAST_ERROR = "YOUR TEAMMATE DIED.";
                              if(this.HINTS)
                              {
                                 this.SetHint("Your teammate died.");
                              }
                           }
                           else
                           {
                              this.LAST_ERROR = "YOUR TEAMMATE IS CRITICALLY INJURED.";
                              if(this.HINTS)
                              {
                                 this.SetHint("Your teammate is critically injured.");
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      
      public function MakeDying(param1:*) : void
      {
         if(param1.hea > 0)
         {
            if(!param1.dying)
            {
               if(param1.voice.dying.length > 0)
               {
                  this.Say(param1,param1.voice.dying[Math.floor(Math.random() * Number(param1.voice.dying.length))],true);
               }
               param1.dying = true;
            }
         }
      }
      
      public function MakeHappy(param1:*) : void
      {
         if(param1.hea > 0)
         {
            if(!param1.dying)
            {
               if(param1.voice.enemy_down.length > 0)
               {
                  if(this.MP_mode || param1.voice.enemy_down_sp_chance == undefined || Math.random() < param1.voice.enemy_down_sp_chance)
                  {
                     this.Say(param1,param1.voice.enemy_down[Math.floor(Math.random() * Number(param1.voice.enemy_down.length))]);
                  }
               }
            }
         }
      }
      
      public function Hurt(param1:Number, param2:Number = 1) : void
      {
         this.mens[param1].regentim = 0;
         if(this.mens[param1].notspawned)
         {
            this.SpawnPlayerImmediately(this.mens[param1]);
         }
         this.mens[param1].last_contact = 0;
         if(this.mens[param1].hea > 0)
         {
            if(this.mens[param1].isGhost)
            {
               if(this.mens[param1].alpha < 0.3)
               {
                  this.mens[param1].alpha = 0.3;
               }
            }
            if(this.mens[param1].voice.hurt.length > 0)
            {
               this.Say(this.mens[param1],this.mens[param1].voice.hurt[Math.floor(Math.random() * Number(this.mens[param1].voice.hurt.length))],true);
            }
            if(this.mens[param1].lastshot == "head")
            {
               this.atox[this.mens[param1].b_head_end] -= Number(this.mens[param1].side) * 4 * param2;
               this.atox[this.mens[param1].b_head_start] -= Number(this.mens[param1].side) * 3 * param2;
               this.atoy[this.mens[param1].b_arm1] -= 3 * param2;
               this.atoy[this.mens[param1].b_arm2] -= 2 * param2;
               this.atox[this.mens[param1].b_leg1] += Number(this.mens[param1].side) * 3 * param2;
               this.atoy[this.mens[param1].b_leg1] -= 2 * param2;
            }
            else if(this.mens[param1].lastshot == "body")
            {
               this.atox[this.mens[param1].b_head_end] += Number(this.mens[param1].side) * 1 * param2;
               this.atox[this.mens[param1].b_head_start] -= Number(this.mens[param1].side) * 1 * param2;
               this.atox[this.mens[param1].b_toe] -= Number(this.mens[param1].side) * 2 * param2;
               this.atox[this.mens[param1].b_arm1] -= Number(this.mens[param1].side) * 1 * param2;
               this.atox[this.mens[param1].b_arm2] -= Number(this.mens[param1].side) * 2 * param2;
               this.atoy[this.mens[param1].b_arm1] += 1 * param2;
               this.atoy[this.mens[param1].b_arm2] += 2 * param2;
               this.atox[this.mens[param1].b_leg1] += Number(this.mens[param1].side) * 2 * param2;
               this.atox[this.mens[param1].b_leg2] -= Number(this.mens[param1].side) * 1 * param2;
            }
            else if(this.mens[param1].lastshot == "arms")
            {
               this.atox[this.mens[param1].b_head_end] += Number(this.mens[param1].side) * 1 * param2;
               this.atox[this.mens[param1].b_head_start] -= Number(this.mens[param1].side) * 1 * param2;
               this.atox[this.mens[param1].b_body] -= Number(this.mens[param1].side) * 2 * param2;
               this.atox[this.mens[param1].b_arm1] -= Number(this.mens[param1].side) * 2 * param2;
               this.atox[this.mens[param1].b_arm2] -= Number(this.mens[param1].side) * 2 * param2;
               this.atoy[this.mens[param1].b_arm1] -= 4 * param2;
               this.atoy[this.mens[param1].b_arm2] -= 3 * param2;
            }
            else if(this.mens[param1].lastshot == "legs")
            {
               this.atox[this.mens[param1].b_head_end] -= Number(this.mens[param1].side) * 1 * param2;
               this.atox[this.mens[param1].b_head_start] += Number(this.mens[param1].side) * 1 * param2;
               this.atox[this.mens[param1].b_toe] -= Number(this.mens[param1].side) * 1 * param2;
               this.atox[this.mens[param1].b_arm1] += Number(this.mens[param1].side) * 1 * param2;
               this.atox[this.mens[param1].b_arm2] += Number(this.mens[param1].side) * 1 * param2;
               this.atoy[this.mens[param1].b_arm1] -= 2 * param2;
               this.atoy[this.mens[param1].b_arm2] -= 3 * param2;
               this.atox[this.mens[param1].b_leg1] -= Number(this.mens[param1].side) * 3 * param2;
               this.atox[this.mens[param1].b_leg2] -= Number(this.mens[param1].side) * 4 * param2;
            }
            if(this.mens[param1].inwater)
            {
               this.Effect(this.ax[this.mens[param1].b_head_start],this.ay[this.mens[param1].b_head_start],2,0,0);
            }
         }
         if(this.mens[param1].hea < this.dying_after && (param1 != this.MP_myid || this.MP_mode || this.PRO_BOTS))
         {
            this.MakeDying(this.mens[param1]);
         }
         this.Hurt_nopain(param1);
         if(this.mens[param1].dying)
         {
            this.mens[param1].stability = -2;
         }
      }
      
      public function PhysicsExplosionNoSprite(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:int, param7:Boolean, param8:String) : void
      {
         var _loc9_:Object = null;
         var _loc10_:* = false;
         var _loc11_:* = null;
         if(this.DEBUG_MODE)
         {
            this.debug_screen.graphics.lineStyle(param3 * 2,16755200,0.5);
            this.debug_screen.graphics.moveTo(param1,param2);
            this.debug_screen.graphics.lineTo(param1,param2 + 1);
         }
         if(param4 > 0)
         {
            if(param7)
            {
               this.SHAKEAMMOUT += this.dist_to_face / this.Dist3Dm((param1 + this.game_x - 400) * this.game_scale,(param2 + this.game_y - 200) * this.game_scale,this.dist_to_face) * Math.max(param3 / 50 * 3,param4) * 0.2;
            }
         }
         this.i6 = 0;
         while(this.i6 < this.flakes_total)
         {
            if(this.flakes[this.i6].alpha > 0)
            {
               this.xx = this.Dist2D(param1,param2,this.flakes[this.i6].x,this.flakes[this.i6].y);
               if(this.xx < param3 * 0.75)
               {
                  this.flakes[this.i6].hit = true;
               }
               if(this.xx < param3)
               {
                  this.xx = param4 * Math.sqrt((param3 - this.xx) / param3) / this.xx;
                  this.flakes[this.i6].tox += (this.flakes[this.i6].x - param1) * this.xx * 3;
                  this.flakes[this.i6].toy += (this.flakes[this.i6].y - param2) * this.xx * 3;
               }
            }
            ++this.i6;
         }
         if(!this.stable)
         {
            if(this.MP_mode)
            {
               if(!this.MP_favor_the_shooter)
               {
                  if(Math.random() > 0.9)
                  {
                     param1 = Number(this.mens[this.MP_myid].x);
                     param2 = Number(this.mens[this.MP_myid].y);
                     param5 *= 1000;
                  }
               }
            }
         }
         _loc9_ = null;
         if(this.MP_mode && this.MP_favor_the_shooter)
         {
            _loc9_ = {};
         }
         this.i6 = 0;
         while(this.i6 < this.atotal)
         {
            if(this.aio[this.i6] == true || this.aio[this.i6] == false)
            {
               this.xx = this.Dist2D(param1,param2,this.ax[this.i6],this.ay[this.i6]);
               if(this.xx < param3)
               {
                  if(this.TraceLine(param1,param2,this.ax[this.i6],this.ay[this.i6]))
                  {
                     if(this.xx < 0.5)
                     {
                        this.xx = 0.5;
                     }
                     this.xx = param4 * Math.sqrt((param3 - this.xx) / param3) / this.xx;
                     this.allow = true;
                     this.is2 = 0;
                     while(this.is2 < this.shnades_total)
                     {
                        if(this.shnades[this.is2].io)
                        {
                           if(this.ax[this.i6] > Number(this.shnades[this.is2].x) - Number(this.shnades[this.is2].radius) - 5)
                           {
                              if(this.ax[this.i6] < this.shnades[this.is2].x + this.shnades[this.is2].radius + 5)
                              {
                                 if(this.ay[this.i6] > Number(this.shnades[this.is2].y) - Number(this.shnades[this.is2].radius) - 5)
                                 {
                                    if(this.ay[this.i6] < this.shnades[this.is2].y + this.shnades[this.is2].radius + 5)
                                    {
                                       if(this.Dist2D(this.shnades[this.is2].x,this.shnades[this.is2].y,param1,param2) > Number(this.shnades[this.is2].radius) - 5 && this.Dist2D(this.shnades[this.is2].x,this.shnades[this.is2].y,this.ax[this.i6],this.ay[this.i6]) < this.shnades[this.is2].radius)
                                       {
                                          this.allow = false;
                                          break;
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        ++this.is2;
                     }
                     if(this.allow)
                     {
                        if(this.amat[this.i6] == 1 || this.amat[this.i6] == 0)
                        {
                           if(this.mens[this.aof[this.i6]].can_be_hit)
                           {
                              _loc10_ = false;
                              if(this.MP_mode)
                              {
                                 if(this.MP_favor_the_shooter)
                                 {
                                    _loc10_ = param6 == this.MP_myid;
                                 }
                                 else
                                 {
                                    _loc10_ = this.aof[this.i6] == this.MP_myid;
                                 }
                                 if(param6 == this.MP_myid && !this.mens[this.aof[this.i6]].isplayer || this.aof[this.i6] === this.MP_myid && (param6 == -1 || !this.mens[param6].isplayer))
                                 {
                                    _loc10_ = true;
                                 }
                                 if(!this.mens[this.aof[this.i6]].isplayer && (param6 == -1 || !this.mens[param6].isplayer))
                                 {
                                    _loc10_ = true;
                                 }
                              }
                              else
                              {
                                 _loc10_ = true;
                              }
                              if(this.MP_mode && this.MP_favor_the_shooter)
                              {
                                 if(param6 == this.MP_myid)
                                 {
                                    if(_loc9_[this.aof[this.i6]] == undefined)
                                    {
                                       _loc9_[this.aof[this.i6]] = [];
                                    }
                                    _loc9_[this.aof[this.i6]].push(this.GlobalAtomIDToPlayerLocalAtomID(this.i6,this.mens[this.aof[this.i6]]),this.r2(Number(this.ax[this.i6]) - param1),this.r2(Number(this.ay[this.i6]) - param2),this.r2(this.xx));
                                 }
                              }
                              if(_loc10_)
                              {
                                 this.ApplyWaveDamageToPlayerAtom(param6,this.mens[this.aof[this.i6]],this.GlobalAtomIDToPlayerLocalAtomID(this.i6,this.mens[this.aof[this.i6]]),Number(this.ax[this.i6]) - param1,Number(this.ay[this.i6]) - param2,this.xx,param5,this.expl_hurt_full,param3,param4,true,param1,param2,-1,param8);
                              }
                           }
                        }
                        else
                        {
                           this.yy = Math.sqrt(this.arad[this.i6]);
                           if(this.yy < 5)
                           {
                              this.yy = 5;
                           }
                           this.WakeUpAtom(this.i6);
                           this.atox[this.i6] += (Number(this.ax[this.i6]) - param1) * this.xx / this.yy * 7;
                           this.atoy[this.i6] += (Number(this.ay[this.i6]) - param2) * this.xx / this.yy * 7;
                           if(this.xx < param3 * 0.75)
                           {
                              if(this.amat[this.i6] == 3)
                              {
                                 if(this.barrels[-100 - Number(this.aof[this.i6])].hea > 0)
                                 {
                                    this.barrels[-100 - Number(this.aof[this.i6])].hea -= param5 / 4;
                                    this.HurtBarrel(-100 - Number(this.aof[this.i6]));
                                 }
                              }
                              if(this.amat[this.i6] == 5 || this.amat[this.i6] == 4 || this.amat[this.i6] == 6 || this.amat[this.i6] == 7 || this.amat[this.i6] == 9)
                              {
                                 if(this.vehicles[-Number(this.aof[this.i6]) - 200].typ == 0 || this.vehicles[-Number(this.aof[this.i6]) - 200].typ == 1 || this.vehicles[-Number(this.aof[this.i6]) - 200].typ == 3 || this.vehicles[-Number(this.aof[this.i6]) - 200].typ == 4)
                                 {
                                    this.vehicles[-Number(this.aof[this.i6]) - 200].hea -= param5 / 3;
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
            ++this.i6;
         }
         if(_loc9_ != null)
         {
            for(_loc11_ in _loc9_)
            {
               this.MP_custom_events += ";w|" + [param6,this.r2(param5),this.expl_hurt_full ? 1 : 0,this.r2(param3),this.r2(param4),_loc11_,this.r2(param1),this.r2(param2),param8].join("#") + "#" + _loc9_[_loc11_].join("#");
            }
         }
         if(param6 != -1)
         {
            this.i6 = 0;
            while(this.i6 < this.playerstotal)
            {
               if(this.mens[this.i6].io)
               {
                  if(!this.mens[this.i6].isplayer)
                  {
                     this.xx = this.Dist2D(param1,param2,this.ax[this.mens[this.i6].b_toe],this.ay[this.mens[this.i6].b_toe]);
                     if(this.xx < param3 + 400 && this.mens[this.i6].team != this.mens[param6].team || this.xx < param3 + 20 && this.mens[this.i6].team == this.mens[param6].team)
                     {
                        if(this.TraceLine(param1,param2,this.ax[this.mens[this.i6].b_head_start],this.ay[this.mens[this.i6].b_head_start]))
                        {
                           if(!this.mens[this.i6].dead)
                           {
                              this.Alerted(this.mens[this.i6]);
                           }
                           this.mens[this.i6].hunt = param6;
                        }
                     }
                  }
               }
               ++this.i6;
            }
         }
         this.i6 = 0;
         while(this.i6 < this.lampstotal)
         {
            if(this.lamps_power2[this.i6] > 0)
            {
               if(this.Dist2D(param1,param2,this.lamps_x[this.i6],this.lamps_y[this.i6]) < param3)
               {
                  if(this.TraceLine(param1,param2,this.lamps_x[this.i6],this.lamps_y[this.i6]))
                  {
                     this.ShotLight(this.i6);
                  }
               }
            }
            ++this.i6;
         }
      }
      
      public function ExplosionSound(param1:Number, param2:Number) : *
      {
         this.xx = 0;
         this.i6 = 0;
         while(this.i6 < this.watertotal)
         {
            if(param1 > this.wax[this.i6])
            {
               if(param1 < this.wax[this.i6] + this.waw[this.i6])
               {
                  if(param2 > this.way[this.i6])
                  {
                     if(param2 < this.way[this.i6] + this.wah[this.i6])
                     {
                        if(this.wa_friction[this.i6])
                        {
                           this.xx = 1;
                        }
                     }
                  }
               }
            }
            ++this.i6;
         }
         if(this.xx == 0)
         {
            if(Math.random() > 0.5)
            {
               this.PlaySound(this.s_explode1,param1,param2);
            }
            else
            {
               this.PlaySound(this.s_explode2,param1,param2);
            }
         }
         else
         {
            this.PlaySound(this.s_explode_underwater,param1,param2);
         }
      }
      
      public function ExplosionSoundBarrel(param1:Number, param2:Number) : *
      {
         this.xx = 0;
         this.i6 = 0;
         while(this.i6 < this.watertotal)
         {
            if(param1 > this.wax[this.i6])
            {
               if(param1 < this.wax[this.i6] + this.waw[this.i6])
               {
                  if(param2 > this.way[this.i6])
                  {
                     if(param2 < this.way[this.i6] + this.wah[this.i6])
                     {
                        if(this.wa_friction[this.i6])
                        {
                           this.xx = 1;
                        }
                     }
                  }
               }
            }
            ++this.i6;
         }
         if(this.xx == 0)
         {
            if(Math.random() > 0.5)
            {
               this.PlaySound(this.s_barrel,param1,param2);
            }
            else
            {
               this.PlaySound(this.s_barrel2,param1,param2);
            }
         }
         else
         {
            this.PlaySound(this.s_explode_underwater,param1,param2);
         }
      }
      
      public function PhysicsExplosion(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:int, param7:String) : void
      {
         this.PhysicsExplosionNoSprite(param1,param2,param3,param4,param5,param6,true,param7);
         if(param3 > 1000)
         {
            param3 = 1000;
         }
         if(param4 > 0)
         {
            this.xx = 0;
            this.i6 = 0;
            while(this.i6 < this.watertotal)
            {
               if(param1 > this.wax[this.i6])
               {
                  if(param1 < this.wax[this.i6] + this.waw[this.i6])
                  {
                     if(param2 > this.way[this.i6])
                     {
                        if(param2 < this.way[this.i6] + this.wah[this.i6])
                        {
                           if(this.wa_friction[this.i6])
                           {
                              this.xx = 1;
                           }
                        }
                     }
                  }
               }
               ++this.i6;
            }
            if(this.xx == 0)
            {
               this.xx = 0;
               while(this.xx < Math.PI * 2)
               {
                  this.yy = 0.05 + Math.random();
                  this.Effect(param1,param2,7,Math.sin(this.xx + Math.random()) * param4 * this.yy,Math.cos(this.xx) * param4 * this.yy);
                  this.xx += Math.PI / 6 / param3 * 100 / this.game_scale;
               }
               this.Effect(param1,param2,4,param3 / 100,0);
            }
            else
            {
               if(this.SUPER_COMPUTER && !this.c_sim_stress)
               {
                  this.xx = 0;
                  while(this.xx < Math.PI * 2)
                  {
                     this.yy = 0.05 + Math.random();
                     this.Effect(param1 + Math.sin(this.xx + Math.random()) * param4 * this.yy,param2 + Math.cos(this.xx) * param4 * this.yy,2,0,0);
                     this.xx += Math.PI / 6 / param3 * 100 / this.game_scale;
                  }
               }
               this.Effect(param1,param2,15,param3 / 100,0);
            }
         }
         this.PAlert(param1,param2);
      }
      
      public function HurtBarrel(param1:int) : void
      {
         this.PAlert(this.barrels[param1].x,this.barrels[param1].y);
         if(this.barrels[param1].hea <= 0)
         {
            if(this.MP_mode)
            {
               this.MP_custom_events += ";b|" + this.MP_myid + "#" + param1 + "#" + this.barrels[param1].x + "#" + this.barrels[param1].y;
            }
            this.barrels[param1].gotoAndPlay(5);
            this.barrels[param1].rotation = 0;
            this.barrels[param1].b_left1 = this.CreatePoint((this.ax[this.barrels[param1].b_left_top] + this.ax[this.barrels[param1].b_left_bottom]) / 2,(this.ay[this.barrels[param1].b_left_top] + this.ay[this.barrels[param1].b_left_bottom]) / 2,(this.atox[this.barrels[param1].b_left_top] + this.atox[this.barrels[param1].b_left_bottom]) / 2,(this.atoy[this.barrels[param1].b_left_top] + this.atoy[this.barrels[param1].b_left_bottom]) / 2,5,false,3,-param1 - 100);
            this.barrels[param1].b_left2 = this.CreatePoint((this.ax[this.barrels[param1].b_left_top] + this.ax[this.barrels[param1].b_left_bottom]) / 2,(this.ay[this.barrels[param1].b_left_top] + this.ay[this.barrels[param1].b_left_bottom]) / 2,(this.atox[this.barrels[param1].b_left_top] + this.atox[this.barrels[param1].b_left_bottom]) / 2,(this.atoy[this.barrels[param1].b_left_top] + this.atoy[this.barrels[param1].b_left_bottom]) / 2,5,false,3,-param1 - 100);
            this.barrels[param1].b_right1 = this.CreatePoint((this.ax[this.barrels[param1].b_right_top] + this.ax[this.barrels[param1].b_right_bottom]) / 2,(this.ay[this.barrels[param1].b_right_top] + this.ay[this.barrels[param1].b_right_bottom]) / 2,(this.atox[this.barrels[param1].b_right_top] + this.atox[this.barrels[param1].b_right_bottom]) / 2,(this.atoy[this.barrels[param1].b_right_top] + this.atoy[this.barrels[param1].b_right_bottom]) / 2,5,false,3,-param1 - 100);
            this.barrels[param1].b_right2 = this.CreatePoint((this.ax[this.barrels[param1].b_right_top] + this.ax[this.barrels[param1].b_right_bottom]) / 2,(this.ay[this.barrels[param1].b_right_top] + this.ay[this.barrels[param1].b_right_bottom]) / 2,(this.atox[this.barrels[param1].b_right_top] + this.atox[this.barrels[param1].b_right_bottom]) / 2,(this.atoy[this.barrels[param1].b_right_top] + this.atoy[this.barrels[param1].b_right_bottom]) / 2,5,false,3,-param1 - 100);
            this.ReConnect(this.barrels[param1].ch_left,this.barrels[param1].b_left_top,this.barrels[param1].b_left1,0,13,-1);
            this.ReConnect(this.barrels[param1].ch_right,this.barrels[param1].b_right_top,this.barrels[param1].b_right1,0,13,-1);
            this.ReConnect(this.barrels[param1].ch_cross1,this.barrels[param1].b_left_top,this.barrels[param1].b_right1,0,Math.sqrt(100 + 169),-1);
            this.ReConnect(this.barrels[param1].ch_cross2,this.barrels[param1].b_right_top,this.barrels[param1].b_left1,0,Math.sqrt(100 + 169),-1);
            this.barrels[param1].ch_left2 = this.Connect(this.barrels[param1].b_left_bottom,this.barrels[param1].b_left2,0,13,-1);
            this.barrels[param1].ch_right2 = this.Connect(this.barrels[param1].b_right_bottom,this.barrels[param1].b_right2,0,13,-1);
            this.barrels[param1].ch_cross3 = this.Connect(this.barrels[param1].b_left_bottom,this.barrels[param1].b_right2,0,Math.sqrt(100 + 169),-1);
            this.barrels[param1].ch_cross4 = this.Connect(this.barrels[param1].b_right_bottom,this.barrels[param1].b_left2,0,Math.sqrt(100 + 169),-1);
            this.barrels[param1].ch_mid1 = this.Connect(this.barrels[param1].b_left1,this.barrels[param1].b_right1,0,10,-1);
            this.barrels[param1].ch_mid2 = this.Connect(this.barrels[param1].b_left2,this.barrels[param1].b_right2,0,10,-1);
            this.n2 = 0;
            while(this.n2 < 10)
            {
               if(this.HQ || this.SUPER_COMPUTER)
               {
                  this.barrels[param1]["b_g" + this.n2] = this.CreatePoint(this.barrels[param1].x + this.barrels[param1]["g" + this.n2].x,this.barrels[param1].y + this.barrels[param1]["g" + this.n2].y,(Math.random() - 0.5) * Number(this.barrels[param1].dist) * 10,(Math.random() - 0.5) * Number(this.barrels[param1].dist) * 10,0,false,3,-param1 - 100);
               }
               else
               {
                  this.barrels[param1]["g" + this.n2].visible = false;
               }
               ++this.n2;
            }
            this.expl_hurt_full = true;
            this.PhysicsExplosionNoSprite(this.barrels[param1].x,this.barrels[param1].y,50 * Number(this.barrels[param1].dist),Number(this.barrels[param1].dist) * 3,Number(this.barrels[param1].dist) * 30,this.barrels[param1].master,true,"barrel");
            this.expl_hurt_full = false;
            this.xx = 0;
            this.i6 = 0;
            while(this.i6 < this.watertotal)
            {
               if(this.barrels[param1].x > this.wax[this.i6])
               {
                  if(this.barrels[param1].x < this.wax[this.i6] + this.waw[this.i6])
                  {
                     if(this.barrels[param1].y > this.way[this.i6])
                     {
                        if(this.barrels[param1].y < this.way[this.i6] + this.wah[this.i6])
                        {
                           if(this.wa_friction[this.i6])
                           {
                              this.xx = 1;
                           }
                        }
                     }
                  }
               }
               ++this.i6;
            }
            if(this.xx == 0)
            {
               if(this.barrels[param1].mdl == "bar_orange" || this.barrels[param1].mdl == "bar_red")
               {
                  this.Effect(this.barrels[param1].x,this.barrels[param1].y,4,50 * Number(this.barrels[param1].dist) / 100,0);
               }
               else if(this.barrels[param1].mdl == "bar_blue")
               {
                  this.Effect(this.barrels[param1].x,this.barrels[param1].y,18,50 * Number(this.barrels[param1].dist) / 100,0);
               }
            }
            else
            {
               this.Effect(this.barrels[param1].x,this.barrels[param1].y,15,50 * Number(this.barrels[param1].dist) / 100,0);
            }
            this.ExplosionSoundBarrel(this.barrels[param1].x,this.barrels[param1].y);
         }
         else
         {
            this.barrels[param1].gotoAndStop(4 - Math.round(Number(this.barrels[param1].hea) / 25 * 2));
            if(Math.random() > 0.5)
            {
               this.PlaySound(this.s_glass1,this.barrels[param1].x,this.barrels[param1].y);
            }
            else
            {
               this.PlaySound(this.s_glass2,this.barrels[param1].x,this.barrels[param1].y);
            }
         }
      }
      
      public function VeriftMP(param1:int, param2:int) : void
      {
         if(Boolean(isNaN(this.ax[param1])) || Boolean(isNaN(this.ay[param1])) || Boolean(isNaN(this.atox[param1])) || Boolean(isNaN(this.atoy[param1])))
         {
            this.ax[param1] = 0;
            this.ay[param1] = 0;
            this.atox[param1] = 0;
            this.atoy[param1] = 0;
         }
      }
      
      public function TurnMPBone(param1:int, param2:Number, param3:Number, param4:Number, param5:Number) : void
      {
         this.atox[param1] = Number(this.atox[param1]) * (1 - this.xx2) + param2 * this.xx2;
         this.atoy[param1] = Number(this.atoy[param1]) * (1 - this.xx2) + param3 * this.xx2;
         this.ax[param1] += param4 * this.xx2;
         this.ay[param1] += param5 * this.xx2;
         if(this.GET_LITE_PHYS())
         {
            this.lax[param1] += param4 * this.xx2;
            this.lay[param1] += param5 * this.xx2;
         }
         this.WakeUpAtom(param1);
      }
      
      public function TurnMPBone2(param1:int, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number) : void
      {
         var _loc7_:Number = NaN;
         var _loc8_:Number = NaN;
         _loc7_ = param2 > 0 ? Number(this.arad[param1]) : -Number(this.arad[param1]);
         _loc8_ = param3 > 0 ? Number(this.arad[param1]) : -Number(this.arad[param1]);
         if(this.TraceLineF_nopushers(this.ax[param1] + _loc7_,this.ay[param1] + _loc8_,this.MorphWithTimeScale(this.ax[param1],this.ax[param1] + param2,0.5,param6 * 4) + _loc7_,this.MorphWithTimeScale(this.ay[param1],this.ay[param1] + param3,0.5,param6 * 4) + _loc8_))
         {
            this.ax[param1] = this.MorphWithTimeScale(this.ax[param1],this.ax[param1] + param2,0.5,param6 * 4);
            this.ay[param1] = this.MorphWithTimeScale(this.ay[param1],this.ay[param1] + param3,0.5,param6 * 4);
            if(this.GET_LITE_PHYS())
            {
               this.lax[param1] = this.MorphWithTimeScale(this.lax[param1],this.lax[param1] + param2,0.5,param6 * 4);
               this.lay[param1] = this.MorphWithTimeScale(this.lay[param1],this.lay[param1] + param3,0.5,param6 * 4);
            }
         }
         else
         {
            this.atox[param1] = this.MorphWithTimeScale(this.atox[param1],param2,0.95,param6);
            this.atoy[param1] = this.MorphWithTimeScale(this.atoy[param1],param3,0.95,param6);
         }
         this.atox[param1] = this.MorphWithTimeScale(this.atox[param1],param4,0.95,param6);
         this.atoy[param1] = this.MorphWithTimeScale(this.atoy[param1],param5,0.95,param6);
         this.WakeUpAtom(param1);
      }
      
      public function TurnBone(param1:int, param2:Number, param3:Number, param4:MovieClip, param5:Number) : void
      {
         if(param5 > 0.5)
         {
            param5 = 1;
         }
         if((param5 = (param5 *= param5 * 0.5) * (param4.idd == this.MP_myid ? this.GSPEED2 : this.GSPEED)) > 1)
         {
            param5 = 1;
         }
         this.ax[param1] -= (Number(this.ax[param1]) - param2) * param5;
         this.ay[param1] -= (Number(this.ay[param1]) - param3) * param5;
         if(this.GET_LITE_PHYS())
         {
            if(param5 > 0.2)
            {
               this.lax[param1] -= (Number(this.ax[param1]) - param2) * param5;
               this.lay[param1] -= (Number(this.ay[param1]) - param3) * param5;
            }
         }
         if(param4.isplayer && (param4.idd != this.MP_myid || this.MP_spectator) && this.MP_favor_the_shooter)
         {
            this.atox[param1] -= (Number(this.ax[param1]) - param2) * param5 / 2;
            this.atoy[param1] -= (Number(this.ay[param1]) - param3) * param5 / 2;
         }
         else
         {
            this.atox[param1] -= (Number(this.ax[param1]) - param2) * param5;
            this.atoy[param1] -= (Number(this.ay[param1]) - param3) * param5;
         }
         this.atox[param1] = (Number(this.atox[param1]) * 4 + param4.tox) * 0.2;
         this.atoy[param1] = (Number(this.atoy[param1]) * 4 + param4.toy) * 0.2;
      }
      
      public function TurnBone4(param1:int, param2:Number, param3:Number, param4:Number) : void
      {
         param4 *= 0.25 * this.GSPEED;
         this.ax[param1] -= (Number(this.ax[param1]) - param2) * param4;
         this.ay[param1] -= (Number(this.ay[param1]) - param3) * param4;
         if(this.GET_LITE_PHYS())
         {
            if(param4 > 0.2)
            {
               this.lax[param1] -= (Number(this.ax[param1]) - param2) * param4;
               this.lay[param1] -= (Number(this.ay[param1]) - param3) * param4;
            }
         }
         this.atox[param1] -= (Number(this.ax[param1]) - param2) * param4;
         this.atoy[param1] -= (Number(this.ay[param1]) - param3) * param4;
      }
      
      public function TurnBone2(param1:int, param2:Number, param3:Number, param4:MovieClip, param5:Number) : void
      {
         if(param5 == 1)
         {
            this.atox[param1] = param4.tox;
            this.atoy[param1] = param4.toy;
            this.ax[param1] = param2;
            this.ay[param1] = param3;
            if(this.GET_LITE_PHYS())
            {
               this.lax[param1] = param2;
               this.lay[param1] = param3;
            }
         }
         else
         {
            if(param4.idd == this.MP_myid)
            {
               param5 *= this.GSPEED2;
            }
            else
            {
               param5 *= this.GSPEED;
            }
            this.atox[param1] = Number(this.atox[param1]) * (1 - param5) + Number(param4.tox) * param5;
            this.atoy[param1] = Number(this.atoy[param1]) * (1 - param5) + Number(param4.toy) * param5;
            this.ax[param1] = Number(this.ax[param1]) * (1 - param5) + param2 * param5;
            this.ay[param1] = Number(this.ay[param1]) * (1 - param5) + param3 * param5;
            if(this.GET_LITE_PHYS())
            {
               this.lax[param1] = Number(this.lax[param1]) * (1 - param5) + param2 * param5;
               this.lay[param1] = Number(this.lay[param1]) * (1 - param5) + param3 * param5;
            }
         }
      }
      
      public function TurnBone3(param1:int, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number) : void
      {
         this.atox[param1] = param4;
         this.atoy[param1] = param5;
         this.ax[param1] = param2;
         this.ay[param1] = param3;
         if(this.GET_LITE_PHYS())
         {
            this.lax[param1] = param2;
            this.lay[param1] = param3;
         }
      }
      
      public function PAlert(param1:Number, param2:Number) : void
      {
         this.alert_i5 = 1;
         while(this.alert_i5 < this.playerstotal)
         {
            if(this.mens[this.alert_i5].stability >= 0.3)
            {
               if(!this.mens[this.alert_i5].isplayer)
               {
                  if(this.mens[this.alert_i5].hea > 0 && this.mens[this.alert_i5].hunt == -1)
                  {
                     this.alert_tes = this.Dist2D(param1,param2,this.mens[this.alert_i5].x,this.mens[this.alert_i5].y);
                     if(this.alert_tes < 250 || this.alert_tes < this.screenX && this.TraceLine(this.mens[this.alert_i5].x,Number(this.mens[this.alert_i5].y) - 40,param1,param2))
                     {
                        if(this.mens[this.alert_i5].x > param1)
                        {
                           this.mens[this.alert_i5].side = -1;
                        }
                        else
                        {
                           this.mens[this.alert_i5].side = 1;
                        }
                        if(this.mens[this.alert_i5].botaction == 0)
                        {
                           this.mens[this.alert_i5].botaction = 3;
                        }
                     }
                  }
               }
            }
            ++this.alert_i5;
         }
      }
      
      public function UpdateAtomPathCache() : void
      {
         var _loc1_:* = undefined;
         var _loc2_:* = undefined;
         var _loc3_:* = undefined;
         var _loc4_:* = undefined;
         var _loc5_:* = undefined;
         _loc1_ = getTimer();
         _loc2_ = 0;
         while(_loc2_ < this.atotal)
         {
            _loc3_ = this.atom_pos_buffer[_loc2_];
            _loc4_ = this.ax[_loc2_];
            _loc5_ = this.ay[_loc2_];
            if(_loc3_ == undefined || _loc1_ > _loc3_.tim + 200 || this.Dist2D(_loc3_.x,_loc3_.y,_loc4_,_loc5_) > 250)
            {
               this.atom_pos_buffer[_loc2_] = _loc3_ = {
                  "x":_loc4_,
                  "y":_loc5_,
                  "lx":_loc4_,
                  "ly":_loc5_,
                  "t":_loc1_
               };
            }
            else
            {
               _loc3_.lx = _loc3_.x;
               _loc3_.ly = _loc3_.y;
               _loc3_.x = _loc4_;
               _loc3_.y = _loc5_;
               _loc3_.tim = _loc1_;
            }
            _loc2_++;
         }
      }
      
      public function CheckHit(param1:int, param2:int) : Boolean
      {
         var _loc3_:* = undefined;
         //_loc3_ = this.atom_pos_buffer[param2];
		 _loc3_ = 
		 {
			"x":this.ax[param2],
			"y":this.ay[param2],
			"lx":this.ax[param2],
			"ly":this.ay[param2],
			"t":getTimer()
		 };
         if(_loc3_ == undefined)
         {
            return false;
         }
         this.pb2Bullet.csolver_lx = this.puls[param1].lx;
         this.pb2Bullet.csolver_ly = this.puls[param1].ly;
         this.pb2Bullet.csolver_tox1 = Number(this.puls[param1].nx) - Number(this.puls[param1].lx);
         this.pb2Bullet.csolver_toy1 = Number(this.puls[param1].ny) - Number(this.puls[param1].ly);
         this.pb2Bullet.csolver_maxx = Math.max(this.puls[param1].lx,this.puls[param1].nx);
         this.pb2Bullet.csolver_minx = Math.min(this.puls[param1].lx,this.puls[param1].nx);
         this.pb2Bullet.csolver_maxy = Math.max(this.puls[param1].ly,this.puls[param1].ny);
         this.pb2Bullet.csolver_miny = Math.min(this.puls[param1].ly,this.puls[param1].ny);
         if(this.pb2Bullet.csolver_maxx + 0 < Math.min(Number(_loc3_.x) - Number(this.arad[param2]),Number(_loc3_.lx) - Number(this.arad[param2])))
         {
		    this.pb2Bullet.csolver_lx = undefined;
		    this.pb2Bullet.csolver_ly = undefined;
		    this.pb2Bullet.csolver_tox1 = undefined;
		    this.pb2Bullet.csolver_toy1 = undefined;
			 
            return false;
         }
         if(Number(this.pb2Bullet.csolver_minx) - 0 > Math.max(_loc3_.x + this.arad[param2],_loc3_.lx + this.arad[param2]))
         {
		    this.pb2Bullet.csolver_lx = undefined;
		    this.pb2Bullet.csolver_ly = undefined;
		    this.pb2Bullet.csolver_tox1 = undefined;
		    this.pb2Bullet.csolver_toy1 = undefined;
            return false;
         }
         if(this.pb2Bullet.csolver_maxy + 0 < Math.min(Number(_loc3_.y) - Number(this.arad[param2]),Number(_loc3_.ly) - Number(this.arad[param2])))
         {
		    this.pb2Bullet.csolver_lx = undefined;
		    this.pb2Bullet.csolver_ly = undefined;
		    this.pb2Bullet.csolver_tox1 = undefined;
		    this.pb2Bullet.csolver_toy1 = undefined;
			 
            return false;
         }
         if(Number(this.pb2Bullet.csolver_miny) - 0 > Math.max(_loc3_.y + this.arad[param2],_loc3_.ly + this.arad[param2]))
         {
		    this.pb2Bullet.csolver_lx = undefined;
		    this.pb2Bullet.csolver_ly = undefined;
		    this.pb2Bullet.csolver_tox1 = undefined;
		    this.pb2Bullet.csolver_toy1 = undefined;
			 
            return false;
         }
         return this.pb2Bullet._MovingSphereIntersection(_loc3_.x,_loc3_.y,_loc3_.lx,_loc3_.ly,this.arad[param2]);
      }
      
      public function TraceLine(param1:Number, param2:Number, param3:Number, param4:Number) : Boolean
      {
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.boxestotal + this.doorstotal; ++this.tracer_i4)
         {
            if(this.tracer_i4 < this.boxestotal)
            {
               this.a_rectangleMinX = this.boxx[this.tracer_i4];
               this.a_rectangleMinY = this.boxy[this.tracer_i4];
               this.a_rectangleMaxX = this.boxx[this.tracer_i4] + this.boxw[this.tracer_i4];
               this.a_rectangleMaxY = this.boxy[this.tracer_i4] + this.boxh[this.tracer_i4];
            }
            else
            {
               this.a_rectangleMinX = this.doors[this.tracer_i4 - this.boxestotal].x;
               this.a_rectangleMinY = this.doors[this.tracer_i4 - this.boxestotal].y;
               this.a_rectangleMaxX = this.doors[this.tracer_i4 - this.boxestotal].x + this.doors[this.tracer_i4 - this.boxestotal].w;
               this.a_rectangleMaxY = this.doors[this.tracer_i4 - this.boxestotal].y + this.doors[this.tracer_i4 - this.boxestotal].h;
            }
            if(param1 < this.a_rectangleMinX)
            {
               if(param3 < this.a_rectangleMinX)
               {
                  continue;
               }
            }
            if(param1 > this.a_rectangleMaxX)
            {
               if(param3 > this.a_rectangleMaxX)
               {
                  continue;
               }
            }
            if(param2 < this.a_rectangleMinY)
            {
               if(param4 < this.a_rectangleMinY)
               {
                  continue;
               }
            }
            if(param2 > this.a_rectangleMaxY)
            {
               if(param4 > this.a_rectangleMaxY)
               {
                  continue;
               }
            }
            if(param1 > param3)
            {
               this.minX = param3;
               this.maxX = param1;
            }
            else
            {
               this.minX = param1;
               this.maxX = param3;
            }
            if(this.maxX > this.a_rectangleMaxX)
            {
               this.maxX = this.a_rectangleMaxX;
            }
            if(this.minX < this.a_rectangleMinX)
            {
               this.minX = this.a_rectangleMinX;
            }
            this.minY = param2;
            this.maxY = param4;
            this.dx = param3 - param1;
            if(this.Math_abs(this.dx) > 1e-7)
            {
               var a:Number = (param4 - param2) / this.dx;
               this.b = param2 - Number(a) * param1;
               this.minY = Number(a) * this.minX + this.b;
               this.maxY = Number(a) * this.maxX + this.b;
            }
            if(this.minY > this.maxY)
            {
               this.tmp2 = this.maxY;
               this.maxY = this.minY;
               this.minY = this.tmp2;
            }
            if(this.maxY > this.a_rectangleMaxY)
            {
               this.maxY = this.a_rectangleMaxY;
            }
            if(this.minY < this.a_rectangleMinY)
            {
               this.minY = this.a_rectangleMinY;
            }
            if(this.minX <= this.maxX)
            {
               if(this.minY <= this.maxY)
               {
                  return false;
               }
            }
         }
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.atotal; ++this.tracer_i4)
         {
            if(this.aio[this.tracer_i4] != -1)
            {
               if(this.arad[this.tracer_i4] > 40)
               {
                  if(this.aof[this.tracer_i4] <= -200 && this.aof[this.tracer_i4] > -300 && Boolean(this.vehicles[-200 - Number(this.aof[this.tracer_i4])].dead))
                  {
                     if(this.vehicles[-200 - Number(this.aof[this.tracer_i4])].io)
                     {
                        this.a_rectangleMinX = Number(this.ax[this.tracer_i4]) - Number(this.arad[this.tracer_i4]);
                        if(param1 < this.a_rectangleMinX)
                        {
                           if(param3 < this.a_rectangleMinX)
                           {
                              continue;
                           }
                        }
                        this.a_rectangleMaxX = this.ax[this.tracer_i4] + this.arad[this.tracer_i4];
                        if(param1 > this.a_rectangleMaxX)
                        {
                           if(param3 > this.a_rectangleMaxX)
                           {
                              continue;
                           }
                        }
                        this.a_rectangleMinY = Number(this.ay[this.tracer_i4]) - Number(this.arad[this.tracer_i4]);
                        if(param2 < this.a_rectangleMinY)
                        {
                           if(param4 < this.a_rectangleMinY)
                           {
                              continue;
                           }
                        }
                        this.a_rectangleMaxY = this.ay[this.tracer_i4] + this.arad[this.tracer_i4];
                        if(param2 > this.a_rectangleMaxY)
                        {
                           if(param4 > this.a_rectangleMaxY)
                           {
                              continue;
                           }
                        }
                        if(param1 > param3)
                        {
                           this.minX = param3;
                           this.maxX = param1;
                        }
                        else
                        {
                           this.minX = param1;
                           this.maxX = param3;
                        }
                        if(this.maxX > this.a_rectangleMaxX)
                        {
                           this.maxX = this.a_rectangleMaxX;
                        }
                        if(this.minX < this.a_rectangleMinX)
                        {
                           this.minX = this.a_rectangleMinX;
                        }
                        this.minY = param2;
                        this.maxY = param4;
                        this.dx = param3 - param1;
                        if(this.Math_abs(this.dx) > 1e-7)
                        {
                           a = (param4 - param2) / this.dx;
                           this.b = param2 - Number(a) * param1;
                           this.minY = Number(a) * this.minX + this.b;
                           this.maxY = Number(a) * this.maxX + this.b;
                        }
                        if(this.minY > this.maxY)
                        {
                           this.tmp2 = this.maxY;
                           this.maxY = this.minY;
                           this.minY = this.tmp2;
                        }
                        if(this.maxY > this.a_rectangleMaxY)
                        {
                           this.maxY = this.a_rectangleMaxY;
                        }
                        if(this.minY < this.a_rectangleMinY)
                        {
                           this.minY = this.a_rectangleMinY;
                        }
                        if(this.minX <= this.maxX)
                        {
                           if(this.minY <= this.maxY)
                           {
                              return false;
                           }
                        }
                     }
                  }
               }
            }
         }
         return true;
      }
      
      public function TraceLineF_nopushers(param1:Number, param2:Number, param3:Number, param4:Number) : Boolean
      {
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.boxestotal + this.doorstotal; ++this.tracer_i4)
         {
            if(this.tracer_i4 < this.boxestotal)
            {
               this.a_rectangleMinX = this.boxx[this.tracer_i4];
               this.a_rectangleMinY = this.boxy[this.tracer_i4];
               this.a_rectangleMaxX = this.boxx[this.tracer_i4] + this.boxw[this.tracer_i4];
               this.a_rectangleMaxY = this.boxy[this.tracer_i4] + this.boxh[this.tracer_i4];
            }
            else
            {
               this.a_rectangleMinX = this.doors[this.tracer_i4 - this.boxestotal].x;
               this.a_rectangleMinY = this.doors[this.tracer_i4 - this.boxestotal].y;
               this.a_rectangleMaxX = this.doors[this.tracer_i4 - this.boxestotal].x + this.doors[this.tracer_i4 - this.boxestotal].w;
               this.a_rectangleMaxY = this.doors[this.tracer_i4 - this.boxestotal].y + this.doors[this.tracer_i4 - this.boxestotal].h;
            }
            if(param1 < this.a_rectangleMinX)
            {
               if(param3 < this.a_rectangleMinX)
               {
                  continue;
               }
            }
            if(param1 > this.a_rectangleMaxX)
            {
               if(param3 > this.a_rectangleMaxX)
               {
                  continue;
               }
            }
            if(param2 < this.a_rectangleMinY)
            {
               if(param4 < this.a_rectangleMinY)
               {
                  continue;
               }
            }
            if(param2 > this.a_rectangleMaxY)
            {
               if(param4 > this.a_rectangleMaxY)
               {
                  continue;
               }
            }
            if(param1 > param3)
            {
               this.minX = param3;
               this.maxX = param1;
            }
            else
            {
               this.minX = param1;
               this.maxX = param3;
            }
            if(this.maxX > this.a_rectangleMaxX)
            {
               this.maxX = this.a_rectangleMaxX;
            }
            if(this.minX < this.a_rectangleMinX)
            {
               this.minX = this.a_rectangleMinX;
            }
            this.minY = param2;
            this.maxY = param4;
            this.dx = param3 - param1;
            if(this.Math_abs(this.dx) > 1e-7)
            {
               var a:Number = (param4 - param2) / this.dx;
               this.b = param2 - Number(a) * param1;
               this.minY = Number(a) * this.minX + this.b;
               this.maxY = Number(a) * this.maxX + this.b;
            }
            if(this.minY > this.maxY)
            {
               this.tmp2 = this.maxY;
               this.maxY = this.minY;
               this.minY = this.tmp2;
            }
            if(this.maxY > this.a_rectangleMaxY)
            {
               this.maxY = this.a_rectangleMaxY;
            }
            if(this.minY < this.a_rectangleMinY)
            {
               this.minY = this.a_rectangleMinY;
            }
            if(this.minX <= this.maxX)
            {
               if(this.minY <= this.maxY)
               {
                  return false;
               }
            }
         }
         return true;
      }
      
      public function TraceLineF(param1:Number, param2:Number, param3:Number, param4:Number) : Boolean
      {
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.boxestotal + this.doorstotal + this.pushstotal; ++this.tracer_i4)
         {
            if(this.tracer_i4 < this.boxestotal)
            {
               this.a_rectangleMinX = this.boxx[this.tracer_i4];
               this.a_rectangleMinY = this.boxy[this.tracer_i4];
               this.a_rectangleMaxX = this.boxx[this.tracer_i4] + this.boxw[this.tracer_i4];
               this.a_rectangleMaxY = this.boxy[this.tracer_i4] + this.boxh[this.tracer_i4];
            }
            else if(this.tracer_i4 - this.boxestotal < this.doorstotal)
            {
               this.a_rectangleMinX = this.doors[this.tracer_i4 - this.boxestotal].x;
               this.a_rectangleMinY = this.doors[this.tracer_i4 - this.boxestotal].y;
               this.a_rectangleMaxX = this.doors[this.tracer_i4 - this.boxestotal].x + this.doors[this.tracer_i4 - this.boxestotal].w;
               this.a_rectangleMaxY = this.doors[this.tracer_i4 - this.boxestotal].y + this.doors[this.tracer_i4 - this.boxestotal].h;
            }
            else
            {
               this.a_rectangleMinX = this.pushx[this.tracer_i4 - this.boxestotal - this.doorstotal];
               this.a_rectangleMinY = this.pushy[this.tracer_i4 - this.boxestotal - this.doorstotal];
               this.a_rectangleMaxX = this.pushw[this.tracer_i4 - this.boxestotal - this.doorstotal];
               this.a_rectangleMaxY = this.pushh[this.tracer_i4 - this.boxestotal - this.doorstotal];
            }
            if(param1 < this.a_rectangleMinX)
            {
               if(param3 < this.a_rectangleMinX)
               {
                  continue;
               }
            }
            if(param1 > this.a_rectangleMaxX)
            {
               if(param3 > this.a_rectangleMaxX)
               {
                  continue;
               }
            }
            if(param2 < this.a_rectangleMinY)
            {
               if(param4 < this.a_rectangleMinY)
               {
                  continue;
               }
            }
            if(param2 > this.a_rectangleMaxY)
            {
               if(param4 > this.a_rectangleMaxY)
               {
                  continue;
               }
            }
            if(param1 > param3)
            {
               this.minX = param3;
               this.maxX = param1;
            }
            else
            {
               this.minX = param1;
               this.maxX = param3;
            }
            if(this.maxX > this.a_rectangleMaxX)
            {
               this.maxX = this.a_rectangleMaxX;
            }
            if(this.minX < this.a_rectangleMinX)
            {
               this.minX = this.a_rectangleMinX;
            }
            this.minY = param2;
            this.maxY = param4;
            this.dx = param3 - param1;
            if(this.Math_abs(this.dx) > 1e-7)
            {
               var a:Number = (param4 - param2) / this.dx;
               this.b = param2 - Number(a) * param1;
               this.minY = Number(a) * this.minX + this.b;
               this.maxY = Number(a) * this.maxX + this.b;
            }
            if(this.minY > this.maxY)
            {
               this.tmp2 = this.maxY;
               this.maxY = this.minY;
               this.minY = this.tmp2;
            }
            if(this.maxY > this.a_rectangleMaxY)
            {
               this.maxY = this.a_rectangleMaxY;
            }
            if(this.minY < this.a_rectangleMinY)
            {
               this.minY = this.a_rectangleMinY;
            }
            if(this.minX <= this.maxX)
            {
               if(this.minY <= this.maxY)
               {
                  return false;
               }
            }
         }
         return true;
      }
      
      public function TraceLine_no_doors(param1:Number, param2:Number, param3:Number, param4:Number) : Boolean
      {
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.boxestotal; ++this.tracer_i4)
         {
            this.a_rectangleMinX = this.boxx[this.tracer_i4];
            if(param1 < this.a_rectangleMinX)
            {
               if(param3 < this.a_rectangleMinX)
               {
                  continue;
               }
            }
            this.a_rectangleMaxX = this.boxx[this.tracer_i4] + this.boxw[this.tracer_i4];
            if(param1 > this.a_rectangleMaxX)
            {
               if(param3 > this.a_rectangleMaxX)
               {
                  continue;
               }
            }
            this.a_rectangleMinY = this.boxy[this.tracer_i4];
            if(param2 < this.a_rectangleMinY)
            {
               if(param4 < this.a_rectangleMinY)
               {
                  continue;
               }
            }
            this.a_rectangleMaxY = this.boxy[this.tracer_i4] + this.boxh[this.tracer_i4];
            if(param2 > this.a_rectangleMaxY)
            {
               if(param4 > this.a_rectangleMaxY)
               {
                  continue;
               }
            }
            if(param1 > param3)
            {
               this.minX = param3;
               this.maxX = param1;
            }
            else
            {
               this.minX = param1;
               this.maxX = param3;
            }
            if(this.maxX > this.a_rectangleMaxX)
            {
               this.maxX = this.a_rectangleMaxX;
            }
            if(this.minX < this.a_rectangleMinX)
            {
               this.minX = this.a_rectangleMinX;
            }
            this.minY = param2;
            this.maxY = param4;
            this.dx = param3 - param1;
            if(this.Math_abs(this.dx) > 1e-7)
            {
               var a:Number = (param4 - param2) / this.dx;
               this.b = param2 - Number(a) * param1;
               this.minY = Number(a) * this.minX + this.b;
               this.maxY = Number(a) * this.maxX + this.b;
            }
            if(this.minY > this.maxY)
            {
               this.tmp2 = this.maxY;
               this.maxY = this.minY;
               this.minY = this.tmp2;
            }
            if(this.maxY > this.a_rectangleMaxY)
            {
               this.maxY = this.a_rectangleMaxY;
            }
            if(this.minY < this.a_rectangleMinY)
            {
               this.minY = this.a_rectangleMinY;
            }
            if(this.minX <= this.maxX)
            {
               if(this.minY <= this.maxY)
               {
                  return false;
               }
            }
         }
         return true;
      }
      
      public function TraceAllyLine(param1:int, param2:Number, param3:Number, param4:Number, param5:Number) : Boolean
      {
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.playerstotal; ++this.tracer_i4)
         {
            if(this.tracer_i4 != param1)
            {
               if(this.mens[param1].team == this.mens[this.tracer_i4].team && this.mens[param1].team != 0 && !this.PRO_BOTS)
               {
                  if(this.tracer_i4 != this.mens[param1].hunt)
                  {
                     if(param1 != this.mens[this.tracer_i4].hunt)
                     {
                        if(!this.mens[this.tracer_i4].dying)
                        {
                           this.a_rectangleMinX = Number(this.mens[this.tracer_i4].x) - Math.abs(this.mens[this.tracer_i4].tox) - 10 - 20;
                           this.a_rectangleMinY = Number(this.mens[this.tracer_i4].y) - Math.abs(this.mens[this.tracer_i4].toy) - 82 - 20;
                           this.a_rectangleMaxX = this.mens[this.tracer_i4].x + Math.abs(this.mens[this.tracer_i4].tox) + 10 + 20;
                           this.a_rectangleMaxY = this.mens[this.tracer_i4].y + Math.abs(this.mens[this.tracer_i4].toy) - Number(this.mens[this.tracer_i4].sit) * this.sitmax + 50;
                           if(param2 < this.a_rectangleMinX)
                           {
                              if(param4 < this.a_rectangleMinX)
                              {
                                 continue;
                              }
                           }
                           if(param2 > this.a_rectangleMaxX)
                           {
                              if(param4 > this.a_rectangleMaxX)
                              {
                                 continue;
                              }
                           }
                           if(param3 < this.a_rectangleMinY)
                           {
                              if(param5 < this.a_rectangleMinY)
                              {
                                 continue;
                              }
                           }
                           if(param3 > this.a_rectangleMaxY)
                           {
                              if(param5 > this.a_rectangleMaxY)
                              {
                                 continue;
                              }
                           }
                           if(param2 > param4)
                           {
                              this.minX = param4;
                              this.maxX = param2;
                           }
                           else
                           {
                              this.minX = param2;
                              this.maxX = param4;
                           }
                           if(this.maxX > this.a_rectangleMaxX)
                           {
                              this.maxX = this.a_rectangleMaxX;
                           }
                           if(this.minX < this.a_rectangleMinX)
                           {
                              this.minX = this.a_rectangleMinX;
                           }
                           this.minY = param3;
                           this.maxY = param5;
                           this.dx = param4 - param2;
                           if(this.Math_abs(this.dx) > 1e-7)
                           {
                              var a:Number = (param5 - param3) / this.dx;
                              this.b = param3 - Number(a) * param2;
                              this.minY = Number(a) * this.minX + this.b;
                              this.maxY = Number(a) * this.maxX + this.b;
                           }
                           if(this.minY > this.maxY)
                           {
                              this.tmp2 = this.maxY;
                              this.maxY = this.minY;
                              this.minY = this.tmp2;
                           }
                           if(this.maxY > this.a_rectangleMaxY)
                           {
                              this.maxY = this.a_rectangleMaxY;
                           }
                           if(this.minY < this.a_rectangleMinY)
                           {
                              this.minY = this.a_rectangleMinY;
                           }
                           if(this.minX <= this.maxX)
                           {
                              if(this.minY <= this.maxY)
                              {
                                 return false;
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.barrelstotal; ++this.tracer_i4)
         {
            this.tracer_ok = false;
            this.tracer_i5 = 0;
            while(this.tracer_i5 < this.playerstotal && !this.tracer_ok)
            {
               if(this.mens[this.tracer_i5].io)
               {
                  if(this.mens[param1].team == this.mens[this.tracer_i5].team && this.mens[param1].team != 0)
                  {
                     if(this.tracer_i5 != this.mens[param1].hunt)
                     {
                        if(param1 != this.mens[this.tracer_i5].hunt)
                        {
                           if(!this.mens[this.tracer_i5].dying)
                           {
                              if(this.Dist2D(this.mens[this.tracer_i5].x,this.mens[this.tracer_i5].y,this.barrels[this.tracer_i4].x,this.barrels[this.tracer_i4].y) < 150)
                              {
                                 this.tracer_ok = true;
                              }
                           }
                        }
                     }
                  }
               }
               ++this.tracer_i5;
            }
            if(this.tracer_ok)
            {
               if(this.barrels[this.tracer_i4].hea > 0)
               {
                  this.a_rectangleMinX = Number(this.barrels[this.tracer_i4].x) - 30;
                  this.a_rectangleMinY = Number(this.barrels[this.tracer_i4].y) - 30;
                  this.a_rectangleMaxX = this.barrels[this.tracer_i4].x + 30;
                  this.a_rectangleMaxY = this.barrels[this.tracer_i4].y + 30;
                  if(param2 < this.a_rectangleMinX)
                  {
                     if(param4 < this.a_rectangleMinX)
                     {
                        continue;
                     }
                  }
                  if(param2 > this.a_rectangleMaxX)
                  {
                     if(param4 > this.a_rectangleMaxX)
                     {
                        continue;
                     }
                  }
                  if(param3 < this.a_rectangleMinY)
                  {
                     if(param5 < this.a_rectangleMinY)
                     {
                        continue;
                     }
                  }
                  if(param3 > this.a_rectangleMaxY)
                  {
                     if(param5 > this.a_rectangleMaxY)
                     {
                        continue;
                     }
                  }
                  if(param2 > param4)
                  {
                     this.minX = param4;
                     this.maxX = param2;
                  }
                  else
                  {
                     this.minX = param2;
                     this.maxX = param4;
                  }
                  if(this.maxX > this.a_rectangleMaxX)
                  {
                     this.maxX = this.a_rectangleMaxX;
                  }
                  if(this.minX < this.a_rectangleMinX)
                  {
                     this.minX = this.a_rectangleMinX;
                  }
                  this.minY = param3;
                  this.maxY = param5;
                  this.dx = param4 - param2;
                  if(this.Math_abs(this.dx) > 1e-7)
                  {
                     a = (param5 - param3) / this.dx;
                     this.b = param3 - Number(a) * param2;
                     this.minY = Number(a) * this.minX + this.b;
                     this.maxY = Number(a) * this.maxX + this.b;
                  }
                  if(this.minY > this.maxY)
                  {
                     this.tmp2 = this.maxY;
                     this.maxY = this.minY;
                     this.minY = this.tmp2;
                  }
                  if(this.maxY > this.a_rectangleMaxY)
                  {
                     this.maxY = this.a_rectangleMaxY;
                  }
                  if(this.minY < this.a_rectangleMinY)
                  {
                     this.minY = this.a_rectangleMinY;
                  }
                  if(this.minX <= this.maxX)
                  {
                     if(this.minY <= this.maxY)
                     {
                        return false;
                     }
                  }
               }
            }
         }
         return true;
      }
      
      public function UpdateCurGun() : void
      {
         if(this.mens[this.MP_myid].char == 1 || this.mens[this.MP_myid].char >= 40 && this.mens[this.MP_myid].char <= 49)
         {
            if(this.mens[this.MP_myid].curwea > 0)
            {
               this.curA = this.guns[this.mens[this.MP_myid].curwea].model;
			   
            }
            else
            {
               this.curA = "swords";
            }
			
         }
         if(this.mens[this.MP_myid].char == 3)
         {
            if(this.mens[this.MP_myid].curwea > 0)
            {
               this.curB = this.guns[this.mens[this.MP_myid].curwea].model;
            }
            else
            {
               this.curB = "swords";
            }
         }
      }
      
      public function CheckCross(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number, param7:Number, param8:Number, param9:int) : Boolean
      {
         if(this.DEBUG_MODE)
         {
            this.debug_screen.graphics.lineStyle(4,0);
            this.debug_screen.graphics.moveTo(param1,param2);
            this.debug_screen.graphics.lineTo(param3,param4);
            this.debug_screen.graphics.moveTo(param5,param6);
            this.debug_screen.graphics.lineTo(param7,param8);
            this.debug_screen.graphics.lineStyle(2,85);
            this.debug_screen.graphics.moveTo(param1,param2);
            this.debug_screen.graphics.lineTo(param3,param4);
            this.debug_screen.graphics.moveTo(param5,param6);
            this.debug_screen.graphics.lineTo(param7,param8);
         }
		 
         this.v = ((param1 - param3) * (param6 - param4) + (param2 - param4) * (param3 - param5)) / ((param2 - param4) * (param7 - param5) - (param1 - param3) * (param8 - param6));
         this.retux = param5 + (param7 - param5) * this.v;
         this.retuy = param6 + (param8 - param6) * this.v;
         if((param3 < param1 ? param3 : param1) - 1 <= this.retux)
         {
            if((param3 > param1 ? param3 : param1) + 1 >= this.retux)
            {
               if((param4 < param2 ? param4 : param2) - 1 <= this.retuy)
               {
                  if((param4 > param2 ? param4 : param2) + 1 >= this.retuy)
                  {
                     if((param5 < param7 ? param5 : param7) - 1 <= this.retux)
                     {
                        if((param5 > param7 ? param5 : param7) + 1 >= this.retux)
                        {
                           if((param6 < param8 ? param6 : param8) - 1 <= this.retuy)
                           {
                              if((param6 > param8 ? param6 : param8) + 1 >= this.retuy)
                              {
                                 if(this.DEBUG_MODE)
                                 {
                                    this.debug_screen.graphics.lineStyle(4,0);
                                    this.debug_screen.graphics.moveTo(param1,param2);
                                    this.debug_screen.graphics.lineTo(param3,param4);
                                    this.debug_screen.graphics.moveTo(param5,param6);
                                    this.debug_screen.graphics.lineTo(param7,param8);
                                    this.debug_screen.graphics.lineStyle(2,255);
                                    this.debug_screen.graphics.moveTo(param1,param2);
                                    this.debug_screen.graphics.lineTo(param3,param4);
                                    this.debug_screen.graphics.moveTo(param5,param6);
									this.debug_screen.graphics.lineTo(param7,param8);
                                 }
                                 return true;
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
         return false;
      }
      
      public function CheckCrossSimple(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number, param7:Number, param8:Number) : Boolean
      {
         this.v = ((param1 - param3) * (param6 - param4) + (param2 - param4) * (param3 - param5)) / ((param2 - param4) * (param7 - param5) - (param1 - param3) * (param8 - param6));
         this.retux = param5 + (param7 - param5) * this.v;
         this.retuy = param6 + (param8 - param6) * this.v;
         if((param3 < param1 ? param3 : param1) - 1 <= this.retux)
         {
            if((param3 > param1 ? param3 : param1) + 1 >= this.retux)
            {
               if((param4 < param2 ? param4 : param2) - 1 <= this.retuy)
               {
                  if((param4 > param2 ? param4 : param2) + 1 >= this.retuy)
                  {
                     if((param5 < param7 ? param5 : param7) - 1 <= this.retux)
                     {
                        if((param5 > param7 ? param5 : param7) + 1 >= this.retux)
                        {
                           if((param6 < param8 ? param6 : param8) - 1 <= this.retuy)
                           {
                              if((param6 > param8 ? param6 : param8) + 1 >= this.retuy)
                              {
                                 return true;
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
         return false;
      }
      
      public function CheckCrossSimpleOpti(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number, param7:Number, param8:Number) : Boolean
      {
         if((param1 > param3 ? param1 : param3) >= (param5 < param7 ? param5 : param7))
         {
            if((param1 < param3 ? param1 : param3) <= (param5 > param7 ? param5 : param7))
            {
               if((param2 > param4 ? param2 : param4) >= (param6 < param8 ? param6 : param8))
               {
                  if((param2 < param4 ? param2 : param4) <= (param6 > param8 ? param6 : param8))
                  {
                     this.v = ((param1 - param3) * (param6 - param4) + (param2 - param4) * (param3 - param5)) / ((param2 - param4) * (param7 - param5) - (param1 - param3) * (param8 - param6));
                     this.retux = param5 + (param7 - param5) * this.v;
                     this.retuy = param6 + (param8 - param6) * this.v;
                     if((param3 < param1 ? param3 : param1) - 1 <= this.retux)
                     {
                        if((param3 > param1 ? param3 : param1) + 1 >= this.retux)
                        {
                           if((param4 < param2 ? param4 : param2) - 1 <= this.retuy)
                           {
                              if((param4 > param2 ? param4 : param2) + 1 >= this.retuy)
                              {
                                 if((param5 < param7 ? param5 : param7) - 1 <= this.retux)
                                 {
                                    if((param5 > param7 ? param5 : param7) + 1 >= this.retux)
                                    {
                                       if((param6 < param8 ? param6 : param8) - 1 <= this.retuy)
                                       {
                                          if((param6 > param8 ? param6 : param8) + 1 >= this.retuy)
                                          {
                                             return true;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
         return false;
      }
      
      public function TracePoint(param1:Number, param2:Number) : Boolean
      {
         for each(this.i2 in this.GetNearBoxBSP_at(param1,param2))
         {
            if(param1 >= this.boxx[this.i2])
            {
               if(param1 <= this.boxx[this.i2] + this.boxw[this.i2])
               {
                  if(param2 >= this.boxy[this.i2])
                  {
                     if(param2 <= this.boxy[this.i2] + this.boxh[this.i2])
                     {
                        return false;
                     }
                  }
               }
            }
         }
         this.i2 = 0;
         while(this.i2 < this.doorstotal)
         {
            if(param1 >= this.doors[this.i2].x)
            {
               if(param1 <= this.doors[this.i2].x + this.doors[this.i2].w)
               {
                  if(param2 >= this.doors[this.i2].y)
                  {
                     if(param2 <= this.doors[this.i2].y + this.doors[this.i2].h)
                     {
                        return false;
                     }
                  }
               }
            }
            ++this.i2;
         }
         if(this.RAGDOLL_COLLIDE)
         {
            this.i2 = 0;
            while(this.i2 < this.atotal)
            {
               if(this.arad[this.i2] > 5)
               {
                  if(this.aio[this.i2] == true || this.aio[this.i2] == false)
                  {
                     if(param1 > Number(this.ax[this.i2]) - Number(this.arad[this.i2]))
                     {
                        if(param1 < this.ax[this.i2] + this.arad[this.i2])
                        {
                           if(param2 > Number(this.ay[this.i2]) - Number(this.arad[this.i2]))
                           {
                              if(param2 < this.ay[this.i2] + this.arad[this.i2])
                              {
                                 return false;
                              }
                           }
                        }
                     }
                  }
               }
               ++this.i2;
            }
         }
         return true;
      }
      
      public function TracePointOnlyBoxes(param1:Number, param2:Number) : Boolean
      {
         for each(this.tracep in this.GetNearBoxBSP_at(param1,param2))
         {
            if(param1 >= this.boxx[this.tracep])
            {
               if(param1 <= this.boxx[this.tracep] + this.boxw[this.tracep])
               {
                  if(param2 >= this.boxy[this.tracep])
                  {
                     if(param2 <= this.boxy[this.tracep] + this.boxh[this.tracep])
                     {
                        return false;
                     }
                  }
               }
            }
         }
         return true;
      }
      
      public function TracePointNoRagdolls(param1:Number, param2:Number) : Boolean
      {
         for each(this.i3 in this.GetNearBoxBSP_at(param1,param2))
         {
            if(param1 >= this.boxx[this.i3])
            {
               if(param1 <= this.boxx[this.i3] + this.boxw[this.i3])
               {
                  if(param2 >= this.boxy[this.i3])
                  {
                     if(param2 <= this.boxy[this.i3] + this.boxh[this.i3])
                     {
                        return false;
                     }
                  }
               }
            }
         }
         this.i3 = 0;
         while(this.i3 < this.doorstotal)
         {
            if(param1 >= this.doors[this.i3].x)
            {
               if(param1 <= this.doors[this.i3].x + this.doors[this.i3].w)
               {
                  if(param2 >= this.doors[this.i3].y)
                  {
                     if(param2 <= this.doors[this.i3].y + this.doors[this.i3].h)
                     {
                        return false;
                     }
                  }
               }
            }
            ++this.i3;
         }
         return true;
      }
      
      public function RedrawPsi(param1:int) : void
      {
         if(this.mens[param1].notspawned)
         {
            return;
         }
         if(param1 >= 0)
         {
            if(this.mens[param1].hea > 0)
            {
               if(this.mens[param1].curwea == -1)
               {
                  if(this.EASY_MODE && this.mens[param1].team != this.mens[this.MP_myid].team && this.mens[param1].dying || this.NO_PSI)
                  {
                     this.mens[param1].arm1.lower.psi.visible = false;
                     this.mens[param1].arm2.lower.psi.visible = false;
                  }
                  else
                  {
                     this.mens[param1].arm1.lower.psi.visible = true;
                     this.mens[param1].arm2.lower.psi.visible = true;
                  }
               }
               else
               {
                  this.mens[param1].arm1.lower.psi.visible = false;
                  this.mens[param1].arm2.lower.psi.visible = false;
               }
            }
            else
            {
               this.mens[param1].arm1.lower.psi.visible = false;
               this.mens[param1].arm2.lower.psi.visible = false;
            }
            this.mens[param1].head.scaleX = Number(this.mens[param1].side) * Number(this.mens[param1].scale);
            this.mens[param1].head.scaleY = this.mens[param1].scale;
            this.mens[param1].body.scaleX = Number(this.mens[param1].side) * Number(this.mens[param1].scale);
            this.mens[param1].body.scaleY = this.mens[param1].scale;
            this.mens[param1].arm1.scaleX = Number(this.mens[param1].side) * Number(this.mens[param1].scale);
            this.mens[param1].arm1.scaleY = this.mens[param1].scale;
            this.mens[param1].arm2.scaleX = Number(this.mens[param1].side) * Number(this.mens[param1].scale);
            this.mens[param1].arm2.scaleY = this.mens[param1].scale;
            this.mens[param1].leg1.scaleX = Number(this.mens[param1].side) * Number(this.mens[param1].scale);
            this.mens[param1].leg1.scaleY = this.mens[param1].scale;
            this.mens[param1].leg2.scaleX = Number(this.mens[param1].side) * Number(this.mens[param1].scale);
            this.mens[param1].leg2.scaleY = this.mens[param1].scale;
            this.mens[param1].toe.scaleX = Number(this.mens[param1].side) * Number(this.mens[param1].scale);
            this.mens[param1].toe.scaleY = this.mens[param1].scale;
         }
      }
      
      public function ChangedGun(param1:int) : void
      {
         if(param1 >= 0)
         {
            if(this.mens[param1].hea > 0)
            {
               this.mens[param1].wep_pause = 1;
               if(param1 == this.MP_myid)
               {
                  this.UpdateWeps();
               }
            }
            this.RedrawPsi(param1);
         }
      }
      
      public function ChatNewMsg(param1:String) : void
      {
		 // CHATNEWMSG FIX THIS SOON
         if(param1.toLowerCase().indexOf("<img ") != -1 || param1.toLowerCase().indexOf("<a ") != -1)
         {
            param1 = "&lt; Unsupported tag in message &gt;";
         }
         this.chat_i2 = 0;
         this.chat_i = 1;
         while(this.chat_i < 11)
         {
            if(this.gamechatbox2["item" + this.chat_i].y < this.gamechatbox2["item" + this.chat_i2].y)
            {
               this.chat_i2 = this.chat_i;
            }
            ++this.chat_i;
         }
         this.chat_i3 = 0;
         this.chat_i = 1;
         while(this.chat_i < 11)
         {
            if(this.gamechatbox2["item" + this.chat_i].y > this.gamechatbox2["item" + this.chat_i3].y)
            {
               this.chat_i3 = this.chat_i;
            }
            ++this.chat_i;
         }
         this.gamechatbox2["item" + this.chat_i2].y = this.gamechatbox2["item" + this.chat_i3].y + 19;
         this.gamechatbox2["item" + this.chat_i2].visible = true;
         this.gamechatbox2["item" + this.chat_i2].alpha = 1;
         this.gamechatbox2["item" + this.chat_i2].timer = 300;
         this.gamechatbox2["item" + this.chat_i2].txt.htmlText = "<b>" + param1 + "</b>";
         if(this.gamechatbox2["item" + this.chat_i2].y > 38)
         {
            this.chat_xx = this.gamechatbox2["item" + this.chat_i2].y;
            this.chat_i = 0;
            while(this.chat_i < 11)
            {
               this.gamechatbox2["item" + this.chat_i].y -= this.chat_xx;
               ++this.chat_i;
            }
         }
      }
      
      public function CompressChat() : void
      {
         if(this.gamechatbox_text.length > 200)
         {
            if(this.gamechatbox_text.lastIndexOf("<br>",this.gamechatbox_text.length - 200) != -1)
            {
               this.gamechatbox_text = this.gamechatbox_text.slice(this.gamechatbox_text.lastIndexOf("<br>",this.gamechatbox_text.length - 200),this.gamechatbox_text.length);
            }
         }
      }
      
      public function GotoMap(param1:String) : void
      {
         this.NextMapTemp = param1;
         this.CUR_LOADING = param1;
         this.mupd.visible = true;
         this.mupd.ttt.gotoAndPlay(1);
         if(this.CACHED_MAPS[this.CUR_LOADING] != undefined)
         {
			this.SaveGame();
            this.UseLoadedMapData(this.CACHED_MAPS[this.CUR_LOADING]);
         }
         else
         {
			try
			{
				Security.allowDomain("https://www.plazmaburst2.com");
			}
			catch(e:*)
			{
			}
			try
			{
				Security.loadPolicyFile("https://www.plazmaburst2.com/crossdomain.xml");
			}
			catch(e:*)
			{
			}
            this.myRequest = new URLRequest("https://www.plazmaburst2.com/pb2/server.php");
            this.myVariables = new URLVariables();
            this.myVariables.l = "";
            this.myVariables.p = "";
            this.myVariables.rq = "cmap";
            this.myVariables.cmap = param1;
            this.myVariables.qpack = "1.0";
            if(this.DEBUG_MODE)
            {
            }
            this.myRequest.method = URLRequestMethod.POST;
            this.myRequest.data = this.myVariables;
            this.myLoader.addEventListener(Event.COMPLETE,this.GotoMap_done);
            this.myLoader.addEventListener(IOErrorEvent.IO_ERROR,this.GotoMap_failed);
            this.myLoader.load(this.myRequest);
         }
      }
      
      public function GotoMap_failed(param1:IOErrorEvent) : void
      {
         this.myLoader.removeEventListener(Event.COMPLETE,this.GotoMap_done);
         this.myLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.GotoMap_failed);
         if(currentLabel == "difch" || currentLabel == "menu")
         {
            if(this.DEBUG_MODE)
            {
            }
            ++this.GET_TRIES;
            if(this.GET_TRIES < 3)
            {
               this.GotoMap(this.NextMapTemp);
            }
            else if(this.CACHED_MAPS[this.CUR_LOADING] != undefined)
            {
               this.UseLoadedMapData(this.CACHED_MAPS[this.CUR_LOADING]);
            }
            else if(this.GET_TRIES < 15)
            {
               this.GotoMap(this.NextMapTemp);
            }
            else
            {
               this.mupd.visible = false;
               this.mupd.ttt.gotoAndStop(1);
            }
         }
      }
      
      public function GotoMap_done(param1:Event) : void
      {
         this.myLoader.removeEventListener(Event.COMPLETE,this.GotoMap_done);
         this.myLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.GotoMap_failed);
         if(this.myLoader.data == "<not_published />")
         {
            this.LAST_ERROR = "Map is not published";
            this.DropGameTimer();
            gotoAndStop("menu");
         }
         else
         {
            this.UseLoadedMapData(this.myLoader.data);
         }
      }
      
      public function UseLoadedMapData(param1:String) : void
      {
         if(currentLabel == "difch" || currentLabel == "menu" || currentLabel == "credits" || currentLabel == "gaming")
         {
            MovieClip(root).mapdata = param1;
            this.MP_mode = false;
            this.MP_myid = 0;
            this.MP_fps = 30;
            this.chat_lastid = -1;
            this.LEVEL_END_FORCE = "restart";
            this.darkness.visible = true;
            this.darkness.alpha = 1;
            if(currentLabel == "difch" || currentLabel == "menu" || currentLabel == "credits")
            {
               this.DropGameTimer();
               gotoAndStop("loading");
            }
         }
      }
      
      public function MP_attribute(param1:String, param2:String) : void
      {
         this.MP_send += "&" + param1 + "=" + param2;
      }
      
	  public function NetCodeError(param1:String) : void
      {
         if(this.MP_nick == ".:Eric Gurt:.")
         {
            if(this.gamechatbox2 != null)
            {
               this.ChatNewMsg("Error: " + param1);
            }
         }
      }
      
      public function ArmBone(param1:MovieClip, param2:Number) : void
      {
         if(param2 < 30)
         {
            this.trans = param2 / 30;
            this.minus_trans = 1 - this.trans;
            param1.lower.x = -14.6 * this.minus_trans - 13.1 * this.trans;
            param1.lower.y = 3.5 * this.minus_trans + 7.5 * this.trans;
            param1.lower.rotation = -63.3 * this.minus_trans - 54.3 * this.trans;
            param1.upper.rotation = 61.3 * this.minus_trans + 42.3 * this.trans;
         }
         else
         {
            this.trans = param2 / 30 - 1;
            this.minus_trans = 1 - this.trans;
            param1.lower.x = -13.1 * this.minus_trans - 3.05 * this.trans;
            param1.lower.y = 7.5 * this.minus_trans + 13.7 * this.trans;
            param1.lower.rotation = -54.3 * this.minus_trans;
            param1.upper.rotation = 42.3 * this.minus_trans;
         }
      }
      
      public function LegBone(param1:MovieClip, param2:Number, param3:Boolean, param4:Boolean) : void
      {
         var _loc5_:Number = NaN;
         var _loc6_:Number = NaN;
         var _loc7_:Number = NaN;
         var _loc8_:Number = NaN;
         var _loc9_:Number = NaN;
         var _loc10_:Number = NaN;
         var _loc11_:Number = NaN;
         var _loc12_:Number = NaN;
         var _loc13_:Number = NaN;
         var _loc14_:Number = NaN;
         _loc5_ = 5.35;
         _loc6_ = 8.95;
         _loc7_ = 40.4;
         _loc8_ = 8.7;
         _loc9_ = 6.75;
         _loc10_ = 65;
         _loc11_ = 9.1;
         _loc12_ = 7.85;
         _loc13_ = 85.3;
         _loc14_ = 1;
         if(param3)
         {
            _loc5_ = -4.4;
            _loc6_ = 6.25;
            _loc7_ = -4.6;
            _loc8_ = -5;
            _loc9_ = 0.35;
            _loc10_ = -3.2;
            _loc11_ = -6.1;
            _loc12_ = 2.4;
            _loc13_ = -10.7;
            _loc14_ = -1;
         }
         if(param2 < 60)
         {
            this.trans = param2 / 60;
            this.minus_trans = 1 - this.trans;
            param1.lower.x = -8.35 * this.minus_trans - 7.9 * this.trans;
            param1.lower.y = 9.75 * this.minus_trans + 13.25 * this.trans;
            param1.lower.rotation = 3.4 * this.minus_trans + 14 * this.trans;
            param1.middle.x = _loc11_ * this.minus_trans + _loc8_ * this.trans;
            param1.middle.y = _loc12_ * this.minus_trans + _loc9_ * this.trans;
            param1.middle.rotation = _loc13_ * this.minus_trans + _loc10_ * this.trans;
            param1.upper.rotation = -55.4 * this.minus_trans * _loc14_ - 55.4 * this.trans * _loc14_;
         }
         else if(param2 < 90)
         {
            this.trans = param2 / 30 - 2;
            this.minus_trans = 1 - this.trans;
            param1.lower.x = -7.9 * this.minus_trans - 6.9 * this.trans;
            param1.lower.y = 13.25 * this.minus_trans + 20.75 * this.trans;
            param1.lower.rotation = 14 * this.minus_trans + 6.8 * this.trans;
            param1.middle.x = _loc8_ * this.minus_trans + _loc5_ * this.trans;
            param1.middle.y = _loc9_ * this.minus_trans + _loc6_ * this.trans;
            param1.middle.rotation = _loc10_ * this.minus_trans + _loc7_ * this.trans;
            param1.upper.rotation = -55.4 * this.minus_trans * _loc14_ - 39.4 * this.trans * _loc14_;
         }
         else
         {
            this.trans = param2 / 30 - 3;
            this.minus_trans = 1 - this.trans;
            param1.lower.x = -6.9 * this.minus_trans - 4.35 * this.trans;
            param1.lower.y = 20.75 * this.minus_trans + 29.95 * this.trans;
            param1.lower.rotation = 6.8 * this.minus_trans;
            param1.middle.x = _loc5_ * this.minus_trans - 0.3 * this.trans;
            param1.middle.y = _loc6_ * this.minus_trans + 14.1 * this.trans;
            param1.middle.rotation = _loc7_ * this.minus_trans + 6.3 * this.trans;
            param1.upper.rotation = 8.5 * this.trans - 39.4 * this.minus_trans * _loc14_;
         }
      }
      
      public function ResetPsychoBlood() : void
      {
         if(this.PSYCHOBLOOD_MODE == 1)
         {
            this.i4 = 0;
            while(this.i4 < 4)
            {
               if(this._root["pb" + this.i4].visible)
               {
                  this._root["pb" + this.i4].alpha = 0;
                  this._root["pb" + this.i4].visible = false;
               }
               ++this.i4;
            }
         }
         else if(this.PSYCHOBLOOD_MODE == 2)
         {
            this.i4 = 0;
            while(this.i4 < 5)
            {
               if(this._root["pb" + this.i4].visible)
               {
                  this._root["pb" + this.i4].alpha = 0;
                  this._root["pb" + this.i4].visible = false;
               }
               ++this.i4;
            }
         }
      }
      
      public function AnnoyPL(param1:int, param2:String) : void
      {
         if(this.MP_ping2 < 150)
         {
            if(this.mens[param1].blames == undefined || this.mens[param1].blames == null)
            {
               this.mens[param1].blames = 10;
            }
            --this.mens[param1].blames;
            if(this.mens[param1].blames <= 0)
            {
               this.MP_custom_events += ";votekich|" + param1 + "#" + this.MP_myid;
               this.mens[param1].blames = 100;
            }
         }
      }
      
      public function UpdateHeroList(param1:int) : void
      {
         var _loc2_:Array = null;
         var _loc3_:* = undefined;
         if(param1 == this.MP_myid)
         {
            return;
         }
         _loc2_ = this.last_mp_param;
         _loc3_ = this.mens[param1];
         if(_loc2_["p" + param1 + "nk"] != undefined)
         {
            if(_loc3_.hea <= 0 && this.MP_type == 2 && this.MP_allow_leaderboard_details)
            {
               this.hero[param1].f1.text = _loc2_["p" + param1 + "nk"].split("[i]").join("|").split("[e]").join("&").split("[eq]").join("=").split("&lt;").join("<").split("&gt;").join(">").split("&quot;").join("\"") + " [ dead ]";
            }
            else
            {
               this.hero[param1].f1.text = _loc2_["p" + param1 + "nk"].split("[i]").join("|").split("[e]").join("&").split("[eq]").join("=").split("&lt;").join("<").split("&gt;").join(">").split("&quot;").join("\"");
            }
            if(this.hero[param1].f1.text === "Empty")
            {
               this.hero[param1].f1.text = "Empty ";
            }
         }
         else
         {
            this.hero[param1].f1.text = "Empty";
         }
         if(_loc2_["p" + param1 + "nk"] != "Empty")
         {
            this.str = "Team " + String(_loc3_.team + 1);
            if(_loc3_.team == 0)
            {
               this.str = "Alpha";
            }
            if(_loc3_.team == 1)
            {
               this.str = "Beta";
            }
            if(_loc3_.team == 2)
            {
               this.str = "Gamma";
            }
            if(_loc3_.team == 3)
            {
               this.str = "Delta";
            }
            if(_loc3_.team == 4)
            {
               this.str = "Zeta";
            }
            if(_loc3_.team == 5)
            {
               this.str = "Lambda";
            }
            if(_loc3_.team == 6)
            {
               this.str = "Sigma";
            }
            if(_loc3_.team == 7)
            {
               this.str = "Omega";
            }
            if(_loc3_.team == 8)
            {
               this.str = "Counter-Terrorists";
            }
            if(_loc3_.team == 9)
            {
               this.str = "Terrorists";
            }
            if(_loc3_.team == 10)
            {
               this.str = "Usurpation Forces";
            }
            if(_loc3_.team == 11)
            {
               this.str = "Civil Security";
            }
            if(_loc3_.team == 12)
            {
               this.str = "Red Team";
            }
            if(_loc3_.team == 13)
            {
               this.str = "Blue Team";
            }
            if(_loc3_.team == 14)
            {
               this.str = "Green Team";
            }
            if(_loc3_.team == 15)
            {
               this.str = "White Team";
            }
            if(_loc3_.team == 16)
            {
               this.str = "Black Team";
            }
            if(this.MP_type == 1 || !this.MP_allow_leaderboard_details)
            {
               this.str = "";
            }
            this.hero[param1].f2.text = this.str;
            if(_loc2_["p" + param1 + "k"] != undefined)
            {
               this.hero[param1].f3.text = this.MP_allow_leaderboard_details ? _loc2_["p" + param1 + "k"] : "-";
            }
            if(_loc2_["p" + param1 + "dd"] != undefined)
            {
               this.hero[param1].f4.text = this.MP_allow_leaderboard_details ? _loc2_["p" + param1 + "dd"] : "-";
            }
            if(_loc2_["p" + param1 + "p"] != undefined)
            {
               this.hero[param1].f5.text = _loc2_["p" + param1 + "p"];
            }
            if(_loc3_.team == this.mens[this.MP_myid].team && this.MP_allow_leaderboard_details)
            {
               if(this.hero[param1].currentFrame != 3 + this.hero_list_frame_offset)
               {
                  this.hero[param1].gotoAndStop(3 + this.hero_list_frame_offset);
               }
            }
            else if(this.hero[param1].currentFrame != 1 + this.hero_list_frame_offset)
            {
               this.hero[param1].gotoAndStop(1 + this.hero_list_frame_offset);
            }
         }
      }
      
      public function MorphWithTimeScale(param1:Number, param2:Number, param3:Number, param4:Number) : Number
      {
         param3 = Math.pow(param3,param4);
         return param2 * (1 - param3) + param1 * param3;
      }
      
      public function limit(param1:Number, param2:Number, param3:Number) : Number
      {
         if(param2 < param1)
         {
            return param1;
         }
         if(param2 > param3)
         {
            return param3;
         }
         return param2;
      }
      
      public function Collision(param1:*, param2:int, param3:Number, param4:Number, param5:Number, param6:Number, param7:Number, param8:Number, param9:Boolean, param10:Number, param11:Number) : void
      {
         param7 = param4 - param3;
         param8 = param6 - param5;
         if(!param1.inwater)
         {
            if(param1.x >= param3 + 1)
            {
               if(param1.x <= param4 - 1)
               {
                  if(param1.y >= param6 - this.sitmax * Number(param1.scale))
                  {
                     if(param1.y <= param6 + Number(param1.sit) * this.sitmax * Number(param1.scale))
                     {
                        this.hup = true;
                     }
                  }
               }
            }
            if(param1.sit != 0)
            {
               if(param1.x >= param3)
               {
                  if(param1.x <= param4)
                  {
                     if(param1.y >= param6 - 5)
                     {
                        if(param1.y <= param6 + 5)
                        {
                           this.ok = true;
                        }
                     }
                  }
               }
            }
         }
         if(this.MP_mode)
         {
            if(param1.tox > 0)
            {
               param4 += Number(param1.tox) * this.GSPEED2 * 2;
            }
            if(param1.tox < 0)
            {
               param3 += Number(param1.tox) * this.GSPEED2 * 2;
            }
            if(param1.toy > 0)
            {
               param6 += Number(param1.toy) * this.GSPEED2 * 2;
            }
            if(param1.toy < 0)
            {
               param5 += Number(param1.toy) * this.GSPEED2 * 2;
            }
         }
         else if(param2 == this.MP_myid)
         {
            param10 *= this.GSPEED / this.GSPEED2;
            param11 *= this.GSPEED / this.GSPEED2;
         }
         if(param1.x >= param3)
         {
            if(param1.x <= param4)
            {
               if(param1.y >= param5)
               {
                  if(param1.y <= param6)
                  {
                     if(this.DEBUG_MODE)
                     {
                        this.debug_screen.graphics.lineStyle(2,16776960);
                        this.debug_screen.graphics.moveTo(Number(param1.x) - this.PLAYER_WIDTH * Number(param1.scale),Number(param1.y) - 82 * Number(param1.scale));
                        this.debug_screen.graphics.lineTo(param1.x + this.PLAYER_WIDTH * Number(param1.scale),Number(param1.y) - 82 * Number(param1.scale));
                        this.debug_screen.graphics.lineTo(param1.x + this.PLAYER_WIDTH * Number(param1.scale),Number(param1.y) - Number(param1.sit) * this.sitmax * Number(param1.scale));
                        this.debug_screen.graphics.lineTo(Number(param1.x) - this.PLAYER_WIDTH * Number(param1.scale),Number(param1.y) - Number(param1.sit) * this.sitmax * Number(param1.scale));
                        this.debug_screen.graphics.lineTo(Number(param1.x) - this.PLAYER_WIDTH * Number(param1.scale),Number(param1.y) - 82 * Number(param1.scale));
                     }
                     this.ok2 = true;
                     if(param1.y < param5 + 42)
                     {
                        this.u = 0;
                        this.v = 1;
                        if(param1.x < param3 + this.PLAYER_WIDTH * Number(param1.scale) || param1.x > param4 - this.PLAYER_WIDTH * Number(param1.scale))
                        {
                           if(param1.x > (param3 + param4) / 2)
                           {
                              if(!this.TracePointOnlyBoxes(Number(param1.x) - this.PLAYER_WIDTH * Number(param1.scale) - 5,param5 - 75 * Number(param1.scale)) || !this.TracePointOnlyBoxes(Number(param1.x) - this.PLAYER_WIDTH * Number(param1.scale) - 5,param5 - 35 * Number(param1.scale)))
                              {
                                 this.u = -1;
                                 this.v = 0;
                              }
                           }
                           else if(!this.TracePointOnlyBoxes(param1.x + this.PLAYER_WIDTH * Number(param1.scale) + 5,param5 - 75 * Number(param1.scale)) || !this.TracePointOnlyBoxes(param1.x + this.PLAYER_WIDTH * Number(param1.scale) + 5,param5 - 35 * Number(param1.scale)))
                           {
                              this.u = 1;
                              this.v = 0;
                           }
                        }
                        if(this.v != 0)
                        {
                           if(param1.y > param5 + 15 * Number(param1.scale))
                           {
                              param1.tox *= 0.8;
                           }
                        }
                     }
                     else if(param1.y > param6 - 100 * Number(param1.scale))
                     {
                        this.u = 0;
                        this.v = -1;
                        if(param1.x > param4 - 20 * Number(param1.scale))
                        {
                           this.u = -1;
                           this.v = 0;
                        }
                        if(param1.x < param3 + 20 * Number(param1.scale))
                        {
                           this.u = 1;
                           this.v = 0;
                        }
                     }
                     else
                     {
                        if(param7 > param8)
                        {
                           this.v = param5 + param8 * 0.5;
                           param8 *= 0.5;
                           this.u = Math.max(param3 + param8,Math.min(param4 - param8,Number(param1.x) - Number(param1.tox) * this.GSPEED));
                        }
                        else
                        {
                           this.u = param3 + param7 * 0.5;
                           param7 *= 0.5;
                           this.v = Math.max(param5 + param7,Math.min(param6 - param7,Number(param1.y) - 41 * Number(param1.scale) - Number(param1.toy) * this.GSPEED));
                        }
                        this.u -= Number(param1.x) - Number(param1.tox) * this.GSPEED;
                        this.v -= Number(param1.y) - 41 * Number(param1.scale) - Number(param1.toy) * this.GSPEED;
                     }
                     if(this.Math_abs(this.u) > this.Math_abs(this.v))
                     {
                        if(this.Math_abs(Number(param1.tox) - param10) > 14 * Number(param1.mobility))
                        {
                           param1.stability -= this.Math_abs(Number(param1.tox) - param10) * 0.2;
                        }
                        if(this.Math_abs(Number(param1.tox) - param10) * this.GLOBAL_FALL_SENSITIVITY_MULT > 17)
                        {
                           this.PlaySound(this.s_body_fall,param1.x,param1.y);
                           if(!this.MP_mode || this.MP_myid == param2 && !this.MP_spectator || !param1.isplayer)
                           {
                              this.effcolor = param2;
                              if(this.u > 0)
                              {
                                 this.FlowAt(param1.x + 20,Number(param1.y) - Math.random() * 80,0,-3 + Math.random() * 6,-3 + Math.random() * 6,5);
                              }
                              else
                              {
                                 this.FlowAt(Number(param1.x) - 20,Number(param1.y) - Math.random() * 80,0,-3 + Math.random() * 6,-3 + Math.random() * 6,5);
                              }
                              if(this.MP_mode && this.MP_myid == param2)
                              {
                                 this.MP_custom_events += ";gshot|" + param2 + "#" + this.r2(param1.x + 20 * (this.u > 0 ? 1 : -1)) + "#" + this.r2(Number(param1.y) - Math.random() * 80) + "#" + this.r2(-3 + Math.random() * 6) + "#" + this.r2(-3 + Math.random() * 6) + "#" + 5 + "#" + -1 + "#2" + "#" + 0;
                              }
                              if(this.MP_mode && (this.MP_type == 1 || this.MP_type == 3))
                              {
                                 param1.hea -= this.Math_pow2(Number(param1.tox) - param10) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT;
                                 param1.hp_body -= this.Math_pow2(Number(param1.tox) - param10) * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                                 param1.hp_legs -= this.Math_pow2(Number(param1.tox) - param10) * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                              }
                              else
                              {
                                 param1.hea -= this.Math_pow2(Number(param1.tox) - param10) * 0.2 * this.GLOBAL_FALL_DAMAGE_MULT;
                                 param1.hp_body -= this.Math_pow2(Number(param1.tox) - param10) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                                 param1.hp_legs -= this.Math_pow2(Number(param1.tox) - param10) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                              }
                              param1.lastshot = "body";
                              param1.lastshotbygun = "wall";
                              if(param2 == this.MP_myid)
                              {
                                 this.HurtMyPlayer(this.u,0,this.Math_pow2(Number(param1.tox) - param10) * 0.1);
                              }
                              this.Hurt(param2);
                           }
                        }
                        if(param1.hea > 0)
                        {
                           if(param1.act_movey == -1 && param6 > param1.y + 30 && (param2 != this.MP_myid && param1.isplayer || param2 == this.MP_myid && (this.u > 0 && param1.act_movex != 1 || this.u < 0 && param1.act_movex != -1)) && this.Math_abs(Number(param1.tox) - param10) > 6 && this.Math_abs(Number(param1.tox) - param10) < 16 && Number(param1.toy) - param11 > -8 && Number(param1.toy) - param11 < 4)
                           {
                              if(this.u < 0 && param1.x > (param3 + param4) / 2)
                              {
                                 param1.tox = 7 * Number(param1.jump_scale) + param10;
                              }
                              else
                              {
                                 param1.tox = -7 * Number(param1.jump_scale) + param10;
                              }
                              param1.toy = Math.min((param11 - 14 * Number(param1.jump_scale)) * 0.5,param1.toy);
                              if(param2 == this.MP_myid)
                              {
                                 this.incBadge(20);
                              }
                              this.TurnBone(param1.b_leg1,Number(param1.x) - Number(param1.tox) * 2 - 5 * Number(param1.scale),param1.y,param1,1);
                              this.TurnBone(param1.b_leg2,Number(param1.x) - Number(param1.tox) * 2 + 5 * Number(param1.scale),param1.y,param1,1);
                           }
                           else
                           {
                              if(this.Math_abs(Number(param1.tox) - param10) < 4)
                              {
                                 param1.tox = param10;
                              }
                              else
                              {
                                 param1.toy = (param11 + Number(param1.toy) * 9) * 0.1;
                              }
                              if(this.u < 0)
                              {
                                 if(param9)
                                 {
                                    param1.x = param4 + 1;
                                 }
                                 if(param9)
                                 {
                                    if(param1.tox < 0)
                                    {
                                       param1.tox = 0;
                                    }
                                 }
                                 param1.tox += this.Math_abs(Number(param1.tox) - param10) * 0.25;
                              }
                              else
                              {
                                 if(param9)
                                 {
                                    param1.x = param3 - 1;
                                 }
                                 if(param9)
                                 {
                                    if(param1.tox > 0)
                                    {
                                       param1.tox = 0;
                                    }
                                 }
                                 param1.tox -= this.Math_abs(Number(param1.tox) - param10) * 0.25;
                              }
                           }
                           if(param9)
                           {
                              if(this.u < 0)
                              {
                                 this.rx = 1;
                              }
                              else
                              {
                                 this.retux = 1;
                              }
                           }
                        }
                     }
                     else
                     {
                        if(this.v < 0)
                        {
                           if(this.Math_abs(Number(param1.toy) - param11) > 12)
                           {
                              param1.stability -= this.Math_abs(Number(param1.toy) - param11) * 0.2;
                           }
                        }
                        else if(this.Math_abs(Number(param1.toy) - param11) > 17)
                        {
                           param1.stability -= this.Math_abs(Number(param1.toy) - param11) * 0.05;
                        }
                        if(this.Math_abs(Number(param1.toy) - param11) * this.GLOBAL_FALL_SENSITIVITY_MULT > 17)
                        {
                           this.PlaySound(this.s_body_fall,param1.x,param1.y);
                           if(!this.MP_mode || this.MP_myid == param2 && !this.MP_spectator || !param1.isplayer)
                           {
                              this.effcolor = param2;
                              if(this.v < 0)
                              {
                                 this.FlowAt(Number(param1.x) - 20 + Math.random() * 40,Number(param1.y) - 80,0,-3 + Math.random() * 6,-3 + Math.random() * 6,5);
                              }
                              else
                              {
                                 this.FlowAt(Number(param1.x) - 20 + Math.random() * 40,Number(param1.y) - 10,0,-3 + Math.random() * 6,-3 + Math.random() * 6,5);
                              }
                              if(this.MP_mode && this.MP_myid == param2)
                              {
                                 this.MP_custom_events += ";gshot|" + param2 + "#" + this.r2(Number(param1.x) - 20 + Math.random() * 40) + "#" + this.r2(this.v < 0 ? Number(param1.y) - 80 : Number(param1.y) - 10) + "#" + this.r2(-3 + Math.random() * 6) + "#" + this.r2(-3 + Math.random() * 6) + "#" + 5 + "#" + -1 + "#2" + "#" + 0;
                              }
                              if(this.v > 0)
                              {
                                 if(this.MP_mode && (this.MP_type == 1 || this.MP_type == 3))
                                 {
                                    param1.hp_legs -= this.Math_pow2(Number(param1.toy) - param11) * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                                    param1.hea -= this.Math_pow2(Number(param1.toy) - param11) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT;
                                 }
                                 else
                                 {
                                    param1.hp_legs -= this.Math_pow2(Number(param1.toy) - param11) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                                    param1.hea -= this.Math_pow2(Number(param1.toy) - param11) * 0.2 * this.GLOBAL_FALL_DAMAGE_MULT;
                                 }
                              }
                              else if(this.MP_mode && (this.MP_type == 1 || this.MP_type == 3))
                              {
                                 param1.hp_head -= this.Math_pow2(Number(param1.toy) - param11) * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                                 param1.hea -= this.Math_pow2(Number(param1.toy) - param11) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT;
                              }
                              else
                              {
                                 param1.hp_head -= this.Math_pow2(Number(param1.toy) - param11) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                                 param1.hea -= this.Math_pow2(Number(param1.toy) - param11) * 0.2 * this.GLOBAL_FALL_DAMAGE_MULT;
                              }
                              param1.lastshot = "body";
                              param1.lastshotbygun = "wall";
                              if(param2 == this.MP_myid)
                              {
                                 this.HurtMyPlayer(0,this.v,this.Math_pow2(Number(param1.toy) - param11) * 0.1);
                              }
                           }
                           this.Hurt(param2);
                        }
                        if(param1.hea > 0)
                        {
                           if(!param1.stand)
                           {
                              param1.tox += (param10 / 6 - Number(param1.tox) / 6 / Number(param1.scale)) * this.thispulspeed * Number(param1.scale);
                              if(param1.tox > param10 + 1.5 * this.thispulspeed * Number(param1.scale))
                              {
                                 param1.tox -= 1.5 * this.thispulspeed * Number(param1.scale);
                              }
                              else if(param1.tox < param10 - 1.5 * this.thispulspeed * Number(param1.scale))
                              {
                                 param1.tox += 1.5 * this.thispulspeed * Number(param1.scale);
                              }
                              else
                              {
                                 param1.tox = param10;
                              }
                           }
                           if(this.v < 0)
                           {
                              if(param9)
                              {
                                 if(param1.toy < 0)
                                 {
                                    param1.toy = 0;
                                 }
                              }
                              param1.toy += (this.Math_abs(Number(param1.toy) - param11) + param11) * 0.25;
                              this.ok = true;
                              if(param9)
                              {
                                 param1.y = param6 + 2;
                              }
                           }
                           else
                           {
                              if(param9)
                              {
                                 if(param11 < 0)
                                 {
                                    param1.toy = (param11 + param1.toy) * 0.5 + this.gravity;
                                 }
                                 else
                                 {
                                    param1.toy = param11;
                                 }
                              }
                              param1.stand = true;
                              if(this.retuy != 1)
                              {
                                 if(param9)
                                 {
                                    param1.y = param5 + 1;
                                 }
                              }
                           }
                           if(param9)
                           {
                              if(this.v < 0)
                              {
                                 this.retuy = 1;
                              }
                              else
                              {
                                 this.ry = 1;
                              }
                           }
                        }
                     }
                     if(this.DEBUG_MODE)
                     {
                        this.debug_screen.graphics.lineStyle(2,11206400);
                        this.debug_screen.graphics.moveTo(Number(param1.x) - this.PLAYER_WIDTH * Number(param1.scale),Number(param1.y) - 82 * Number(param1.scale));
                        this.debug_screen.graphics.lineTo(param1.x + this.PLAYER_WIDTH * Number(param1.scale),Number(param1.y) - 82 * Number(param1.scale));
                        this.debug_screen.graphics.lineTo(param1.x + this.PLAYER_WIDTH * Number(param1.scale),Number(param1.y) - Number(param1.sit) * this.sitmax * Number(param1.scale));
                        this.debug_screen.graphics.lineTo(Number(param1.x) - this.PLAYER_WIDTH * Number(param1.scale),Number(param1.y) - Number(param1.sit) * this.sitmax * Number(param1.scale));
                        this.debug_screen.graphics.lineTo(Number(param1.x) - this.PLAYER_WIDTH * Number(param1.scale),Number(param1.y) - 82 * Number(param1.scale));
                     }
                  }
               }
            }
         }
      }
      
      public function UpdateTeamColor(param1:MovieClip) : void
      {
         if(this.MP_myid != param1.idd)
         {
            if(this.mens[this.MP_myid] != undefined)
            {
               if(param1.team == this.mens[this.MP_myid].team)
               {
                  param1.nick_color = this.color_friendly;
               }
               else
               {
                  param1.nick_color = this.color_enemy;
               }
            }
         }
         else
         {
            param1.nick_color = this.color_player;
         }
         param1.gui.txt1.textColor = param1.nick_color;
      }
      
      public function SpawnPlayerImmediately(param1:MovieClip) : void
      {
         if(param1.notspawned)
         {
            //param1.gotoAndStop(3);
            //param1.gotoAndStop(2);
         }
         if(param1.info == undefined || this.SHOW_EXP_BAR == 1)
         {
            param1.gui.txt2.visible = false;
         }
         else
         {
            param1.gui.txt2.htmlText = param1.info.html;
            param1.gui.txt2.alpha = 0.8;//param1.idd == this.MP_myid ? 0.75 : 0.5;
         }
         if(this.MP_mode)
         {
            if(param1.idd == this.MP_myid)
            {
               this.CheckIfPlayerInfoUpdateNeeded(param1);
            }
         }
         param1.notspawned = false;
         param1.leg1.upper.gotoAndStop(param1.mdl_leg1_upper);
         this.UpdateTeamColor(param1);
         param1.gui.txt1.text = param1.nick;
         if(this.MP_mode)
         {
            if(!param1.isplayer)
            {
               param1.gui.visible = false;
            }
            else if(this.ANONYMOUS_MODE)
            {
               if(param1.idd == this.MP_myid)
               {
                  param1.gui.visible = true;
                  if(param1.hea > 0)
                  {
                     param1.gui.alpha = 1;
                  }
               }
            }
            else
            {
               param1.gui.visible = true;
               if(param1.hea > 0)
               {
                  param1.gui.alpha = 1;
               }
            }
         }
         else
         {
            if(param1.team != this.mens[this.MP_myid].team || !this.PLAZMA_GAME)
            {
               param1.gui.visible = false;
            }
            else
            {
               param1.gui.visible = true;
               if(param1.hea > 0)
               {
                  param1.gui.alpha = 1;
               }
            }
            this.i3 = -1;
            if(param1.char == 1)
            {
               this.i3 = 0;
            }
            if(param1.char == 3)
            {
               this.i3 = 1;
            }
            if(this.i3 != -1)
            {
               this.UpdatePlayerColorSP(param1,this.i3);
            }
         }
         if(param1.palette[0] != "-" || param1.palette[1] != "-" || param1.palette[2] != "-" || param1.palette[3] != "-")
         {
            this.UpdatePlayerColorMP(param1);
         }
         if(!param1.brk_legs)
         {
            param1.leg1.middle.gotoAndStop(param1.mdl_leg1_middle);
            param1.leg1.lower.gotoAndStop(param1.mdl_leg1_lower);
         }
         param1.leg2.upper.gotoAndStop(param1.mdl_leg2_upper);
         if(!param1.brk_legs)
         {
            param1.leg2.middle.gotoAndStop(param1.mdl_leg2_middle);
            param1.leg2.lower.gotoAndStop(param1.mdl_leg2_lower);
         }
         param1.arm1.upper.gotoAndStop(param1.mdl_arm1_upper);
         if(!param1.brk_arms)
         {
            param1.arm1.lower.gotoAndStop(param1.mdl_arm1_lower);
         }
         param1.arm2.upper.gotoAndStop(param1.mdl_arm2_upper);
         if(!param1.brk_arms)
         {
            param1.arm2.lower.gotoAndStop(param1.mdl_arm2_lower);
         }
         if(!param1.brk_body)
         {
            param1.toe.gotoAndStop(param1.mdl_toe);
            param1.body.gotoAndStop(param1.mdl_body);
            param1.toe.bloddy.visible = false;
         }
         if(!param1.brk_head)
         {
            param1.head.gotoAndStop(param1.mdl_head);
         }
         this.ChangedGun(param1.idd);
         this.RedrawPsi(param1.idd);
      }
      
      public function PhysHit(param1:int, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number, param7:Number, param8:Object) : void
      {
         var _loc9_:Number = NaN;
         var _loc10_:Number = NaN;
         this.ok = false;
         this.cx = this.cy = 0;
         if(param8 == null)
         {
            _loc9_ = Number(this.ax[param1]) - Number(this.atox[param1]) * this.thispulspeed * this.extra_low_mult;
            _loc10_ = Number(this.ay[param1]) - Number(this.atoy[param1]) * this.thispulspeed * this.extra_low_mult;
         }
         else
         {
            _loc9_ = Number(param8.x);
            _loc10_ = Number(param8.y);
         }
         if(this.aof[param1] == this.MP_myid || this.aof[param1] == -1 || this.aactive[param1] == 1000)
         {
            if(this.atox[param1] > 0)
            {
               if(this.CheckCrossSimple(this.ax[param1],this.ay[param1],_loc9_,_loc10_,param2,param3,param2,param3 + param5))
               {
                  this.ax[param1] = this.retux;
                  this.ok = true;
                  this.cx = 1;
                  if(this.ay[param1] >= param3 + this.arad[param1] + 30)
                  {
                     if(this.ay[param1] <= param3 - Number(this.arad[param1]) + param5 - 30)
                     {
                        this.pres_left = true;
                        this.pres_ok = true;
                     }
                  }
               }
            }
            else if(this.CheckCrossSimple(this.ax[param1],this.ay[param1],_loc9_,_loc10_,param2 + param4,param3,param2 + param4,param3 + param5))
            {
               this.ax[param1] = this.retux;
               this.ok = true;
               this.cx = -1;
               if(this.ay[param1] >= param3 + this.arad[param1] + 30)
               {
                  if(this.ay[param1] <= param3 - Number(this.arad[param1]) + param5 - 30)
                  {
                     this.pres_right = true;
                     this.pres_ok = true;
                  }
               }
            }
            if(this.atoy[param1] > 0)
            {
               if(this.CheckCrossSimple(this.ax[param1],this.ay[param1],_loc9_,_loc10_,param2,param3,param2 + param4,param3))
               {
                  this.ay[param1] = this.retuy;
                  this.ok = true;
                  this.cy = 1;
                  if(this.ax[param1] >= param2 + this.arad[param1] + 30)
                  {
                     if(this.ax[param1] <= param2 - Number(this.arad[param1]) + param4 - 30)
                     {
                        this.pres_top = true;
                        this.pres_ok = true;
                     }
                  }
               }
            }
            else if(this.CheckCrossSimple(this.ax[param1],this.ay[param1],_loc9_,_loc10_,param2,param3 + param5,param2 + param4,param3 + param5))
            {
               this.ay[param1] = this.retuy;
               this.ok = true;
               this.cy = -1;
               if(this.ax[param1] >= param2 + this.arad[param1] + 30)
               {
                  if(this.ax[param1] <= param2 - Number(this.arad[param1]) + param4 - 30)
                  {
                     this.pres_bottom = true;
                     this.pres_ok = true;
                  }
               }
            }
         }
         if(!this.ok)
         {
            if(this.ax[param1] >= param2 - Number(this.arad[param1]))
            {
               if(this.ax[param1] <= param2 + this.arad[param1] + param4)
               {
                  if(this.ay[param1] >= param3 - Number(this.arad[param1]) - 1)
                  {
                     if(this.ay[param1] <= param3 + this.arad[param1] + param5)
                     {
                        this.ok = true;
                     }
                  }
               }
            }
         }
         if(this.ok)
         {
            this.xx = 0;
            if(this.TracePointNoRagdolls(Number(this.ax[param1]) - Number(this.atox[param1]) * this.thispulspeed,Number(this.ay[param1]) - Number(this.atoy[param1]) * this.thispulspeed))
            {
               this.xx = 1;
               if(this.thispulspeed > 1)
               {
                  this.xx *= this.thispulspeed;
               }
            }
            if(this.cx == 0 && this.cy == 0)
            {
               if(param5 < param4)
               {
                  this.cx = Math.max(param2 + param5 / 2,Math.min(param2 + param4 - param5 / 2,Number(this.ax[param1]) - Number(this.atox[param1]) * this.xx));
                  this.cy = param3 + param5 / 2;
               }
               else
               {
                  this.cy = Math.max(param3 + param4 / 2,Math.min(param3 + param5 - param4 / 2,Number(this.ay[param1]) - Number(this.atoy[param1]) * this.xx));
                  this.cx = param2 + param4 / 2;
               }
               this.cx = this.cx - Number(this.ax[param1]) + Number(this.atox[param1]) * this.xx;
               this.cy = this.cy - Number(this.ay[param1]) + Number(this.atoy[param1]) * this.xx;
            }
            if(this.Math_abs(this.cx) < this.Math_abs(this.cy))
            {
               this.xx = this.Math_abs(Number(this.atox[param1]) - param6);
               this.yy = this.Math_abs(Number(this.atoy[param1]) - param7);
            }
            else
            {
               this.xx = this.Math_abs(Number(this.atoy[param1]) - param7);
               this.yy = this.Math_abs(Number(this.atox[param1]) - param6);
            }
            if(this.yy > 14)
            {
               this.PAlert(Number(this.ax[param1]) - Number(this.atox[param1]),Number(this.ay[param1]) - Number(this.atoy[param1]));
            }
            if(this.amat[param1] == 0)
            {
               if(this.acollided[param1] == 0)
               {
                  this.acollided[param1] = 1;
                  if(this.yy > 7)
                  {
                     this.i3 = int(Math.random() * 4);
                     if(this.mens[this.aof[param1]].armored == 2)
                     {
                        if(this.i3 == 0)
                        {
                           this.PlaySound(this.s_robo_step1,this.ax[param1],this.ay[param1]);
                        }
                        else if(this.i3 == 1)
                        {
                           this.PlaySound(this.s_robo_step2,this.ax[param1],this.ay[param1]);
                        }
                        else if(this.i3 == 2)
                        {
                           this.PlaySound(this.s_robo_step3,this.ax[param1],this.ay[param1]);
                        }
                        else if(this.i3 == 3)
                        {
                           this.PlaySound(this.s_robo_step4,this.ax[param1],this.ay[param1]);
                        }
                     }
                     else if(this.i3 == 0)
                     {
                        this.PlaySound(this.s_step1,this.ax[param1],this.ay[param1]);
                     }
                     else if(this.i3 == 1)
                     {
                        this.PlaySound(this.s_step2,this.ax[param1],this.ay[param1]);
                     }
                     else if(this.i3 == 2)
                     {
                        this.PlaySound(this.s_step3,this.ax[param1],this.ay[param1]);
                     }
                     else if(this.i3 == 3)
                     {
                        this.PlaySound(this.s_step4,this.ax[param1],this.ay[param1]);
                     }
                  }
               }
            }
            else if(this.amat[param1] == 1)
            {
               if(this.acollided[param1] == 0)
               {
                  this.acollided[param1] = 1;
                  if(this.mens[this.aof[param1]].armored == 2)
                  {
                     if(this.xx > this.yy + 2)
                     {
                        this.PlaySound(this.s_metal0,this.ax[param1],this.ay[param1]);
                     }
                     else if(this.yy > 4)
                     {
                        if(this.yy < 6)
                        {
                           this.PlaySound(this.s_metal1,this.ax[param1],this.ay[param1]);
                        }
                        else if(this.yy < 8)
                        {
                           this.PlaySound(this.s_metal2,this.ax[param1],this.ay[param1]);
                        }
                        else
                        {
                           this.PlaySound(this.s_metal3,this.ax[param1],this.ay[param1]);
                        }
                     }
                  }
                  else if(this.xx > this.yy + 2)
                  {
                     this.PlaySound(this.s_body0,this.ax[param1],this.ay[param1]);
                  }
                  else if(this.yy > 4)
                  {
                     if(this.yy < 6)
                     {
                        this.PlaySound(this.s_body1,this.ax[param1],this.ay[param1]);
                     }
                     else if(this.yy < 8)
                     {
                        this.PlaySound(this.s_body2,this.ax[param1],this.ay[param1]);
                     }
                     else
                     {
                        this.PlaySound(this.s_body3,this.ax[param1],this.ay[param1]);
                     }
                  }
               }
            }
            else if(this.amat[param1] == 2)
            {
               if(this.acollided[param1] == 0)
               {
                  this.acollided[param1] = 1;
                  if(this.yy > 4)
                  {
                     if(this.yy < 6)
                     {
                        this.PlaySound(this.s_wea1,this.ax[param1],this.ay[param1]);
                     }
                     else
                     {
                        this.PlaySound(this.s_wea2,this.ax[param1],this.ay[param1]);
                     }
                  }
               }
            }
            else if(this.amat[param1] == 3)
            {
               if(this.yy > 10)
               {
                  if(this.barrels[-100 - Number(this.aof[param1])].hea > 0)
                  {
                     this.barrels[-100 - Number(this.aof[param1])].hea -= this.Math_abs(this.atoy[param1]) * 1;
                     this.HurtBarrel(-100 - Number(this.aof[param1]));
                  }
               }
            }
            else if(this.amat[param1] == 4)
            {
               if(this.acollided[param1] == 0)
               {
                  this.acollided[param1] = 1;
               }
            }
            else if(this.amat[param1] == 5 || this.amat[param1] == 6 || this.amat[param1] == 7)
            {
               if(this.acollided[param1] == 0)
               {
                  this.acollided[param1] = 1;
                  if(this.xx > this.yy + 2)
                  {
                     if(this.amat[param1] == 5)
                     {
                        this.PlaySound(this.s_steel_hor,this.ax[param1],this.ay[param1]);
                        this.Effect(this.ax[param1],this.ay[param1],8,0,0);
                     }
                  }
                  else if(this.yy > 3)
                  {
                     if(this.amat[param1] == 5)
                     {
                        if(this.yy < 6)
                        {
                           this.PlaySound(this.s_steel_low,this.ax[param1],this.ay[param1]);
                        }
                        else if(this.yy < 14)
                        {
                           this.PlaySound(this.s_steel_med,this.ax[param1],this.ay[param1]);
                        }
                        else
                        {
                           this.PlaySound(this.s_steel_hard,this.ax[param1],this.ay[param1]);
                        }
                     }
                     else if(this.amat[param1] == 6)
                     {
                        if(this.yy > 8 && this.atoy[param1] > 0)
                        {
                           this.PlaySound(this.s_walker_step,this.ax[param1],this.ay[param1]);
                           this.atoy[param1] = 1;
                        }
                     }
                     else if(this.yy > 11)
                     {
                        if(Math.random() > 0.5)
                        {
                           this.PlaySound(this.s_capsule_hit1,this.ax[param1],this.ay[param1]);
                        }
                        else
                        {
                           this.PlaySound(this.s_capsule_hit2,this.ax[param1],this.ay[param1]);
                        }
                     }
                  }
                  if(this.yy > 14)
                  {
                     this.Effect(this.ax[param1],this.ay[param1],8,0,0);
                     this.Effect(this.ax[param1],this.ay[param1],8,0,0);
                     this.Effect(this.ax[param1],this.ay[param1],8,0,0);
                     this.Effect(this.ax[param1],this.ay[param1],8,0,0);
                     this.Effect(this.ax[param1],this.ay[param1],8,0,0);
                     if(this.amat[param1] != 6)
                     {
                        this.vehicles[-Number(this.aof[param1]) - 200].hea -= this.yy * this.yy / 13;
                     }
                  }
               }
            }
            else if(this.amat[param1] == 8)
            {
               if(this.yy > 5)
               {
                  if(this.aof[param1] != -1 && this.puls[-Number(this.aof[param1]) - 300].currentFrame == 52)
                  {
                     this.PlaySound(this.s_grenade_wet,this.ax[param1],this.ay[param1]);
                  }
                  else
                  {
                     this.PlaySound(this.s_grenade,this.ax[param1],this.ay[param1]);
                  }
               }
               if(this.aof[param1] != -1)
               {
                  if(this.puls[-Number(this.aof[param1]) - 300].currentFrame == 42 || this.puls[-Number(this.aof[param1]) - 300].currentFrame == 49 || this.puls[-Number(this.aof[param1]) - 300].currentFrame == 55)
                  {
                     this.puls[-Number(this.aof[param1]) - 300].life = this.puls[-Number(this.aof[param1]) - 300].maxbulletlife + 1;
                     this.atox[param1] = 0;
                     this.atoy[param1] = 0;
                  }
                  if(this.puls[-Number(this.aof[param1]) - 300].currentFrame == 45 || this.puls[-Number(this.aof[param1]) - 300].currentFrame == 52)
                  {
                     this.atox[param1] = 0;
                     this.atoy[param1] = 0;
                     if(this.Math_abs(this.cx) > this.Math_abs(this.cy))
                     {
                        this.ax[param1] += this.cx > 0 ? 1 : -1;
                     }
                     else
                     {
                        this.ay[param1] += this.cy > 0 ? 1 : -1;
                     }
                  }
               }
            }
            else if(this.amat[param1] == 9)
            {
               if(this.acollided[param1] == 0)
               {
                  this.acollided[param1] = 1;
                  if(this.xx > this.yy + 2)
                  {
                     this.PlaySound(this.s_box_hor,this.ax[param1],this.ay[param1]);
                  }
                  else if(this.yy > 3)
                  {
                     if(this.yy < 6)
                     {
                        this.PlaySound(this.s_box_low,this.ax[param1],this.ay[param1]);
                     }
                     else if(this.yy < 8)
                     {
                        this.PlaySound(this.s_box_med,this.ax[param1],this.ay[param1]);
                     }
                     else
                     {
                        this.PlaySound(this.s_box_hard,this.ax[param1],this.ay[param1]);
                     }
                  }
                  if(this.yy > 12)
                  {
                     this.vehicles[-Number(this.aof[param1]) - 200].hea -= this.yy * this.yy / 13;
                  }
               }
            }
            else if(this.amat[param1] == 10)
            {
               if(this.yy > 5)
               {
                  this.PlaySound(this.s_robo_bug_hit,this.ax[param1],this.ay[param1]);
               }
            }
            if(this.amat[param1] == 1 || this.amat[param1] == 0)
            {
               if(this.mens[this.aof[param1]].stability < 0 || this.mens[this.aof[param1]].hea <= 0)
               {
                  if(this.yy * this.GLOBAL_FALL_SENSITIVITY_MULT > 18)
                  {
                     this.PlaySound(this.s_body_fall,this.ax[param1],this.ay[param1]);
                     if(!this.MP_mode || this.MP_myid == this.aof[param1] && !this.MP_spectator || !this.mens[this.aof[param1]].isplayer)
                     {
                        if(this.MP_mode && (this.MP_type == 1 || this.MP_type == 3))
                        {
                           this.mens[this.aof[param1]].hea -= this.yy * this.yy * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT;
                        }
                        else
                        {
                           this.mens[this.aof[param1]].hea -= this.yy * this.yy * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT;
                        }
                        if(param1 == this.mens[this.aof[param1]].b_leg1 || param1 == this.mens[this.aof[param1]].b_leg2)
                        {
                           this.mens[this.aof[param1]].hp_legs -= this.yy * this.yy * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                        }
                        else if(param1 == this.mens[this.aof[param1]].b_body || param1 == this.mens[this.aof[param1]].b_toe)
                        {
                           this.mens[this.aof[param1]].hp_body -= this.yy * this.yy * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                        }
                        else if(param1 == this.mens[this.aof[param1]].b_head_end || param1 == this.mens[this.aof[param1]].b_head_start)
                        {
                           this.mens[this.aof[param1]].hp_head -= this.yy * this.yy * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                           if(this.MP_mode && (this.MP_type == 1 || this.MP_type == 3))
                           {
                              this.mens[this.aof[param1]].hea -= this.yy * this.yy * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT;
                           }
                           else
                           {
                              this.mens[this.aof[param1]].hea -= this.yy * this.yy * 0.2 * this.GLOBAL_FALL_DAMAGE_MULT;
                           }
                        }
                        else if(param1 == this.mens[this.aof[param1]].b_arm1 || param1 == this.mens[this.aof[param1]].b_arm2)
                        {
                           this.mens[this.aof[param1]].hp_arms -= this.yy * this.yy * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                        }
                        this.mens[this.aof[param1]].lastshot = "body";
                        this.mens[this.aof[param1]].lastshotbygun = "wall";
                        this.effcolor = this.aof[param1];
                        this.FlowAt(this.ax[param1],this.ay[param1],0,-Number(this.atox[param1]),-Number(this.atoy[param1]),3);
                        if(this.MP_mode && this.MP_myid == this.aof[param1])
                        {
                           this.MP_custom_events += ";gshot|" + this.aof[param1] + "#" + this.r2(this.ax[param1]) + "#" + this.r2(this.ay[param1]) + "#" + this.r2(-Number(this.atox[param1])) + "#" + this.r2(-Number(this.atoy[param1])) + "#" + 3 + "#" + -1 + "#2" + "#" + 0;
                        }
                        this.Hurt(this.aof[param1]);
                        if(this.aof[param1] == this.MP_myid)
                        {
                           this.HurtMyPlayer(this.atox[param1],this.atoy[param1],this.yy * this.yy * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT);
                        }
                     }
                  }
               }
            }
            if(this.Math_abs(this.cx) > this.Math_abs(this.cy))
            {
               if(this.around[param1])
               {
                  this.atoy[param1] *= Math.pow(0.95,this.thispulspeed);
               }
               else
               {
                  this.atoy[param1] = (param7 + Number(this.atoy[param1]) * 5) / 6;
                  if(this.atoy[param1] > param7 + this.gravity * 1)
                  {
                     this.atoy[param1] -= this.gravity * 1;
                  }
                  else if(this.atoy[param1] < param7 - this.gravity * 1)
                  {
                     this.atoy[param1] += this.gravity * 1;
                  }
                  else
                  {
                     this.atoy[param1] = param7;
                  }
               }
               if(this.cx < 0)
               {
                  this.ax[param1] = param2 + param4 + this.arad[param1];
                  this.lax[param1] = param2 + param4 + this.arad[param1];
                  this.atox[param1] = this.Math_abs(this.atox[param1]) * 0.5;
                  if(this.ay[param1] >= param3 + this.arad[param1] + 30)
                  {
                     if(this.ay[param1] <= param3 - Number(this.arad[param1]) + param5 - 30)
                     {
                        this.pres_right = true;
                        this.pres_ok = true;
                     }
                  }
               }
               else
               {
                  this.ax[param1] = param2 - Number(this.arad[param1]);
                  this.lax[param1] = param2 - Number(this.arad[param1]);
                  this.atox[param1] = -this.Math_abs(this.atox[param1]) * 0.5;
                  if(this.ay[param1] >= param3 + this.arad[param1] + 30)
                  {
                     if(this.ay[param1] <= param3 - Number(this.arad[param1]) + param5 - 30)
                     {
                        this.pres_left = true;
                        this.pres_ok = true;
                     }
                  }
               }
            }
            else
            {
               if(this.around[param1])
               {
                  this.atox[param1] *= Math.pow(0.95,this.thispulspeed);
               }
               else
               {
                  this.atox[param1] = (param6 + Number(this.atox[param1]) * 5) / 6;
                  if(this.amat[param1] == 6)
                  {
                     this.atox[param1] = param6;
                  }
                  if(this.atox[param1] > param6 + this.gravity * 1)
                  {
                     this.atox[param1] -= this.gravity * 1;
                  }
                  else if(this.atox[param1] < param6 - this.gravity * 1)
                  {
                     this.atox[param1] += this.gravity * 1;
                  }
                  else
                  {
                     this.atox[param1] = param6;
                  }
               }
               if(this.cy < 0)
               {
                  this.ay[param1] = param3 + this.arad[param1] + param5;
                  this.lay[param1] = param3 + this.arad[param1] + param5;
                  this.atoy[param1] = param7 + this.Math_abs(Number(this.atoy[param1]) - param7) * 0.5;
                  if(this.ax[param1] >= param2 + this.arad[param1] + 30)
                  {
                     if(this.ax[param1] <= param2 - Number(this.arad[param1]) + param4 - 30)
                     {
                        this.pres_bottom = true;
                        this.pres_ok = true;
                     }
                  }
               }
               else
               {
                  if(this.amat[param1] == 6)
                  {
                     this.ay[param1] = param3 - Number(this.arad[param1]) + 2;
                     this.lay[param1] = param3 - Number(this.arad[param1]) + 2;
                     if(this.atoy[param1] > 0)
                     {
                        this.atoy[param1] = 1;
                     }
                  }
                  else
                  {
                     this.ay[param1] = param3 - Number(this.arad[param1]);
                     this.lay[param1] = param3 - Number(this.arad[param1]);
                     this.atoy[param1] = param7 - this.Math_abs(Number(this.atoy[param1]) - param7) * 0.5;
                  }
                  if(this.ax[param1] >= param2 + this.arad[param1] + 30)
                  {
                     if(this.ax[param1] <= param2 - Number(this.arad[param1]) + param4 - 30)
                     {
                        this.pres_top = true;
                        this.pres_ok = true;
                     }
                  }
               }
            }
         }
      }
      
      /*public function MeasureStart(param1:uint) : void
      {
      }
      
      public function MeasureStop(param1:uint) : void
      {
      }
      
      public function MeasuresReset() : void
      {
      }
      
      public function MeasuresMaybePrint() : void
      {
         var _loc1_:uint = 0;
      }*/
      
      public function Physics() : void
      {
         var _loc1_:Number = NaN;
         var _loc2_:Object = null;
         if(this.GET_LITE_PHYS())
         {
            if(this.LITE_PHYS_tim)
            {
               this.LITE_PHYS_from = 0;
            }
            else
            {
               this.LITE_PHYS_from = 1;
            }
            this.extra_low_mult = 2;
         }
         else
         {
            this.LITE_PHYS_from = 0;
            this.extra_low_mult = 1;
         }
         this.i = 0;
         while(this.i < this.atotal)
         {
            if(this.GET_LITE_PHYS() && Math.ceil(Number(this.aof[this.i]) / 2 - Math.floor(Number(this.aof[this.i]) / 2)) == this.LITE_PHYS_from)
            {
               //this.MeasureStop(0);
               if(this.aio[this.i] == true)
               {
                  if(!this.MP_mode || this.TraceLineF_nopushers(this.ax[this.i],this.ay[this.i],this.lax[this.i] + this.atox[this.i],this.lay[this.i] + this.atoy[this.i]))
                  {
                     this.ax[this.i] = this.lax[this.i] + Number(this.atox[this.i]) * this.GSPEED;
                     this.ay[this.i] = this.lay[this.i] + Number(this.atoy[this.i]) * this.GSPEED;
                  }
               }
               //this.MeasureStop(0);
            }
            else if(this.aio[this.i] != -1)
            {
               //this.MeasureStop(1);
               if(this.aof[this.i] == this.MP_myid)
               {
                  this.thispulspeed = this.GSPEED2;
               }
               else
               {
                  this.thispulspeed = this.GSPEED;
               }
               if(this.GET_LITE_PHYS())
               {
                  this.thispulspeed *= 2;
                  this.lax[this.i] = this.ax[this.i];
                  this.lay[this.i] = this.ay[this.i];
               }
               if(this.aactive[this.i] == 1000 || Boolean(this.aactive[this.aof[this.i]]))
               {
                  //this.MeasureStop(4);
                  if(this.RAGDOLL_COLLIDE && (this.MP_gamestate != 2 || !this.MP_mode))
                  {
                     if(this.arad[this.i] > 1)
                     {
                        if(this.aio[this.i] != -1)
                        {
                           if(this.amat[this.i] != -1)
                           {
                              this.i2 = this.i + 1;
                              while(this.i2 < this.atotal)
                              {
                                 //this.MeasureStop(2);
                                 _loc1_ = this.arad[this.i] + this.arad[this.i2];
                                 if(this.ax[this.i] > Number(this.ax[this.i2]) - _loc1_)
                                 {
                                    if(this.ax[this.i] < this.ax[this.i2] + _loc1_)
                                    {
                                       if(this.ay[this.i] > Number(this.ay[this.i2]) - _loc1_)
                                       {
                                          if(this.ay[this.i] < this.ay[this.i2] + _loc1_)
                                          {
                                             if(this.aof[this.i] != this.aof[this.i2])
                                             {
                                                if(this.aio[this.i2] == true || this.aio[this.i] == true)
                                                {
                                                   if(Boolean(this.aactive[this.aof[this.i2]]) || this.aactive[this.i2] == 1000)
                                                   {
                                                      if(this.aio[this.i2] != -1)
                                                      {
                                                         if(this.amat[this.i2] != -1)
                                                         {
                                                            if(this.arad[this.i2] > 1)
                                                            {
                                                               if(this.aof[this.i] < 0 || this.mens[this.aof[this.i]].incar == -1)
                                                               {
                                                                  if(this.aof[this.i2] < 0 || this.mens[this.aof[this.i2]].incar == -1)
                                                                  {
                                                                     //this.MeasureStop(2);
                                                                     this.xx = this.Dist2D(this.ax[this.i],this.ay[this.i],this.ax[this.i2],this.ay[this.i2]);
                                                                     if(this.xx > 1)
                                                                     {
                                                                        if(this.xx < _loc1_)
                                                                        {
                                                                           //this.MeasureStop(3);
                                                                           this.cx = (this.ax[this.i] + this.ax[this.i2]) * 0.5;
                                                                           this.cy = (this.ay[this.i] + this.ay[this.i2]) * 0.5;
                                                                           this.offset_balance = this.arad[this.i2] / (this.arad[this.i] + this.arad[this.i2]);
                                                                           this.temp_coef = 20 / this.xx * (this.GSPEED < 2 ? this.GSPEED : 2) * (this.arad[this.i] + this.arad[this.i2] - this.xx) / (this.arad[this.i] + this.arad[this.i2]);
                                                                           this.yy = this.offset_balance * this.temp_coef;
                                                                           this.atox[this.i] += (Number(this.ax[this.i]) - this.cx) * this.yy;
                                                                           this.atoy[this.i] += (Number(this.ay[this.i]) - this.cy) * this.yy;
                                                                           this.ax[this.i] += (Number(this.ax[this.i]) - this.cx) * this.yy;
                                                                           this.ay[this.i] += (Number(this.ay[this.i]) - this.cy) * this.yy;
                                                                           this.yy = (1 - this.offset_balance) * this.temp_coef;
                                                                           this.atox[this.i2] += (Number(this.ax[this.i2]) - this.cx) * this.yy;
                                                                           this.atoy[this.i2] += (Number(this.ay[this.i2]) - this.cy) * this.yy;
                                                                           this.ax[this.i2] += (Number(this.ax[this.i2]) - this.cx) * this.yy;
                                                                           this.ay[this.i2] += (Number(this.ay[this.i2]) - this.cy) * this.yy;
                                                                           this.cx = (this.atox[this.i] + this.atox[this.i2]) * 0.5;
                                                                           this.cy = (this.atoy[this.i] + this.atoy[this.i2]) * 0.5;
                                                                           this.atox[this.i] = (Number(this.atox[this.i]) * 3 + this.cx) * 0.25;
                                                                           this.atoy[this.i] = (Number(this.atoy[this.i]) * 3 + this.cy) * 0.25;
                                                                           this.atox[this.i2] = (Number(this.atox[this.i2]) * 3 + this.cx) * 0.25;
                                                                           this.atoy[this.i2] = (Number(this.atoy[this.i2]) * 3 + this.cy) * 0.25;
                                                                           if(this.arad[this.i2] > 25 && this.arad[this.i] > 25)
                                                                           {
                                                                              this.acollided[this.i] = 1;
                                                                              this.acollided[this.i2] = 1;
                                                                              if(this.amat[this.i] == 6)
                                                                              {
                                                                                 this.atoy[this.i] -= 0.2;
                                                                              }
                                                                              if(this.amat[this.i2] == 6)
                                                                              {
                                                                                 this.atoy[this.i2] -= 0.2;
                                                                              }
                                                                           }
                                                                           if(this.VectorDist2D(this.atox[this.i],this.atoy[this.i]) + this.VectorDist2D(this.atox[this.i2],this.atoy[this.i2]) > 2 * (this.GSPEED > 1 ? this.GSPEED : 1) * (this.GET_LITE_PHYS() ? 2 : 1))
                                                                           {
                                                                              this.WakeUpAtom(this.i2);
                                                                              this.WakeUpAtom(this.i);
                                                                           }
                                                                           else
                                                                           {
                                                                              this.ForceAtomSleep(this.i2);
                                                                              this.ForceAtomSleep(this.i);
                                                                           }
                                                                           //this.MeasureStop(3);
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                                 ++this.i2;
                              }
                           }
                        }
                     }
                  }
                  //this.MeasureStop(4);
                  if(this.aio[this.i] == true)
                  {
                     //this.MeasureStop(5);
                     this.ax[this.i] += Number(this.atox[this.i]) * this.thispulspeed;
                     this.ay[this.i] += Number(this.atoy[this.i]) * this.thispulspeed;
                     this.i2 = 0;
                     while(this.i2 < this.pushstotal)
                     {
                        if(this.ax[this.i] > this.pushx[this.i2])
                        {
                           if(this.ax[this.i] < this.pushw[this.i2])
                           {
                              if(this.ay[this.i] > this.pushy[this.i2])
                              {
                                 if(this.ay[this.i] < this.pushh[this.i2])
                                 {
                                    this.atox[this.i] += Number(this.pushtox[this.i2]) * this.thispulspeed;
                                    this.atoy[this.i] += Number(this.pushtoy[this.i2]) * this.thispulspeed;
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     if(this.ay[this.i] > this.g_maxy)
                     {
                        this.atox[this.i] *= 0.5;
                        this.atoy[this.i] *= 0.5;
                        this.atoy[this.i] -= this.gravity * 2;
                     }
                     this.xx = this.VectorDist2D(this.atox[this.i],this.atoy[this.i]);
                     if(this.ainwater[this.i])
                     {
                        this.xx *= 2;
                     }
                     if(this.GSPEED > 1)
                     {
                        this.xx /= this.GSPEED;
                     }
                     if(this.GET_LITE_PHYS())
                     {
                        this.xx /= 2;
                     }
                     if(this.xx < this.gravity * 2.5)
                     {
                        this.atim[this.i] += this.GSPEED;
                        if(this.atim[this.i] > 10)
                        {
                           this.ForceAtomSleep(this.i);
                        }
                     }
                     else if(this.ax[this.i] > this.render_minX && this.ax[this.i] < this.render_maxX && this.ay[this.i] > this.render_minY && this.ay[this.i] < this.render_maxY)
                     {
                        this.atim[this.i] = 0;
                     }
                     else if(this.xx < this.gravity * 3)
                     {
                        this.atim[this.i] += this.GSPEED;
                        if(this.atim[this.i] > 20)
                        {
                           this.ForceAtomSleep(this.i);
                        }
                     }
                     if(this.acollided[this.i] == 1)
                     {
                        this.acollided[this.i] = 2;
                     }
                     else
                     {
                        this.acollided[this.i] = 0;
                     }
                     this.ok = false;
                     this.i2 = 0;
                     while(this.i2 < this.watertotal && !this.ok)
                     {
                        if(this.ax[this.i] > this.wax[this.i2])
                        {
                           if(this.ax[this.i] < this.wax[this.i2] + this.waw[this.i2])
                           {
                              if(this.ay[this.i] > this.way[this.i2])
                              {
                                 if(this.ay[this.i] < this.way[this.i2] + this.wah[this.i2])
                                 {
                                    this.ok = true;
                                    this.u = this.way[this.i2];
                                    this.ainwater_shape[this.i] = this.i2;
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     if(this.ok)
                     {
                        if(!this.ainwater[this.i])
                        {
                           if(this.wa_friction[this.ainwater_shape[this.i]])
                           {
                              if(this.xx > 4)
                              {
                                 this.Effect(this.ax[this.i],this.u,3,0,this.atoy[this.i]);
                              }
                           }
                           this.ainwater[this.i] = true;
                        }
                        if(this.wa_friction[this.ainwater_shape[this.i]])
                        {
                           if(this.aof[this.i] >= 0)
                           {
                              if(this.mens[this.aof[this.i]].hea > 0)
                              {
                                 this.atoy[this.i] -= this.gravity * this.thispulspeed;
                              }
                              else
                              {
                                 this.atoy[this.i] -= this.gravity * 1.5 * this.thispulspeed;
                              }
                           }
                           else
                           {
                              this.atoy[this.i] -= this.gravity * 0.5 * this.thispulspeed;
                           }
                           if(this.amat[this.i] == 4 || this.amat[this.i] == 5)
                           {
                              this.atoy[this.i] -= this.gravity * this.thispulspeed;
                           }
                           this.atox[this.i] *= Math.pow(0.9,this.thispulspeed);
                           this.atoy[this.i] *= Math.pow(0.9,this.thispulspeed);
                        }
                        else
                        {
                           this.atoy[this.i] -= this.gravity * this.thispulspeed;
                        }
                     }
                     else if(this.ainwater[this.i])
                     {
                        if(this.wa_friction[this.ainwater_shape[this.i]])
                        {
                           if(this.xx > 4)
                           {
                              this.Effect(this.ax[this.i],this.ay[this.i],3,0,this.atoy[this.i]);
                           }
                        }
                        this.ainwater[this.i] = false;
                     }
                     if(this.aof[this.i] >= 0 && this.mens[this.aof[this.i]].incar == -1)
                     {
                        if(this.ablood[this.i] > 0)
                        {
                           if(this.ablood[this.i] > 10)
                           {
                              this.ablood[this.i] = 10;
                           }
                           else if(Boolean(this.mens[this.aof[this.i]].dead) || !this.mens[this.aof[this.i]].dying)
                           {
                              this.ablood[this.i] -= 0.2 * this.thispulspeed;
                           }
                           if(Math.random() > 0.8)
                           {
                              if(this.mens[this.aof[this.i]].armored < 2)
                              {
                                 this.effcolor = this.aof[this.i];
                                 this.FlowAt(this.ax[this.i],this.ay[this.i],0,this.atox[this.i],this.atoy[this.i],1);
                              }
                              else
                              {
                                 this.Effect(this.ax[this.i],this.ay[this.i],8,0,-2);
                              }
                           }
                        }
                     }
                     this.pres_ok = false;
                     this.pres_left = this.pres_right = this.pres_top = this.pres_bottom = false;
                     this.near_atom = this.GetNearBoxBSP_at(this.ax[this.i],this.ay[this.i]);
                     this.f_ok = true;
                     this.f_min = this.gravity * this.thispulspeed;
                     //this.MeasureStop(5);
                     //this.MeasureStop(6);
                     for each(this.i2 in this.near_atom)
                     {
                        if(this.ax[this.i] >= this.boxx[this.i2] && this.ax[this.i] <= this.boxx[this.i2] + this.boxw[this.i2] && this.ay[this.i] + this.arad[this.i] + this.thispulspeed >= this.boxy[this.i2] && this.ay[this.i] <= this.boxy[this.i2] + this.boxh[this.i2])
                        {
                           this.f_ok = false;
                           this.f_min = Math.min(this.boxy[this.i2] - (this.ay[this.i] + this.arad[this.i]),this.f_min);
                           break;
                        }
                     }
                     if(this.f_ok)
                     {
                        this.atoy[this.i] += this.f_min;
                     }
                     //this.MeasureStop(6);
                     //this.MeasureStop(7);
                     _loc2_ = this.GetAtomOriginalPosition(this.i);
                     if(this.amat[this.i] != 1 && this.amat[this.i] != 0 || (this.amat[this.i] == 1 || this.amat[this.i] == 0) && this.mens[this.aof[this.i]].incar == -1)
                     {
                        for each(this.i2 in this.near_atom)
                        {
                           this.PhysHit(this.i,this.boxx[this.i2],this.boxy[this.i2],this.boxw[this.i2],this.boxh[this.i2],0,0,_loc2_);
                        }
                        this.i2 = 0;
                        while(this.i2 < this.doorstotal)
                        {
                           this.PhysHit(this.i,this.doors[this.i2].x,this.doors[this.i2].y,this.doors[this.i2].w,this.doors[this.i2].h,this.doors[this.i2].tox,this.doors[this.i2].toy,_loc2_);
                           ++this.i2;
                        }
                     }
                     //this.MeasureStop(7);
                     //this.MeasureStop(8);
                     if(this.pres_ok)
                     {
                        if(this.aof[this.i] >= 0 && this.aof[this.i] < 100)
                        {
                           if(this.mens[this.aof[this.i]].io)
                           {
                              this.mc = this.mens[this.aof[this.i]];
                              if(!this.MP_mode || !this.mc.isplayer || this.aof[this.i] == this.MP_myid)
                              {
                                 if(this.mc.stability <= 0)
                                 {
                                    if(this.pres_left && this.pres_right || this.pres_top && this.pres_bottom)
                                    {
                                       this.mc.stability = Math.min(this.mc.stability,-0.1);
                                       if(this.mc.pressure > 10)
                                       {
                                          if(this.i == this.mc.b_body || this.i == this.mc.b_toe)
                                          {
                                             this.mc.hp_body = 0;
                                             this.mc.hea = 0;
                                             this.Hurt(this.aof[this.i]);
                                          }
                                          if(Boolean(this.mc.dying) || Boolean(this.mc.dead))
                                          {
                                             if(this.i == this.mc.b_leg1 || this.i == this.mc.b_leg2)
                                             {
                                                this.mc.hp_legs = 0;
                                                this.Hurt(this.aof[this.i]);
                                             }
                                             if(this.i == this.mc.b_head_end)
                                             {
                                                this.mc.hp_head = 0;
                                                this.Hurt(this.aof[this.i]);
                                             }
                                             if(this.i == this.mc.b_arm1 || this.i == this.mc.b_arm2)
                                             {
                                                this.mc.hp_arms = 0;
                                                this.Hurt(this.aof[this.i]);
                                             }
                                          }
                                          if(this.mc.team != this.mens[this.MP_myid].team)
                                          {
                                             this.incBadge(8);
                                          }
                                       }
                                       else
                                       {
                                          if(this.mc.pressure == 0)
                                          {
                                             this.Hurt(this.aof[this.i]);
                                          }
                                          this.mc.pressure += Math.ceil(4 * this.GSPEED);
                                       }
                                    }
                                    else if(!this.mc.dead)
                                    {
                                       if(this.mc.pressure > 0)
                                       {
                                          this.mc.pressure -= Math.ceil(2 * this.GSPEED);
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                     //this.MeasureStop(8);
                  }
                  else if(this.aio[this.i] == false)
                  {
                     this.atox[this.i] = 0;
                     this.atoy[this.i] = 0;
                  }
               }
               else if(this.TracePointNoRagdolls(this.ax[this.i],this.ay[this.i] + this.arad[this.i] + 3))
               {
                  this.atox[this.i] *= 0.98;
                  this.atoy[this.i] *= 0.98;
               }
               else
               {
                  this.ForceAtomSleep(this.i);
               }
               //this.MeasureStop(1);
            }
            ++this.i;
         }
         //this.MeasuresMaybePrint();
         this.Physics2();
      }
      
      public function Physics2() : void
      {
         this.phys_stress = 0;
         this.phys_got_stress = true;
         while(this.phys_stress < 4 && this.phys_got_stress)
         {
            this.phys_got_stress = false;
            this.i2 = 0;
            while(this.i2 < this.chtotal)
            {
               if(this.chio[this.i2] != -1)
               {
                  if(this.aactive[this.chP[this.i2]] == 1000 || Boolean(this.aactive[this.aof[this.chP[this.i2]]]))
                  {
                     if(this.chio[this.i2] == true || this.chio[this.i2] == false)
                     {
                        if(this.DEBUG_MODE)
                        {
                           this.ok = false;
                        }
                        if(this.aio[this.chP[this.i2]] == 2 || this.aio[this.chC[this.i2]] == 2)
                        {
                           this.chio[this.i2] = 2;
                        }
                        if(this.aio[this.chP[this.i2]] == -1 || this.aio[this.chC[this.i2]] == -1)
                        {
                           this.chio[this.i2] = -1;
                           this.DisposeAtom(this.chP[this.i2]);
                           this.DisposeAtom(this.chC[this.i2]);
                        }
                        if(this.chio[this.i2] == true || this.chio[this.i2] == false)
                        {
                           if(this.aio[this.chP[this.i2]] == false && this.aio[this.chC[this.i2]] == false)
                           {
                              this.chio[this.i2] = false;
                           }
                           else
                           {
                              this.chio[this.i2] = true;
                              this.WakeUpAtom(this.chP[this.i2],false);
                              this.WakeUpAtom(this.chC[this.i2],false);
                           }
                        }
                        if(this.chio[this.i2] == true)
                        {
                           this.cx = (this.ax[this.chP[this.i2]] + this.ax[this.chC[this.i2]]) * 0.5;
                           this.cy = (this.ay[this.chP[this.i2]] + this.ay[this.chC[this.i2]]) * 0.5;
                           if(this.aof[this.chP[this.i2]] == this.MP_myid)
                           {
                              this.thispulspeed = this.GSPEED2;
                           }
                           else
                           {
                              this.thispulspeed = this.GSPEED;
                           }
                           if(this.GET_LITE_PHYS())
                           {
                              this.thispulspeed *= 2;
                           }
                           this.xx = this.Dist2D(this.ax[this.chP[this.i2]],this.ay[this.chP[this.i2]],this.ax[this.chC[this.i2]],this.ay[this.chC[this.i2]]);
                           this.yy = this.Math_abs(this.xx - Number(this.chdef[this.i2])) * Number(this.chdamp[this.i2]) * 0.5;
                           if(this.MP_mode)
                           {
                              if(this.thispulspeed > 1)
                              {
                                 this.yy /= this.thispulspeed * this.thispulspeed;
                              }
                           }
                           else if(this.thispulspeed > 1)
                           {
                              this.yy /= this.thispulspeed;
                           }
                           if(this.xx < 1)
                           {
                              this.xx = 1;
                           }
                           if(this.xx > this.chdef[this.i2])
                           {
                              if(this.chtypa[this.i2] == 0 || this.chtypa[this.i2] == 2)
                              {
                                 this.u = (Number(this.ax[this.chP[this.i2]]) - Number(this.ax[this.chC[this.i2]])) / this.xx * this.yy;
                                 this.v = (Number(this.ay[this.chP[this.i2]]) - Number(this.ay[this.chC[this.i2]])) / this.xx * this.yy;
                                 this.atox[this.chC[this.i2]] += this.u;
                                 this.atoy[this.chC[this.i2]] += this.v;
                                 this.atox[this.chP[this.i2]] -= this.u;
                                 this.atoy[this.chP[this.i2]] -= this.v;
                                 if(this.DEBUG_MODE)
                                 {
                                    this.ok = true;
                                 }
                              }
                           }
                           else if(this.xx < this.chdef[this.i2])
                           {
                              if(this.chtypa[this.i2] == 0 || this.chtypa[this.i2] == 1)
                              {
                                 this.u = (Number(this.ax[this.chP[this.i2]]) - Number(this.ax[this.chC[this.i2]])) / this.xx * this.yy;
                                 this.v = (Number(this.ay[this.chP[this.i2]]) - Number(this.ay[this.chC[this.i2]])) / this.xx * this.yy;
                                 this.atox[this.chC[this.i2]] -= this.u;
                                 this.atoy[this.chC[this.i2]] -= this.v;
                                 this.atox[this.chP[this.i2]] += this.u;
                                 this.atoy[this.chP[this.i2]] += this.v;
                                 if(this.DEBUG_MODE)
                                 {
                                    this.ok = true;
                                 }
                              }
                           }
                           if(this.chdamp[this.i2] == 1)
                           {
                              if(this.chtypa[this.i2] == 0 || this.xx > this.chdef[this.i2] && this.chtypa[this.i2] == 2 || this.xx < this.chdef[this.i2] && this.chtypa[this.i2] == 1)
                              {
                                 this.u = (Number(this.ax[this.chP[this.i2]]) - this.cx) * Number(this.chdef[this.i2]) / this.xx;
                                 this.v = (Number(this.ay[this.chP[this.i2]]) - this.cy) * Number(this.chdef[this.i2]) / this.xx;
                                 this.ax[this.chP[this.i2]] = this.cx + this.u;
                                 this.ay[this.chP[this.i2]] = this.cy + this.v;
                                 this.ax[this.chC[this.i2]] = this.cx - this.u;
                                 this.ay[this.chC[this.i2]] = this.cy - this.v;
                              }
                           }
                           if(this.chtypa[this.i2] == 0 || this.chtypa[this.i2] == 2)
                           {
                              if(this.xx > this.chdef[this.i2] + 10 || this.xx > Number(this.chdef[this.i2]) * 1.5 + 5 || this.xx < Number(this.chdef[this.i2]) * 0.75 - 5)
                              {
                                 if(!this.TracePointNoRagdolls(this.cx,this.cy))
                                 {
                                    this.ax[this.chP[this.i2]] += this.cx - Number(this.ax[this.chC[this.i2]]);
                                    this.ay[this.chP[this.i2]] += this.cy - Number(this.ay[this.chC[this.i2]]);
                                    this.ax[this.chC[this.i2]] += this.cx - Number(this.ax[this.chC[this.i2]]);
                                    this.ay[this.chC[this.i2]] += this.cy - Number(this.ay[this.chC[this.i2]]);
                                    this.atox[this.chP[this.i2]] *= 0.5;
                                    this.atoy[this.chP[this.i2]] *= 0.5;
                                    this.atox[this.chC[this.i2]] *= 0.5;
                                    this.atoy[this.chC[this.i2]] *= 0.5;
                                 }
                              }
                           }
                        }
                        if(this.DEBUG_MODE)
                        {
                           if(this.ok)
                           {
                              this.debug_screen.graphics.lineStyle((Number(this.arad[this.chP[this.i2]]) * 2 * 2 + Number(this.arad[this.chC[this.i2]]) * 2) / 3,16711680,0.1);
                              this.debug_screen.graphics.moveTo(this.ax[this.chP[this.i2]],this.ay[this.chP[this.i2]]);
                              this.debug_screen.graphics.lineTo((this.ax[this.chC[this.i2]] + this.ax[this.chP[this.i2]]) / 2,(this.ay[this.chC[this.i2]] + this.ay[this.chP[this.i2]]) / 2);
                              this.debug_screen.graphics.lineStyle((Number(this.arad[this.chP[this.i2]]) * 2 + Number(this.arad[this.chC[this.i2]]) * 2 * 2) / 3,16711680,0.1);
                              this.debug_screen.graphics.moveTo((this.ax[this.chC[this.i2]] + this.ax[this.chP[this.i2]]) / 2,(this.ay[this.chC[this.i2]] + this.ay[this.chP[this.i2]]) / 2);
                              this.debug_screen.graphics.lineTo(this.ax[this.chC[this.i2]],this.ay[this.chC[this.i2]]);
                           }
                           this.debug_screen.graphics.lineStyle(1,16776960,1);
                           this.debug_screen.graphics.moveTo(this.ax[this.chP[this.i2]],this.ay[this.chP[this.i2]]);
                           this.debug_screen.graphics.lineTo(this.ax[this.chC[this.i2]],this.ay[this.chC[this.i2]]);
                        }
                     }
                  }
               }
               ++this.i2;
            }
            this.i2 = 0;
            while(this.i2 < this.chtotal && !this.phys_got_stress)
            {
               if(this.chio[this.i2] != -1)
               {
                  if(this.aactive[this.chP[this.i2]] == 1000 || Boolean(this.aactive[this.aof[this.chP[this.i2]]]))
                  {
                     if(this.chio[this.i2] == true)
                     {
                        if(this.chdamp[this.i2] == 1)
                        {
                           this.xx = this.Dist2D(this.ax[this.chP[this.i2]],this.ay[this.chP[this.i2]],this.ax[this.chC[this.i2]],this.ay[this.chC[this.i2]]);
                           if(this.chtypa[this.i2] == 0 || this.xx > this.chdef[this.i2] && this.chtypa[this.i2] == 2 || this.xx < this.chdef[this.i2] && this.chtypa[this.i2] == 1)
                           {
                              this.yy = Math.abs(Number(this.chdef[this.i2]) - this.xx);
                              if(this.yy > 15 && this.yy > Number(this.chdef[this.i2]) * 0.5)
                              {
                                 ++this.phys_stress;
                                 this.phys_got_stress = true;
                              }
                           }
                        }
                     }
                  }
               }
               ++this.i2;
            }
         }
         if(this.GET_LITE_PHYS())
         {
            this.i = 0;
            while(this.i < this.atotal)
            {
               if(this.aio[this.i] != -1)
               {
                  this.xx = this.ax[this.i];
                  this.yy = this.ay[this.i];
                  this.ax[this.i] = (this.ax[this.i] + this.lax[this.i]) / 2;
                  this.ay[this.i] = (this.ay[this.i] + this.lay[this.i]) / 2;
                  this.lax[this.i] = this.xx;
                  this.lay[this.i] = this.yy;
               }
               ++this.i;
            }
         }
         if(this.DEBUG_MODE)
         {
            this.i = 0;
            while(this.i < this.atotal)
            {
               if(this.aio[this.i] != -1)
               {
                  if(this.aio[this.i] == true)
                  {
                     this.debug_screen.graphics.lineStyle(Number(this.arad[this.i]) * 2,65280,0.3);
                  }
                  else
                  {
                     this.debug_screen.graphics.lineStyle(Number(this.arad[this.i]) * 2,255,0.5);
                  }
                  this.debug_screen.graphics.moveTo(this.ax[this.i],this.ay[this.i]);
                  this.debug_screen.graphics.lineTo(this.ax[this.i],this.ay[this.i] + 1);
               }
               ++this.i;
            }
         }
      }
      
      public function StartMiniScenario(param1:int) : Boolean
      {
         if(this.mini_scenario_cur == -1)
         {
            this.mini_scenario_cur = param1;
            this.mini_scenario_phase = 0;
            return true;
         }
         return false;
      }
      
      public function k_down(param1:KeyboardEvent) : void
      {
         var _loc2_:int = 0;
         var _loc3_:String = null;
         var _loc4_:int = 0;
         var _loc5_:* = undefined;
         var _loc6_:String = null;
         var _loc7_:Number = NaN;
         var _loc8_:Number = NaN;
		 //if (param1.keyCode == 13) trace("uh oh");
		 try {
			 this.VarChangePreventStart();
			 if(this.last_key_code != param1.keyCode)
			 {
				this.last_key_code = param1.keyCode;
				this.keys_are_being_pressed = true;
			 }
			 if(param1.keyCode == Keyboard.CONTROL)
			 {
				this.key_ctrl = true;
			 }
			 if(currentLabel == "intro")
			 {
				if(param1.keyCode == 27)
				{
				   // intr.removeChild(vidobj);
				   // nc.close();
				   // ns.close();
				   gotoAndStop("ads");
				}
			 }
			 /*if(currentLabel == "loginform")
			 {
				if(param1.keyCode == 13 || param1.keyCode == 32 && stage.focus != this.flogin && stage.focus != this.fpassword)
				{
				   this.proceed();
				}
			 }*/
			 if(currentLabel == "gaming")
			 {
				if(param1.keyCode == 112)
				{
				   this.TakeScreenShot(0,0.75);
				}
				else if(!this.MP_mode)
				{
				   if(param1.keyCode == 113)
				   {
					  this.TakeScreenShot(0,0.5);
				   }
				   else if(param1.keyCode == 114)
				   {
					  this.TakeScreenShot(0,0.25);
				   }
				   else if(param1.keyCode == 115)
				   {
					  this.TakeScreenShot(0,0.1);
				   }
				}
				if(param1.keyCode == 82 && !this.MP_mode && !this.chat_win.visible) {
				   GotoMap(CUR_LOADING);
				}
				if(param1.keyCode == 27)
				{
				   if(!this.gamemenu.visible)
				   {
					  if(!this.MP_mode)
					  {
						 this.system_non_stop = false;
						 if(this.MP_myid < this.playerstotal && !this.mens[this.MP_myid].dead)
						 {
							this.pauze.visible = true;
						 }
						 this.stoped_by_focus = false;
					  }
					  this.gamemenu.visible = true;
					  this.myCursor.alpha = 1;
				   }
				   else if(this.conmenu_set.visible)
				   {
					  this.conmenu_set.visible = false;
				   }
				   else if(this.conmenu.visible)
				   {
					  this.conmenu.visible = false;
				   }
				   else
				   {
					  if(!this.MP_mode)
					  {
						 this.system_non_stop = true;
						 if(this.MP_myid < this.playerstotal && !this.mens[this.MP_myid].dead)
						 {
							this.pauze.visible = false;
						 }
					  }
					  this.gamemenu.visible = false;
				   }
				}
				if(this.trigger_to_key_binds_down[param1.keyCode] != undefined)
				{
				   this.EXEC_TRIGGER(this.trigger_to_key_binds_down[param1.keyCode]);
				}
				if(param1.keyCode == 9 || param1.keyCode == 35)
				{
				   if(this.MP_mode)
				   {
					  if(!this.herolist.visible)
					  {
						 _loc2_ = 0;
						 while(_loc2_ < this.MP_playerstotal)
						 {
							this.UpdateHeroList(_loc2_);
							_loc2_++;
						 }
						 this.herolist.visible = true;
					  }
				   }
				   else if(this.CASUAL_MODE)
				   {
					  this.ok = true;
					  _loc2_ = this.MP_myid;
					  this.i4 = _loc2_ + 1;
					  while(this.i4 != _loc2_ && this.ok)
					  {
						 if(this.i4 >= this.playerstotal)
						 {
							this.i4 = 0;
						 }
						 else
						 {
							if(this.mens[this.i4].io)
							{
							   if(this.mens[this.i4].team == this.mens[this.MP_myid].team)
							   {
								  if(this.mens[this.i4].hea > 0)
								  {
									 if(!this.mens[this.i4].dying)
									 {
										this.ok = false;
										this.MP_myid = this.i4;
										this.GSPEED = 0.01;
										this.new_active.visible = true;
										this.new_active.gotoAndPlay(1);
										this.PlaySound_full(this.s_team_switch);
										this.mens[this.i4].isplayer = true;
										this.mens[_loc2_].isplayer = false;
										this.UpdateWeps();
									 }
								  }
							   }
							}
							++this.i4;
						 }
					  }
				   }
				}
				if(this.MP_spectator)
				{
				   this.VarChangePreventEnd();
				   return;
				}
				if(param1.keyCode == 13 || this.MP_mode && param1.keyCode == 84 && !this.MP_chat_input)
				{
				   if(this.MP_chat_input && param1.keyCode == 13)
				   {
					  this.MP_chat_input = false;
					  this.chat_win.gamechat_input.text = "";
					  if(!this.MP_mode || this.gamechat_input_text == "bot 1" || this.gamechat_input_text == "bot 0")
					  {
						 if(this.gamechat_input_text.length > 0)
						 {
							if(false/*this.FORCE_CUSTOM_MAP*/)
							{
							   this.ChatNewMsg("<font color=\"#78DBE2\">" + this.mens[this.MP_myid].nick + "</font><font color=\"#FFFFFF\">: " + this.gamechat_input_text + "</font>");
							   this.PlaySound_full(this.s_chat);
							   this.UserSays(this.MP_myid,this.gamechat_input_text);
							}
							else
							{
							   this.ChatNewMsg(this.new_nick2 + this.gamechat_input_text);
							   this.ok = true;
							   if(this.gamechat_input_text == "god 1" || this.gamechat_input_text == "god")
							   {
								  this.mens[this.MP_myid].hmax *= 100000;
								  this.mens[this.MP_myid].hea = this.mens[this.MP_myid].hmax;
								  if(this.mens[this.MP_myid].dead)
								  {
									 this.mens[this.MP_myid].dead = false;
								  }
								  if(this.mens[this.MP_myid].dying)
								  {
									 this.mens[this.MP_myid].dying = false;
								  }
								  this.Hurt_nopain(this.MP_myid);
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "gm")
							   {
								  this.ARCADE_GAME_MODE = !this.ARCADE_GAME_MODE;
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "grow")
							   {
								  this.SetPlayerScale(this.mens[this.MP_myid],Number(this.mens[this.MP_myid].scale) * 1.25);
								  this.mens[this.MP_myid].hmax *= 1.25 * 1.25;
								  this.mens[this.MP_myid].hea *= 1.25 * 1.25;
								  this.game_scale /= 1.25;
								  this.IM_A_CHEATER = true;
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "shrink")
							   {
								  this.SetPlayerScale(this.mens[this.MP_myid],Number(this.mens[this.MP_myid].scale) / 1.25);
								  this.mens[this.MP_myid].hmax /= 1.25 * 1.25;
								  this.mens[this.MP_myid].hea /= 1.25 * 1.25;
								  this.game_scale *= 1.25;
								  this.IM_A_CHEATER = true;
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "grow enemies")
							   {
								  _loc2_ = 0;
								  while(_loc2_ < this.playerstotal)
								  {
									 if(_loc2_ != this.MP_myid)
									 {
										this.SetPlayerScale(this.mens[_loc2_],Number(this.mens[_loc2_].scale) * 1.25);
										this.mens[_loc2_].hmax *= 1.25 * 1.25;
										this.mens[_loc2_].hea *= 1.25 * 1.25;
									 }
									 _loc2_++;
								  }
								  this.IM_A_CHEATER = true;
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "shrink enemies")
							   {
								  _loc2_ = 0;
								  while(_loc2_ < this.playerstotal)
								  {
									 if(_loc2_ != this.MP_myid)
									 {
										this.SetPlayerScale(this.mens[_loc2_],Number(this.mens[_loc2_].scale) / 1.25);
										this.mens[_loc2_].hmax /= 1.25 * 1.25;
										this.mens[_loc2_].hea /= 1.25 * 1.25;
									 }
									 _loc2_++;
								  }
								  this.IM_A_CHEATER = true;
								  this.ok = false;
							   }
							   if(this.gamechat_input_text.indexOf("give ") == 0)
							   {
								  _loc3_ = this.gamechat_input_text.substr(5);
								  this.mc = this.MakeGunByClass(_loc3_,{
									 "x":this.mens[this.MP_myid].x,
									 "y":this.mens[this.MP_myid].y,
									 "upg":3,
									 "command":-1
								  });
								  this.IM_A_CHEATER = true;
								  this.ok = false;
							   }
							   if(this.gamechat_input_text.indexOf("skin enemies ") == 0)
							   {
								  _loc2_ = 0;
								  while(_loc2_ < this.playerstotal)
								  {
									 if(_loc2_ != this.MP_myid)
									 {
										_loc4_ = int(this.gamechat_input_text.substr(13));
										this.mc = this.mens[_loc2_];
										this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "-";
										this.mc.char = _loc4_;
										this.mc.mdl_head = this.mc.char;
										this.mc.mdl_leg1_upper = this.mc.char;
										this.mc.mdl_leg1_middle = this.mc.char;
										this.mc.mdl_leg1_lower = this.mc.char;
										this.mc.mdl_leg2_upper = this.mc.char;
										this.mc.mdl_leg2_middle = this.mc.char;
										this.mc.mdl_leg2_lower = this.mc.char;
										this.mc.mdl_arm1_upper = this.mc.char;
										this.mc.mdl_arm1_lower = this.mc.char;
										this.mc.mdl_arm2_upper = this.mc.char;
										this.mc.mdl_arm2_lower = this.mc.char;
										this.mc.mdl_toe = this.mc.char;
										this.mc.mdl_body = this.mc.char;
										this.mc.alpha = 1;
										this.UpdateCharProps(this.mc);
										this.SpawnPlayerImmediately(this.mc);
									 }
									 _loc2_++;
								  }
							   }
							   else if(this.gamechat_input_text.indexOf("skin ") == 0)
							   {
								  _loc2_ = this.MP_myid;
								  _loc4_ = int(this.gamechat_input_text.substr(5));
								  this.mc = this.mens[_loc2_];
								  this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "-";
								  this.mc.char = _loc4_;
								  this.mc.mdl_head = this.mc.char;
								  this.mc.mdl_leg1_upper = this.mc.char;
								  this.mc.mdl_leg1_middle = this.mc.char;
								  this.mc.mdl_leg1_lower = this.mc.char;
								  this.mc.mdl_leg2_upper = this.mc.char;
								  this.mc.mdl_leg2_middle = this.mc.char;
								  this.mc.mdl_leg2_lower = this.mc.char;
								  this.mc.mdl_arm1_upper = this.mc.char;
								  this.mc.mdl_arm1_lower = this.mc.char;
								  this.mc.mdl_arm2_upper = this.mc.char;
								  this.mc.mdl_arm2_lower = this.mc.char;
								  this.mc.mdl_toe = this.mc.char;
								  this.mc.mdl_body = this.mc.char;
								  this.mc.alpha = 1;
								  this.UpdateCharProps(this.mc);
								  this.SpawnPlayerImmediately(this.mc);
							   }
							   if(this.gamechat_input_text == "quick start")
							   {
								  this.CMPG_money = 999999;
								  if(this.LEVELS_PASSED < this.LEVELS_TOTAL)
								  {
									 this.LEVELS_PASSED = this.LEVELS_TOTAL;
								  }
								  this.IM_A_CHEATER = true;
								  this.ok = false;
							   }
							   if(this.gamechat_input_text.indexOf("hero1skin ") != -1)
							   {
								  this.skin_model[0] = int(this.gamechat_input_text.split(" ")[1]);
								  this.ok = false;
							   }
							   if(this.gamechat_input_text.indexOf("hero2skin ") != -1)
							   {
								  this.skin_model[1] = int(this.gamechat_input_text.split(" ")[1]);
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "no players")
							   {
								  this.playerstotal = 1;
								  this.MP_myid = 0;
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "no barrels")
							   {
								  this.barrelstotal = 0;
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "no vehicles")
							   {
								  this.vehiclestotal = 0;
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "no lights" || this.gamechat_input_text == "no lamps")
							   {
								  this.lampstotal = 0;
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "no guns")
							   {
								  this.gunstotal = 0;
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "debug" || this.gamechat_input_text == "debug 1")
							   {
								  this.DEBUG_MODE = true;
								  this.debug_screen.visible = true;
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "debug 0")
							   {
								  this.DEBUG_MODE = false;
								  this.debug_screen.graphics.clear();
								  this.debug_screen.visible = false;
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "god 0")
							   {
								  this.mens[this.MP_myid].hea /= 100000;
								  this.mens[this.MP_myid].hmax /= 100000;
								  this.Hurt_nopain(this.MP_myid);
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "headshot")
							   {
								  this.xx = this.mens[this.MP_myid].hea;
								  this.mens[this.MP_myid].hp_head = 0;
								  this.Hurt(this.MP_myid);
								  this.mens[this.MP_myid].hea = this.xx;
								  this.mens[this.MP_myid].dead = false;
								  this.mens[this.MP_myid].dying = false;
								  this.mens[this.MP_myid].stability = -2;
								  this.atoy[this.mens[this.MP_myid].b_head_end] -= 10;
								  this.atox[this.mens[this.MP_myid].b_head_end] -= Number(this.mens[this.MP_myid].side) * 5;
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "friends")
							   {
								  _loc2_ = 0;
								  while(_loc2_ < this.playerstotal)
								  {
									 if(this.mens[_loc2_].io)
									 {
										this.mens[_loc2_].team = 0;
									 }
									 _loc2_++;
								  }
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "dm")
							   {
								  _loc2_ = 0;
								  while(_loc2_ < this.playerstotal)
								  {
									 if(this.mens[_loc2_].io)
									 {
										this.mens[_loc2_].team = _loc2_;
									 }
									 _loc2_++;
								  }
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "kill enemies")
							   {
								  _loc2_ = 0;
								  while(_loc2_ < this.playerstotal)
								  {
									 if(this.mens[_loc2_].io)
									 {
										if(this.mens[_loc2_].team != this.mens[this.MP_myid].team)
										{
										   this.mens[_loc2_].hea = 0;
										   this.Hurt_nopain(_loc2_);
										}
									 }
									 _loc2_++;
								  }
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "hyper jump")
							   {
								  this.mens[this.MP_myid].toy = -25;
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "over fast")
							   {
								  this.MP_fps = this.DEFAULT_FPS * 5;
								  this.ok = false;
								  this.SP_unlimit_framerate = true;
							   }
							   if(this.gamechat_input_text == "uber fast")
							   {
								  this.MP_fps = this.DEFAULT_FPS * 4;
								  this.ok = false;
								  this.SP_unlimit_framerate = true;
							   }
							   if(this.gamechat_input_text == "extra fast")
							   {
								  this.MP_fps = this.DEFAULT_FPS * 3;
								  this.ok = false;
								  this.SP_unlimit_framerate = true;
							   }
							   if(this.gamechat_input_text == "very fast")
							   {
								  this.MP_fps = this.DEFAULT_FPS * 2;
								  this.ok = false;
								  this.SP_unlimit_framerate = true;
							   }
							   if(this.gamechat_input_text == "faster")
							   {
								  this.MP_fps = this.DEFAULT_FPS * 1.5;
								  this.ok = false;
								  this.SP_unlimit_framerate = true;
							   }
							   if(this.gamechat_input_text == "fast")
							   {
								  this.MP_fps = this.DEFAULT_FPS * 1.25;
								  this.ok = false;
								  this.SP_unlimit_framerate = true;
							   }
							   if(this.gamechat_input_text == "normal")
							   {
								  this.MP_fps = this.DEFAULT_FPS;
								  this.ok = false;
								  this.SP_unlimit_framerate = false;
							   }
							   if(this.gamechat_input_text == "slow")
							   {
								  this.MP_fps = this.DEFAULT_FPS * 0.75;
								  this.ok = false;
								  this.SP_unlimit_framerate = true;
							   }
							   if(this.gamechat_input_text == "slower")
							   {
								  this.MP_fps = this.DEFAULT_FPS * 0.5;
								  this.ok = false;
								  this.SP_unlimit_framerate = true;
							   }
							   if(this.gamechat_input_text == "very slow")
							   {
								  this.MP_fps = this.DEFAULT_FPS * 0.25;
								  this.ok = false;
								  this.SP_unlimit_framerate = true;
							   }
							   if(this.gamechat_input_text == "zoom 100")
							   {
								  this.game_scale = 1;
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "zoom 200")
							   {
								  this.game_scale = 2;
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "zoom 50")
							   {
								  this.game_scale = 0.5;
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "zoom 25")
							   {
								  this.game_scale = 0.25;
								  this.ok = false;
							   }
							   if(this.gamechat_input_text == "give all")
							   {
								  _loc2_ = 0;
								  while(_loc2_ < this.inventoryC.length)
								  {
									 this.mc = this.MakeGunByClass(this.inventoryC[_loc2_].mdl,{
										"x":this.mens[this.MP_myid].x,
										"y":this.mens[this.MP_myid].y,
										"upg":this.inventoryC[_loc2_].upg,
										"command":-1
									 });
									 _loc2_++;
								  }
								  if(!this.FORCE_CUSTOM_MAP)
								  {
									 this.IM_A_CHEATER = true;
								  }
								  this.ok = false;
							   }
							   if(this.ok)
							   {
								  this.ChatNewMsg("bash: " + this.gamechat_input_text + ": command not found");
								  this.PlaySound_full(this.s_chat);
							   }
							   else
							   {
								  this.BADGES_ENABLED = false;
							   }
							   if(this.IM_A_CHEATER)
							   {
								   this.IM_A_CHEATER = false;
								  // this.ShowNoAch();
								  // this.SaveGame();
							   }
							   this.UserSays(this.MP_myid,this.gamechat_input_text);
							}
						 }
						 if(this.gamechat_input_text == "render 0")
						 {
							this.game.visible = false;
							this.graphics_3d_front.visible = false;
							this.graphics_3d.visible = false;
							this.sky.visible = false;
						 }
						 if(this.gamechat_input_text == "render 1")
						 {
							this.game.visible = true;
							this.graphics_3d_front.visible = true;
							this.graphics_3d.visible = true;
							this.sky.visible = true;
						 }
						 if(this.gamechat_input_text == "bot 1")
						 {
							this.MP_half_bot = true;
							if(this.MP_mode)
							{
							   this.EASY_MODE = true;
							   this.PRO_BOTS = false;
							   this.LOW_HPS = false;
							}
						 }
						 if(this.gamechat_input_text == "bot 0")
						 {
							this.MP_half_bot = false;
						 }
						 if(this.gamechat_input_text == "kill")
						 {
							this.mens[this.MP_myid].hp_head = 0;
							this.Hurt(this.MP_myid);
							this.mens[this.MP_myid].hea = 0;
						 }
					  }
					  else
					  {
						 this.ok = true;
						 if(this.gamechat_input_text == "-kill")
						 {
							this.mens[this.MP_myid].hp_head = 0;
							this.Hurt(this.MP_myid);
							this.mens[this.MP_myid].hea = 0;
							this.ok = false;
						 }
						 if(this.gamechat_input_text.substr(0,5) == "-ping")
						 {
							if(Number(getTimer()) - this.LAST_VOTE > 60000)
							{
							   _loc5_ = Number(this.gamechat_input_text.substr(6,this.gamechat_input_text.length));
							   if(Boolean(isNaN(_loc5_)) || !isNaN(_loc5_) && (_loc5_ < 10 || _loc5_ > 1000))
							   {
								  this.DialogSay("\'\'" + this.gamechat_input_text.substr(6,this.gamechat_input_text.length) + "\'\' is not a correct ping value.","#FFFF00");
								  if(!isNaN(_loc5_) && (_loc5_ < 10 || _loc5_ > 1000))
								  {
									 this.LAST_VOTE = getTimer();
								  }
							   }
							   else
							   {
								  this.MP_custom_events += ";voteping|" + this.gamechat_input_text.substr(6,this.gamechat_input_text.length);
								  this.LAST_VOTE = getTimer();
							   }
							}
							else
							{
							   this.DialogSay("You will be allowed to vote again in " + Math.ceil((60000 - (Number(getTimer()) - this.LAST_VOTE)) / 1000) + " seconds.","#FFFF00");
							}
						 }
						 if(this.MP_type == 3)
						 {
							if(this.gamechat_input_text == "-blue")
							{
							   this.mc = this.mens[this.MP_myid];
							   if(Number(getTimer()) - Number(this.mc.whenlastshot) > 7000)
							   {
								  this.mc.lastshotby = -1;
							   }
							   if(this.mc.dead || this.mc.lastshotby == -1 || this.mc.lastshotby == this.MP_myid)
							   {
								  this.mc.team = 13;
								  this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "B";
								  this.spawn = false;
								  this.mc.hea = 0;
								  this.mc.mdl_head = this.mc.char;
								  this.mc.mdl_leg1_upper = this.mc.char;
								  this.mc.mdl_leg1_middle = this.mc.char;
								  this.mc.mdl_leg1_lower = this.mc.char;
								  this.mc.mdl_leg2_upper = this.mc.char;
								  this.mc.mdl_leg2_middle = this.mc.char;
								  this.mc.mdl_leg2_lower = this.mc.char;
								  this.mc.mdl_arm1_upper = this.mc.char;
								  this.mc.mdl_arm1_lower = this.mc.char;
								  this.mc.mdl_arm2_upper = this.mc.char;
								  this.mc.mdl_arm2_lower = this.mc.char;
								  this.mc.mdl_toe = this.mc.char;
								  this.mc.mdl_body = this.mc.char;
								  this.UpdateCharProps(this.mc);
								  this.ok = false;
								  this.UpdateTeamTable();
								  _loc2_ = 0;
								  while(_loc2_ < this.playerstotal)
								  {
									 this.UpdateTeamColor(this.mens[_loc2_]);
									 _loc2_++;
								  }
							   }
							   else
							   {
								  this.DialogSay("Can\'t change team during fight.","#FFFF00");
							   }
							}
							if(this.gamechat_input_text == "-red")
							{
							   this.mc = this.mens[this.MP_myid];
							   if(Number(getTimer()) - Number(this.mc.whenlastshot) > 7000)
							   {
								  this.mc.lastshotby = -1;
							   }
							   if(this.mc.dead || this.mc.lastshotby == -1 || this.mc.lastshotby == this.MP_myid)
							   {
								  this.mc.team = 12;
								  this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "R";
								  this.spawn = false;
								  this.mc.hea = 0;
								  this.mc.mdl_head = this.mc.char;
								  this.mc.mdl_leg1_upper = this.mc.char;
								  this.mc.mdl_leg1_middle = this.mc.char;
								  this.mc.mdl_leg1_lower = this.mc.char;
								  this.mc.mdl_leg2_upper = this.mc.char;
								  this.mc.mdl_leg2_middle = this.mc.char;
								  this.mc.mdl_leg2_lower = this.mc.char;
								  this.mc.mdl_arm1_upper = this.mc.char;
								  this.mc.mdl_arm1_lower = this.mc.char;
								  this.mc.mdl_arm2_upper = this.mc.char;
								  this.mc.mdl_arm2_lower = this.mc.char;
								  this.mc.mdl_toe = this.mc.char;
								  this.mc.mdl_body = this.mc.char;
								  this.UpdateCharProps(this.mc);
								  this.ok = false;
								  this.UpdateTeamTable();
								  _loc2_ = 0;
								  while(_loc2_ < this.playerstotal)
								  {
									 this.UpdateTeamColor(this.mens[_loc2_]);
									 _loc2_++;
								  }
							   }
							   else
							   {
								  this.DialogSay("Can\'t change team during fight.","#FFFF00");
							   }
							}
						 }
						 if(this.ok)
						 {
							if(this.gamechat_input_text.length > 0)
							{
							   this.MP_last_message_patience -= (Number(getTimer()) - this.MP_last_message) / 550;
							   if(this.MP_last_message_patience < 0)
							   {
								  this.MP_last_message_patience = 0;
							   }
							   this.MP_last_message_patience += 20000 / Math.max(300,Number(getTimer()) - this.MP_last_message);
							   this.MP_last_message = getTimer();
							   if(this.MP_pass == "")
							   {
								  if(this.MP_last_message_patience > 110)
								  {
									 if(this.mens[this.MP_myid].dead || this.mens[this.MP_myid].lastshotby == -1 || Number(getTimer()) - Number(this.mens[this.MP_myid].whenlastshot) > 7000)
									 {
										this.DialogSay("Disconnected. You didn\'t stopped it, so we are sorry","#FF0000");
										this.MP_force_disconnect = true;
									 }
								  }
								  else if(this.MP_last_message_patience > 90)
								  {
									 this.DialogSay("Please don\'t send messages so quickly. You will be disconnected if you will continue","#FFFF00");
								  }
								  else if(this.MP_last_message_patience > 80)
								  {
									 this.DialogSay("Please don\'t send messages so quickly. It is not allowed","#FFFF00");
								  }
							   }
							   while(this.gamechat_input_text != this.gamechat_input_text.replace("=","[eq]"))
							   {
								  this.gamechat_input_text = this.gamechat_input_text.replace("=","[eq]");
							   }
							   while(this.gamechat_input_text != this.gamechat_input_text.replace("|","[i]"))
							   {
								  this.gamechat_input_text = this.gamechat_input_text.replace("|","[i]");
							   }
							   while(this.gamechat_input_text != this.gamechat_input_text.replace(";","[dc]"))
							   {
								  this.gamechat_input_text = this.gamechat_input_text.replace(";","[dc]");
							   }
							   while(this.gamechat_input_text != this.gamechat_input_text.replace("<","[lt]"))
							   {
								  this.gamechat_input_text = this.gamechat_input_text.replace("<","[lt]");
							   }
							   while(this.gamechat_input_text != this.gamechat_input_text.replace(">","[gt]"))
							   {
								  this.gamechat_input_text = this.gamechat_input_text.replace(">","[gt]");
							   }
							   while(this.gamechat_input_text != this.gamechat_input_text.replace("\"","[2q]"))
							   {
								  this.gamechat_input_text = this.gamechat_input_text.replace("\"","[2q]");
							   }
							   while(this.gamechat_input_text != this.gamechat_input_text.replace("/","[sl]"))
							   {
								  this.gamechat_input_text = this.gamechat_input_text.replace("/","[sl]");
							   }
							   while(this.gamechat_input_text != this.gamechat_input_text.replace("\\","[rsl]"))
							   {
								  this.gamechat_input_text = this.gamechat_input_text.replace("\\","[rsl]");
							   }
							   if(this.MP_chat_input_for == "all")
							   {
								  this.MP_custom_events += ";chat|" + this.gamechat_input_text;
							   }
							   else if(this.MP_chat_input_for == "team")
							   {
								  this.MP_custom_events += ";tchat|" + this.gamechat_input_text;
							   }
							   if(this.DISPLAY_CHAT < 1)
							   {
								  if(this.MP_mode)
								  {
									 this.DialogSay("Note: You\'ve said something, but you have \'\'DISPLAY CHAT\'\' set to \'\'NO\'\' in your Graphics & Gameplay settings.","#FFFF00");
								  }
							   }
							}
						 }
					  }
					  this.chat_win.visible = false;
				   }
				   else if(true || this.LEVELS_PASSED >= this.LEVELS_TOTAL || this.MP_mode || this.FORCE_CUSTOM_MAP)
				   {
					  this.MP_chat_input = true;
					  if(this.MP_mode && param1.keyCode == 84)
					  {
						 this.MP_chat_input_for = "team";
					  }
					  else
					  {
						 this.MP_chat_input_for = "all";
					  }
					  this.chat_win.gamechat_input.text = "";
					  this.gamechat_input_text = "";
					  this.chat_win.chatmode.gotoAndStop(this.MP_chat_input_for);
					  this.chat_win.visible = true;
				   }
				   else
				   {
					  this.ChatNewMsg("E: Access denied; complete all campaign levels first");
				   }
				}
				else if(this.MP_chat_input)
				{
				   if(param1.keyCode == 8)
				   {
					  this.gamechat_input_text = this.gamechat_input_text.slice(0,this.gamechat_input_text.length - 1);
					  this.chat_win.gamechat_input.htmlText = "<b>" + this.gamechat_input_text + "</b>";
				   }
				   else
				   {
					  _loc6_ = String.fromCharCode(param1.charCode);
					  if(this.allowedText.indexOf(_loc6_) != -1)
					  {
						 this.gamechat_input_text += _loc6_;
						 this.chat_win.gamechat_input.htmlText = "<b>" + this.gamechat_input_text.split("<").join("&lt;").split(">").join("&gt;") + "</b>";
					  }
				   }
				}
				else
				{
				   if(param1.keyCode == 65 || param1.keyCode == 37)
				   {
					  this.key_left = true;
				   }
				   if(param1.keyCode == 68 || param1.keyCode == 39)
				   {
					  this.key_right = true;
				   }
				   if(param1.keyCode == 32 || param1.keyCode == 82)
				   {
					  if(this.LEVEL_END_FORCE != "" && this.LEVEL_END_FORCE != "complete" && this.LEVEL_END_FORCE != "credits")
					  {
						 if(!this.MP_mode)
						 {
							if(this.darkness.alpha > 0.02)
							{
							   this.darkness.visible = true;
							   this.darkness.alpha = 1;
							   if(this.LEVEL_END_FORCE == "failed")
							   {
								  this.LEVEL_END_FORCE = "restart";
							   }
							}
						 }
					  }
				   }
				   if(param1.keyCode == 87 || param1.keyCode == 38 || param1.keyCode == 32)
				   {
					  this.key_up = true;
				   }
				   if(param1.keyCode == 71 || param1.keyCode == 96)
				   {
					  if(!this.MP_mode)
					  {
						 this.StartMiniScenario(0);
					  }
					  else if(this.MP_type != 2 || this.MP_gamestate == 0)
					  {
						 if(this.grenades_total > 0)
						 {
							if(this.mini_scenario_cur == -1 && !this.mens[this.MP_myid].dead && !this.mens[this.MP_myid].brk_arms)
							{
							   this.MP_myspecials[this.MP_myspecials_total] = new Object();
							   this.MP_myspecials[this.MP_myspecials_total].stat = 1;
							   this.MP_myspecials[this.MP_myspecials_total].id_in_full_list = -1;
							   this.MP_myspecials[this.MP_myspecials_total].nadekind = 1;
							   this.MP_custom_events += ";gren|1#" + this.MP_myspecials_total;
							   ++this.MP_myspecials_total;
							}
						 }
					  }
				   }
				   if(this.MP_mode)
				   {
					  if(this.MP_type != 2 || this.MP_gamestate == 0)
					  {
						 if(param1.keyCode == 67)
						 {
							if(this.grenades_port_total > 0)
							{
							   if(this.mini_scenario_cur == -1 && !this.mens[this.MP_myid].dead && !this.mens[this.MP_myid].brk_arms)
							   {
								  this.MP_myspecials[this.MP_myspecials_total] = new Object();
								  this.MP_myspecials[this.MP_myspecials_total].stat = 1;
								  this.MP_myspecials[this.MP_myspecials_total].id_in_full_list = -1;
								  this.MP_myspecials[this.MP_myspecials_total].nadekind = 2;
								  this.MP_custom_events += ";gren|2#" + this.MP_myspecials_total;
								  ++this.MP_myspecials_total;
							   }
							}
						 }
						 if(param1.keyCode == 90)
						 {
							if(this.grenades_sh_total > 0)
							{
							   if(this.mini_scenario_cur == -1 && !this.mens[this.MP_myid].dead && !this.mens[this.MP_myid].brk_arms)
							   {
								  this.MP_myspecials[this.MP_myspecials_total] = new Object();
								  this.MP_myspecials[this.MP_myspecials_total].stat = 1;
								  this.MP_myspecials[this.MP_myspecials_total].id_in_full_list = -1;
								  this.MP_myspecials[this.MP_myspecials_total].nadekind = 3;
								  this.MP_custom_events += ";gren|3#" + this.MP_myspecials_total;
								  ++this.MP_myspecials_total;
							   }
							}
						 }
					  }
				   }
				   if(param1.keyCode == 86 || param1.keyCode == 8)
				   {
					  this.key_grab = true;
				   }
				   if(param1.keyCode == 81)
				   {
					  if(this.last_gun_b4_psi != -1)
					  {
						 if(this.last_gun_b4_psi < this.gunstotal)
						 {
							this.mc = this.guns[this.last_gun_b4_psi];
							if(this.mc.picken_by == this.MP_myid && !this.mc.forcars)
							{
							   if(this.mc.model != "item_grenade" || this.mc.wep >= 0)
							   {
								  this.i4 = this.mens[this.MP_myid].curwea;
								  this.mens[this.MP_myid].curwea = this.last_gun_b4_psi;
								  this.last_gun_b4_psi = this.i4;
								  this.ChangedGun(this.MP_myid);
							   }
							}
						 }
					  }
					  else
					  {
						 this.i4 = this.mens[this.MP_myid].curwea;
						 this.mens[this.MP_myid].curwea = this.last_gun_b4_psi;
						 this.last_gun_b4_psi = this.i4;
						 this.ChangedGun(this.MP_myid);
					  }
				   }
				   if(param1.keyCode == 70)
				   {
				   }
				   if(!this.MP_mode)
				   {
					  if(param1.keyCode == 80)
					  {
						 if(this.system_non_stop)
						 {
							this.system_non_stop = false;
							if(!this.mens[this.MP_myid].dead)
							{
							   this.pauze.visible = true;
							}
						 }
						 else
						 {
							this.system_non_stop = true;
							if(!this.mens[this.MP_myid].dead)
							{
							   this.pauze.visible = false;
							}
						 }
						 this.stoped_by_focus = false;
					  }
				   }
				   if(param1.keyCode == 83 || param1.keyCode == 40 || param1.keyCode == 17)
				   {
					  this.key_down = true;
				   }
				   if(param1.keyCode == 71 || param1.keyCode == 96 || param1.keyCode == 13)
				   {
					  this.key_grenade = true;
				   }
				   if(param1.keyCode == 69 || param1.keyCode == 45)
				   {
					  this.key_pick = true;
				   }
				   if(param1.keyCode == 88)
				   {
					  this.key_fall = true;
				   }
				   if(param1.keyCode == 90)
				   {
					  if(!this.key_alt)
					  {
						 if(!this.MP_mode)
						 {
							this.key_alt = true;
							if(this.timeshift > 0)
							{
							   this.timeshift = 0;
							   this.timeshiftch = this.s_slow_up.play(0,0,this.vol);
							   if(this.SCREEN_EFFECTS)
							   {
								  this.whitness.alpha += 1;
								  this.whitness.visible = true;
							   }
							}
							else if(this.ALLOW_TIMESHIFT)
							{
							   if(this.energy > 10)
							   {
								  if(!this.mens[this.MP_myid].dead)
								  {
									 this.energy -= 10;
									 this.timeshift = 1;
									 this.timeshiftch = this.s_slow_down.play(0,0,this.vol);
									 if(this.SCREEN_EFFECTS)
									 {
										this.whitness.alpha += 1;
										this.whitness.visible = true;
									 }
								  }
							   }
							}
						 }
					  }
				   }
				   if(param1.keyCode == 34)
				   {
					  if(!this.key_alt)
					  {
						 if(!this.MP_mode)
						 {
							this.key_alt = true;
							if(this.timeshift > 0)
							{
							   this.timeshift = 0;
							   this.timeshiftch = this.s_slow_up.play(0,0,this.vol);
							   if(this.SCREEN_EFFECTS)
							   {
								  this.whitness.alpha += 1;
								  this.whitness.visible = true;
							   }
							}
						 }
					  }
				   }
				   if(param1.keyCode == 33)
				   {
					  if(!this.key_alt)
					  {
						 if(!this.MP_mode)
						 {
							this.key_alt = true;
							if(this.timeshift <= 0)
							{
							   if(this.ALLOW_TIMESHIFT)
							   {
								  if(this.energy > 10)
								  {
									 if(!this.mens[this.MP_myid].dead)
									 {
										this.energy -= 10;
										this.timeshift = 1;
										this.timeshiftch = this.s_slow_down.play(0,0,this.vol);
										if(this.SCREEN_EFFECTS)
										{
										   this.whitness.alpha += 1;
										   this.whitness.visible = true;
										}
									 }
								  }
							   }
							}
						 }
					  }
				   }
				   if(this.KINETIC_MODULE_ENABLED)
				   {
					  if(param1.keyCode == 67)
					  {
						 if(!this.key_kinetic)
						 {
							this.key_kinetic = true;
							this.cinetic_target = -1;
							_loc7_ = -1;
							_loc2_ = 0;
							while(_loc2_ < this.atotal)
							{
							   if(this.aio[_loc2_] == true || this.aio[_loc2_] == false)
							   {
								  if(this.aof[_loc2_] >= 0 && this.aof[_loc2_] < 100 && this.mens[this.aof[_loc2_]].incar == -1 && this.aof[_loc2_] != this.MP_myid || this.aof[_loc2_] >= 100 || this.aof[_loc2_] > -200 && this.aof[_loc2_] <= -100 || this.aof[_loc2_] < 0 && this.aof[_loc2_] > -100 && !this.guns[-Number(this.aof[_loc2_]) - 1].forcars && this.guns[-Number(this.aof[_loc2_]) - 1].alpha > 0)
								  {
									 if(this.arad[_loc2_] < 16)
									 {
										if(this.arad[_loc2_] > 0)
										{
										   if((_loc8_ = this.Dist2D(this.ax[_loc2_],this.ay[_loc2_],this.mens[this.MP_myid].tarx,this.mens[this.MP_myid].tary)) < this.arad[_loc2_] + 40)
										   {
											  this.ok = true;
											  if(this.aactive[_loc2_] != 1000)
											  {
												 if(this.aof[_loc2_] < 0 && this.aof[_loc2_] > -100)
												 {
													if(this.guns[-Number(this.aof[_loc2_]) - 1].picken_by != -1)
													{
													   if(!this.guns[-Number(this.aof[_loc2_]) - 1].forcars)
													   {
														  if(this.guns[-Number(this.aof[_loc2_]) - 1].picken_by == this.MP_myid || this.mens[this.guns[-Number(this.aof[_loc2_]) - 1].picken_by].team != this.mens[this.MP_myid].team)
														  {
															 this.ok = false;
														  }
													   }
													}
												 }
											  }
											  if(this.ok)
											  {
												 if(_loc8_ < _loc7_ || _loc7_ == -1)
												 {
													this.cinetic_target = _loc2_;
													_loc7_ = _loc8_;
												 }
											  }
										   }
										}
									 }
								  }
							   }
							   _loc2_++;
							}
						 }
					  }
				   }
				   if(this.mens[this.MP_myid].hea > 0)
				   {
					  if(param1.keyCode >= 48 && param1.keyCode <= 57 || param1.keyCode == 167 || param1.keyCode == 192 || param1.keyCode == 0)
					  {
						 if(param1.keyCode == 48 || param1.keyCode == 167 || param1.keyCode == 192 || param1.keyCode == 0)
						 {
							if(this.mens[this.MP_myid].curwea != -1)
							{
							   this.last_gun_b4_psi = this.mens[this.MP_myid].curwea;
							   this.mens[this.MP_myid].curwea = -1;
							   this.ChangedGun(this.MP_myid);
							   this.UpdateCurGun();
							}
						 }
						 else
						 {
							_loc2_ = 0;
							while(_loc2_ < this.gunstotal)
							{
							   if(this.guns[_loc2_].io)
							   {
								  this.mc = this.guns[_loc2_];
								  if(this.mc.picken_by == this.MP_myid && !this.mc.forcars)
								  {
									 if(this.mc.wep == param1.keyCode - 48)
									 {
										if(this.mens[this.MP_myid].curwea != _loc2_)
										{
										   this.last_gun_b4_psi = this.mens[this.MP_myid].curwea;
										   this.mens[this.MP_myid].curwea = _loc2_;
										   this.ChangedGun(this.MP_myid);
										   this.UpdateCurGun();
										}
									 }
								  }
							   }
							   _loc2_++;
							}
						 }
					  }
				   }
				}
			 }
			 this.VarChangePreventEnd();
		  }
		 catch(e:*) {
			 this.LAST_ERROR = "For some reason k_down errored. " + e.message;
			 DropGameTimer();
			 gotoAndStop("menu");
		 }
	  }
      public function onMouseWheelEvent(param1:MouseEvent) : void
      {
         this.VarChangePreventStart();
         if(this.MOUSE_WHEEL)
         {
            if(currentLabel == "gaming")
            {
               if(!this.MP_spectator)
               {
                  if(!this.OVERSCROLL || getTimer() > this.let_scroll_last + 150)
                  {
                     this.let_scroll_last = getTimer();
                     if(this.mens[this.MP_myid].hea > 0)
                     {
                        this.ok = true;
                        this.last_gun_b4_psi = this.mens[this.MP_myid].curwea;
                        if(this.mens[this.MP_myid].curwea == -1)
                        {
                           this.i = -1;
                        }
                        else
                        {
                           this.i = this.guns[this.mens[this.MP_myid].curwea].wep;
                        }
                        if(param1.delta > 0)
                        {
                           this.i2 = 1;
                        }
                        else
                        {
                           this.i2 = -1;
                        }
                        this.i3 = this.mens[this.MP_myid].curwea;
                        while(this.ok)
                        {
                           this.i += this.i2;
                           if(this.i > 9)
                           {
                              this.i = -1;
                           }
                           if(this.i < -1)
                           {
                              this.i = 9;
                           }
                           if(this.i == -1)
                           {
                              this.mens[this.MP_myid].curwea = -1;
                              this.ok = false;
                              this.ChangedGun(this.MP_myid);
                              this.UpdateCurGun();
                           }
                           else
                           {
                              this.i4 = 0;
                              while(this.i4 < this.gunstotal)
                              {
                                 if(this.guns[this.i4].io)
                                 {
                                    this.mc = this.guns[this.i4];
                                    if(this.mc.picken_by == this.MP_myid && !this.mc.forcars)
                                    {
                                       if(this.mc.wep == this.i)
                                       {
                                          this.mens[this.MP_myid].curwea = this.i4;
                                          this.ok = false;
                                          this.ChangedGun(this.MP_myid);
                                          this.UpdateCurGun();
                                       }
                                    }
                                 }
                                 ++this.i4;
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
         this.VarChangePreventEnd();
      }
      
      public function k_up(param1:KeyboardEvent) : void
      {
         this.VarChangePreventStart();
         if(param1.keyCode == Keyboard.CONTROL)
         {
            this.key_ctrl = false;
         }
         if(currentLabel == "gaming")
         {
            if(this.trigger_to_key_binds_up[param1.keyCode] != undefined)
            {
               this.EXEC_TRIGGER(this.trigger_to_key_binds_up[param1.keyCode]);
            }
            if(param1.keyCode == 65 || param1.keyCode == 37)
            {
               this.key_left = false;
            }
            if(param1.keyCode == 68 || param1.keyCode == 39)
            {
               this.key_right = false;
            }
            if(param1.keyCode == 87 || param1.keyCode == 38 || param1.keyCode == 32)
            {
               this.key_up = false;
            }
            if(param1.keyCode == 83 || param1.keyCode == 40 || param1.keyCode == 17)
            {
               this.key_down = false;
            }
            if(param1.keyCode == 71 || param1.keyCode == 96 || param1.keyCode == 13)
            {
               this.key_grenade = false;
            }
            if(param1.keyCode == 69 || param1.keyCode == 45)
            {
               this.key_pick = false;
            }
            if(param1.keyCode == 88)
            {
               this.key_fall = false;
            }
            if(param1.keyCode == 90 || param1.keyCode == 34 || param1.keyCode == 33)
            {
               this.key_alt = false;
            }
            if(param1.keyCode == 9 || param1.keyCode == 35)
            {
               if(this.MP_mode)
               {
                  this.herolist.visible = false;
               }
            }
            if(param1.keyCode == 67)
            {
               this.key_kinetic = false;
            }
            if(param1.keyCode == 71)
            {
               this.key_grenade = false;
            }
            if(param1.keyCode == 86 || param1.keyCode == 8)
            {
               this.key_grab = false;
            }
         }
         this.VarChangePreventEnd();
      }
      
      public function m_press(param1:Event) : void
      {
         var event:Event = param1;
         this.VarChangePreventStart();
         if(!this.Disable_next_click)
         {
            is_firing = true;
         }
         else
         {
            this.Disable_next_click = false;
         }
         if(mouseY < 50)
         {
            if(this.pcg.hitTestPoint(mouseX,mouseY,false))
            {
               if(this.key_ctrl)
               {
                  is_firing = false;
                  this.PlaySound_full(this.ss_info_act);
                  this.key_ctrl = false;
                  try
                  {
                     navigateToURL(new URLRequest("http://www.coolbuddy.com"),"_blank");
                  }
                  catch(e:Error)
                  {
                  }
               }
               else
               {
                  this.DialogSay("Hold \'\'Ctrl\'\' (\'\'Cmd\'\') key to press this button","#FFFF00");
               }
            }
            if(this.qmenu.hitTestPoint(mouseX,mouseY,false))
            {
               if(this.key_ctrl)
               {
                  is_firing = false;
                  this.PlaySound_full(this.ss_info_act);
                  this.key_ctrl = false;
                  if(!this.gamemenu.visible)
                  {
                     if(!this.MP_mode)
                     {
                        this.system_non_stop = false;
                        if(!this.mens[this.MP_myid].dead)
                        {
                           this.pauze.visible = true;
                        }
                        this.stoped_by_focus = false;
                     }
                     this.gamemenu.visible = true;
                     this.myCursor.alpha = 1;
                  }
               }
               else
               {
                  this.DialogSay("Hold \'\'Ctrl\'\' (\'\'Cmd\'\') key to press this button","#FFFF00");
               }
            }
         }
         if(this.MP_mode)
         {
            if(this.herolist.visible)
            {
               this.i = 0;
               while(this.i < this.MP_playerstotal)
               {
                  if(this.hero[this.i].alpha > 0.1)
                  {
                     if(this.hero[this.i].f1.text != "Empty")
                     {
                        if(mouseX >= this.herolist.x + this.hero[this.i].x + this.hero[this.i].vbtn1.x)
                        {
                           if(mouseX <= this.herolist.x + this.hero[this.i].x + this.hero[this.i].vbtn1.x + 25 * Number(this.hero[this.i].vbtn1.scaleX))
                           {
                              if(mouseY >= this.herolist.y + this.hero[this.i].y + this.hero[this.i].vbtn1.y)
                              {
                                 if(mouseY <= this.herolist.y + this.hero[this.i].y + this.hero[this.i].vbtn1.y + 25 * Number(this.hero[this.i].vbtn1.scaleY))
                                 {
                                    this.PlaySound_full(this.ss_info_act);
                                    is_firing = false;
                                    this.DialogSay("Visiting profile page of \'\'" + this.mens[this.i].login_name + "\'\'...","#FFFF00");
                                    try
                                    {
                                       navigateToURL(new URLRequest("http://www.plazmaburst2.com/?s=7&ac=" + this.mens[this.i].login_name),"_blank");
                                    }
                                    catch(e:Error)
                                    {
                                    }
                                 }
                              }
                           }
                        }
                        if(mouseX >= this.herolist.x + this.hero[this.i].x + this.hero[this.i].vbtn2.x)
                        {
                           if(mouseX <= this.herolist.x + this.hero[this.i].x + this.hero[this.i].vbtn2.x + 25 * Number(this.hero[this.i].vbtn2.scaleX))
                           {
                              if(mouseY >= this.herolist.y + this.hero[this.i].y + this.hero[this.i].vbtn2.y)
                              {
                                 if(mouseY <= this.herolist.y + this.hero[this.i].y + this.hero[this.i].vbtn2.y + 25 * Number(this.hero[this.i].vbtn2.scaleY))
                                 {
                                    is_firing = false;
                                    this.PlaySound_full(this.ss_info_act);
                                    if(Number(getTimer()) - this.LAST_VOTE > 3000)
                                    {
                                       this.MP_custom_events += ";votekick|" + this.i + "#" + this.MP_myid;
                                       this.LAST_VOTE = getTimer();
                                    }
                                    else
                                    {
                                       this.DialogSay("You will be allowed to vote again in " + Math.ceil((3000 - (Number(getTimer()) - this.LAST_VOTE)) / 1000) + " seconds.","#FFFF00");
                                    }
                                 }
                              }
                           }
                        }
                        if(mouseX >= this.herolist.x + this.hero[this.i].x + this.hero[this.i].vbtn3.x)
                        {
                           if(mouseX <= this.herolist.x + this.hero[this.i].x + this.hero[this.i].vbtn3.x + 25 * Number(this.hero[this.i].vbtn3.scaleX))
                           {
                              if(mouseY >= this.herolist.y + this.hero[this.i].y + this.hero[this.i].vbtn3.y)
                              {
                                 if(mouseY <= this.herolist.y + this.hero[this.i].y + this.hero[this.i].vbtn3.y + 25 * Number(this.hero[this.i].vbtn3.scaleY))
                                 {
                                    this.PlaySound_full(this.ss_info_act);
                                    is_firing = false;
                                    if(Boolean(this.mens[this.MP_myid].dead) || this.MP_spectator)
                                    {
                                       this.death_cam = this.i;
                                    }
                                    else
                                    {
                                       this.DialogSay("Death Camera can be changed to different players only when you are dead.","#FFFF00");
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
                  ++this.i;
               }
            }
            if(this.MP_type == 3)
            {
               if(this.team_blue.hitTestPoint(mouseX,mouseY,false))
               {
                  if(this.key_ctrl)
                  {
                     this.PlaySound_full(this.ss_info_act);
                     this.key_ctrl = false;
                     this.mc = this.mens[this.MP_myid];
                     if(Number(getTimer()) - Number(this.mc.whenlastshot) > 7000)
                     {
                        this.mc.lastshotby = -1;
                     }
                     if(this.mc.dead || this.mc.lastshotby == -1 || this.mc.lastshotby == this.MP_myid)
                     {
                        this.mc.team = 13;
                        this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "B";
                        this.spawn = false;
                        this.mc.hea = 0;
                        this.mc.mdl_head = this.mc.char;
                        this.mc.mdl_leg1_upper = this.mc.char;
                        this.mc.mdl_leg1_middle = this.mc.char;
                        this.mc.mdl_leg1_lower = this.mc.char;
                        this.mc.mdl_leg2_upper = this.mc.char;
                        this.mc.mdl_leg2_middle = this.mc.char;
                        this.mc.mdl_leg2_lower = this.mc.char;
                        this.mc.mdl_arm1_upper = this.mc.char;
                        this.mc.mdl_arm1_lower = this.mc.char;
                        this.mc.mdl_arm2_upper = this.mc.char;
                        this.mc.mdl_arm2_lower = this.mc.char;
                        this.mc.mdl_toe = this.mc.char;
                        this.mc.mdl_body = this.mc.char;
                        this.UpdateCharProps(this.mc);
                        this.UpdateTeamTable();
                        this.i = 0;
                        while(this.i < this.playerstotal)
                        {
                           this.UpdateTeamColor(this.mens[this.i]);
                           ++this.i;
                        }
                     }
                     else
                     {
                        this.DialogSay("Can\'t change team during fight.","#FFFF00");
                     }
                  }
                  else
                  {
                     this.DialogSay("Hold \'\'Ctrl\'\' (\'\'Cmd\'\') key to press this button","#FFFF00");
                  }
               }
               if(this.team_red.hitTestPoint(mouseX,mouseY,false))
               {
                  if(this.key_ctrl)
                  {
                     this.PlaySound_full(this.ss_info_act);
                     this.key_ctrl = false;
                     this.mc = this.mens[this.MP_myid];
                     if(Number(getTimer()) - Number(this.mc.whenlastshot) > 7000)
                     {
                        this.mc.lastshotby = -1;
                     }
                     if(this.mc.dead || this.mc.lastshotby == -1 || this.mc.lastshotby == this.MP_myid)
                     {
                        this.mc.team = 12;
                        this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "R";
                        this.spawn = false;
                        this.mc.hea = 0;
                        this.mc.mdl_head = this.mc.char;
                        this.mc.mdl_leg1_upper = this.mc.char;
                        this.mc.mdl_leg1_middle = this.mc.char;
                        this.mc.mdl_leg1_lower = this.mc.char;
                        this.mc.mdl_leg2_upper = this.mc.char;
                        this.mc.mdl_leg2_middle = this.mc.char;
                        this.mc.mdl_leg2_lower = this.mc.char;
                        this.mc.mdl_arm1_upper = this.mc.char;
                        this.mc.mdl_arm1_lower = this.mc.char;
                        this.mc.mdl_arm2_upper = this.mc.char;
                        this.mc.mdl_arm2_lower = this.mc.char;
                        this.mc.mdl_toe = this.mc.char;
                        this.mc.mdl_body = this.mc.char;
                        this.UpdateCharProps(this.mc);
                        this.UpdateTeamTable();
                        this.i = 0;
                        while(this.i < this.playerstotal)
                        {
                           this.UpdateTeamColor(this.mens[this.i]);
                           ++this.i;
                        }
                     }
                     else
                     {
                        this.DialogSay("Can\'t change team during fight.","#FFFF00");
                     }
                  }
                  else
                  {
                     this.DialogSay("Hold \'\'Ctrl\'\' (\'\'Cmd\'\') key to press this button","#FFFF00");
                  }
               }
            }
         }
         this.VarChangePreventEnd();
      }
      
      public function m_release(param1:Event) : void
      {
         is_firing = false;
      }
      
      public function mov2(param1:MouseEvent) : void
      {
         if(!this.stoped_by_focus)
         {
            if(!param1.buttonDown)
            {
               is_firing = false;
            }
         }
      }
      
      public function mouseLeaveListener(param1:Event) : void
      {
         if(this.game_focus_ever_lost)
         {
            return;
         }
         this.game_focus_ever_lost = true;
         if(currentLabel == "gaming")
         {
            if(!this.MP_mode)
            {
               this.system_non_stop = false;
               this.stoped_by_focus = true;
               if(!this.mens[this.MP_myid].dead)
               {
                  this.pauze.visible = true;
				  
               }
            }
         }
      }
      
      public function mouseMoveListener(param1:Event) : void
      {
         if(!this.game_focus_ever_lost)
         {
            return;
         }
         this.game_focus_ever_lost = false;
         if(currentLabel == "gaming")
         {
            if(!this.MP_mode)
            {
               if(!this.gamemenu.visible)
               {
                  if(this.stoped_by_focus)
                  {
                     this.system_non_stop = true;
                  }
                  if(!this.mens[this.MP_myid].dead)
                  {
                     this.pauze.visible = false;
                  }
               }
            }
            this.key_left = false;
            this.key_right = false;
            this.key_up = false;
            this.key_down = false;
            this.key_grenade = false;
            this.key_pick = false;
            this.key_alt = false;
            this.key_grab = false;
            this.key_kinetic = false;
            this.key_fall = false;
            if(!this.MP_mode)
            {
               this.Disable_next_click = true;
            }
         }
      }
      
      public function r2(param1:Number) : String
      {
         return String(Math.round(param1 * 100) / 100);
      }
      
      public function DoorLogic() : void
      {
         this.i = 0;
         while(this.i < this.doorstotal)
         {
            if(this.doors[this.i].moving)
            {
               this.xx2 = this.Dist2D(this.doors[this.i].tarx,this.doors[this.i].tary,this.doors[this.i].x,this.doors[this.i].y);
               this.yy2 = this.doors[this.i].maxspeed;
               if(this.doors[this.i].forcehyperjump_float > 0)
               {
                  this.doors[this.i].forcehyperjump_float -= 0.1;
                  this.yy2 = this.yy2 * 0.9 + this.yy2 * this.MP_ping2 / this.c_sim_rt2 * 0.1;
               }
               if(this.xx2 <= this.yy2 + 1)
               {
                  if(this.doors[this.i].playsounds)
                  {
                     if(this.doors[this.i].vis)
                     {
                        this.PlaySound(this.s_t_door1_stop,this.doors[this.i].x + Number(this.doors[this.i].w) / 2,this.doors[this.i].y + Number(this.doors[this.i].h) / 2,this.doors[this.i]);
                     }
                  }
                  this.doors[this.i].moving = false;
                  this.doors[this.i].tox = 0;
                  this.doors[this.i].toy = 0;
                  this.doors[this.i].x = this.doors[this.i].tarx;
                  this.doors[this.i].y = this.doors[this.i].tary;
                  this.i2 = 0;
                  while(this.i2 < this.regionstotal)
                  {
                     if(this.regions[this.i2].use_on == 5)
                     {
                        if(this.doors[this.i].x == this.regions[this.i2].x)
                        {
                           if(this.doors[this.i].y == this.regions[this.i2].y)
                           {
                              if(this.doors[this.i].w == this.regions[this.i2].w)
                              {
                                 if(this.doors[this.i].h == this.regions[this.i2].h)
                                 {
                                    if(this.regions[this.i2].use_target != -1)
                                    {
                                       this.triggers[this.regions[this.i2].use_target].forcehyperjump = false;
                                       this.EXEC_TRIGGER(this.regions[this.i2].use_target);
                                    }
                                 }
                              }
                           }
                        }
                     }
                     ++this.i2;
                  }
               }
               else
               {
                  this.doors[this.i].tox = (Number(this.doors[this.i].tarx) - Number(this.doors[this.i].x)) / this.xx2;
                  this.doors[this.i].toy = (Number(this.doors[this.i].tary) - Number(this.doors[this.i].y)) / this.xx2;
                  this.doors[this.i].x += Number(this.doors[this.i].tox) * this.yy2 * this.GSPEED;
                  this.doors[this.i].y += Number(this.doors[this.i].toy) * this.yy2 * this.GSPEED;
                  this.i2 = 0;
                  while(this.i2 < this.atotal)
                  {
                     if(this.aio[this.i2] == false)
                     {
                        if(this.ax[this.i2] > Number(this.doors[this.i].x) - this.Math_abs(Number(this.doors[this.i].tox) * this.yy2) - Number(this.arad[this.i2]) - 10)
                        {
                           if(this.ay[this.i2] > Number(this.doors[this.i].y) - this.Math_abs(Number(this.doors[this.i].toy) * this.yy2) - Number(this.arad[this.i2]) - 10)
                           {
                              if(this.ax[this.i2] < this.doors[this.i].x + this.doors[this.i].w + this.Math_abs(Number(this.doors[this.i].tox) * this.yy2) + this.arad[this.i2] + 10)
                              {
                                 if(this.ay[this.i2] < this.doors[this.i].y + this.doors[this.i].h + this.Math_abs(Number(this.doors[this.i].toy) * this.yy2) + this.arad[this.i2] + 10)
                                 {
                                    this.WakeUpAtom(this.i2);
                                 }
                              }
                           }
                        }
                     }
                     ++this.i2;
                  }
                  this.doors[this.i].tox *= this.doors[this.i].maxspeed;
                  this.doors[this.i].toy *= this.doors[this.i].maxspeed;
               }
               this.UpdateDoorAttachments(this.i,this.yy2);
            }
            ++this.i;
         }
      }
      
      public function UpdateDoorAttachments(param1:int, param2:Number) : void
      {
         var _loc3_:int = 0;
         _loc3_ = 0;
         while(_loc3_ < this.attachments.length)
         {
            if(this.attachments[_loc3_].parent === this.doors[param1])
            {
               if(this.attachments[_loc3_].type === 0)
               {
                  this.attachments[_loc3_].child.moving = false;
                  this.attachments[_loc3_].child.x = this.doors[param1].x + this.attachments[_loc3_].dx;
                  this.attachments[_loc3_].child.y = this.doors[param1].y + this.attachments[_loc3_].dy;
                  this.attachments[_loc3_].child.tox = this.doors[param1].tox;
                  this.attachments[_loc3_].child.toy = this.doors[param1].toy;
                  this.i2 = 0;
                  while(this.i2 < this.atotal)
                  {
                     if(this.aio[this.i2] == false)
                     {
                        if(this.ax[this.i2] > Number(this.attachments[_loc3_].x) - this.Math_abs(Number(this.attachments[_loc3_].tox) * param2) - Number(this.arad[this.i2]) - 10)
                        {
                           if(this.ay[this.i2] > Number(this.attachments[_loc3_].y) - this.Math_abs(Number(this.attachments[_loc3_].toy) * param2) - Number(this.arad[this.i2]) - 10)
                           {
                              if(this.ax[this.i2] < this.attachments[_loc3_].x + this.attachments[_loc3_].w + this.Math_abs(Number(this.attachments[_loc3_].tox) * param2) + this.arad[this.i2] + 10)
                              {
                                 if(this.ay[this.i2] < this.attachments[_loc3_].y + this.attachments[_loc3_].h + this.Math_abs(Number(this.attachments[_loc3_].toy) * param2) + this.arad[this.i2] + 10)
                                 {
                                    this.WakeUpAtom(this.i2);
                                 }
                              }
                           }
                        }
                     }
                     ++this.i2;
                  }
               }
               else if(this.attachments[_loc3_].type == 1 || this.attachments[_loc3_].type == 2 || this.attachments[_loc3_].type == 4)
               {
                  this.attachments[_loc3_].child.x = this.doors[param1].x + this.attachments[_loc3_].dx;
                  this.attachments[_loc3_].child.y = this.doors[param1].y + this.attachments[_loc3_].dy;
                  if(this.attachments[_loc3_].type == 2)
                  {
                     if(this.attachments[_loc3_].child.onMove)
                     {
                        this.attachments[_loc3_].child.onMove();
                     }
                  }
               }
               else if(this.attachments[_loc3_].type == 3)
               {
                  this.pushx[this.attachments[_loc3_].child] = this.doors[param1].x + this.attachments[_loc3_].dx;
                  this.pushy[this.attachments[_loc3_].child] = this.doors[param1].y + this.attachments[_loc3_].dy;
                  this.pushw[this.attachments[_loc3_].child] = this.doors[param1].x + this.attachments[_loc3_].dx2;
                  this.pushh[this.attachments[_loc3_].child] = this.doors[param1].y + this.attachments[_loc3_].dy2;
               }
            }
            _loc3_++;
         }
      }
      
      public function BulletLogic() : void
      {
         var _loc1_:int = 0;
         var _loc2_:int = 0;
         var _loc3_:Number = NaN;
         var _loc4_:int = 0;
         var _loc5_:Number = NaN;
         var _loc6_:Number = NaN;
         var _loc7_:Number = NaN;
         var _loc8_:Number = NaN;
         var _loc9_:Number = NaN;
         var _loc10_:Number = NaN;
         var _loc11_:Number = NaN;
         var _loc12_:Number = NaN;
         var _loc13_:int = 0;
         var _loc14_:int = 0;
         var _loc15_:Number = NaN;
         var _loc16_:Number = NaN;
         var _loc17_:Number = NaN;
         var _loc18_:Number = NaN;
         var _loc19_:Number = NaN;
         var _loc20_:Number = NaN;
         var _loc21_:Boolean = false;
         var _loc22_:Boolean = false;
         var _loc23_:* = false;
         _loc1_ = 0;
         while(_loc1_ <= this.pulsmax)
         {
            if(this.puls[_loc1_] != null)
            {
               if(this.puls[_loc1_].visible == true)
               {
                  if(this.puls[_loc1_].power <= 0)
                  {
                     this.i6 = -1;
                     this.puls[_loc1_].visible = false;
                  }
                  if(this.puls[_loc1_].lag <= 0)
                  {
                     this.i7 = 0;
                     while((this.puls[_loc1_].cclass == 2 && (this.i7 == 0 || !this.puls[_loc1_].inwater) || this.puls[_loc1_].cclass == 3 || (this.i7 < -Number(this.puls[_loc1_].lag) || this.i7 == 0)) && this.puls[_loc1_].visible || this.puls[_loc1_].cclass != 2 && this.i7 == 0 || this.puls[_loc1_].power > 4 && this.puls[_loc1_].cclass == 0 && this.i7 <= 1 && this.puls[_loc1_].visible || this.puls[_loc1_].currentFrame == 15 && this.puls[_loc1_].visible)
                     {
                        this.RegisterPossibleBullet(this.puls[_loc1_]);
                        this.puls[_loc1_].lag = 0;
                        if(this.puls[_loc1_].cclass == 2 || this.puls[_loc1_].cclass == 3)
                        {
                           this.thispulspeed = 1;
                        }
                        else if(this.puls[_loc1_].master == this.MP_myid)
                        {
                           this.thispulspeed = this.GSPEED2;
                        }
                        else
                        {
                           this.thispulspeed = this.GSPEED;
                        }
                        if(this.puls[_loc1_].cclass == 2)
                        {
                           _loc4_ = 0;
                           while(_loc4_ <= this.pulsmax)
                           {
                              if(_loc1_ != _loc4_)
                              {
                                 if(this.puls[_loc4_] != null)
                                 {
                                    if(this.puls[_loc4_].visible == true)
                                    {
                                       if(this.mens[this.puls[_loc4_].master].team != this.mens[this.puls[_loc1_].master].team)
                                       {
                                          if(this.puls[_loc4_].lastin != this.puls[_loc1_].master)
                                          {
                                             if(this.puls[_loc4_].cclass == 5)
                                             {
                                                this.rx = Number(this.puls[_loc1_].nx) - Number(this.puls[_loc1_].lx);
                                                this.ry = Number(this.puls[_loc1_].ny) - Number(this.puls[_loc1_].ly);
                                                this.xx = this.VectorDist2D(this.rx,this.ry);
                                                this.rx /= this.xx;
                                                this.ry /= this.xx;
                                                this.x3 = this.puls[_loc4_].nx + this.ry * 10;
                                                this.y3 = Number(this.puls[_loc4_].ny) - this.rx * 10;
                                                this.x4 = Number(this.puls[_loc4_].nx) - this.ry * 10;
                                                this.y4 = this.puls[_loc4_].ny + this.rx * 10;
                                                this.xx = this.puls[_loc1_].nx;
                                                this.yy = this.puls[_loc1_].ny;
                                                this.xx2 = this.puls[_loc1_].lx;
                                                this.yy2 = this.puls[_loc1_].ly;
                                                this.rx = undefined;
                                                this.ry = undefined;
                                                this.v = ((this.xx - this.xx2) * (this.y3 - this.yy2) + (this.yy - this.yy2) * (this.xx2 - this.x3)) / ((this.yy - this.yy2) * (this.x4 - this.x3) - (this.xx - this.xx2) * (this.y4 - this.y3));
                                                this.retux = this.x3 + (this.x4 - this.x3) * this.v;
                                                this.retuy = this.y3 + (this.y4 - this.y3) * this.v;
                                                if((this.xx2 < this.xx ? this.xx2 : this.xx) - 1 <= this.retux)
                                                {
                                                   if((this.xx2 > this.xx ? this.xx2 : this.xx) + 1 >= this.retux)
                                                   {
                                                      if((this.yy2 < this.yy ? this.yy2 : this.yy) - 1 <= this.retuy)
                                                      {
                                                         if((this.yy2 > this.yy ? this.yy2 : this.yy) + 1 >= this.retuy)
                                                         {
                                                            if((this.x3 < this.x4 ? this.x3 : this.x4) - 1 <= this.retux)
                                                            {
                                                               if((this.x3 > this.x4 ? this.x3 : this.x4) + 1 >= this.retux)
                                                               {
                                                                  if((this.y3 < this.y4 ? this.y3 : this.y4) - 1 <= this.retuy)
                                                                  {
                                                                     if((this.y3 > this.y4 ? this.y3 : this.y4) + 1 >= this.retuy)
                                                                     {
                                                                        if(this.i6 != -2)
                                                                        {
                                                                           if(0 == this.rx || this.Dist2D(this.rx,this.ry,this.puls[_loc1_].lx,this.puls[_loc1_].ly) > this.Dist2D(this.retux,this.retuy,this.puls[_loc1_].lx,this.puls[_loc1_].ly))
                                                                           {
                                                                              this.rx = this.retux;
                                                                              this.ry = this.retuy;
                                                                              this.cx = this.puls[_loc4_].power;
                                                                              if(this.puls[_loc1_].power > 0)
                                                                              {
                                                                                 this.puls[_loc4_].power -= Number(this.puls[_loc1_].power) * 0.5;
                                                                              }
                                                                              if(this.cx > 0)
                                                                              {
                                                                                 this.puls[_loc1_].power -= this.cx * 3;
                                                                              }
                                                                              if(this.puls[_loc4_].power < 0.5)
                                                                              {
                                                                                 this.puls[_loc4_].life = this.puls[_loc4_].maxbulletlife + 1;
                                                                                 this.puls[_loc4_].power = 0;
                                                                              }
                                                                              if(this.puls[_loc1_].power < 0.5)
                                                                              {
                                                                                 this.puls[_loc1_].visible = false;
                                                                                 this.puls[_loc1_].power = 0;
                                                                              }
                                                                              this.Effect(this.rx - Number(this.puls[_loc1_].spx) * 0.1,this.ry - Number(this.puls[_loc1_].spy) * 0.1,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.06,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.06);
                                                                              this.Effect(this.rx - Number(this.puls[_loc1_].spx) * 0.1,this.ry - Number(this.puls[_loc1_].spy) * 0.1,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.06,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.06);
                                                                              this.Effect(this.rx - Number(this.puls[_loc1_].spx) * 0.1,this.ry - Number(this.puls[_loc1_].spy) * 0.1,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.06,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.06);
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              _loc4_++;
                           }
                        }
                        if(this.puls[_loc1_].cclass != 6 && this.puls[_loc1_].cclass != 4)
                        {
                           _loc4_ = 0;
                           while(_loc4_ <= this.pulsmax)
                           {
                              if(_loc1_ != _loc4_)
                              {
                                 if(this.puls[_loc4_] != null)
                                 {
                                    if(this.puls[_loc4_].visible == true)
                                    {
                                       if(this.puls[_loc4_].cclass == 6 || this.puls[_loc4_].cclass == 4)
                                       {
                                          if(this.puls[_loc1_].lastin != -300 - _loc4_)
                                          {
                                             this.i3 = this.puls[_loc4_].attached;
                                             if(this.puls[_loc1_].nx > Number(this.ax[this.i3]) - 5 - Math.abs(Number(this.puls[_loc1_].lx) - Number(this.puls[_loc1_].nx)))
                                             {
                                                if(this.puls[_loc1_].nx < this.ax[this.i3] + 5 + Math.abs(Number(this.puls[_loc1_].lx) - Number(this.puls[_loc1_].nx)))
                                                {
                                                   if(this.puls[_loc1_].ny > Number(this.ay[this.i3]) - 5 - Math.abs(Number(this.puls[_loc1_].ly) - Number(this.puls[_loc1_].ny)))
                                                   {
                                                      if(this.puls[_loc1_].ny < this.ay[this.i3] + 5 + Math.abs(Number(this.puls[_loc1_].ly) - Number(this.puls[_loc1_].ny)))
                                                      {
                                                         if(this.CheckCross(this.puls[_loc1_].lx,this.puls[_loc1_].ly,this.puls[_loc1_].nx,this.puls[_loc1_].ny,Number(this.ax[this.i3]) - 5,Number(this.ay[this.i3]) - 5,this.ax[this.i3] + 5,this.ay[this.i3] + 5,_loc1_) || this.CheckCross(this.puls[_loc1_].lx,this.puls[_loc1_].ly,this.puls[_loc1_].nx,this.puls[_loc1_].ny,this.ax[this.i3] + 5,Number(this.ay[this.i3]) - 5,Number(this.ax[this.i3]) - 5,this.ay[this.i3] + 5,_loc1_))
                                                         {
                                                            this.puls[_loc1_].lastin = -300 - _loc4_;
                                                            this.atox[this.i3] += Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) / Number(this.arad[this.i3]) * Number(this.puls[_loc1_].knockback_multiplier);
                                                            this.atoy[this.i3] += Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) / Number(this.arad[this.i3]) * Number(this.puls[_loc1_].knockback_multiplier);
                                                            this.WakeUpAtom(this.i3);
                                                            this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,1,this.puls[_loc1_].power,0);
                                                            this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.04,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.04);
                                                            this.puls[_loc1_].power = Math.max(0,Number(this.puls[_loc1_].power) - 0.5);
                                                            if(this.puls[_loc1_].power < 0.4)
                                                            {
                                                               this.puls[_loc1_].visible = false;
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              _loc4_++;
                           }
                        }
                        if(this.puls[_loc1_].cclass == 3)
                        {
                           _loc4_ = 0;
                           while(_loc4_ <= this.pulsmax)
                           {
                              if(_loc1_ != _loc4_)
                              {
                                 if(this.puls[_loc4_] != null)
                                 {
                                    if(this.puls[_loc4_].visible == true)
                                    {
                                       if(this.mens[this.puls[_loc4_].master].team != this.mens[this.puls[_loc1_].master].team)
                                       {
                                          if(this.puls[_loc4_].lastin != this.puls[_loc1_].master)
                                          {
                                             if(this.puls[_loc4_].cclass == 0 || this.puls[_loc4_].currentFrame == 14)
                                             {
                                                if(this.Dist2D(this.puls[_loc1_].x,this.puls[_loc1_].y,this.puls[_loc4_].x,this.puls[_loc4_].y) < 30)
                                                {
                                                   if(this.puls[_loc4_].currentFrame == 14)
                                                   {
                                                      this.puls[_loc4_].dead = true;
                                                   }
                                                   else
                                                   {
                                                      this.u = this.VectorDist2D(this.puls[_loc1_].spx,this.puls[_loc1_].spy);
                                                      this.v = this.VectorDist2D(this.puls[_loc4_].spx,this.puls[_loc4_].spy);
                                                      this.puls[_loc4_].spx = Number(this.puls[_loc1_].spx) / this.u * 2 + Number(this.puls[_loc4_].spx) / this.v - 0.15 + Math.random() * 0.3;
                                                      this.puls[_loc4_].spy = Number(this.puls[_loc1_].spy) / this.u * 2 + Number(this.puls[_loc4_].spy) / this.v - 0.15 + Math.random() * 0.3;
                                                      this.xx = this.VectorDist2D(this.puls[_loc4_].spx,this.puls[_loc4_].spy);
                                                      this.puls[_loc4_].spx /= this.xx;
                                                      this.puls[_loc4_].spy /= this.xx;
                                                      this.puls[_loc4_].spx *= this.v;
                                                      this.puls[_loc4_].spy *= this.v;
                                                      this.puls[_loc4_].master = this.puls[_loc1_].master;
                                                      this.puls[_loc4_].lastin = this.puls[_loc1_].master;
                                                      this.puls[_loc4_].rotation = 270 - Math.atan2(this.puls[_loc4_].spx,this.puls[_loc4_].spy) / Math.PI * 180;
                                                      this.rx = (this.puls[_loc1_].x + this.puls[_loc4_].x) / 2;
                                                      this.ry = (this.puls[_loc1_].y + this.puls[_loc4_].y) / 2;
                                                      this.Effect(this.rx,this.ry,1,this.puls[_loc1_].power,0);
                                                      this.Effect(this.rx,this.ry,8,Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.06,Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.06);
                                                      this.Effect(this.rx,this.ry,8,Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.06,Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.06);
                                                      this.Effect(this.rx,this.ry,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.06,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.06);
                                                      if(this.mens[this.puls[_loc1_].master].isGhost)
                                                      {
                                                         if(this.mens[this.puls[_loc1_].master].alpha < 0.3)
                                                         {
                                                            this.mens[this.puls[_loc1_].master].alpha = 0.3;
                                                         }
                                                      }
                                                      if(this.puls[_loc1_].master == this.MP_myid)
                                                      {
                                                         this.incBadge(9);
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              _loc4_++;
                           }
                        }
                        if(this.puls[_loc1_].inwater)
                        {
                           if(this.puls[_loc1_].cclass == 0)
                           {
                              this.thispulspeed *= 0.3;
                           }
                           if(this.puls[_loc1_].cclass == 1)
                           {
                              this.thispulspeed *= 0.5;
                           }
                           if(this.puls[_loc1_].cclass == 4 || this.puls[_loc1_].cclass == 6)
                           {
                              this.puls[_loc1_].spy -= this.gravity * 0.5 * this.thispulspeed;
                              this.puls[_loc1_].spx *= 0.9 * this.thispulspeed;
                              this.puls[_loc1_].spy *= 0.9 * this.thispulspeed;
                           }
                        }
                        this.puls[_loc1_].lx = Number(this.puls[_loc1_].nx) - Number(this.puls[_loc1_].spx) * 0.5;
                        this.puls[_loc1_].ly = Number(this.puls[_loc1_].ny) - Number(this.puls[_loc1_].spy) * 0.5;
                        this.puls[_loc1_].x += Number(this.puls[_loc1_].spx) * this.thispulspeed;
                        this.puls[_loc1_].y += Number(this.puls[_loc1_].spy) * this.thispulspeed;
                        this.puls[_loc1_].nx = this.puls[_loc1_].x + Number(this.puls[_loc1_].spx) * 0.5;
                        this.puls[_loc1_].ny = this.puls[_loc1_].y + Number(this.puls[_loc1_].spy) * 0.5;
                        if(this.puls[_loc1_].life == 0)
                        {
                           this.puls[_loc1_].alpha = 1;
                        }
                        this.puls[_loc1_].life += this.thispulspeed;
                        if(this.puls[_loc1_].life > this.puls[_loc1_].maxbulletlife)
                        {
                           this.puls[_loc1_].visible = false;
                        }
                        if(this.puls[_loc1_].cclass == 4 || this.puls[_loc1_].cclass == 6)
                        {
                           this.puls[_loc1_].spx = this.atox[this.puls[_loc1_].attached];
                           this.puls[_loc1_].spy = this.atoy[this.puls[_loc1_].attached];
                           this.puls[_loc1_].x = this.ax[this.puls[_loc1_].attached];
                           this.puls[_loc1_].y = this.ay[this.puls[_loc1_].attached];
                           if(this.puls[_loc1_].currentFrame != 14)
                           {
                              if(this.puls[_loc1_].cclass == 6)
                              {
                                 if(this.puls[_loc1_].life > 50)
                                 {
                                    if(this.puls[_loc1_].notbliped)
                                    {
                                       this.puls[_loc1_].notbliped = false;
                                       if(this.puls[_loc1_].nadekind == 1)
                                       {
                                          this.puls[_loc1_].gotoAndStop(13);
                                          this.PlaySound(this.s_grenade_act,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                       }
                                       if(this.puls[_loc1_].nadekind == 2)
                                       {
                                          this.puls[_loc1_].gotoAndStop(18);
                                          this.PlaySound(this.s_portnade_act2,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                       }
                                       if(this.puls[_loc1_].nadekind == 3)
                                       {
                                          this.puls[_loc1_].gotoAndStop(20);
                                          this.PlaySound(this.s_shnade_act,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                       }
                                    }
                                 }
                                 if(this.puls[_loc1_].nadekind == 3)
                                 {
                                    if(this.puls[_loc1_].life > 60)
                                    {
                                       if(this.puls[_loc1_].hasexploded)
                                       {
                                          if(this.puls[_loc1_].life > this.puls[_loc1_].maxbulletlife)
                                          {
                                             this.puls[_loc1_].hea = 0;
                                          }
                                          if(this.puls[_loc1_].hea > 0)
                                          {
                                             if(!this.shnades[this.puls[_loc1_].childsh].io)
                                             {
                                                this.puls[_loc1_].hea = 0;
                                             }
                                             this.puls[_loc1_].base.scaleX = this.puls[_loc1_].base.scaleY = Number(this.puls[_loc1_].radius) / 100;
                                             this.puls[_loc1_].radius = (150 + Number(this.puls[_loc1_].radius) * 4 / this.GSPEED) / (1 + 4 / this.GSPEED);
                                             this.puls[_loc1_].losthea -= 10 * this.GSPEED;
                                             if(this.puls[_loc1_].losthea < 0)
                                             {
                                                this.puls[_loc1_].losthea = 0;
                                             }
                                             if(this.puls[_loc1_].heapo > 0)
                                             {
                                                this.puls[_loc1_].hea += Number(this.puls[_loc1_].heapo) - Math.max(Number(this.puls[_loc1_].heapo) - this.GSPEED * 5,0);
                                                this.puls[_loc1_].heapo -= this.GSPEED * 5;
                                             }
                                             this.puls[_loc1_].base.ounr.alpha = (Number(this.puls[_loc1_].radius) / 150 * 0.1 + Number(this.puls[_loc1_].losthea) * 0.1) * (1 - (100 - Number(this.puls[_loc1_].hea)) / 100 * Math.random());
                                             this.puls[_loc1_].base.innr.alpha = Number(this.puls[_loc1_].radius) / 150 * Number(this.puls[_loc1_].losthea) * 10 * Number(this.puls[_loc1_].base.ounr.alpha) * (90 - Number(this.puls[_loc1_].heapo)) / 90 + Number(this.puls[_loc1_].heapo) / 90;
                                             this.atox[this.puls[_loc1_].attached] = 0;
                                             this.atoy[this.puls[_loc1_].attached] = 0;
                                             this.ax[this.puls[_loc1_].attached] = this.puls[_loc1_].stuckx;
                                             this.ay[this.puls[_loc1_].attached] = this.puls[_loc1_].stucky;
                                             this.shnades[this.puls[_loc1_].childsh].x = this.puls[_loc1_].stuckx;
                                             this.shnades[this.puls[_loc1_].childsh].y = this.puls[_loc1_].stucky;
                                             this.shnades[this.puls[_loc1_].childsh].radius = this.puls[_loc1_].radius;
                                          }
                                          else
                                          {
                                             this.ExplodeShield(this.puls[_loc1_].childsh);
                                             this.atoy[this.puls[_loc1_].attached] -= this.GSPEED * 2;
                                             this.atim[this.puls[_loc1_].attached] = 0;
                                             this.DisposeAtom(this.puls[_loc1_].attached);
                                             this.shnades[this.puls[_loc1_].childsh].io = false;
                                             this.puls[_loc1_].visible = false;
                                          }
                                       }
                                       else
                                       {
                                          this.puls[_loc1_].hasexploded = true;
                                          this.PlaySound(this.s_shnade_explode,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                          this.puls[_loc1_].gotoAndStop(21);
                                          this.puls[_loc1_].base.ounr.alpha = 0;
                                          this.puls[_loc1_].base.innr.alpha = 0;
                                          this.puls[_loc1_].stuckx = this.puls[_loc1_].x;
                                          this.puls[_loc1_].stucky = this.puls[_loc1_].y;
                                          this.puls[_loc1_] = this.graphics_3d_front.addChildAt(this.puls[_loc1_],this.graphics_3d_front.numChildren);
                                          this.shnades[this.shnades_next] = new Object();
                                          this.shnades[this.shnades_next].io = true;
                                          this.shnades[this.shnades_next].x = this.puls[_loc1_].stuckx;
                                          this.shnades[this.shnades_next].y = this.puls[_loc1_].stucky;
                                          this.shnades[this.shnades_next].radius = 0;
                                          this.puls[_loc1_].childsh = this.shnades_next;
                                          this.shnades[this.shnades_next].parentish = _loc1_;
                                          this.nextsh();
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        this.xx = this.puls[_loc1_].nx;
                        this.yy = this.puls[_loc1_].ny;
                        this.xx2 = this.puls[_loc1_].lx;
                        this.yy2 = this.puls[_loc1_].ly;
                        _loc4_ = 0;
                        while(_loc4_ < this.shnades_total)
                        {
                           if(this.shnades[_loc4_].io)
                           {
                              if(this.xx > Number(this.shnades[_loc4_].x) - Number(this.shnades[_loc4_].radius) - 100)
                              {
                                 if(this.xx < this.shnades[_loc4_].x + this.shnades[_loc4_].radius + 100)
                                 {
                                    if(this.yy > Number(this.shnades[_loc4_].y) - Number(this.shnades[_loc4_].radius) - 100)
                                    {
                                       if(this.yy < this.shnades[_loc4_].y + this.shnades[_loc4_].radius + 100)
                                       {
                                          if(this.Dist2D(this.xx,this.yy,this.shnades[_loc4_].x,this.shnades[_loc4_].y) < this.shnades[_loc4_].radius)
                                          {
                                             if(this.Dist2D(this.xx2,this.yy2,this.shnades[_loc4_].x,this.shnades[_loc4_].y) >= this.shnades[_loc4_].radius)
                                             {
                                                this.i3 = this.shnades[_loc4_].parentish;
                                                if(this.puls[_loc1_].cclass == 4 || this.puls[_loc1_].cclass == 6)
                                                {
                                                   _loc5_ = Math.atan2(this.puls[_loc1_].spy,this.puls[_loc1_].spx);
                                                   _loc6_ = this.VectorDist2D(this.puls[_loc1_].spy,this.puls[_loc1_].spx);
                                                   _loc7_ = Math.atan2(this.yy - Number(this.puls[this.i3].y),this.xx - Number(this.puls[this.i3].x));
                                                   _loc8_ = this.Dist2D(this.xx,this.yy,this.puls[this.i3].x,this.puls[this.i3].y);
                                                   this.ax[this.puls[_loc1_].attached] = this.puls[this.i3].x + Math.cos(_loc7_) * (_loc8_ + 2);
                                                   this.ay[this.puls[_loc1_].attached] = this.puls[this.i3].y + Math.sin(_loc7_) * (_loc8_ + 2);
                                                   _loc9_ = Math.atan2(Math.sin(_loc7_ - _loc5_),Math.cos(_loc7_ - _loc5_));
                                                   this.atox[this.puls[_loc1_].attached] -= Math.cos(_loc7_) * _loc6_ * Math.cos(_loc9_) * 2;
                                                   this.atoy[this.puls[_loc1_].attached] -= Math.sin(_loc7_) * _loc6_ * Math.cos(_loc9_) * 2;
                                                   if(_loc6_ > 4)
                                                   {
                                                      this.PlaySound(this.s_shnade_hit_low,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                                      this.puls[this.i3].losthea += 1 * 8;
                                                   }
                                                   if((_loc10_ = this.VectorDist2D(this.puls[_loc1_].spy,this.puls[_loc1_].spx)) > _loc6_ * 1.01)
                                                   {
                                                      this.atox[this.puls[_loc1_].attached] = Number(this.atox[this.puls[_loc1_].attached]) / _loc10_ * _loc6_;
                                                      this.atoy[this.puls[_loc1_].attached] = Number(this.atoy[this.puls[_loc1_].attached]) / _loc10_ * _loc6_;
                                                   }
                                                }
                                                else
                                                {
                                                   _loc11_ = Number(this.puls[this.i3].hea);
                                                   _loc12_ = Number(this.puls[_loc1_].power);
                                                   _loc7_ = Math.atan2(this.yy - Number(this.puls[this.i3].y),this.xx - Number(this.puls[this.i3].x));
                                                   _loc5_ = Math.atan2(this.puls[_loc1_].spy,this.puls[_loc1_].spx);
                                                   _loc9_ = Math.atan2(Math.sin(_loc7_ - _loc5_),Math.cos(_loc7_ - _loc5_));
                                                   _loc8_ = this.Dist2D(this.xx,this.yy,this.puls[this.i3].x,this.puls[this.i3].y);
                                                   if(this.puls[_loc1_].cclass == 0 && -Math.cos(_loc9_) < 1 / 2 || this.puls[_loc1_].cclass == 2)
                                                   {
                                                      _loc6_ = this.VectorDist2D(this.puls[_loc1_].spy,this.puls[_loc1_].spx);
                                                      this.puls[_loc1_].spx -= Math.cos(_loc7_) * _loc6_ * Math.cos(_loc9_) * 2;
                                                      this.puls[_loc1_].spy -= Math.sin(_loc7_) * _loc6_ * Math.cos(_loc9_) * 2;
                                                      if((_loc10_ = this.VectorDist2D(this.puls[_loc1_].spy,this.puls[_loc1_].spx)) > 0)
                                                      {
                                                         this.puls[_loc1_].spx = Number(this.puls[_loc1_].spx) / _loc10_ * _loc6_;
                                                         this.puls[_loc1_].spy = Number(this.puls[_loc1_].spy) / _loc10_ * _loc6_;
                                                      }
                                                      _loc12_ *= 0.5;
                                                      if(this.puls[_loc1_].cclass == 2)
                                                      {
                                                         if(this.puls[_loc1_].currentFrame == 29)
                                                         {
                                                            this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,21,this.puls[_loc1_].rotation,0);
                                                         }
                                                         else if(this.puls[_loc1_].currentFrame == 51)
                                                         {
                                                            this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,24,this.puls[_loc1_].rotation,0);
                                                         }
                                                         else if(this.puls[_loc1_].currentFrame == 40)
                                                         {
                                                            this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,22,this.puls[_loc1_].rotation,0);
                                                         }
                                                         else if(this.puls[_loc1_].currentFrame == 48 || this.puls[_loc1_].currentFrame == 22)
                                                         {
                                                            this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,23,this.puls[_loc1_].rotation,0);
                                                         }
                                                         else if(this.puls[_loc1_].maxpower < 5)
                                                         {
                                                            this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,5,this.puls[_loc1_].rotation,0);
                                                         }
                                                         else
                                                         {
                                                            this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,17,this.puls[_loc1_].rotation,0);
                                                         }
                                                         this.Effect(this.puls[this.i3].x + Math.cos(_loc7_) * _loc8_,this.puls[this.i3].y + Math.sin(_loc7_) * _loc8_,6,0,0);
                                                      }
                                                   }
                                                   this.cx = _loc12_;
                                                   if(this.puls[_loc1_].cclass == 2)
                                                   {
                                                      _loc13_ = 0;
                                                      while(_loc13_ < Math.sqrt(this.cx) * 2 || _loc13_ < 3)
                                                      {
                                                         this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx),Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy),8,-Number(this.puls[_loc1_].spx) * this.cx * 0.03 * Math.random(),-Number(this.puls[_loc1_].spy) * this.cx * 0.03 * Math.random());
                                                         _loc13_++;
                                                      }
                                                   }
                                                   else
                                                   {
                                                      _loc13_ = 0;
                                                      while(_loc13_ < Math.sqrt(this.cx) * 2 || _loc13_ < 3)
                                                      {
                                                         this.Effect(this.puls[this.i3].x + Math.cos(_loc7_) * _loc8_,this.puls[this.i3].y + Math.sin(_loc7_) * _loc8_,8,-Number(this.puls[_loc1_].spx) * this.cx * 0.03 * Math.random(),-Number(this.puls[_loc1_].spy) * this.cx * 0.03 * Math.random());
                                                         _loc13_++;
                                                      }
                                                   }
                                                   this.puls[this.i3].hea -= _loc12_ * 8;
                                                   this.puls[this.i3].losthea += _loc12_ * 8;
                                                   this.i4 = -1;
                                                   this.i4 = 0;
                                                   while(this.i4 < this.MP_specials.length)
                                                   {
                                                      if(this.MP_specials[this.i4] != undefined && this.MP_specials[this.i4].pul == this.i3)
                                                      {
                                                         // found = true;
                                                         break;
                                                      }
                                                      ++this.i4;
                                                   }
                                                   if(this.i4 == this.MP_specials.length)
                                                   {
                                                      this.i4 = 0;
                                                      while(this.i4 < this.MP_myspecials_total)
                                                      {
                                                         if(this.MP_specials[this.i4] != undefined && this.MP_myspecials[this.i4].pul == this.i3)
                                                         {
                                                            this.i4 = this.MP_myspecials[this.i4].id_in_full_list;
                                                            // found = true;
                                                            break;
                                                         }
                                                         ++this.i4;
                                                      }
                                                   }
                                                   this.MP_custom_events += ";shgh|" + this.puls[_loc1_].master + "#" + this.i4 + "#" + this.puls[this.i3].hea + "#" + _loc12_ * 8;
                                                   if(this.puls[this.i3].hea <= 0)
                                                   {
                                                      this.shnades[_loc4_].io = false;
                                                      this.ExplodeShield(_loc4_);
                                                      _loc12_ = -Number(this.puls[this.i3].hea) / 8;
                                                   }
                                                   if(_loc12_ > 0)
                                                   {
                                                      if(this.shnades[_loc4_].io)
                                                      {
                                                         if(_loc12_ > 1.2)
                                                         {
                                                            this.PlaySound(this.s_shnade_hit,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                                         }
                                                         else
                                                         {
                                                            this.PlaySound(this.s_shnade_hit_low,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                                         }
                                                      }
                                                      this.puls[_loc1_].power -= _loc12_;
                                                   }
                                                   if(this.puls[_loc1_].power < 0.4)
                                                   {
                                                      this.puls[_loc1_].visible = false;
                                                   }
                                                   else
                                                   {
                                                      this.puls[_loc1_].rotation = 270 - Math.atan2(this.puls[_loc1_].spx,this.puls[_loc1_].spy) / Math.PI * 180;
                                                      this.puls[_loc1_].lastin = -1;
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           _loc4_++;
                        }
                        this.rx = undefined;
                        this.ry = undefined;
                        this.i6 = -1;
                        if(this.puls[_loc1_].cclass != 4)
                        {
                           for each(_loc4_ in this.GetNearBoxBSP_at(this.puls[_loc1_].x,this.puls[_loc1_].y))
                           {
                              if(this.puls[_loc1_].lastinbox != _loc4_)
                              {
                                 if(this.puls[_loc1_].x >= Number(this.boxx[_loc4_]) - this.Math_abs(this.puls[_loc1_].spx) * this.thispulspeed)
                                 {
                                    if(this.puls[_loc1_].x <= this.boxx[_loc4_] + this.boxw[_loc4_] + this.Math_abs(this.puls[_loc1_].spx) * this.thispulspeed)
                                    {
                                       if(this.puls[_loc1_].y >= Number(this.boxy[_loc4_]) - this.Math_abs(this.puls[_loc1_].spy) * this.thispulspeed)
                                       {
                                          if(this.puls[_loc1_].y <= this.boxy[_loc4_] + this.boxh[_loc4_] + this.Math_abs(this.puls[_loc1_].spy) * this.thispulspeed)
                                          {
                                             this.i3 = 0;
                                             while(this.i3 < 4)
                                             {
                                                if(this.puls[_loc1_].spx > 0 && this.i3 == 2 || this.puls[_loc1_].spx < 0 && this.i3 == 1 || this.puls[_loc1_].spy > 0 && this.i3 == 0 || this.puls[_loc1_].spy < 0 && this.i3 == 3)
                                                {
                                                   if(this.i3 == 0)
                                                   {
                                                      this.x3 = this.boxx[_loc4_];
                                                      this.y3 = this.boxy[_loc4_];
                                                      this.x4 = this.boxx[_loc4_] + this.boxw[_loc4_];
                                                      this.y4 = this.boxy[_loc4_];
                                                   }
                                                   else if(this.i3 == 1)
                                                   {
                                                      this.x3 = this.boxx[_loc4_] + this.boxw[_loc4_];
                                                      this.y3 = this.boxy[_loc4_];
                                                      this.x4 = this.boxx[_loc4_] + this.boxw[_loc4_];
                                                      this.y4 = this.boxy[_loc4_] + this.boxh[_loc4_];
                                                   }
                                                   else if(this.i3 == 2)
                                                   {
                                                      this.x3 = this.boxx[_loc4_];
                                                      this.y3 = this.boxy[_loc4_];
                                                      this.x4 = this.boxx[_loc4_];
                                                      this.y4 = this.boxy[_loc4_] + this.boxh[_loc4_];
                                                   }
                                                   else
                                                   {
                                                      this.x3 = this.boxx[_loc4_];
                                                      this.y3 = this.boxy[_loc4_] + this.boxh[_loc4_];
                                                      this.x4 = this.boxx[_loc4_] + this.boxw[_loc4_];
                                                      this.y4 = this.boxy[_loc4_] + this.boxh[_loc4_];
                                                   }
                                                   this.v = ((this.xx - this.xx2) * (this.y3 - this.yy2) + (this.yy - this.yy2) * (this.xx2 - this.x3)) / ((this.yy - this.yy2) * (this.x4 - this.x3) - (this.xx - this.xx2) * (this.y4 - this.y3));
                                                   this.retux = this.x3 + (this.x4 - this.x3) * this.v;
                                                   this.retuy = this.y3 + (this.y4 - this.y3) * this.v;
                                                   if((this.xx2 < this.xx ? this.xx2 : this.xx) - 1 <= this.retux)
                                                   {
                                                      if((this.xx2 > this.xx ? this.xx2 : this.xx) + 1 >= this.retux)
                                                      {
                                                         if((this.yy2 < this.yy ? this.yy2 : this.yy) - 1 <= this.retuy)
                                                         {
                                                            if((this.yy2 > this.yy ? this.yy2 : this.yy) + 1 >= this.retuy)
                                                            {
                                                               if(this.boxx[_loc4_] - 1 <= this.retux)
                                                               {
                                                                  if(this.boxx[_loc4_] + 1 + this.boxw[_loc4_] >= this.retux)
                                                                  {
                                                                     if(this.boxy[_loc4_] - 1 <= this.retuy)
                                                                     {
                                                                        if(this.boxy[_loc4_] + 1 + this.boxh[_loc4_] >= this.retuy)
                                                                        {
                                                                           if(this.i6 != -2)
                                                                           {
                                                                              if(this.i6 == -1 || this.Dist2D(this.rx,this.ry,this.puls[_loc1_].lx,this.puls[_loc1_].ly) > this.Dist2D(this.retux,this.retuy,this.puls[_loc1_].lx,this.puls[_loc1_].ly))
                                                                              {
                                                                                 this.rx = this.retux;
                                                                                 this.ry = this.retuy;
                                                                                 this.i6 = this.i3;
                                                                                 this.puls[_loc1_].lastinbox = _loc4_;
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                                ++this.i3;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 if(this.i6 == -1)
                                 {
                                    if(this.puls[_loc1_].x >= this.boxx[_loc4_])
                                    {
                                       if(this.puls[_loc1_].x <= this.boxx[_loc4_] + this.boxw[_loc4_])
                                       {
                                          if(this.puls[_loc1_].y >= this.boxy[_loc4_])
                                          {
                                             if(this.puls[_loc1_].y <= this.boxy[_loc4_] + this.boxh[_loc4_])
                                             {
                                                this.rx = this.puls[_loc1_].x;
                                                this.ry = this.puls[_loc1_].y;
                                                this.i6 = -2;
                                                this.puls[_loc1_].lastinbox = _loc4_;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           _loc4_ = 0;
                           while(_loc4_ < this.doorstotal)
                           {
                              if(this.puls[_loc1_].lastinbox != -1 - _loc4_)
                              {
                                 if(this.puls[_loc1_].x >= Number(this.doors[_loc4_].x) - this.Math_abs(this.puls[_loc1_].spx) * this.thispulspeed)
                                 {
                                    if(this.puls[_loc1_].x <= this.doors[_loc4_].x + this.doors[_loc4_].w + this.Math_abs(this.puls[_loc1_].spx) * this.thispulspeed)
                                    {
                                       if(this.puls[_loc1_].y >= Number(this.doors[_loc4_].y) - this.Math_abs(this.puls[_loc1_].spy) * this.thispulspeed)
                                       {
                                          if(this.puls[_loc1_].y <= this.doors[_loc4_].y + this.doors[_loc4_].h + this.Math_abs(this.puls[_loc1_].spy) * this.thispulspeed)
                                          {
                                             this.i3 = 0;
                                             while(this.i3 < 4)
                                             {
                                                if(this.puls[_loc1_].spx > 0 && this.i3 == 2 || this.puls[_loc1_].spx < 0 && this.i3 == 1 || this.puls[_loc1_].spy > 0 && this.i3 == 0 || this.puls[_loc1_].spy < 0 && this.i3 == 3)
                                                {
                                                   if(this.i3 == 0)
                                                   {
                                                      this.x3 = this.doors[_loc4_].x;
                                                      this.y3 = this.doors[_loc4_].y;
                                                      this.x4 = this.doors[_loc4_].x + this.doors[_loc4_].w;
                                                      this.y4 = this.doors[_loc4_].y;
                                                   }
                                                   else if(this.i3 == 1)
                                                   {
                                                      this.x3 = this.doors[_loc4_].x + this.doors[_loc4_].w;
                                                      this.y3 = this.doors[_loc4_].y;
                                                      this.x4 = this.doors[_loc4_].x + this.doors[_loc4_].w;
                                                      this.y4 = this.doors[_loc4_].y + this.doors[_loc4_].h;
                                                   }
                                                   else if(this.i3 == 2)
                                                   {
                                                      this.x3 = this.doors[_loc4_].x;
                                                      this.y3 = this.doors[_loc4_].y;
                                                      this.x4 = this.doors[_loc4_].x;
                                                      this.y4 = this.doors[_loc4_].y + this.doors[_loc4_].h;
                                                   }
                                                   else if(this.i3 == 3)
                                                   {
                                                      this.x3 = this.doors[_loc4_].x;
                                                      this.y3 = this.doors[_loc4_].y + this.doors[_loc4_].h;
                                                      this.x4 = this.doors[_loc4_].x + this.doors[_loc4_].w;
                                                      this.y4 = this.doors[_loc4_].y + this.doors[_loc4_].h;
                                                   }
                                                   this.v = ((this.xx - this.xx2) * (this.y3 - this.yy2) + (this.yy - this.yy2) * (this.xx2 - this.x3)) / ((this.yy - this.yy2) * (this.x4 - this.x3) - (this.xx - this.xx2) * (this.y4 - this.y3));
                                                   this.retux = this.x3 + (this.x4 - this.x3) * this.v;
                                                   this.retuy = this.y3 + (this.y4 - this.y3) * this.v;
                                                   if((this.xx2 < this.xx ? this.xx2 : this.xx) - 1 <= this.retux)
                                                   {
                                                      if((this.xx2 > this.xx ? this.xx2 : this.xx) + 1 >= this.retux)
                                                      {
                                                         if((this.yy2 < this.yy ? this.yy2 : this.yy) - 1 <= this.retuy)
                                                         {
                                                            if((this.yy2 > this.yy ? this.yy2 : this.yy) + 1 >= this.retuy)
                                                            {
                                                               if(this.doors[_loc4_].x - 1 <= this.retux)
                                                               {
                                                                  if(this.doors[_loc4_].x + 1 + this.doors[_loc4_].w >= this.retux)
                                                                  {
                                                                     if(this.doors[_loc4_].y - 1 <= this.retuy)
                                                                     {
                                                                        if(this.doors[_loc4_].y + 1 + this.doors[_loc4_].h >= this.retuy)
                                                                        {
                                                                           if(this.i6 != -2)
                                                                           {
                                                                              if(this.i6 == -1 || this.Dist2D(this.rx,this.ry,this.puls[_loc1_].lx,this.puls[_loc1_].ly) > this.Dist2D(this.retux,this.retuy,this.puls[_loc1_].lx,this.puls[_loc1_].ly))
                                                                              {
                                                                                 this.rx = this.retux;
                                                                                 this.ry = this.retuy;
                                                                                 this.i6 = this.i3;
                                                                                 this.puls[_loc1_].lastinbox = -1 - _loc4_;
                                                                                 if(this.doors[_loc4_].onshot != -1)
                                                                                 {
                                                                                    if(this.puls[_loc1_].master == this.MP_myid || !this.MP_mode)
                                                                                    {
                                                                                       this.TRIGGER_PLAYER_INITIATOR = this.MP_myid;
                                                                                       this.TRIGGER_PROJECTILE_POWER = this.puls[_loc1_].power;
                                                                                       if(this.EXEC_TRIGGER(this.doors[_loc4_].onshot))
                                                                                       {
                                                                                          if(this.puls[_loc1_].master == this.MP_myid)
                                                                                          {
                                                                                             if(this.MP_mode)
                                                                                             {
                                                                                                this.MP_custom_events += ";exec|" + this.doors[_loc4_].onshot + "#" + this.MP_myid + "#" + -1 + "#" + this.puls[_loc1_].power;
                                                                                             }
                                                                                          }
                                                                                       }
                                                                                    }
                                                                                 }
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                                ++this.i3;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 if(this.i6 == -1)
                                 {
                                    if(this.puls[_loc1_].x >= this.boxx[_loc4_])
                                    {
                                       if(this.puls[_loc1_].x <= this.boxx[_loc4_] + this.boxw[_loc4_])
                                       {
                                          if(this.puls[_loc1_].y >= this.boxy[_loc4_])
                                          {
                                             if(this.puls[_loc1_].y <= this.boxy[_loc4_] + this.boxh[_loc4_])
                                             {
                                                this.rx = this.puls[_loc1_].x;
                                                this.ry = this.puls[_loc1_].y;
                                                this.i6 = -2;
                                                this.puls[_loc1_].lastinbox = -1 - _loc4_;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              _loc4_++;
                           }
                           if(this.i6 != -1)
                           {
                              if(this.puls[_loc1_].cclass == 1 || this.puls[_loc1_].cclass == 3 || this.puls[_loc1_].cclass == 5)
                              {
                                 this.puls[_loc1_].visible = false;
                              }
                              if(this.puls[_loc1_].cclass == 3)
                              {
                                 this.Effect(this.rx,this.ry,1,this.puls[_loc1_].power,0);
                                 this.Effect(this.rx - Number(this.puls[_loc1_].spx) * 0.1,this.ry - Number(this.puls[_loc1_].spy) * 0.1,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.06,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.06);
                                 this.Effect(this.rx - Number(this.puls[_loc1_].spx) * 0.1,this.ry - Number(this.puls[_loc1_].spy) * 0.1,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.06,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.06);
                                 this.Effect(this.rx - Number(this.puls[_loc1_].spx) * 0.1,this.ry - Number(this.puls[_loc1_].spy) * 0.1,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.06,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.06);
                              }
                              this.puls[_loc1_].nx = this.rx;
                              this.puls[_loc1_].ny = this.ry;
                              if(this.puls[_loc1_].cclass == 0)
                              {
                                 this.Effect(this.rx,this.ry,1,this.puls[_loc1_].power,0);
                                 if(this.i6 == 0 || this.i6 == 3)
                                 {
                                    this.xx = this.Math_abs(this.puls[_loc1_].spx);
                                    this.yy = this.Math_abs(this.puls[_loc1_].spy);
                                 }
                                 else
                                 {
                                    this.xx = this.Math_abs(this.puls[_loc1_].spy);
                                    this.yy = this.Math_abs(this.puls[_loc1_].spx);
                                 }
                                 if((this.yy < this.xx / 2 || this.puls[_loc1_].currentFrame == 38) && this.i6 != -2)
                                 {
                                    if(this.i6 == 0)
                                    {
                                       this.puls[_loc1_].spy = -this.Math_abs(this.puls[_loc1_].spy);
                                    }
                                    if(this.i6 == 3)
                                    {
                                       this.puls[_loc1_].spy = this.Math_abs(this.puls[_loc1_].spy);
                                    }
                                    if(this.i6 == 1)
                                    {
                                       this.puls[_loc1_].spx = this.Math_abs(this.puls[_loc1_].spx);
                                    }
                                    if(this.i6 == 2)
                                    {
                                       this.puls[_loc1_].spx = -this.Math_abs(this.puls[_loc1_].spx);
                                    }
                                    if(this.puls[_loc1_].currentFrame == 38)
                                    {
                                       this.puls[_loc1_].power *= 0.75;
                                       if(this.puls[_loc1_].power < 0.4)
                                       {
                                          this.puls[_loc1_].visible = false;
                                       }
                                       else
                                       {
                                          this.PlaySound(this.s_bounce_bullet,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                          this.puls[_loc1_].x = this.rx + Number(this.puls[_loc1_].spx) / this.Math_abs(this.puls[_loc1_].spx);
                                          this.puls[_loc1_].y = this.ry + Number(this.puls[_loc1_].spy) / this.Math_abs(this.puls[_loc1_].spy);
                                          this.puls[_loc1_].rotation = -90 - Math.atan2(this.puls[_loc1_].spx,this.puls[_loc1_].spy) / Math.PI * 180;
                                       }
                                    }
                                    else
                                    {
                                       this.puls[_loc1_].power *= 0.5;
                                       if(this.puls[_loc1_].power < 0.4)
                                       {
                                          this.puls[_loc1_].visible = false;
                                       }
                                       else
                                       {
                                          this.puls[_loc1_].x = this.rx + Number(this.puls[_loc1_].spx) / this.Math_abs(this.puls[_loc1_].spx);
                                          this.puls[_loc1_].y = this.ry + Number(this.puls[_loc1_].spy) / this.Math_abs(this.puls[_loc1_].spy);
                                          this.puls[_loc1_].rotation = -90 - Math.atan2(this.puls[_loc1_].spx,this.puls[_loc1_].spy) / Math.PI * 180;
                                       }
                                    }
                                 }
                                 else
                                 {
                                    this.xx = Number(this.puls[_loc1_].power) * 0.57 * this.weapon_penetration_factor;
                                    if(this.xx > 0.816 * this.weapon_penetration_factor)
                                    {
                                       this.xx = 0.816 * this.weapon_penetration_factor;
                                    }
                                    if(this.TracePointNoRagdolls(this.rx + Number(this.puls[_loc1_].spx) * this.xx,this.ry + Number(this.puls[_loc1_].spy) * this.xx))
                                    {
                                       this.Effect(this.rx + Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.5,this.ry + Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.5,8,Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.06,Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.06);
                                       this.Effect(this.rx + Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.5,this.ry + Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.5,8,Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.06,Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.06);
                                       this.Effect(this.rx,this.ry,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.06,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.06);
                                       this.Effect(this.rx,this.ry,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.06,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.06);
                                       this.puls[_loc1_].power *= 0.7;
                                       if(this.puls[_loc1_].power < 0.4)
                                       {
                                          this.puls[_loc1_].visible = false;
                                       }
                                    }
                                    else
                                    {
                                       this.puls[_loc1_].visible = false;
                                    }
                                 }
                              }
                              if(this.puls[_loc1_].cclass == 2 && this.MP_mode && this.MP_type != 2)
                              {
                                 this.puls[_loc1_].power *= 0.35;
                                 if(this.puls[_loc1_].power < 0.4)
                                 {
                                    this.puls[_loc1_].visible = false;
                                 }
                                 else
                                 {
                                    this.puls[_loc1_].lastin = -1;
                                    if(this.i6 != -2)
                                    {
                                       if(this.puls[_loc1_].currentFrame == 29)
                                       {
                                          this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,21,this.puls[_loc1_].rotation,0);
                                       }
                                       else if(this.puls[_loc1_].currentFrame == 51)
                                       {
                                          this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,24,this.puls[_loc1_].rotation,0);
                                       }
                                       else if(this.puls[_loc1_].currentFrame == 40)
                                       {
                                          this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,22,this.puls[_loc1_].rotation,0);
                                       }
                                       else if(this.puls[_loc1_].currentFrame == 48 || this.puls[_loc1_].currentFrame == 22)
                                       {
                                          this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,23,this.puls[_loc1_].rotation,0);
                                       }
                                       else if(this.puls[_loc1_].maxpower < 5)
                                       {
                                          this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,5,this.puls[_loc1_].rotation,0);
                                       }
                                       else
                                       {
                                          this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,17,this.puls[_loc1_].rotation,0);
                                       }
                                       this.Effect(this.rx,this.ry,6,0,0);
                                    }
                                    if(this.i6 == 0)
                                    {
                                       this.puls[_loc1_].spy = -this.Math_abs(this.puls[_loc1_].spy);
                                    }
                                    if(this.i6 == 3)
                                    {
                                       this.puls[_loc1_].spy = this.Math_abs(this.puls[_loc1_].spy);
                                    }
                                    if(this.i6 == 1)
                                    {
                                       this.puls[_loc1_].spx = this.Math_abs(this.puls[_loc1_].spx);
                                    }
                                    if(this.i6 == 2)
                                    {
                                       this.puls[_loc1_].spx = -this.Math_abs(this.puls[_loc1_].spx);
                                    }
                                    if(this.i6 == -2)
                                    {
                                       this.puls[_loc1_].visible = false;
                                    }
                                    this.puls[_loc1_].x = this.rx + Number(this.puls[_loc1_].spx) / this.Math_abs(this.puls[_loc1_].spx);
                                    this.puls[_loc1_].y = this.ry + Number(this.puls[_loc1_].spy) / this.Math_abs(this.puls[_loc1_].spy);
                                    this.puls[_loc1_].x += Number(this.puls[_loc1_].spx) * 0.5;
                                    this.puls[_loc1_].y += Number(this.puls[_loc1_].spy) * 0.5;
                                    this.puls[_loc1_].rotation = -90 - Math.atan2(this.puls[_loc1_].spx,this.puls[_loc1_].spy) / Math.PI * 180;
                                 }
                              }
                              else if(this.puls[_loc1_].cclass == 2)
                              {
                                 this.puls[_loc1_].visible = false;
                              }
                           }
                           this.ok = true;
                           _loc4_ = 0;
                           while(_loc4_ < this.watertotal)
                           {
                              if(this.puls[_loc1_].x > this.wax[_loc4_])
                              {
                                 if(this.puls[_loc1_].x < this.wax[_loc4_] + this.waw[_loc4_])
                                 {
                                    if(this.puls[_loc1_].y > this.way[_loc4_])
                                    {
                                       if(this.puls[_loc1_].y < this.way[_loc4_] + this.wah[_loc4_])
                                       {
                                          if(this.wa_friction[_loc4_])
                                          {
                                             if(this.SUPER_COMPUTER && !this.c_sim_stress)
                                             {
                                                this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,2,0,0);
                                             }
                                             this.ok = false;
                                             if(this.puls[_loc1_].inwater == false)
                                             {
                                                this.Effect(this.puls[_loc1_].x,this.way[_loc4_],3,0,this.puls[_loc1_].spy);
                                                this.puls[_loc1_].inwater = true;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              _loc4_++;
                           }
                           if(this.ok)
                           {
                              if(this.puls[_loc1_].inwater)
                              {
                                 this.puls[_loc1_].inwater = false;
                                 this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) / 2,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) / 2,3,0,this.puls[_loc1_].spy);
                              }
                           }
                        }
                        if(this.puls[_loc1_].cclass != 6)
                        {
                           this.i3 = 0;
                           while(this.i3 < this.vehiclestotal)
                           {
                              if(this.vehicles[this.i3].io)
                              {
                                 if(this.puls[_loc1_].master == -1 || this.vehicles[this.i3].master == -1 || this.mens[this.puls[_loc1_].master].team != this.mens[this.vehicles[this.i3].master].team || this.vehicles[this.i3].typ == 7 && this.puls[_loc1_].master != this.vehicles[this.i3].master)
                                 {
                                    this.ok = false;
                                    if(this.vehicles[this.i3].typ == 0)
                                    {
                                       this.i4 = 0;
                                       while(this.i4 < 7 && !this.ok)
                                       {
                                          if(this.i4 == this.MP_myid)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_w1);
                                          }
                                          if(this.i4 == 1)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_w2);
                                          }
                                          if(this.i4 == 2)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_c);
                                          }
                                          if(this.i4 == 3)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_c2);
                                          }
                                          if(this.i4 == 4)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_c3);
                                          }
                                          if(this.i4 == 5)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_w1b);
                                          }
                                          if(this.i4 == 6)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_w2b);
                                          }
                                          if(this.puls[_loc1_].x >= Number(this.ax[_loc4_]) - Number(this.arad[_loc4_]) * 0.8 - this.Math_abs(this.puls[_loc1_].spx) / 2 + this.puls[_loc1_].spx)
                                          {
                                             if(this.puls[_loc1_].x <= this.ax[_loc4_] + Number(this.arad[_loc4_]) * 0.8 + this.Math_abs(this.puls[_loc1_].spx) / 2 + this.puls[_loc1_].spx)
                                             {
                                                if(this.puls[_loc1_].y >= Number(this.ay[_loc4_]) - Number(this.arad[_loc4_]) * 0.8 - this.Math_abs(this.puls[_loc1_].spy) / 2 + this.puls[_loc1_].spy)
                                                {
                                                   if(this.puls[_loc1_].y <= this.ay[_loc4_] + Number(this.arad[_loc4_]) * 0.8 + this.Math_abs(this.puls[_loc1_].spy) / 2 + this.puls[_loc1_].spy)
                                                   {
                                                      this.ok = true;
                                                      this.atox[_loc4_] = (Number(this.atox[_loc4_]) * 40 + Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (39 + this.puls[_loc1_].power);
                                                      this.atoy[_loc4_] = (Number(this.atoy[_loc4_]) * 40 + Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (39 + this.puls[_loc1_].power);
                                                      this.WakeUpAtom(_loc4_);
                                                      this.vehicles[this.i3].hea -= Number(this.puls[_loc1_].power) * 10;
                                                      this.puls[_loc1_].visible = false;
                                                      this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,1,this.puls[_loc1_].power,0);
                                                      this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.04,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.04);
                                                      this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.05,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.05);
                                                      this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.1,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.1);
                                                   }
                                                }
                                             }
                                          }
                                          ++this.i4;
                                       }
                                    }
                                    if(this.vehicles[this.i3].typ == 1)
                                    {
                                       this.i4 = 0;
                                       while(this.i4 < 7 && !this.ok)
                                       {
                                          if(this.i4 == this.MP_myid)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_w1);
                                          }
                                          if(this.i4 == 1)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_w2);
                                          }
                                          if(this.i4 == 2)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_p1);
                                          }
                                          if(this.i4 == 3)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_p2);
                                          }
                                          if(this.i4 == 4)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_p3);
                                          }
                                          if(this.i4 == 5)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_w1b);
                                          }
                                          if(this.i4 == 6)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_w2b);
                                          }
                                          if(this.puls[_loc1_].x >= Number(this.ax[_loc4_]) - Number(this.arad[_loc4_]) * 0.8 - this.Math_abs(this.puls[_loc1_].spx) / 2 + this.puls[_loc1_].spx)
                                          {
                                             if(this.puls[_loc1_].x <= this.ax[_loc4_] + Number(this.arad[_loc4_]) * 0.8 + this.Math_abs(this.puls[_loc1_].spx) / 2 + this.puls[_loc1_].spx)
                                             {
                                                if(this.puls[_loc1_].y >= Number(this.ay[_loc4_]) - Number(this.arad[_loc4_]) * 0.8 - this.Math_abs(this.puls[_loc1_].spy) / 2 + this.puls[_loc1_].spy)
                                                {
                                                   if(this.puls[_loc1_].y <= this.ay[_loc4_] + Number(this.arad[_loc4_]) * 0.8 + this.Math_abs(this.puls[_loc1_].spy) / 2 + this.puls[_loc1_].spy)
                                                   {
                                                      this.ok = true;
                                                      this.atox[_loc4_] = (Number(this.atox[_loc4_]) * 40 + Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (39 + this.puls[_loc1_].power);
                                                      this.atoy[_loc4_] = (Number(this.atoy[_loc4_]) * 40 + Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (39 + this.puls[_loc1_].power);
                                                      this.WakeUpAtom(_loc4_);
                                                      this.vehicles[this.i3].hea -= Number(this.puls[_loc1_].power) * 10;
                                                      this.puls[_loc1_].visible = false;
                                                      this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,1,this.puls[_loc1_].power,0);
                                                      this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.04,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.04);
                                                      this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.05,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.05);
                                                      this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.1,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.1);
                                                   }
                                                }
                                             }
                                          }
                                          ++this.i4;
                                       }
                                    }
                                    if(this.vehicles[this.i3].typ == 3)
                                    {
                                       if(this.vehicles[this.i3].hea > 0)
                                       {
                                          _loc4_ = int(this.vehicles[this.i3].b_c);
                                          if(this.puls[_loc1_].x >= Number(this.ax[_loc4_]) - 30 - this.Math_abs(this.puls[_loc1_].spx) / 2 + this.puls[_loc1_].spx)
                                          {
                                             if(this.puls[_loc1_].x <= this.ax[_loc4_] + 30 + this.Math_abs(this.puls[_loc1_].spx) / 2 + this.puls[_loc1_].spx)
                                             {
                                                if(this.puls[_loc1_].y >= Number(this.ay[_loc4_]) - 30 - this.Math_abs(this.puls[_loc1_].spy) / 2 + this.puls[_loc1_].spy)
                                                {
                                                   if(this.puls[_loc1_].y <= this.ay[_loc4_] + 30 + this.Math_abs(this.puls[_loc1_].spy) / 2 + this.puls[_loc1_].spy)
                                                   {
                                                      this.ok = true;
                                                      this.atox[_loc4_] += Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.03 * Number(this.puls[_loc1_].knockback_multiplier);
                                                      this.atoy[_loc4_] += Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.03 * Number(this.puls[_loc1_].knockback_multiplier);
                                                      this.atox[this.vehicles[this.i3].b_lt] += Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.03 * Number(this.puls[_loc1_].knockback_multiplier);
                                                      this.atoy[this.vehicles[this.i3].b_lt] += Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.03 * Number(this.puls[_loc1_].knockback_multiplier);
                                                      this.atox[this.vehicles[this.i3].b_rt] += Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.03 * Number(this.puls[_loc1_].knockback_multiplier);
                                                      this.atoy[this.vehicles[this.i3].b_rt] += Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.03 * Number(this.puls[_loc1_].knockback_multiplier);
                                                      this.atox[this.vehicles[this.i3].b_lb] += Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.03 * Number(this.puls[_loc1_].knockback_multiplier);
                                                      this.atoy[this.vehicles[this.i3].b_lb] += Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.03 * Number(this.puls[_loc1_].knockback_multiplier);
                                                      this.atox[this.vehicles[this.i3].b_rb] += Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.03 * Number(this.puls[_loc1_].knockback_multiplier);
                                                      this.atoy[this.vehicles[this.i3].b_rb] += Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.03 * Number(this.puls[_loc1_].knockback_multiplier);
                                                      this.WakeUpAtom(_loc4_);
                                                      this.aio[this.vehicles[this.i3].b_lt] = true;
                                                      this.aio[this.vehicles[this.i3].b_rt] = true;
                                                      this.aio[this.vehicles[this.i3].b_lb] = true;
                                                      this.aio[this.vehicles[this.i3].b_rb] = true;
                                                      this.vehicles[this.i3].hea -= Number(this.puls[_loc1_].power) * 10;
                                                      this.atim[this.vehicles[this.i3].b_lt] = 0;
                                                      this.atim[this.vehicles[this.i3].b_rt] = 0;
                                                      this.atim[this.vehicles[this.i3].b_lb] = 0;
                                                      this.atim[this.vehicles[this.i3].b_rb] = 0;
                                                      this.puls[_loc1_].visible = false;
                                                      this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx),Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy),1,this.puls[_loc1_].power,0);
                                                      this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx),Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy),8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.04,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.04);
                                                      this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx),Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy),8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.05,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.05);
                                                      this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx),Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy),8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.1,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.1);
                                                      this.PlaySound(this.s_box_hard,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    if(this.vehicles[this.i3].typ == 4 || this.vehicles[this.i3].typ == 7)
                                    {
                                       _loc4_ = int(this.vehicles[this.i3].b_c);
                                       if(this.vehicles[this.i3].typ == 4)
                                       {
                                          this.u = 20;
                                          this.v = 20;
                                       }
                                       else
                                       {
                                          this.u = 75;
                                          this.v = 50;
                                       }
                                       if(this.puls[_loc1_].x >= Number(this.ax[_loc4_]) - this.u - this.Math_abs(this.puls[_loc1_].spx) / 2 + this.puls[_loc1_].spx)
                                       {
                                          if(this.puls[_loc1_].x <= this.ax[_loc4_] + this.u + this.Math_abs(this.puls[_loc1_].spx) / 2 + this.puls[_loc1_].spx)
                                          {
                                             if(this.puls[_loc1_].y >= Number(this.ay[_loc4_]) - this.v - this.Math_abs(this.puls[_loc1_].spy) / 2 + this.puls[_loc1_].spy)
                                             {
                                                if(this.puls[_loc1_].y <= this.ay[_loc4_] + this.v + this.Math_abs(this.puls[_loc1_].spy) / 2 + this.puls[_loc1_].spy)
                                                {
                                                   this.ok = true;
                                                   if(this.vehicles[this.i3].typ == 4)
                                                   {
                                                      this.u = Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.05 * Number(this.puls[_loc1_].knockback_multiplier);
                                                      this.v = Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.05 * Number(this.puls[_loc1_].knockback_multiplier);
                                                   }
                                                   else
                                                   {
                                                      this.u = Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.01 * Number(this.puls[_loc1_].knockback_multiplier);
                                                      this.v = Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.01 * Number(this.puls[_loc1_].knockback_multiplier);
                                                   }
                                                   this.atox[_loc4_] += this.u;
                                                   this.atoy[_loc4_] += this.v;
                                                   this.atox[this.vehicles[this.i3].b_c1] += this.u;
                                                   this.atoy[this.vehicles[this.i3].b_c1] += this.v;
                                                   this.atox[this.vehicles[this.i3].b_c2] += this.u;
                                                   this.atoy[this.vehicles[this.i3].b_c2] += this.v;
                                                   this.atox[this.vehicles[this.i3].b_c3] += this.u;
                                                   this.atoy[this.vehicles[this.i3].b_c3] += this.v;
                                                   this.aio[_loc4_] = true;
                                                   this.aio[this.vehicles[this.i3].b_c1] = true;
                                                   this.aio[this.vehicles[this.i3].b_c2] = true;
                                                   this.aio[this.vehicles[this.i3].b_c3] = true;
                                                   this.vehicles[this.i3].hea -= Number(this.puls[_loc1_].power) * 10;
                                                   this.atim[_loc4_] = 0;
                                                   this.atim[this.vehicles[this.i3].b_c1] = 0;
                                                   this.atim[this.vehicles[this.i3].b_c2] = 0;
                                                   this.atim[this.vehicles[this.i3].b_c3] = 0;
                                                   this.puls[_loc1_].visible = false;
                                                   this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,1,this.puls[_loc1_].power,0);
                                                   this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.04,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.04);
                                                   this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.05,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.05);
                                                   this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.1,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.1);
                                                   if(this.vehicles[this.i3].typ == 4)
                                                   {
                                                      if(!this.vehicles[this.i3].dead)
                                                      {
                                                         this.Say(this.vehicles[this.i3],this.s_drone_hurt,true);
                                                      }
                                                      if(Math.random() > 0.5)
                                                      {
                                                         this.PlaySound(this.s_capsule_hit1,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                                      }
                                                      else
                                                      {
                                                         this.PlaySound(this.s_capsule_hit2,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                                      }
                                                   }
                                                   else
                                                   {
                                                      this.PlaySound(this.s_metal_hit,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    if(this.ok)
                                    {
                                       if(this.vehicles[this.i3].master != -1)
                                       {
                                          if(!this.vehicles[this.i3].dead)
                                          {
                                             this.Alerted(this.mens[this.vehicles[this.i3].master]);
                                             this.mens[this.vehicles[this.i3].master].hunt = this.puls[_loc1_].master;
                                             if(this.puls[_loc1_].master == this.MP_myid)
                                             {
                                                if(!this.vehicles[this.i3].dead)
                                                {
                                                   ++this.FUN_NICE_BULLETS;
                                                   this.FUN_DAMAGE_MADE += Number(this.puls[_loc1_].power) * 10;
                                                }
                                             }
                                             if(this.puls[_loc1_].master == this.MP_myid)
                                             {
                                                if(this.SCREEN_EFFECTS)
                                                {
                                                   this.whitness.alpha += Number(this.puls[_loc1_].power) * 10 / Number(this.vehicles[this.i3].hmax);
                                                   if(this.vehicles[this.i3].hea <= 0)
                                                   {
                                                      this.whitness.alpha += 0.5;
                                                   }
                                                   this.whitness.visible = true;
                                                }
                                                this.DamageReport(Number(this.puls[_loc1_].power) * 10);
                                                if(this.vehicles[this.i3].hea <= 0)
                                                {
                                                   this.FragReport(this.mens[this.vehicles[this.i3].master].team == this.mens[this.MP_myid].team,this.mens[this.vehicles[this.i3].master]);
                                                }
                                             }
                                             if(this.mens[this.vehicles[this.i3].master].team != this.mens[this.MP_myid].team)
                                             {
                                                if(!this.vehicles[this.i3].dead)
                                                {
                                                   if(this.vehicles[this.i3].hea <= 0)
                                                   {
                                                      if(this.puls[_loc1_].thisis == "swords")
                                                      {
                                                         this.incBadge(17);
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              ++this.i3;
                           }
                        }
                        if(this.puls[_loc1_].cclass != 6)
                        {
                           _loc4_ = 0;
                           while(_loc4_ < this.gunstotal)
                           {
                              if(this.puls[_loc1_].lastin != -_loc4_ - 100)
                              {
                                 if(this.guns[_loc4_].io)
                                 {
                                    if(this.guns[_loc4_].picken_by != this.puls[_loc1_].master)
                                    {
                                       if(this.guns[_loc4_].picken_by == -1)
                                       {
                                          this.mc2 = this.guns[_loc4_];
                                          if(this.puls[_loc1_].x >= this.mc2.x - 100)
                                          {
                                             if(this.puls[_loc1_].x <= this.mc2.x + 100)
                                             {
                                                if(this.puls[_loc1_].y >= this.mc2.y - 100)
                                                {
                                                   if(this.puls[_loc1_].y <= this.mc2.y + 100)
                                                   {
                                                      if(this.CheckHit(_loc1_,this.mc2.b_p1) || this.CheckHit(_loc1_,this.mc2.b_p2) || this.CheckCross(this.puls[_loc1_].lx,this.puls[_loc1_].ly,this.puls[_loc1_].nx,this.puls[_loc1_].ny,this.ax[this.mc2.b_p1],this.ay[this.mc2.b_p1],this.ax[this.mc2.b_p2],this.ay[this.mc2.b_p2],_loc1_))
                                                      {
                                                         this.puls[_loc1_].lastin = -_loc4_ - 100;
                                                         if(this.puls[_loc1_].power < 1)
                                                         {
                                                            this.PlaySound(this.s_wea1,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                                         }
                                                         else
                                                         {
                                                            this.PlaySound(this.s_wea2,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                                         }
                                                         this.xx = this.Dist2D(this.puls[_loc1_].x,this.puls[_loc1_].y,this.ax[this.mc2.b_p1],this.ay[this.mc2.b_p1]);
                                                         this.xx2 = this.Dist2D(this.puls[_loc1_].x,this.puls[_loc1_].y,this.ax[this.mc2.b_p2],this.ay[this.mc2.b_p2]);
                                                         this.u = this.xx + this.xx2;
                                                         if(this.u > 1)
                                                         {
                                                            this.xx /= this.u;
                                                            this.xx2 /= this.u;
                                                         }
                                                         this.atox[this.mc2.b_p1] += Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.1 * this.xx2 * Number(this.puls[_loc1_].knockback_multiplier);
                                                         this.atoy[this.mc2.b_p1] += Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.1 * this.xx2 * Number(this.puls[_loc1_].knockback_multiplier);
                                                         this.atox[this.mc2.b_p2] += Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.1 * this.xx * Number(this.puls[_loc1_].knockback_multiplier);
                                                         this.atoy[this.mc2.b_p2] += Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.1 * this.xx * Number(this.puls[_loc1_].knockback_multiplier);
                                                         this.WakeUpAtom(this.mc2.b_p1);
                                                         this.WakeUpAtom(this.mc2.b_p2);
                                                         this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,1,this.puls[_loc1_].power,0);
                                                         this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.04,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.04);
                                                         this.puls[_loc1_].power = Math.max(0,Number(this.puls[_loc1_].power) - 0.5);
                                                         if(this.puls[_loc1_].power < 0.4)
                                                         {
                                                            this.puls[_loc1_].visible = false;
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              _loc4_++;
                           }
                        }
                        if(this.ALLOW_LIGHT_BREAK)
                        {
                           if(this.puls[_loc1_].cclass != 6)
                           {
                              _loc4_ = 0;
                              while(_loc4_ < this.lampstotal)
                              {
                                 if(this.lamps_power2[_loc4_] > 0)
                                 {
                                    if(this.puls[_loc1_].nx > Number(this.lamps_x[_loc4_]) - 20 - Math.abs(Number(this.puls[_loc1_].lx) - Number(this.puls[_loc1_].nx)))
                                    {
                                       if(this.puls[_loc1_].nx < this.lamps_x[_loc4_] + 20 + Math.abs(Number(this.puls[_loc1_].lx) - Number(this.puls[_loc1_].nx)))
                                       {
                                          if(this.puls[_loc1_].ny > Number(this.lamps_y[_loc4_]) - 20 - Math.abs(Number(this.puls[_loc1_].ly) - Number(this.puls[_loc1_].ny)))
                                          {
                                             if(this.puls[_loc1_].ny < this.lamps_y[_loc4_] + 20 + Math.abs(Number(this.puls[_loc1_].ly) - Number(this.puls[_loc1_].ny)))
                                             {
                                                if(this.CheckCross(this.puls[_loc1_].lx,this.puls[_loc1_].ly,this.puls[_loc1_].nx,this.puls[_loc1_].ny,Number(this.lamps_x[_loc4_]) - 20,Number(this.lamps_y[_loc4_]) - 20,this.lamps_x[_loc4_] + 20,this.lamps_y[_loc4_] + 20,_loc1_) || this.CheckCross(this.puls[_loc1_].lx,this.puls[_loc1_].ly,this.puls[_loc1_].nx,this.puls[_loc1_].ny,this.lamps_x[_loc4_] + 20,Number(this.lamps_y[_loc4_]) - 20,Number(this.lamps_x[_loc4_]) - 20,this.lamps_y[_loc4_] + 20,_loc1_))
                                                {
                                                   this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) / 2,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) / 2,8,Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.04,Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.04);
                                                   this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) / 2,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) / 2,8,Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.05,Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.05);
                                                   this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) / 2,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) / 2,8,Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.1,Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.1);
                                                   this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) / 2,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) / 2,8,Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.09,Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.04);
                                                   this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) / 2,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) / 2,8,Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.1,Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.05);
                                                   this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) / 2,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) / 2,8,Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.2,Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.1);
                                                   this.puls[_loc1_].power = Math.max(0,Number(this.puls[_loc1_].power) - 1.5);
                                                   if(this.puls[_loc1_].power < 0.4)
                                                   {
                                                      this.puls[_loc1_].visible = false;
                                                   }
                                                   this.ShotLight(_loc4_);
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                                 _loc4_++;
                              }
                           }
                        }
                        if(this.puls[_loc1_].cclass != 6)
                        {
                           _loc4_ = 0;
                           while(_loc4_ < this.barrelstotal)
                           {
                              if(this.puls[_loc1_].lastin != -_loc4_ - 1)
                              {
                                 if(this.barrels[_loc4_].hea > 0)
                                 {
                                    this.mc2 = this.barrels[_loc4_];
                                    if(this.puls[_loc1_].nx > this.mc2.x - 30 - Math.abs(Number(this.puls[_loc1_].lx) - Number(this.puls[_loc1_].nx)))
                                    {
                                       if(this.puls[_loc1_].nx < this.mc2.x + 30 + Math.abs(Number(this.puls[_loc1_].lx) - Number(this.puls[_loc1_].nx)))
                                       {
                                          if(this.puls[_loc1_].ny > this.mc2.y - 30 - Math.abs(Number(this.puls[_loc1_].ly) - Number(this.puls[_loc1_].ny)))
                                          {
                                             if(this.puls[_loc1_].ny < this.mc2.y + 30 + Math.abs(Number(this.puls[_loc1_].ly) - Number(this.puls[_loc1_].ny)))
                                             {
                                                if(this.CheckCross(this.puls[_loc1_].lx,this.puls[_loc1_].ly,this.puls[_loc1_].nx,this.puls[_loc1_].ny,this.ax[this.mc2.b_left_bottom],this.ay[this.mc2.b_left_bottom],this.ax[this.mc2.b_right_top],this.ay[this.mc2.b_right_top],_loc1_) || this.CheckCross(this.puls[_loc1_].lx,this.puls[_loc1_].ly,this.puls[_loc1_].nx,this.puls[_loc1_].ny,this.ax[this.mc2.b_left_top],this.ay[this.mc2.b_left_top],this.ax[this.mc2.b_right_bottom],this.ay[this.mc2.b_right_bottom],_loc1_))
                                                {
                                                   this.puls[_loc1_].lastin = -_loc4_ - 1;
                                                   this.atox[this.mc2.b_left_top] = (Number(this.atox[this.mc2.b_left_top]) * 7 + Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                   this.atoy[this.mc2.b_left_top] = (Number(this.atoy[this.mc2.b_left_top]) * 7 + Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                   this.atox[this.mc2.b_right_top] = (Number(this.atox[this.mc2.b_right_top]) * 7 + Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                   this.atoy[this.mc2.b_right_top] = (Number(this.atoy[this.mc2.b_right_top]) * 7 + Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                   this.atox[this.mc2.b_right_bottom] = (Number(this.atox[this.mc2.b_right_bottom]) * 7 + Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                   this.atoy[this.mc2.b_right_bottom] = (Number(this.atoy[this.mc2.b_right_bottom]) * 7 + Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                   this.atox[this.mc2.b_left_bottom] = (Number(this.atox[this.mc2.b_left_bottom]) * 7 + Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                   this.atoy[this.mc2.b_left_bottom] = (Number(this.atoy[this.mc2.b_left_bottom]) * 7 + Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                   this.mc2.hea -= Number(this.puls[_loc1_].power) * 20;
                                                   this.mc2.master = this.puls[_loc1_].master;
                                                   this.HurtBarrel(_loc4_);
                                                   this.aio[this.mc2.b_left_top] = true;
                                                   this.aio[this.mc2.b_right_top] = true;
                                                   this.aio[this.mc2.b_right_bottom] = true;
                                                   this.aio[this.mc2.b_left_bottom] = true;
                                                   this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) / 2,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) / 2,1,this.puls[_loc1_].power,0);
                                                   this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) / 2,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) / 2,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.04,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.04);
                                                   this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) / 2,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) / 2,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.05,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.05);
                                                   this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) / 2,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) / 2,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.1,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.1);
                                                   if(this.mc2.hea > 0)
                                                   {
                                                      this.puls[_loc1_].power = Math.max(0,Number(this.puls[_loc1_].power) - 1.5);
                                                      if(this.puls[_loc1_].master == this.MP_myid)
                                                      {
                                                         ++this.FUN_NICE_BULLETS;
                                                      }
                                                   }
                                                   if(this.puls[_loc1_].power < 0.4)
                                                   {
                                                      this.puls[_loc1_].visible = false;
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                                 else
                                 {
                                    this.mc2 = this.barrels[_loc4_];
                                    this.i3 = 1;
                                    while(this.i3 <= 2)
                                    {
                                       if(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) / 2 >= this.mc2.x + this.mc2["b" + this.i3].x - this.Math_abs(this.puls[_loc1_].spx) * 0.8 - 10)
                                       {
                                          if(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) / 2 <= this.mc2.x + this.mc2["b" + this.i3].x + this.Math_abs(this.puls[_loc1_].spx) * 0.8 + 10)
                                          {
                                             if(Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) / 2 >= this.mc2.y + this.mc2["b" + this.i3].y - this.Math_abs(this.puls[_loc1_].spy) * 0.8 - 10)
                                             {
                                                if(Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) / 2 <= this.mc2.y + this.mc2["b" + this.i3].y + this.Math_abs(this.puls[_loc1_].spy) * 0.8 + 10)
                                                {
                                                   this.puls[_loc1_].lastin = -_loc4_ - 1;
                                                   if(this.i3 == 1)
                                                   {
                                                      this.atox[this.mc2.b_left_top] = (Number(this.atox[this.mc2.b_left_top]) * 7 + Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                      this.atoy[this.mc2.b_left_top] = (Number(this.atoy[this.mc2.b_left_top]) * 7 + Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                      this.atox[this.mc2.b_right_top] = (Number(this.atox[this.mc2.b_right_top]) * 7 + Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                      this.atoy[this.mc2.b_right_top] = (Number(this.atoy[this.mc2.b_right_top]) * 7 + Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                      this.atox[this.mc2.b_right1] = (Number(this.atox[this.mc2.b_right1]) * 7 + Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                      this.atoy[this.mc2.b_right1] = (Number(this.atoy[this.mc2.b_right1]) * 7 + Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                      this.atox[this.mc2.b_left1] = (Number(this.atox[this.mc2.b_left1]) * 7 + Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                      this.atoy[this.mc2.b_left1] = (Number(this.atoy[this.mc2.b_left1]) * 7 + Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                      this.aio[this.mc2.b_left_top] = true;
                                                      this.aio[this.mc2.b_right_top] = true;
                                                      this.aio[this.mc2.b_right1] = true;
                                                      this.aio[this.mc2.b_left1] = true;
                                                   }
                                                   else
                                                   {
                                                      this.atox[this.mc2.b_left2] = (Number(this.atox[this.mc2.b_left2]) * 7 + Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                      this.atoy[this.mc2.b_left2] = (Number(this.atoy[this.mc2.b_left2]) * 7 + Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                      this.atox[this.mc2.b_right2] = (Number(this.atox[this.mc2.b_right2]) * 7 + Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                      this.atoy[this.mc2.b_right2] = (Number(this.atoy[this.mc2.b_right2]) * 7 + Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                      this.atox[this.mc2.b_right_bottom] = (Number(this.atox[this.mc2.b_right_bottom]) * 7 + Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                      this.atoy[this.mc2.b_right_bottom] = (Number(this.atoy[this.mc2.b_right_bottom]) * 7 + Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                      this.atox[this.mc2.b_left_bottom] = (Number(this.atox[this.mc2.b_left_bottom]) * 7 + Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                      this.atoy[this.mc2.b_left_bottom] = (Number(this.atoy[this.mc2.b_left_bottom]) * 7 + Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * Number(this.puls[_loc1_].knockback_multiplier)) / (7 + this.puls[_loc1_].power);
                                                      this.aio[this.mc2.b_right_bottom] = true;
                                                      this.aio[this.mc2.b_left_bottom] = true;
                                                      this.aio[this.mc2.b_right2] = true;
                                                      this.aio[this.mc2.b_left2] = true;
                                                   }
                                                   this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) / 2,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) / 2,1,this.puls[_loc1_].power,0);
                                                   this.puls[_loc1_].power = Math.max(0,Number(this.puls[_loc1_].power) - 0.3);
                                                   if(this.puls[_loc1_].power < 0.4)
                                                   {
                                                      this.puls[_loc1_].visible = false;
                                                   }
                                                   this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) / 2,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) / 2,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.04,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.04);
                                                   this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) / 2,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) / 2,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.05,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.05);
                                                   this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) / 2,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) / 2,8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].power) * 0.1,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].power) * 0.1);
                                                }
                                             }
                                          }
                                       }
                                       ++this.i3;
                                    }
                                 }
                              }
                              _loc4_++;
                           }
                        }
                        if(this.puls[_loc1_].currentFrame == 43 || this.puls[_loc1_].currentFrame == 54)
                        {
                           _loc14_ = -1;
                           _loc15_ = 600;
                           _loc4_ = 0;
                           while(_loc4_ < this.playerstotal)
                           {
                              if(this.mens[_loc4_].io)
                              {
                                 if(this.mens[_loc4_].team != this.mens[this.puls[_loc1_].master].team)
                                 {
                                    if(this.mens[_loc4_].incar == -1)
                                    {
                                       if(this.mens[_loc4_].hea > 0)
                                       {
                                          this.mc2 = this.mens[_loc4_];
                                          if(this.TraceLine(this.puls[_loc1_].x,this.puls[_loc1_].y,this.ax[this.mc2.b_toe],this.ay[this.mc2.b_toe]))
                                          {
                                             if((_loc16_ = this.Dist2D(this.puls[_loc1_].x,this.puls[_loc1_].y,this.ax[this.mc2.b_toe],this.ay[this.mc2.b_toe])) < _loc15_)
                                             {
                                                _loc15_ = _loc16_;
                                                _loc14_ = _loc4_;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              _loc4_++;
                           }
                           if(_loc14_ != -1)
                           {
                              if(_loc15_ > 1)
                              {
                                 this.mc2 = this.mens[_loc14_];
                                 _loc13_ = 0;
                                 while(_loc13_ < 3)
                                 {
                                    _loc17_ = this.ax[this.mc2.b_toe] + (Number(this.atox[this.mc2.b_toe]) - Number(this.puls[_loc1_].spx)) * (_loc15_ / 25 / this.rocket_speed_mult);
                                    _loc18_ = this.ay[this.mc2.b_toe] + (Number(this.atoy[this.mc2.b_toe]) - Number(this.puls[_loc1_].spy)) * (_loc15_ / 25 / this.rocket_speed_mult);
                                    _loc15_ = this.Dist2D(this.puls[_loc1_].x,this.puls[_loc1_].y,_loc17_,_loc18_);
                                    _loc13_++;
                                 }
                                 _loc19_ = (_loc17_ - Number(this.puls[_loc1_].x)) / _loc15_ * 25 * this.rocket_speed_mult;
                                 _loc20_ = (_loc18_ - Number(this.puls[_loc1_].y)) / _loc15_ * 25 * this.rocket_speed_mult;
                                 this.puls[_loc1_].spx = this.MorphWithTimeScale(this.puls[_loc1_].spx,_loc19_,0.95,this.thispulspeed);
                                 this.puls[_loc1_].spy = this.MorphWithTimeScale(this.puls[_loc1_].spy,_loc20_,0.95,this.thispulspeed);
                                 if((_loc15_ = this.Dist2D(this.puls[_loc1_].spx,this.puls[_loc1_].spy,0,0)) > 1)
                                 {
                                    _loc19_ = Number(this.puls[_loc1_].spx) / _loc15_ * 25 * this.rocket_speed_mult;
                                    _loc20_ = Number(this.puls[_loc1_].spy) / _loc15_ * 25 * this.rocket_speed_mult;
                                    this.puls[_loc1_].spx = this.MorphWithTimeScale(this.puls[_loc1_].spx,_loc19_,0.95,this.thispulspeed);
                                    this.puls[_loc1_].spy = this.MorphWithTimeScale(this.puls[_loc1_].spy,_loc20_,0.95,this.thispulspeed);
                                 }
                                 this.puls[_loc1_].rotation = 270 - Math.atan2(this.puls[_loc1_].spx,this.puls[_loc1_].spy) / Math.PI * 180;
                              }
                           }
                        }
                        _loc2_ = this.MP_custom_events.length;
                        _loc3_ = Number(this.mens[this.MP_myid].hea);
                        if(this.puls[_loc1_].cclass != 6)
                        {
                           _loc4_ = 0;
                           while(_loc4_ < this.playerstotal)
                           {
                              if(this.mens[_loc4_].io)
                              {
                                 if(this.mens[_loc4_].can_be_hit)
                                 {
                                    if(_loc4_ != this.puls[_loc1_].master || this.puls[_loc1_].cclass == 2 || this.puls[_loc1_].currentFrame == 41 && this.mens[_loc4_].dying)
                                    {
                                       if(this.puls[_loc1_].lastin != _loc4_ || this.puls[_loc1_].currentFrame == 41 && this.mens[_loc4_].dying)
                                       {
                                          if(this.mens[_loc4_].team != this.mens[this.puls[_loc1_].master].team || this.puls[_loc1_].currentFrame == 41 || this.mens[_loc4_].team != 0 && !this.PRO_BOTS && !this.MP_mode || (this.mens[_loc4_].hea <= 0 || this.mens[_loc4_].dying && !this.MP_mode) || this.MP_mode && this.MP_type == 1)
                                          {
                                             if(this.mens[_loc4_].incar == -1)
                                             {
                                                this.mc2 = this.mens[_loc4_];
                                                this.i3 = -1;
                                                if(!this.stable)
                                                {
                                                   if(this.MP_mode)
                                                   {
                                                      if(!this.MP_favor_the_shooter)
                                                      {
                                                         if(Math.random() > 0.95)
                                                         {
                                                            if(Math.random() > 0.5)
                                                            {
                                                               this.puls[_loc1_].nx = this.mens[this.MP_myid].x;
                                                               this.puls[_loc1_].ny = this.mens[this.MP_myid].y;
                                                            }
                                                            else
                                                            {
                                                               this.puls[_loc1_].lx = this.mens[this.MP_myid].x;
                                                               this.puls[_loc1_].ly = this.mens[this.MP_myid].y;
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                                if(this.CheckHit(_loc1_,this.mc2.b_head_end) || this.CheckHit(_loc1_,this.mc2.b_head_start))
                                                {
                                                   this.i3 = this.mc2.b_head_end;
                                                   this.str = "head";
                                                }
                                                else if(this.CheckHit(_loc1_,this.mc2.b_body) || !this.mc2.brk_body && this.CheckCross(this.puls[_loc1_].lx,this.puls[_loc1_].ly,this.puls[_loc1_].nx,this.puls[_loc1_].ny,this.ax[this.mc2.b_body],this.ay[this.mc2.b_body],this.ax[this.mc2.b_toe],this.ay[this.mc2.b_toe],_loc1_))
                                                {
                                                   this.i3 = this.mc2.b_body;
                                                   this.str = "body";
                                                }
                                                else if(this.CheckHit(_loc1_,this.mc2.b_toe))
                                                {
                                                   this.i3 = this.mc2.b_toe;
                                                   this.str = "legs";
                                                }
                                                else if(this.CheckHit(_loc1_,this.mc2.b_arm1))
                                                {
                                                   this.i3 = this.mc2.b_arm1;
                                                   this.str = "arms";
                                                }
                                                else if(this.CheckHit(_loc1_,this.mc2.b_arm2))
                                                {
                                                   this.i3 = this.mc2.b_arm2;
                                                   this.str = "arms";
                                                }
                                                else if(this.CheckHit(_loc1_,this.mc2.b_leg1) || this.CheckCross(this.puls[_loc1_].lx,this.puls[_loc1_].ly,this.puls[_loc1_].nx,this.puls[_loc1_].ny,this.ax[this.mc2.b_toe],this.ay[this.mc2.b_toe],this.ax[this.mc2.b_leg1],this.ay[this.mc2.b_leg1],_loc1_))
                                                {
                                                   this.i3 = this.mc2.b_leg1;
                                                   this.str = "legs";
                                                }
                                                else if(this.CheckHit(_loc1_,this.mc2.b_leg2) || this.CheckCross(this.puls[_loc1_].lx,this.puls[_loc1_].ly,this.puls[_loc1_].nx,this.puls[_loc1_].ny,this.ax[this.mc2.b_toe],this.ay[this.mc2.b_toe],this.ax[this.mc2.b_leg2],this.ay[this.mc2.b_leg2],_loc1_))
                                                {
                                                   this.i3 = this.mc2.b_leg2;
                                                   this.str = "legs";
                                                }
                                                else
                                                {
                                                   this.i3 = -1;
                                                }
                                                if(this.i3 != -1)
                                                {
                                                   if(this.MP_mode)
                                                   {
                                                      if(this.mc2.hea > 0)
                                                      {
                                                         if(Boolean(this.mc2.isplayer) && this.MP_myid != _loc4_)
                                                         {
                                                            if(this.INTRUDER_DATABASE[this.mc2.login_name] == undefined || this.INTRUDER_DATABASE[this.mc2.login_name] == null)
                                                            {
                                                               this.INTRUDER_DATABASE[this.mc2.login_name] = new Object();
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].unregistered_shots = 1;
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].registered_shots = 0;
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].activity_start = getTimer();
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].activity_end = getTimer();
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].ping_min = this.mc2.ping;
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].ping_max = this.mc2.ping;
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].seen_deaths = 0;
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].max_hea = this.mc2.hea;
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].min_hea = this.mc2.hea;
                                                            }
                                                            else
                                                            {
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].unregistered_shots += 1;
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].activity_end = getTimer();
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].ping_min = Math.min(this.INTRUDER_DATABASE[this.mc2.login_name].ping_min,this.mc2.ping);
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].ping_max = Math.max(this.INTRUDER_DATABASE[this.mc2.login_name].ping_max,this.mc2.ping);
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].max_hea = Math.max(this.INTRUDER_DATABASE[this.mc2.login_name].max_hea,this.mc2.hea);
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].min_hea = Math.min(this.INTRUDER_DATABASE[this.mc2.login_name].min_hea,this.mc2.hea);
                                                            }
                                                         }
                                                      }
                                                   }
                                                   if(this.str == "arms")
                                                   {
                                                      if(this.mc2.brk_arms)
                                                      {
                                                         this.str = "body";
                                                      }
                                                   }
                                                   if(this.str == "body")
                                                   {
                                                      if(this.mc2.brk_body)
                                                      {
                                                         if(this.mc2.brk_arms)
                                                         {
                                                            this.str = "head";
                                                         }
                                                         else
                                                         {
                                                            this.str = "arms";
                                                         }
                                                      }
                                                   }
                                                   if(this.mc2.brk_legs)
                                                   {
                                                      if(this.str == "legs")
                                                      {
                                                         this.str = "body";
                                                      }
                                                   }
                                                   if(this.mc2.brk_head)
                                                   {
                                                      if(this.str == "head")
                                                      {
                                                         if(this.mc2.brk_body)
                                                         {
                                                            this.str = "arms";
                                                         }
                                                         else
                                                         {
                                                            this.str = "body";
                                                         }
                                                      }
                                                   }
                                                   _loc21_ = false;
                                                   _loc22_ = this.MP_mode && this.MP_myid == _loc4_;
                                                   _loc23_ = this.mc2.hea > 0;
                                                   if(this.MP_favor_the_shooter)
                                                   {
                                                      if(!this.MP_mode || this.puls[_loc1_].master == this.MP_myid || !this.mens[this.puls[_loc1_].master].isplayer)
                                                      {
                                                         _loc21_ = true;
                                                      }
                                                      if(this.MP_mode)
                                                      {
                                                         if(this.mens[this.puls[_loc1_].master].isplayer)
                                                         {
                                                            _loc22_ = false;
                                                         }
                                                      }
                                                   }
                                                   else if(this.MP_myid == _loc4_ && !this.MP_spectator || !this.MP_mode || !this.mc2.isplayer)
                                                   {
                                                      _loc21_ = true;
                                                   }
                                                   if(this.MP_mode)
                                                   {
                                                      if(this.MP_favor_the_shooter)
                                                      {
                                                         if(this.puls[_loc1_].master == this.MP_myid)
                                                         {
                                                            this.MP_custom_events += ";hit|" + [this.MP_myid,_loc4_,this.str,this.r2(this.puls[_loc1_].power),this.r2(this.puls[_loc1_].knockback_multiplier),this.puls[_loc1_].currentFrame,this.r2(this.ax[this.i3]),this.r2(this.ay[this.i3]),this.r2(this.puls[_loc1_].spx),this.r2(this.puls[_loc1_].spy),this.puls[_loc1_].cclass,this.puls[_loc1_].thisis,this.GlobalAtomIDToPlayerLocalAtomID(this.i3,this.mens[_loc4_])].join("#");
                                                         }
                                                      }
                                                   }
                                                   this.puls[_loc1_].power = this.ApplyLimbDamageToPlayer(this.mc2,_loc4_,this.str,this.puls[_loc1_].master,this.puls[_loc1_].power,this.puls[_loc1_].knockback_multiplier,this.puls[_loc1_].currentFrame,this.puls[_loc1_].x,this.puls[_loc1_].y,this.puls[_loc1_].spx,this.puls[_loc1_].spy,this.puls[_loc1_].cclass,this.puls[_loc1_].thisis,_loc21_,_loc23_,_loc22_,this.i3,true);
                                                   if(this.MP_favor_the_shooter)
                                                   {
                                                      if(_loc23_)
                                                      {
                                                         if(!this.MP_allow_client_side_kills)
                                                         {
                                                            if(!this.mc2.dead)
                                                            {
                                                               this.mc2.hea = Math.max(10,this.mc2.hea);
                                                            }
                                                         }
                                                         this.ApplyLoweredHP(this.mc2,this.mc2.hea,this.mc2.dying,-Number(Infinity));
                                                      }
                                                   }
                                                   if(!(this.MP_mode && this.MP_myid != this.puls[_loc1_].master && this.MP_favor_the_shooter && this.AllowExtraBulletClassSync(this.puls[_loc1_]) && Boolean(this.mens[this.puls[_loc1_].master].isplayer)))
                                                   {
                                                      if(this.puls[_loc1_].cclass == 1 || this.puls[_loc1_].cclass == 4 || this.puls[_loc1_].cclass == 5)
                                                      {
                                                         this.puls[_loc1_].visible = false;
                                                      }
                                                      else
                                                      {
                                                         if(this.mc2.hea > 0)
                                                         {
                                                            this.puls[_loc1_].power = Math.max(0,Number(this.puls[_loc1_].power) * 0.3);
                                                         }
                                                         else
                                                         {
                                                            this.puls[_loc1_].power = Math.max(0,Number(this.puls[_loc1_].power) * 0.6);
                                                         }
                                                         this.puls[_loc1_].lastin = _loc4_;
                                                         if(this.puls[_loc1_].power < 0.4)
                                                         {
                                                            this.puls[_loc1_].visible = false;
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              _loc4_++;
                           }
                        }
                        if(this.MP_mode)
                        {
                           if(!this.MP_favor_the_shooter)
                           {
                              if(_loc2_ != this.MP_custom_events.length && this.MP_custom_events.indexOf(";gshot|") != -1)
                              {
                                 if(_loc3_ == this.mens[this.MP_myid].hea)
                                 {
                                    if(_loc3_ > 0)
                                    {
                                       if(this.MP_app || !this.MP_app && _loc3_ < 1000000)
                                       {
                                          this.stable = false;
                                          this.unstable = 3;
                                          this.unstable_m = _loc2_ + " != " + this.MP_custom_events.length + " :: " + _loc3_ + " == " + this.mens[this.MP_myid].hea + " :: " + this.MP_custom_events;
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        if(this.puls[_loc1_].cclass == 1)
                        {
                           this.puls[_loc1_].spx *= Math.pow(1.02,this.thispulspeed);
                           this.puls[_loc1_].spy *= Math.pow(1.02,this.thispulspeed);
                           if(this.puls[_loc1_].visible == false)
                           {
                              this.expl_hurt_full = true;
                              if(this.i6 == -1)
                              {
                                 this.PhysicsExplosion(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) * 0.5,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) * 0.5,50 * Number(this.puls[_loc1_].maxpower),5 * Number(this.puls[_loc1_].maxpower) * Number(this.puls[_loc1_].knockback_multiplier),40 * Number(this.puls[_loc1_].maxpower),this.puls[_loc1_].master,this.puls[_loc1_].thisis);
                              }
                              else
                              {
                                 this.PhysicsExplosion(this.rx - Number(this.puls[_loc1_].spx) * 0.5 * this.thispulspeed,this.ry - Number(this.puls[_loc1_].spy) * 0.5 * this.thispulspeed,50 * Number(this.puls[_loc1_].maxpower),5 * Number(this.puls[_loc1_].maxpower) * Number(this.puls[_loc1_].knockback_multiplier),40 * Number(this.puls[_loc1_].maxpower),this.puls[_loc1_].master,this.puls[_loc1_].thisis);
                              }
                              this.expl_hurt_full = false;
                              this.ExplosionSound(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) * this.thispulspeed,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) * this.thispulspeed);
                           }
                        }
                        if(this.puls[_loc1_].cclass == 5)
                        {
                           if(this.puls[_loc1_].visible == false)
                           {
                              if(this.puls[_loc1_].currentFrame == 10 || this.puls[_loc1_].currentFrame == 32 || this.puls[_loc1_].currentFrame == 22)
                              {
                                 this.expl_hurt_full = true;
                              }
                              if(this.i6 == -1)
                              {
                                 this.PhysicsExplosionNoSprite(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) * this.thispulspeed,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) * this.thispulspeed,44 * Number(this.puls[_loc1_].maxpower),3 * Number(this.puls[_loc1_].maxpower) * Number(this.puls[_loc1_].knockback_multiplier),35 * Number(this.puls[_loc1_].maxpower),this.puls[_loc1_].master,true,this.puls[_loc1_].thisis);
                                 if(this.puls[_loc1_].currentFrame == 10)
                                 {
                                    this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) * 0.5,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) * 0.5,11,1,0);
                                 }
                                 if(this.puls[_loc1_].currentFrame == 32 || this.puls[_loc1_].currentFrame == 22)
                                 {
                                    this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) * 0.5,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) * 0.5,11,0.25,0);
                                 }
                                 if(this.puls[_loc1_].currentFrame == 12 || this.puls[_loc1_].currentFrame == 37 || this.puls[_loc1_].currentFrame == 46 || this.puls[_loc1_].currentFrame == 6 || this.puls[_loc1_].currentFrame == 53)
                                 {
                                    this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) * 0.5,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) * 0.5,16,1,0);
                                 }
                              }
                              else
                              {
                                 this.PhysicsExplosionNoSprite(this.rx - Number(this.puls[_loc1_].spx) * 0.5 * this.thispulspeed,this.ry - Number(this.puls[_loc1_].spy) * 0.5 * this.thispulspeed,44 * Number(this.puls[_loc1_].maxpower),3 * Number(this.puls[_loc1_].maxpower) * Number(this.puls[_loc1_].knockback_multiplier),35 * Number(this.puls[_loc1_].maxpower),this.puls[_loc1_].master,true,this.puls[_loc1_].thisis);
                                 if(this.puls[_loc1_].currentFrame == 10)
                                 {
                                    this.Effect(this.rx - Number(this.puls[_loc1_].spx) * 0.5 * this.thispulspeed,this.ry - Number(this.puls[_loc1_].spy) * 0.5 * this.thispulspeed,11,1,0);
                                 }
                                 if(this.puls[_loc1_].currentFrame == 32 || this.puls[_loc1_].currentFrame == 22)
                                 {
                                    this.Effect(this.rx - Number(this.puls[_loc1_].spx) * 0.5 * this.thispulspeed,this.ry - Number(this.puls[_loc1_].spy) * 0.5 * this.thispulspeed,11,0.25,0);
                                 }
                                 if(this.puls[_loc1_].currentFrame == 12 || this.puls[_loc1_].currentFrame == 37 || this.puls[_loc1_].currentFrame == 46 || this.puls[_loc1_].currentFrame == 6 || this.puls[_loc1_].currentFrame == 53)
                                 {
                                    this.Effect(this.rx - Number(this.puls[_loc1_].spx) * 0.5 * this.thispulspeed,this.ry - Number(this.puls[_loc1_].spy) * 0.5 * this.thispulspeed,16,1,0);
                                 }
                              }
                              if(this.puls[_loc1_].currentFrame == 10 || this.puls[_loc1_].currentFrame == 32 || this.puls[_loc1_].currentFrame == 22)
                              {
                                 this.expl_hurt_full = false;
                              }
                              if(this.puls[_loc1_].currentFrame == 10 || this.puls[_loc1_].currentFrame == 32 || this.puls[_loc1_].currentFrame == 22)
                              {
                                 this.PlaySound(this.s_explode_bfg,this.puls[_loc1_].x,this.puls[_loc1_].y);
                              }
                              if(this.puls[_loc1_].currentFrame == 12 || this.puls[_loc1_].currentFrame == 37 || this.puls[_loc1_].currentFrame == 46 || this.puls[_loc1_].currentFrame == 6 || this.puls[_loc1_].currentFrame == 53)
                              {
                                 this.PlaySound(this.s_plasma_explosion,this.puls[_loc1_].x,this.puls[_loc1_].y);
                              }
                           }
                           else if(this.puls[_loc1_].currentFrame == 10)
                           {
                              if(this.puls[_loc1_].life > 3 / this.thispulspeed)
                              {
                                 this.expl_hurt_full = true;
                                 this.PhysicsExplosionNoSprite(this.puls[_loc1_].x,this.puls[_loc1_].y,80,0.5 * Number(this.puls[_loc1_].maxpower) * this.thispulspeed * Number(this.puls[_loc1_].knockback_multiplier),15 * Number(this.puls[_loc1_].maxpower) * this.thispulspeed,this.puls[_loc1_].master,true,this.puls[_loc1_].thisis);
                                 this.expl_hurt_full = false;
                              }
                           }
                        }
                        if(this.puls[_loc1_].cclass == 4 || this.puls[_loc1_].cclass == 6)
                        {
                           if(this.puls[_loc1_].currentFrame == 52)
                           {
                              if(this.puls[_loc1_].life > 6 / this.thispulspeed)
                              {
                                 this.expl_hurt_full = true;
                                 this.PhysicsExplosionNoSprite(this.puls[_loc1_].x,this.puls[_loc1_].y,100,0,2 * Number(this.puls[_loc1_].maxpower) * this.thispulspeed,this.puls[_loc1_].master,false,this.puls[_loc1_].thisis);
                                 this.expl_hurt_full = false;
                              }
                              if(this.puls[_loc1_].visible == false)
                              {
                                 this.effcolor = -1;
                                 this.FlowAt(this.puls[_loc1_].x,this.puls[_loc1_].y,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 5,2);
                                 this.FlowAt(this.puls[_loc1_].x,this.puls[_loc1_].y,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 10,2);
                                 this.FlowAt(this.puls[_loc1_].x,this.puls[_loc1_].y,0,-40 + Math.random() * 80,-40 + Math.random() * 80 - 10,3);
                                 if(Math.random() > 0.5)
                                 {
                                    this.PlaySound(this.s_blood_head,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                 }
                                 else
                                 {
                                    this.PlaySound(this.s_blood_head2,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                 }
                              }
                           }
                           if(this.puls[_loc1_].currentFrame == 14)
                           {
                              if(this.puls[_loc1_].dead)
                              {
                                 this.puls[_loc1_].visible = false;
                              }
                              if(this.puls[_loc1_].visible == false)
                              {
                                 this.DisposeAtom(this.puls[_loc1_].attached);
                                 this.effcolor = -1;
                                 this.FlowAt(this.puls[_loc1_].x,this.puls[_loc1_].y,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 5,2);
                                 this.FlowAt(this.puls[_loc1_].x,this.puls[_loc1_].y,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 10,2);
                                 this.FlowAt(this.puls[_loc1_].x,this.puls[_loc1_].y,0,-40 + Math.random() * 80,-40 + Math.random() * 80 - 10,3);
                                 if(Math.random() > 0.5)
                                 {
                                    this.PlaySound(this.s_blood_head,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                 }
                                 else
                                 {
                                    this.PlaySound(this.s_blood_head2,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                 }
                              }
                              else
                              {
                                 this.puls[_loc1_].rotation += this.puls[_loc1_].spx;
                                 this.WakeUpAtom(this.puls[_loc1_].attached);
                                 if(!this.TracePointNoRagdolls(this.puls[_loc1_].x,this.puls[_loc1_].y + 10))
                                 {
                                    if(Math.random() < 0.5 * this.GSPEED)
                                    {
                                       this.i3 = -1;
                                       this.xx = 0;
                                       _loc4_ = 0;
                                       while(_loc4_ < this.playerstotal)
                                       {
                                          if(this.mens[_loc4_].io)
                                          {
                                             if(!this.mens[_loc4_].dead)
                                             {
                                                if(this.mens[_loc4_].team != this.mens[this.puls[_loc1_].master].team)
                                                {
                                                   if(this.TraceLine(this.puls[_loc1_].x,Number(this.puls[_loc1_].y) - 20,this.mens[_loc4_].x,Number(this.mens[_loc4_].y) - 40))
                                                   {
                                                      this.mc2 = this.mens[_loc4_];
                                                      this.yy = this.Dist2D(this.puls[_loc1_].x,this.puls[_loc1_].y,this.mc2.x,this.mc2.y);
                                                      if(this.i3 == -1 || this.yy < this.xx)
                                                      {
                                                         this.i3 = _loc4_;
                                                         this.xx = this.yy;
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                          _loc4_++;
                                       }
                                       if(this.i3 != -1)
                                       {
                                          if(this.xx > 1)
                                          {
                                             this.atox[this.puls[_loc1_].attached] = (Number(this.mens[this.i3].x) - Number(this.puls[_loc1_].x)) / this.xx * 15 * 0.8;
                                             this.atoy[this.puls[_loc1_].attached] = (Number(this.mens[this.i3].y) - Number(this.puls[_loc1_].y)) / this.xx * 15 * 1.3 - 4;
                                             this.PlaySound(this.s_robo_bug_jump,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                          }
                                       }
                                       else
                                       {
                                          this.atox[this.puls[_loc1_].attached] *= 0.5;
                                          this.atoy[this.puls[_loc1_].attached] *= 0.5;
                                       }
                                    }
                                 }
                                 else
                                 {
                                    _loc4_ = 0;
                                    while(_loc4_ < this.playerstotal)
                                    {
                                       if(this.mens[_loc4_].io)
                                       {
                                          if(!this.mens[_loc4_].dead)
                                          {
                                             if(this.mens[_loc4_].hea > 0)
                                             {
                                                if(this.mens[_loc4_].team != this.mens[this.puls[_loc1_].master].team)
                                                {
                                                   if(this.Dist2D(this.puls[_loc1_].x,Number(this.puls[_loc1_].y) * 0.5,this.mens[_loc4_].x,(Number(this.mens[_loc4_].y) - 40) * 0.5) < 25)
                                                   {
                                                      if(this.TraceLine(this.puls[_loc1_].x,Number(this.puls[_loc1_].y) - 20,this.mens[_loc4_].x,Number(this.mens[_loc4_].y) - 40))
                                                      {
                                                         if(this.mens[_loc4_].notspawned)
                                                         {
                                                            this.SpawnPlayerImmediately(this.mens[_loc4_]);
                                                         }
                                                         this.atox[this.puls[_loc1_].attached] = (this.atox[this.puls[_loc1_].attached] + Number(this.atox[this.mens[_loc4_].b_body]) * 3) / 4;
                                                         this.atoy[this.puls[_loc1_].attached] = (this.atoy[this.puls[_loc1_].attached] + Number(this.atoy[this.mens[_loc4_].b_body]) * 3) / 4;
                                                         if(Math.random() < 0.2 * this.GSPEED)
                                                         {
                                                            this.mens[_loc4_].lastshotby = this.puls[_loc1_].master;
                                                            this.mens[_loc4_].lastshotbygun = this.puls[_loc1_].thisis;
                                                            this.mens[_loc4_].whenlastshot = getTimer();
                                                            this.mens[_loc4_].hea -= 15 * Number(this.puls[_loc1_].power);
                                                            this.PlaySound(this.s_blood_hit,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                                            this.effcolor = _loc4_;
                                                            this.FlowAt(this.puls[_loc1_].x,this.puls[_loc1_].y,0,-Number(this.puls[_loc1_].spx),-Number(this.puls[_loc1_].spy),2);
                                                            if(this.puls[_loc1_].master == this.MP_myid)
                                                            {
                                                               if(!this.mens[_loc4_].dead)
                                                               {
                                                                  if(this.SCREEN_EFFECTS)
                                                                  {
                                                                     this.whitness.alpha += 15 * Number(this.puls[_loc1_].power) / Number(this.mens[_loc4_].hmax);
                                                                     if(this.mens[_loc4_].hea <= 0)
                                                                     {
                                                                        this.whitness.alpha += 0.5;
                                                                     }
                                                                     this.whitness.visible = true;
                                                                  }
                                                                  this.DamageReport(15 * Number(this.puls[_loc1_].power));
                                                                  if(this.mens[_loc4_].hea <= 0)
                                                                  {
                                                                     this.FragReport(this.mens[_loc4_].team == this.mens[this.MP_myid].team,this.mens[_loc4_]);
                                                                  }
                                                               }
                                                            }
                                                            this.Hurt(_loc4_);
                                                            if(_loc4_ == this.MP_myid)
                                                            {
                                                               this.HurtMyPlayer(Number(this.puls[_loc1_].x) - Number(this.mens[_loc4_].x),Number(this.puls[_loc1_].y) - Number(this.mens[_loc4_].y) + 40,15 * Number(this.puls[_loc1_].power));
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                       _loc4_++;
                                    }
                                 }
                              }
                           }
                           else if(this.puls[_loc1_].visible == false)
                           {
                              this.DisposeAtom(this.puls[_loc1_].attached);
                              if(this.puls[_loc1_].cclass == 4)
                              {
                                 this.PhysicsExplosion(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) * 0.5 * this.thispulspeed,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) * 0.5 * this.thispulspeed,50 * Number(this.puls[_loc1_].maxpower),5 * Number(this.puls[_loc1_].maxpower) * Number(this.puls[_loc1_].knockback_multiplier),40 * Number(this.puls[_loc1_].maxpower),this.puls[_loc1_].master,this.puls[_loc1_].thisis);
                                 this.ExplosionSound(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) * 0.5 * this.thispulspeed,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) * 0.5 * this.thispulspeed);
                              }
                              else if(this.puls[_loc1_].cclass == 6)
                              {
                                 if(this.puls[_loc1_].nadekind == 1)
                                 {
                                    if(this.MP_mode)
                                    {
                                       this.PhysicsExplosion(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) * 0.5 * this.thispulspeed,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) * 0.5 * this.thispulspeed,50 * Number(this.puls[_loc1_].maxpower),5 * Number(this.puls[_loc1_].maxpower) * Number(this.puls[_loc1_].knockback_multiplier),50 * Number(this.puls[_loc1_].maxpower),this.puls[_loc1_].master,this.puls[_loc1_].thisis);
                                    }
                                    else
                                    {
                                       this.PhysicsExplosion(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) * 0.5 * this.thispulspeed,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) * 0.5 * this.thispulspeed,50 * Number(this.puls[_loc1_].maxpower),5 * Number(this.puls[_loc1_].maxpower) * Number(this.puls[_loc1_].knockback_multiplier),100 * Number(this.puls[_loc1_].maxpower),this.puls[_loc1_].master,this.puls[_loc1_].thisis);
                                    }
                                    this.ExplosionSound(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) * 0.5 * this.thispulspeed,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) * 0.5 * this.thispulspeed);
                                 }
                                 if(this.puls[_loc1_].nadekind == 2)
                                 {
                                    this.PlaySound(this.s_portnade_explode,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                    this.mcc = this.mens[this.puls[_loc1_].master];
                                    if(this.mcc.hea > 0)
                                    {
                                       this.mcc.stability = -1;
                                       this.u = Number(this.ax[this.mcc.b_toe]) - Number(this.puls[_loc1_].x);
                                       this.v = Number(this.ay[this.mcc.b_toe]) - Number(this.puls[_loc1_].y);
                                       this.mcc.tox += this.puls[_loc1_].spx;
                                       this.mcc.toy += this.puls[_loc1_].spy;
                                       if(this.puls[_loc1_].master == this.MP_myid)
                                       {
                                          this.game_x += this.u;
                                          this.game_y += this.v;
                                       }
                                       this.i4 = 0;
                                       while(this.i4 < this.atotal)
                                       {
                                          if(this.aof[this.i4] == this.mcc.idd)
                                          {
                                             this.ax[this.i4] -= this.u;
                                             this.ay[this.i4] -= this.v;
                                             this.atox[this.i4] += this.puls[_loc1_].spx;
                                             this.atoy[this.i4] += this.puls[_loc1_].spy;
                                             if(this.GET_LITE_PHYS())
                                             {
                                                this.lax[this.i4] -= this.u;
                                                this.lay[this.i4] -= this.v;
                                             }
                                          }
                                          ++this.i4;
                                       }
                                       this.Effect(this.mcc.x,this.mcc.y - 41,14,1,0);
                                       this.mcc.x -= this.u;
                                       this.mcc.y -= this.v;
                                       this.Effect(this.mcc.x,this.mcc.y - 41,14,1,0);
                                       this.i4 = 0;
                                       while(this.i4 < this.vehiclestotal)
                                       {
                                          if(this.vehicles[this.i4].io)
                                          {
                                             if(this.vehicles[this.i4].master == this.mcc.idd)
                                             {
                                                if(this.vehicles[this.i4].typ == 5 || this.vehicles[this.i4].typ == 6)
                                                {
                                                   this.vehicles[this.i4].master = -1;
                                                }
                                             }
                                          }
                                          ++this.i4;
                                       }
                                       if(this.mcc.incar != -1)
                                       {
                                          this.PutOutCar(this.mcc.incar);
                                       }
                                    }
                                 }
                              }
                           }
                           else
                           {
                              this.puls[_loc1_].rotation += this.puls[_loc1_].spx;
                           }
                        }
                        if(this.puls[_loc1_].cclass == 2)
                        {
                           if(this.puls[_loc1_].currentFrame != 15)
                           {
                              this.PAlert(this.puls[_loc1_].x,this.puls[_loc1_].y);
                              if(this.puls[_loc1_].visible)
                              {
                                 if(this.puls[_loc1_].currentFrame == 29)
                                 {
                                    this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,21,this.puls[_loc1_].rotation,0);
                                 }
                                 else if(this.puls[_loc1_].currentFrame == 51)
                                 {
                                    this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,24,this.puls[_loc1_].rotation,0);
                                 }
                                 else if(this.puls[_loc1_].currentFrame == 40)
                                 {
                                    this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,22,this.puls[_loc1_].rotation,0);
                                 }
                                 else if(this.puls[_loc1_].currentFrame == 48 || this.puls[_loc1_].currentFrame == 22)
                                 {
                                    this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,23,this.puls[_loc1_].rotation,0);
                                 }
                                 else if(this.puls[_loc1_].maxpower < 5)
                                 {
                                    this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,5,this.puls[_loc1_].rotation,0);
                                 }
                                 else
                                 {
                                    this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,17,this.puls[_loc1_].rotation,0);
                                 }
                              }
                              else
                              {
                                 this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx) / 2,Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy) / 2,6,0,0);
                                 this.cx = (this.puls[_loc1_].maxpower + this.puls[_loc1_].power) / 2;
                                 _loc4_ = 0;
                                 while(_loc4_ < Math.sqrt(this.cx) * 2 || _loc4_ < 3)
                                 {
                                    this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx),Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy),8,-Number(this.puls[_loc1_].spx) * this.cx * 0.03 * Math.random(),-Number(this.puls[_loc1_].spy) * this.cx * 0.03 * Math.random());
                                    _loc4_++;
                                 }
                              }
                           }
                           else if(!this.puls[_loc1_].visible)
                           {
                              this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx),Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy),8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].maxpower) * 0.03,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].maxpower) * 0.03);
                              this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx),Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy),8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].maxpower) * 0.03,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].maxpower) * 0.03);
                              this.Effect(Number(this.puls[_loc1_].x) - Number(this.puls[_loc1_].spx),Number(this.puls[_loc1_].y) - Number(this.puls[_loc1_].spy),8,-Number(this.puls[_loc1_].spx) * Number(this.puls[_loc1_].maxpower) * 0.03,-Number(this.puls[_loc1_].spy) * Number(this.puls[_loc1_].maxpower) * 0.03);
                           }
                        }
                        if(this.puls[_loc1_].currentFrame == 48)
                        {
                           if(!this.puls[_loc1_].visible)
                           {
                              this.effcolor = -1;
                              this.FlowAt(this.puls[_loc1_].x,this.puls[_loc1_].y,0,-Number(this.puls[_loc1_].spx) * 0.5,-Number(this.puls[_loc1_].spy) * 0.5,2);
                           }
                        }
                        if(this.DEBUG_MODE)
                        {
                           this.debug_screen.graphics.lineStyle(4,0);
                           this.debug_screen.graphics.moveTo(this.puls[_loc1_].lx,this.puls[_loc1_].ly);
                           this.debug_screen.graphics.lineTo(this.puls[_loc1_].nx,this.puls[_loc1_].ny);
                           this.debug_screen.graphics.lineStyle(2,65280);
                           this.debug_screen.graphics.moveTo(this.puls[_loc1_].lx,this.puls[_loc1_].ly);
                           this.debug_screen.graphics.lineTo(this.puls[_loc1_].nx,this.puls[_loc1_].ny);
                        }
                        ++this.i7;
                     }
                  }
                  else
                  {
                     --this.puls[_loc1_].lag;
                     if(this.puls[_loc1_].lag <= 0)
                     {
                        this.puls[_loc1_].lag = 0;
                     }
                  }
                  if(this.puls[_loc1_].rot_glow.visible)
                  {
                     this.puls[_loc1_].rot_glow.rotation = -Number(this.puls[_loc1_].rotation);
                  }
                  if(this.MP_favor_the_shooter)
                  {
                     if(!this.puls[_loc1_].visible)
                     {
                        this.SyncBulletApprox(this.puls[_loc1_]);
                     }
                  }
               }
            }
            _loc1_++;
         }
      }
      
      public function GlobalAtomIDToPlayerLocalAtomID(param1:int, param2:*) : int
      {
         if(param2.b_toe == param1)
         {
            return 0;
         }
         if(param2.b_leg1 == param1)
         {
            return 1;
         }
         if(param2.b_leg2 == param1)
         {
            return 2;
         }
         if(param2.b_arm1 == param1)
         {
            return 3;
         }
         if(param2.b_arm2 == param1)
         {
            return 4;
         }
         if(param2.b_body == param1)
         {
            return 5;
         }
         if(param2.b_head_start == param1)
         {
            return 6;
         }
         if(param2.b_head_end == param1)
         {
            return 7;
         }
         if(param2.b_brk1 == param1)
         {
            return 8;
         }
         if(param2.b_brk2 == param1)
         {
            return 9;
         }
         return -1;
      }
      
      public function PlayerLocalAtomIDToGlobalAtomID(param1:int, param2:*) : int
      {
         if(0 == param1)
         {
            return param2.b_toe;
         }
         if(1 == param1)
         {
            return param2.b_leg1;
         }
         if(2 == param1)
         {
            return param2.b_leg2;
         }
         if(3 == param1)
         {
            return param2.b_arm1;
         }
         if(4 == param1)
         {
            return param2.b_arm2;
         }
         if(5 == param1)
         {
            return param2.b_body;
         }
         if(6 == param1)
         {
            return param2.b_head_start;
         }
         if(7 == param1)
         {
            return param2.b_head_end;
         }
         if(8 == param1)
         {
            return param2.b_brk1;
         }
         if(9 == param1)
         {
            return param2.b_brk2;
         }
         return -1;
      }
      
      public function ApplyWaveDamageToPlayerAtom(param1:*, param2:*, param3:*, param4:*, param5:*, param6:*, param7:*, param8:*, param9:*, param10:*, param11:*, param12:*, param13:*, param14:* = -1, param15:* = "?") : void
      {
         var particle_show:Boolean = false;
         var target_was_alive:Boolean = false;
         var by:* = param1;
         var mens_aof_i6:* = param2;
         var i6_local:* = param3;
         var ax_i6_minus_x:* = param4;
         var ay_i6_minus_y:* = param5;
         var xx:* = param6;
         var damage:* = param7;
         var expl_hurt_full:* = param8;
         var size:* = param9;
         var power:* = param10;
         var apply_hitpoint_damage:* = param11;
         var expl_x:* = param12;
         var expl_y:* = param13;
         var event_time:* = param14;
         var by_weapon_model:* = param15;
         this.i6 = this.PlayerLocalAtomIDToGlobalAtomID(i6_local,mens_aof_i6);
         if(this.i6 == -1)
         {
            return;
         }
         if(this.MP_mode)
         {
            if(damage <= 0)
            {
               return;
            }
         }
         if(event_time == -1)
         {
            event_time = getTimer();
         }
         if(!this.IsBulletHerePossible(expl_x,expl_y,by,this.aof[this.i6],this.ax[this.i6],this.ay[this.i6],-1,-1,true,by_weapon_model))
         {
            if(event_time + this.maximum_hit_delay_time > getTimer())
            {
               this.SetTimeout(function():*
               {
                  ApplyWaveDamageToPlayerAtom(by,mens_aof_i6,i6_local,ax_i6_minus_x,ay_i6_minus_y,xx,damage,expl_hurt_full,size,power,apply_hitpoint_damage,expl_x,expl_y,event_time,by_weapon_model);
               },this.hit_retry_time);
            }
            return;
         }
         this.yy = Math.sqrt(this.arad[this.i6]);
         if(this.yy < 5)
         {
            this.yy = 5;
         }
         this.WakeUpAtom(this.i6);
         mens_aof_i6.stability -= this.Math_abs(power) * 0.1 / 4 * Number(mens_aof_i6.mobility) / Number(mens_aof_i6.scale);
         mens_aof_i6.tox += ax_i6_minus_x * xx / this.yy * Number(mens_aof_i6.mobility) * Number(mens_aof_i6.mobility) / Number(mens_aof_i6.scale);
         mens_aof_i6.toy += ay_i6_minus_y * xx / this.yy * Number(mens_aof_i6.mobility) * Number(mens_aof_i6.mobility) / Number(mens_aof_i6.scale);
         this.atox[this.i6] += ax_i6_minus_x * xx / this.yy * 7 * Number(mens_aof_i6.mobility) * Number(mens_aof_i6.mobility) / Number(mens_aof_i6.scale);
         this.atoy[this.i6] += ay_i6_minus_y * xx / this.yy * 7 * Number(mens_aof_i6.mobility) * Number(mens_aof_i6.mobility) / Number(mens_aof_i6.scale);
         if(xx < size * 0.75)
         {
            if(this.amat[this.i6] == 1 || this.amat[this.i6] == 0)
            {
               if(mens_aof_i6.io)
               {
                  if(mens_aof_i6.incar == -1)
                  {
                     if(damage > 0)
                     {
                        particle_show = Math.random() * 50 < damage;
                        target_was_alive = mens_aof_i6.hea > 0;
                        if(by == -1 || mens_aof_i6.team != this.mens[by].team || by == this.aof[this.i6] || expl_hurt_full)
                        {
                           if(!this.MP_mode || this.MP_myid == this.aof[this.i6] && !this.MP_spectator || !mens_aof_i6.isplayer || this.MP_favor_the_shooter)
                           {
                              if(by == this.aof[this.i6])
                              {
                                 if(mens_aof_i6.whenlastshot < Number(getTimer()) - 7000)
                                 {
                                    mens_aof_i6.lastshotby = by;
                                 }
                              }
                              else
                              {
                                 mens_aof_i6.lastshotby = by;
                              }
                              mens_aof_i6.lastshotbygun = by_weapon_model;
                              mens_aof_i6.whenlastshot = getTimer();
                              if(!expl_hurt_full)
                              {
                                 if(this.MP_mode)
                                 {
                                    if(this.aof[this.i6] == by)
                                    {
                                       damage *= 0.5;
                                    }
                                 }
                                 else if(this.aof[this.i6] == by)
                                 {
                                    damage *= 0.3;
                                 }
                              }
                              if(apply_hitpoint_damage)
                              {
                                 mens_aof_i6.hea -= Math.max(0.1,this.Math_abs(damage) / 6);
                                 if(!this.MP_mode || !mens_aof_i6.isplayer || this.MP_myid == this.aof[this.i6])
                                 {
                                    if(this.i6 == mens_aof_i6.b_leg1 || this.i6 == mens_aof_i6.b_leg2)
                                    {
                                       mens_aof_i6.hp_legs -= this.Math_abs(damage) / 6;
                                    }
                                    else if(this.i6 == mens_aof_i6.b_body || this.i6 == mens_aof_i6.b_toe)
                                    {
                                       mens_aof_i6.hp_body -= this.Math_abs(damage) / 6;
                                    }
                                    else if(this.i6 == mens_aof_i6.b_head_end || this.i6 == mens_aof_i6.b_head_start)
                                    {
                                       mens_aof_i6.hp_head -= this.Math_abs(damage) / 6;
                                    }
                                    else if(this.i6 == mens_aof_i6.b_arm1 || this.i6 == mens_aof_i6.b_arm2)
                                    {
                                       mens_aof_i6.hp_arms -= this.Math_abs(damage) / 6;
                                    }
                                 }
                              }
                              if(!this.MP_mode || !mens_aof_i6.isplayer || this.MP_favor_the_shooter)
                              {
                                 if(particle_show)
                                 {
                                    this.effcolor = this.aof[this.i6];
                                    this.FlowAt(this.ax[this.i6],this.ay[this.i6],0,ax_i6_minus_x * xx * 7,ay_i6_minus_y * xx * 7,2);
                                 }
                              }
                           }
                           if(!this.MP_favor_the_shooter)
                           {
                              if(this.MP_mode)
                              {
                                 if(this.MP_myid == this.aof[this.i6] && !this.MP_spectator)
                                 {
                                    if(particle_show)
                                    {
                                       this.effcolor = this.aof[this.i6];
                                       this.FlowAt(this.ax[this.i6],this.ay[this.i6],0,ax_i6_minus_x * xx * 7,ay_i6_minus_y * xx * 7,2);
                                       this.MP_custom_events += ";gshot|" + this.aof[this.i6] + "#" + this.r2(this.ax[this.i6]) + "#" + this.r2(this.ay[this.i6]) + "#" + this.r2(ax_i6_minus_x * xx * 7) + "#" + this.r2(ay_i6_minus_y * xx * 7) + "#" + 2 + "#" + by + "#2" + "#" + int(damage / 6);
                                    }
                                 }
                              }
                           }
                        }
                        if(by == this.MP_myid)
                        {
                           if(!mens_aof_i6.dead)
                           {
                              if(!this.MP_mode || !mens_aof_i6.isplayer || this.MP_favor_the_shooter)
                              {
                                 if(mens_aof_i6.team != this.mens[by].team)
                                 {
                                    if(this.SCREEN_EFFECTS)
                                    {
                                       this.whitness.alpha += this.Math_abs(damage) / 6 / Number(mens_aof_i6.hmax);
                                       if(mens_aof_i6.hea <= 0)
                                       {
                                          this.whitness.alpha += 0.5;
                                       }
                                       this.whitness.visible = true;
                                    }
                                    this.DamageReport(damage / 6);
                                    if(mens_aof_i6.hea <= 0 && !mens_aof_i6.isplayer)
                                    {
                                       this.FragReport(mens_aof_i6.team == this.mens[this.MP_myid].team,mens_aof_i6);
                                    }
                                 }
                              }
                           }
                        }
                        if(this.MP_favor_the_shooter && this.MP_mode)
                        {
                           this.Hurt(this.aof[this.i6],particle_show ? 1 : 0);
                           if(by == this.MP_myid)
                           {
                              if(this.aof[this.i6] != this.MP_myid)
                              {
                                 if(target_was_alive)
                                 {
                                    if(!this.MP_allow_client_side_kills)
                                    {
                                       if(!mens_aof_i6.dead)
                                       {
                                          mens_aof_i6.hea = Math.max(10,mens_aof_i6.hea);
                                       }
                                    }
                                    this.ApplyLoweredHP(mens_aof_i6,mens_aof_i6.hea,mens_aof_i6.dying,-Number(Infinity));
                                 }
                              }
                           }
                        }
                        else if(!this.MP_mode || !mens_aof_i6.isplayer || this.MP_mode && this.aof[this.i6] == this.MP_myid)
                        {
                           this.Hurt(this.aof[this.i6],particle_show ? 1 : 0);
                        }
                        if(this.aof[this.i6] == this.MP_myid)
                        {
                           this.HurtMyPlayer(x - Number(this.ax[this.i6]),y - Number(this.ay[this.i6]),this.Math_abs(damage) / 6);
                        }
                     }
                  }
               }
            }
         }
      }
      
      public function NewBullet(param1:*) : void
      {
         param1.rot_glow.visible = false;
      }
      
      public function RegisterPossibleBullet(param1:*) : void
      {
         var _loc2_:* = undefined;
         if(this.MP_mode)
         {
            if(this.MP_favor_the_shooter)
            {
               if(param1.master != this.MP_myid)
               {
                  _loc2_ = getTimer();
                  while(this.possible_bullet_data.length > 0 && (this.possible_bullet_data[0].timer < _loc2_ - 3000 || this.possible_bullet_data.length > 1000))
                  {
                     if(this.possible_bullet_data.length > 1000)
                     {
                     }
                     this.possible_bullet_data.shift();
                  }
                  this.possible_bullet_data.push({
                     "x":param1.x,
                     "y":param1.y,
                     "currentFrame":param1.currentFrame,
                     "master":param1.master,
                     "timer":_loc2_
                  });
               }
            }
         }
      }
      
      public function IsBulletHerePossible(param1:*, param2:*, param3:*, param4:*, param5:*, param6:*, param7:* = -1, param8:* = -1, param9:Boolean = true, param10:String = "") : Boolean
      {
         var _loc11_:Number = NaN;
         var _loc12_:Boolean = false;
         var _loc13_:* = undefined;
         var _loc14_:int = 0;
         if(!this.MP_mode)
         {
            return true;
         }
         if(!this.MP_favor_the_shooter)
         {
            return true;
         }
         if(this.NAIVE_HIT_CONFIRMATION)
         {
            return true;
         }
         if(param3 == -1)
         {
            return true;
         }
         if(param3 == this.MP_myid)
         {
            return true;
         }
         if(param10 != "swords")
         {
            if(param10 != "item_grenade")
            {
               _loc12_ = false;
               _loc13_ = 0;
               while(_loc13_ < this.gunstotal)
               {
                  if(this.guns[_loc13_].io)
                  {
                     if(this.guns[_loc13_].model == param10)
                     {
                        _loc12_ = true;
                        break;
                     }
                  }
                  _loc13_++;
               }
               if(!_loc12_)
               {
                  return false;
               }
            }
         }
         if((_loc11_ = this.Dist2D(param1,param2,param5,param6)) > 200)
         {
            if(_loc11_ > Math.max(200,Math.min((this.MP_ping2 + this.mc2.ping) * 1.75,700)))
            {
               return false;
            }
            if(!this.TraceLineF_nopushers(param1,param2,param5,param6))
            {
               return false;
            }
         }
         if(param9)
         {
            _loc14_ = 0;
            while(_loc14_ < this.possible_bullet_data.length)
            {
               if(param7 == -1 || this.possible_bullet_data[_loc14_].currentFrame == param7)
               {
                  if(this.possible_bullet_data[_loc14_].master == param3)
                  {
                     if((_loc11_ = this.Dist2D(param1,param2,this.possible_bullet_data[_loc14_].x,this.possible_bullet_data[_loc14_].y)) < 300)
                     {
                        if(_loc11_ < 50 || this.TraceLineF_nopushers(param1,param2,this.possible_bullet_data[_loc14_].x,this.possible_bullet_data[_loc14_].y))
                        {
                           return true;
                        }
                     }
                  }
               }
               _loc14_++;
            }
            if(this.Dist2D(param1,param2,this.ax[this.mens[param3].b_body],this.ay[this.mens[param3].b_body]) < 200)
            {
               if(this.mens[param3].curwea == -1 || Boolean(this.guns[this.mens[param3].curwea].ready))
               {
                  return true;
               }
            }
            return false;
         }
         return true;
      }
      
      public function ApplyLimbDamageToPlayer(param1:*, param2:*, param3:*, param4:*, param5:*, param6:*, param7:*, param8:*, param9:*, param10:*, param11:*, param12:*, param13:*, param14:*, param15:*, param16:*, param17:*, param18:* = true, param19:* = -1) : Number
      {
         var v:Number = NaN;
         var physhit:Number = NaN;
         var dmg_scaler:Number = NaN;
         var i4:int = 0;
         var mc2:* = param1;
         var i2:* = param2;
         var str:* = param3;
         var puls_i_master:* = param4;
         var puls_power:* = param5;
         var puls_knockback_multiplier:* = param6;
         var puls_frame:* = param7;
         var puls_x:* = param8;
         var puls_y:* = param9;
         var puls_spx:* = param10;
         var puls_spy:* = param11;
         var puls_cclass:* = param12;
         var puls_thisis:* = param13;
         var show_damage:* = param14;
         var target_was_alive:* = param15;
         var send_admit_damage_event:* = param16;
         var i3:* = param17;
         var apply_hitpoint_damage:* = param18;
         var event_time:* = param19;
         if(event_time == -1)
         {
            event_time = getTimer();
         }
         if(Boolean(isNaN(puls_power)) || puls_power == undefined)
         {
            puls_power = 1;
         }
         else if(puls_power > 100000)
         {
            puls_power = 100000;
         }
         if(Boolean(isNaN(puls_spx)) || puls_spx == undefined)
         {
            puls_spx = 0;
         }
         if(Boolean(isNaN(puls_spy)) || puls_spy == undefined)
         {
            puls_spy = 0;
         }
         if(Boolean(isNaN(puls_x)) || puls_x == undefined)
         {
            puls_x = 0;
         }
         if(Boolean(isNaN(puls_y)) || puls_y == undefined)
         {
            puls_y = 0;
         }
         if(Boolean(isNaN(puls_knockback_multiplier)) || puls_knockback_multiplier == undefined)
         {
            puls_knockback_multiplier = 1;
         }
         else if(puls_knockback_multiplier > 100000)
         {
            puls_knockback_multiplier = 100000;
         }
         if(show_damage)
         {
            if(!this.IsBulletHerePossible(puls_x,puls_y,puls_i_master,i2,this.ax[i3],this.ay[i3],puls_frame,puls_power,true,puls_thisis))
            {
               if(event_time + this.maximum_hit_delay_time > getTimer())
               {
                  this.SetTimeout(function():*
                  {
                     ApplyLimbDamageToPlayer(mc2,i2,str,puls_i_master,puls_power,puls_knockback_multiplier,puls_frame,puls_x,puls_y,puls_spx,puls_spy,puls_cclass,puls_thisis,show_damage,target_was_alive,send_admit_damage_event,i3,apply_hitpoint_damage,event_time);
                  },this.hit_retry_time);
               }
               return 0;
            }
         }
         if(show_damage)
         {
            if(puls_cclass == 3)
            {
               this.SimHitSound(mc2,puls_x,puls_y,1);
            }
            else if(puls_frame == 29 || puls_frame == 51)
            {
               this.SimHitSound(mc2,puls_x,puls_y,2);
            }
            else
            {
               this.SimHitSound(mc2,puls_x,puls_y,0);
            }
         }
         v = puls_power;
         if(puls_frame == 41)
         {
            v = 0;
         }
         this.u = this.Dist2D(puls_spx * 0.3,puls_spy * 0.3,-Number(this.atox[i3]),-Number(this.atoy[i3]));
         if(this.u > 25)
         {
            v += this.u * 0;
         }
         if(mc2.curwea == -1 && Boolean(mc2.isplayer))
         {
            v *= 1.5;
         }
         if(this.MP_mode)
         {
            if(this.mens[puls_i_master].team == mc2.team && (Boolean(mc2.isplayer) || Boolean(this.mens[puls_i_master].isplayer)))
            {
               v *= 0.1;
            }
         }
         if(puls_i_master == this.MP_myid)
         {
            if(mc2.hea > -50)
            {
               ++this.FUN_NICE_BULLETS;
            }
         }
         if(target_was_alive)
         {
            if(puls_frame != 41 || this.mens[puls_i_master].team != mc2.team)
            {
               mc2.lastshot = str;
               if(puls_i_master == i2)
               {
                  if(mc2.whenlastshot < Number(getTimer()) - 7000)
                  {
                     mc2.lastshotby = puls_i_master;
                  }
               }
               else
               {
                  mc2.lastshotby = puls_i_master;
               }
               mc2.whenlastshot = getTimer();
               mc2.lastshotbygun = puls_thisis;
            }
         }
         physhit = 1;
         if(!this.MP_mode)
         {
            if(this.LOW_HPS)
            {
               if(this.STRICT_MODE)
               {
                  if(mc2.team == this.mens[this.MP_myid].team)
                  {
                     if(mc2.hea > -50)
                     {
                        if(mc2.hea > 0)
                        {
                           physhit *= 0.2;
                        }
                        else
                        {
                           physhit *= 0.4;
                        }
                     }
                  }
               }
            }
         }
         if(v < 0.01)
         {
            v = 0.01;
         }
         dmg_scaler = 0;
         if(show_damage)
         {
            if(str == "body")
            {
               if(apply_hitpoint_damage)
               {
                  if(this.PLAZMA_GAME)
                  {
                     mc2.hp_body -= v * 25 * physhit;
                  }
                  mc2.hea -= v * 25;
               }
               dmg_scaler = 25;
               this.ablood[mc2.b_body] += v * 2;
               mc2.stability -= v * 0.1 * Number(mc2.mobility);
               if(puls_i_master == this.MP_myid)
               {
                  if(!mc2.dead)
                  {
                     this.FUN_DAMAGE_MADE += v * 25;
                  }
               }
               if(this.MP_myid == i2)
               {
                  this.FUN_DAMAGE_TAKEN += v * 25;
               }
            }
            else if(str == "head")
            {
               if(apply_hitpoint_damage)
               {
                  if(this.PLAZMA_GAME)
                  {
                     mc2.hp_head -= v * 25 * physhit;
                  }
                  mc2.hea -= v * 55;
               }
               dmg_scaler = 55;
               this.ablood[mc2.b_head_start] += v * 4;
               mc2.stability -= v * 0.19 * Number(mc2.mobility);
               if(puls_i_master == this.MP_myid)
               {
                  if(!mc2.dead)
                  {
                     ++this.FUN_HEADSHOTS_MADE;
                     this.FUN_DAMAGE_MADE += v * 55;
                  }
               }
               if(this.MP_myid == i2)
               {
                  this.FUN_DAMAGE_TAKEN += v * 55;
               }
            }
            else if(str == "legs")
            {
               if(apply_hitpoint_damage)
               {
                  if(this.PLAZMA_GAME)
                  {
                     mc2.hp_legs -= v * 25 * physhit;
                  }
                  mc2.hea -= v * 30;
               }
               dmg_scaler = 30;
               if(Math.random() > 0.5)
               {
                  this.ablood[mc2.b_leg1] += v * 2;
               }
               else
               {
                  this.ablood[mc2.b_leg2] += v * 2;
               }
               mc2.stability -= v * 0.15 * Number(mc2.mobility);
               if(puls_i_master == this.MP_myid)
               {
                  if(!mc2.dead)
                  {
                     this.FUN_DAMAGE_MADE += v * 35;
                  }
               }
               if(this.MP_myid == i2)
               {
                  this.FUN_DAMAGE_TAKEN += v * 35;
               }
            }
            else if(str == "arms")
            {
               if(apply_hitpoint_damage)
               {
                  if(this.PLAZMA_GAME)
                  {
                     mc2.hp_arms -= v * 25 * physhit;
                  }
                  mc2.hea -= v * 20;
               }
               dmg_scaler = 20;
               if(Math.random() > 0.5)
               {
                  this.ablood[mc2.b_arm1] += v * 2;
               }
               else
               {
                  this.ablood[mc2.b_arm2] += v * 2;
               }
               mc2.stability -= v * 0.05 * Number(mc2.mobility);
               if(puls_i_master == this.MP_myid)
               {
                  if(!mc2.dead)
                  {
                     this.FUN_DAMAGE_MADE += v * 20;
                  }
               }
               if(this.MP_myid == i2)
               {
                  this.FUN_DAMAGE_TAKEN += v * 20;
               }
            }
            if(target_was_alive)
            {
               this.xx = puls_x - puls_spx / 2 * this.thispulspeed;
               this.yy = puls_y - puls_spy / 2 * this.thispulspeed;
               if(this.xx < Number(mc2.x) - 10 * Number(mc2.scale))
               {
                  this.xx = Number(mc2.x) - 10 * Number(mc2.scale);
               }
               if(this.xx > mc2.x + 10 * Number(mc2.scale))
               {
                  this.xx = mc2.x + 10 * Number(mc2.scale);
               }
               if(this.yy < Number(mc2.y) - 82 * Number(mc2.scale))
               {
                  this.yy = Number(mc2.y) - 82 * Number(mc2.scale);
               }
               if(this.yy > Number(mc2.y) - Number(mc2.sit) * this.sitmax * Number(mc2.scale))
               {
                  this.yy = Number(mc2.y) - Number(mc2.sit) * this.sitmax * Number(mc2.scale);
               }
               this.effcolor = i2;
               if(str == "head")
               {
                  this.FlowAt(this.xx,this.yy,0,puls_spx * Math.sqrt(puls_power) / 2,puls_spy * Math.sqrt(puls_power) / 2,Math.min(5 * puls_power,7));
                  if(send_admit_damage_event)
                  {
                     this.MP_custom_events += ";gshot|" + i2 + "#" + this.r2(this.xx) + "#" + this.r2(this.yy) + "#" + this.r2(puls_spx * Math.sqrt(puls_power) / 2) + "#" + this.r2(puls_spy * Math.sqrt(puls_power) / 2) + "#" + this.r2(5 * puls_power) + "#" + puls_i_master + "#" + (puls_cclass == 3 ? "1" : "0") + "#" + int(v * dmg_scaler);
                  }
               }
               else
               {
                  this.FlowAt(this.xx,this.yy,0,puls_spx * Math.sqrt(puls_power) / 2,puls_spy * Math.sqrt(puls_power) / 2,Math.min(2 * puls_power,7));
                  if(send_admit_damage_event)
                  {
                     this.MP_custom_events += ";gshot|" + i2 + "#" + this.r2(this.xx) + "#" + this.r2(this.yy) + "#" + this.r2(puls_spx * Math.sqrt(puls_power) / 2) + "#" + this.r2(puls_spy * Math.sqrt(puls_power) / 2) + "#" + this.r2(2 * puls_power) + "#" + puls_i_master + "#" + (puls_cclass == 3 ? "1" : "0") + "#" + int(v * dmg_scaler);
                  }
               }
               mc2.tox += puls_spx * Math.sqrt(puls_power) * 0.05 * (Number(mc2.mobility) * Number(mc2.mobility) + 1) * 0.66 * puls_knockback_multiplier / Number(mc2.scale);
               mc2.toy += puls_spy * Math.sqrt(puls_power) * 0.05 * (Number(mc2.mobility) * Number(mc2.mobility) + 1) * 0.66 * puls_knockback_multiplier / Number(mc2.scale);
            }
            else
            {
               this.effcolor = i2;
               this.xx = this.ax[i3];
               this.yy = this.ay[i3];
               if(str == "head")
               {
                  this.FlowAt(this.xx,this.yy,0,puls_spx * Math.sqrt(puls_power) / 2,puls_spy * Math.sqrt(puls_power) / 2,5 * puls_power);
                  if(send_admit_damage_event)
                  {
                     this.MP_custom_events += ";gshot|" + i2 + "#" + this.r2(this.xx) + "#" + this.r2(this.yy) + "#" + this.r2(puls_spx * Math.sqrt(puls_power) / 2) + "#" + this.r2(puls_spy * Math.sqrt(puls_power) / 2) + "#" + this.r2(5 * puls_power) + "#" + puls_i_master + "#" + (puls_cclass == 3 ? "1" : "0") + "#" + 0;
                  }
               }
               else
               {
                  this.FlowAt(this.xx,this.yy,0,puls_spx * Math.sqrt(puls_power) / 2,puls_spy * Math.sqrt(puls_power) / 2,2 * puls_power);
                  if(send_admit_damage_event)
                  {
                     this.MP_custom_events += ";gshot|" + i2 + "#" + this.r2(this.xx) + "#" + this.r2(this.yy) + "#" + this.r2(puls_spx * Math.sqrt(puls_power) / 2) + "#" + this.r2(puls_spy * Math.sqrt(puls_power) / 2) + "#" + this.r2(2 * puls_power) + "#" + puls_i_master + "#" + (puls_cclass == 3 ? "1" : "0") + "#" + 0;
                  }
               }
            }
            if(i2 == this.MP_myid)
            {
               this.HurtMyPlayer(-puls_spx,-puls_spy,v * 10);
            }
            i4 = 0;
            while(i4 < this.atotal)
            {
               if(this.aof[i4] == this.aof[i3])
               {
                  if(this.aio[i4] == true || this.aio[i4] == false)
                  {
                     if(i4 == i3 || this.Math_pow2(Number(this.ax[i4]) - Number(this.ax[i3])) + this.Math_pow2(Number(this.ay[i4]) - Number(this.ay[i3])) < 900)
                     {
                        this.atox[i4] += puls_spx * Math.sqrt(puls_power) * 0.05 * (Math.min(Number(mc2.mobility) * Number(mc2.mobility),1) + 1) * puls_knockback_multiplier / Number(mc2.scale);
                        this.atoy[i4] += puls_spy * Math.sqrt(puls_power) * 0.05 * (Math.min(Number(mc2.mobility) * Number(mc2.mobility),1) + 1) * puls_knockback_multiplier / Number(mc2.scale);
                        this.xx2 = this.ax[i4] + puls_spx * Math.sqrt(puls_power) * 0.05 * (Math.min(Number(mc2.mobility) * Number(mc2.mobility),1) + 1) * this.GSPEED;
                        this.yy2 = this.ay[i4] + puls_spy * Math.sqrt(puls_power) * 0.05 * (Math.min(Number(mc2.mobility) * Number(mc2.mobility),1) + 1) * this.GSPEED;
                        if(this.TraceLineF_nopushers(this.ax[i4],this.ay[i4],this.xx2,this.yy2))
                        {
                           this.ax[i4] = this.xx2;
                           this.ay[i4] = this.yy2;
                        }
                        this.WakeUpAtom(i4);
                     }
                  }
               }
               i4++;
            }
            if(!this.MP_mode || !mc2.isplayer || this.MP_favor_the_shooter)
            {
               if(puls_i_master == this.MP_myid)
               {
                  if(i2 != puls_i_master)
                  {
                     if(!mc2.dead)
                     {
                        if(this.SCREEN_EFFECTS)
                        {
                           this.whitness.alpha += Math.max(puls_power * 50 / Number(mc2.hmax),0.3);
                           if(mc2.hea <= 0)
                           {
                              this.whitness.alpha += 0.5;
                           }
                           this.whitness.visible = true;
                        }
                        this.DamageReport(v * dmg_scaler);
                        if(mc2.hea <= 0 && !mc2.isplayer)
                        {
                           this.FragReport(mc2.team == this.mens[this.MP_myid].team,mc2);
                        }
                     }
                  }
               }
            }
            if(this.aio[i3] == false)
            {
               this.WakeUpAtom(i3);
            }
         }
         if(show_damage || Boolean(mc2.dead))
         {
            this.Hurt(i2);
         }
         if(this.MP_gamestate == 0)
         {
            if(this.MP_mode && !mc2.isplayer && puls_i_master == this.MP_myid)
            {
               this.MP_custom_events += ";eh|" + i2 + "#" + mc2.hea + "#" + mc2.hp_head + "#" + mc2.hp_body + "#" + mc2.hp_arms + "#" + mc2.hp_legs;
               // t2 = -1;
            }
         }
         if(puls_frame == 41)
         {
            if(show_damage)
            {
               this.HealGunApplied(i2,this.mens[puls_i_master],puls_power,true,puls_thisis);
            }
            puls_power = 0;
         }
         if(puls_frame == 48)
         {
            if(show_damage)
            {
               if((!this.MP_mode || !mc2.isplayer || i2 == this.MP_myid) && apply_hitpoint_damage)
               {
                  mc2.effects.push({
                     "type":"DOT",
                     "power":puls_power * 0.5,
                     "duration":110
                  });
               }
               else
               {
                  mc2.effects.push({
                     "type":"DOT",
                     "power":0,
                     "duration":110
                  });
               }
               if(this.MP_mode && i2 == this.MP_myid)
               {
                  this.MP_custom_events += ";ef_dot|" + i2 + "#" + 120;
               }
            }
         }
         if(!mc2.dead)
         {
            if(mc2.hea <= 0)
            {
               if(puls_i_master != mc2.team)
               {
                  this.i5 = 0;
                  while(this.i5 < this.playerstotal)
                  {
                     if(this.i5 != i2)
                     {
                        if(this.mens[this.i5].io)
                        {
                           if(this.mens[this.i5].hea > 0)
                           {
                              if(this.mens[this.i5].team == mc2.team)
                              {
                                 if(this.mens[this.i5].hunt == -1)
                                 {
                                    if(this.mens[this.i5].x > Number(mc2.x) - 500)
                                    {
                                       if(this.mens[this.i5].x < mc2.x + 500)
                                       {
                                          if(this.mens[this.i5].y > Number(mc2.y) - 300)
                                          {
                                             if(this.mens[this.i5].y < mc2.y + 300)
                                             {
                                                if(this.TraceLine(this.mens[this.i5].x,Number(this.mens[this.i5].y) - 50,mc2.x,Number(mc2.y) - 50))
                                                {
                                                   if(this.mens[this.i5].last_contact > this.HUNT_LOST)
                                                   {
                                                      this.Alerted(this.mens[this.i5]);
                                                   }
                                                   if(this.mens[this.i5].last_contact > mc2.last_contact + 10)
                                                   {
                                                      this.mens[this.i5].last_contact = mc2.last_contact + 10;
                                                      this.mens[this.i5].hunt = mc2.lastshotby;
                                                      this.mens[this.i5].tarx = puls_x - puls_spx * 6 - 100 + Math.random() * 200;
                                                      this.mens[this.i5].tary = puls_y - puls_spy * 6 - 50 + Math.random() * 100;
                                                      if(this.mens[this.i5].enemy_vis_tim > mc2.enemy_vis_tim)
                                                      {
                                                         this.mens[this.i5].enemy_vis_tim = mc2.enemy_vis_tim;
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                     ++this.i5;
                  }
               }
               if(mc2.team != this.mens[this.MP_myid].team)
               {
                  if(puls_i_master == this.MP_myid)
                  {
                     if(puls_thisis == "swords")
                     {
                        if(mc2.dying)
                        {
                           this.incBadge(7);
                        }
                     }
                     else if(str == "head")
                     {
                        this.incBadge(2);
                     }
                  }
               }
            }
         }
         if(!this.mens[puls_i_master].dead)
         {
            if(!mc2.dead)
            {
               if(!mc2.isplayer || !this.MP_mode)
               {
                  if(puls_frame != 41 || this.mens[puls_i_master].team != mc2.team)
                  {
                     this.Alerted(mc2);
                     mc2.hunt = puls_i_master;
                     mc2.last_contact = 0;
                  }
               }
            }
         }
         return puls_power;
      }
      
      public function Logic_eff_blood(param1:MovieClip) : void
      {
         var _loc2_:Number = NaN;
         param1.float_frame += Number(param1.framespeed) * this.GSPEED;
         if(param1.float_frame > 90)
         {
            param1.visible = false;
         }
         else
         {
            if(param1.float_frame < 6)
            {
               param1.inner_blood_cloud.alpha = 1 - Number(param1.float_frame) / 6;
            }
            else if(param1.inner_blood_cloud.visible)
            {
               param1.inner_blood_cloud.visible = false;
            }
            if(param1.float_frame < 20)
            {
               param1.inner_blood_detail1.alpha = 1 - Number(param1.float_frame) / 20;
               param1.inner_blood_detail1.x = param1.inner_blood_detail1.y = -6 * (1 - Number(param1.float_frame) / 20);
            }
            else if(param1.inner_blood_detail1.visible)
            {
               param1.inner_blood_detail1.visible = false;
            }
            if(param1.float_frame < 15)
            {
               param1.inner_blood_detail2.alpha = 1 - Number(param1.float_frame) / 15;
               param1.inner_blood_detail2.y = -8 * (1 - Number(param1.float_frame) / 15);
            }
            else if(param1.inner_blood_detail2.visible)
            {
               param1.inner_blood_detail2.visible = false;
            }
            if(param1.float_frame < 20)
            {
               _loc2_ = Number(param1.float_frame) / 20;
               param1.inner_blood_detail3.scaleX = param1.inner_blood_detail3.scaleY = 2 * (1 - _loc2_) + 1 * _loc2_;
            }
            else if(param1.float_frame < 85)
            {
               if(param1.inner_blood_detail3.scaleY != 1)
               {
                  param1.inner_blood_detail3.scaleX = param1.inner_blood_detail3.scaleY = 1;
               }
            }
            else
            {
               param1.inner_blood_detail3.alpha = 1 - (Number(param1.float_frame) - 85) / 5;
            }
         }
      }
      
      public function Logic_eff_blood_sprite(param1:MovieClip) : void
      {
         var _loc2_:Number = NaN;
         param1.float_frame += Number(param1.framespeed) * this.GSPEED;
         if(param1.float_frame > 35)
         {
            param1.visible = false;
         }
         else
         {
            _loc2_ = 1 - Math.pow(1 - Number(param1.float_frame) / 35,2);
            param1.inner_blood_splat1.scaleX = 0.179 * (1 - _loc2_) + 0.864 * _loc2_;
            param1.inner_blood_splat1.scaleY = 0.179 * (1 - _loc2_) + 1.163 * _loc2_;
            param1.inner_blood_splat1.alpha = 1 - _loc2_;
            if(param1.float_frame < 5)
            {
               _loc2_ = Number(param1.float_frame) / 5;
               param1.inner_blood_splat2.scaleX = param1.inner_blood_splat2.scaleY = 1 - _loc2_ + 1.88 * _loc2_;
               param1.inner_blood_splat2.alpha = 1 - _loc2_ + 0.59 * _loc2_;
            }
            else if(param1.float_frame < 15)
            {
               _loc2_ = (Number(param1.float_frame) - 5) / 10;
               param1.inner_blood_splat2.scaleX = param1.inner_blood_splat2.scaleY = 1.88 * (1 - _loc2_) + 3.11 * _loc2_;
               param1.inner_blood_splat2.alpha = 0.59 * (1 - _loc2_);
            }
            else if(param1.inner_blood_splat2.visible)
            {
               param1.inner_blood_splat2.visible = false;
            }
            if(param1.float_frame < 4)
            {
               _loc2_ = Number(param1.float_frame) / 4;
               param1.inner_blood_splat3.scaleX = 0.307 * (1 - _loc2_) + 0.554 * _loc2_;
               param1.inner_blood_splat3.scaleY = 0.307 * (1 - _loc2_) + 0.636 * _loc2_;
               param1.inner_blood_splat3.alpha = 1 - _loc2_ + 0.71 * _loc2_;
            }
            else if(param1.float_frame < 4)
            {
               _loc2_ = (Number(param1.float_frame) - 4) / 31;
               param1.inner_blood_splat3.scaleX = 0.554 * (1 - _loc2_) + 0.815 * _loc2_;
               param1.inner_blood_splat3.scaleY = 0.636 * (1 - _loc2_) + 1.096 * _loc2_;
               param1.inner_blood_splat3.alpha = 0.71 * (1 - _loc2_);
            }
         }
      }
      
      public function EffectsLogic() : void
      {
         var _loc1_:int = 0;
		 var aef:Object;
         this.i = 0;
         while(this.i < this.maxef)
         {
			aef = this.ef[this.i];
            if(this.ef[this.i] != null)
            {
               if(this.ef[this.i].visible)
               {
				   
                  if(this.ef[this.i].typ == 0)
                  {
                     if(this.ef[this.i].expl != undefined)
                     {
                        if(this.ef[this.i].expl != null)
                        {
                           if(this.ef[this.i].contains(this.ef[this.i].expl))
                           {
                              //this.MeasureStop(9);
							  this.ef[this.i].expl.gotoAndStop(Math.min(this.ef[this.i].expl.totalFrames,this.ef[this.i].expl.currentFrame + Math.ceil(Number(this.ef[this.i].framespeed) * this.GSPEED)));
							  //this.MeasureStop(9);
                           }
                        }
                     }
                  }
                  if(this.ef[this.i].typ == 1 || this.ef[this.i].typ == 4)
                  {
                     this.ok = true;
                     for each(this.i2 in this.GetNearBoxBSP_at(this.ef[this.i].x_,this.ef[this.i].y_))
                     {
                        if(this.ef[this.i].x_ > this.boxx[this.i2])
                        {
                           if(this.ef[this.i].x_ < this.boxx[this.i2] + this.boxw[this.i2])
                           {
                              if(this.ef[this.i].y_ > this.boxy[this.i2])
                              {
                                 if(this.ef[this.i].y_ < this.boxy[this.i2] + this.boxh[this.i2])
                                 {
                                    this.ok = false;
                                    break;
                                 }
                              }
                           }
                        }
                     }
                     if(this.ok)
                     {
                        this.ef[this.i].x_ += Number(this.ef[this.i].tox) * this.GSPEED;
                        this.ef[this.i].y_ += Number(this.ef[this.i].toy) * this.GSPEED;
                        this.ef[this.i].toy += this.gravity * this.GSPEED;
                        if(this.ef[this.i].typ == 1)
                        {
                           this.ef[this.i].rotation += Number(this.ef[this.i].toang) * this.GSPEED;
                        }
                        else
                        {
                           this.ef[this.i].rotation = -Math.atan2(this.ef[this.i].tox,this.ef[this.i].toy) / Math.PI * 180;
                        }
                     }
                     this.ok = false;
                     this.i2 = 0;
                     while(this.i2 < this.watertotal && !this.ok)
                     {
                        if(this.ef[this.i].x_ > this.wax[this.i2])
                        {
                           if(this.ef[this.i].x_ < this.wax[this.i2] + this.waw[this.i2])
                           {
                              if(this.ef[this.i].y_ > this.way[this.i2])
                              {
                                 if(this.ef[this.i].y_ < this.way[this.i2] + this.wah[this.i2])
                                 {
                                    if(this.wa_friction[this.i2])
                                    {
                                       this.ok = true;
                                    }
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     if(this.ok)
                     {
                        if(this.ef[this.i].typ == 1)
                        {
                           this.ef[this.i].tox *= Math.pow(0.9,this.GSPEED);
                           this.ef[this.i].toy *= Math.pow(0.9,this.GSPEED);
                           this.ef[this.i].toy -= this.gravity * 1.1 * this.GSPEED;
                           this.ef[this.i].toang = Math.pow(0.9,this.GSPEED);
                        }
                        else
                        {
                           this.ef[this.i].visible = false;
                        }
                     }
                     if(this.ef[this.i].typ == 1)
                     {
                        //this.MeasureStop(10);
                        if(this.ef[this.i].inner_blood_cloud == undefined)
                        {
                           _loc1_ = Math.ceil(Number(this.ef[this.i].framespeed) * this.GSPEED);
                           while(_loc1_ > 0)
                           {
                              this.ef[this.i].nextFrame();
                              _loc1_--;
                           }
                        }
                        else
                        {
                           this.Logic_eff_blood(this.ef[this.i]);
                        }
                        //this.MeasureStop(10);
                     }
                  }
                  if(this.ef[this.i].typ == 2)
                  {
                     this.ef[this.i].x_ += -1 + Math.random() * 2;
                     this.ef[this.i].y_ -= this.gravity * 5;
                     this.ok = false;
                     this.i2 = 0;
                     while(this.i2 < this.watertotal && !this.ok)
                     {
                        if(this.ef[this.i].x_ > this.wax[this.i2])
                        {
                           if(this.ef[this.i].x_ < this.wax[this.i2] + this.waw[this.i2])
                           {
                              if(this.ef[this.i].y_ > this.way[this.i2])
                              {
                                 if(this.ef[this.i].y_ < this.way[this.i2] + this.wah[this.i2])
                                 {
                                    if(this.wa_friction[this.i2])
                                    {
                                       this.ok = true;
                                       break;
                                    }
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     if(this.ok)
                     {
                        for each(this.i2 in this.GetNearBoxBSP_at(this.ef[this.i].x_,this.ef[this.i].y_))
                        {
                           if(this.ef[this.i].x_ > this.boxx[this.i2])
                           {
                              if(this.ef[this.i].x_ < this.boxx[this.i2] + this.boxw[this.i2])
                              {
                                 if(this.ef[this.i].y_ > this.boxy[this.i2])
                                 {
                                    if(this.ef[this.i].y_ < this.boxy[this.i2] + this.boxh[this.i2])
                                    {
                                       this.ok = false;
                                       break;
                                    }
                                 }
                              }
                           }
                        }
                     }
                     if(!this.ok)
                     {
                        this.ef[this.i].visible = false;
                     }
                  }
                  if(this.ef[this.i].typ == 3)
                  {
                     this.ef[this.i].x_ += Number(this.ef[this.i].tox) * this.GSPEED;
                     this.ef[this.i].y_ += Number(this.ef[this.i].toy) * this.GSPEED;
                     this.ef[this.i].toy += this.gravity * this.GSPEED;
                     this.ok = true;
                     this.i2 = 0;
                     while(this.i2 < this.watertotal && this.ok)
                     {
                        if(this.ef[this.i].x_ > this.wax[this.i2])
                        {
                           if(this.ef[this.i].x_ < this.wax[this.i2] + this.waw[this.i2])
                           {
                              if(this.ef[this.i].y_ > this.way[this.i2])
                              {
                                 if(this.ef[this.i].y_ < this.way[this.i2] + this.wah[this.i2])
                                 {
                                    if(this.wa_friction[this.i2])
                                    {
                                       this.ef[this.i].visible = false;
                                       this.ok = false;
                                    }
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     this.ok = true;
                     for each(this.i2 in this.GetNearBoxBSP_at(this.ef[this.i].x_,this.ef[this.i].y_))
                     {
                        if(this.ef[this.i].x_ > this.boxx[this.i2])
                        {
                           if(this.ef[this.i].x_ < this.boxx[this.i2] + this.boxw[this.i2])
                           {
                              if(this.ef[this.i].y_ > this.boxy[this.i2])
                              {
                                 if(this.ef[this.i].y_ < this.boxy[this.i2] + this.boxh[this.i2])
                                 {
                                    this.ef[this.i].tox = 0;
                                    this.ef[this.i].toy = 0;
                                    this.ok = false;
                                    break;
                                 }
                              }
                           }
                        }
                     }
                  }
                  if(this.ef[this.i].typ == 5)
                  {
                     this.ok = false;
                     for each(this.i2 in this.GetNearBoxBSP_at(this.ef[this.i].x_,this.ef[this.i].y_))
                     {
                        if(this.ef[this.i].x_ > this.boxx[this.i2])
                        {
                           if(this.ef[this.i].x_ < this.boxx[this.i2] + this.boxw[this.i2])
                           {
                              if(this.ef[this.i].y_ > this.boxy[this.i2])
                              {
                                 if(this.ef[this.i].y_ < this.boxy[this.i2] + this.boxh[this.i2])
                                 {
                                    this.ok = true;
                                    break;
                                 }
                              }
                           }
                        }
                     }
                     if(this.ok)
                     {
                        this.ef[this.i].tox *= Math.pow(0.5,this.GSPEED);
                        this.ef[this.i].toy *= Math.pow(0.5,this.GSPEED);
                        this.ef[this.i].alpha -= 50 * this.GSPEED;
                        if(this.ef[this.i].alpha < 0)
                        {
                           this.ef[this.i].visible = false;
                        }
                     }
                     this.ef[this.i].x_ += Number(this.ef[this.i].tox) * this.GSPEED;
                     this.ef[this.i].y_ += Number(this.ef[this.i].toy) * this.GSPEED;
                     this.ef[this.i].toy += this.gravity * this.GSPEED;
                     //this.MeasureStop(11);
                     if(this.ef[this.i].inner_blood_splat1 == undefined)
                     {
                        _loc1_ = Math.ceil(Number(this.ef[this.i].framespeed) * this.GSPEED);
                        while(_loc1_ > 0)
                        {
                           this.ef[this.i].nextFrame();
                           _loc1_--;
                        }
                     }
                     else
                     {
                        this.Logic_eff_blood_sprite(this.ef[this.i]);
                     }
                     //this.MeasureStop(11);
                  }
                  if(this.ef[this.i].typ == 6)
                  {
                     if(Math.abs(Number(this.ef[this.i].x_) - Number(this.ax[this.mens[this.ef[this.i].attached].b_head_start])) < 200)
                     {
                        if(Math.abs(this.ef[this.i].y_ - (Number(this.ay[this.mens[this.ef[this.i].attached].b_head_start]) - 30)) < 200)
                        {
                           this.ef[this.i].x_ = (Number(this.ax[this.mens[this.ef[this.i].attached].b_head_start]) * this.GSPEED + Number(this.ef[this.i].x_) * 5) / (5 + this.GSPEED);
                           this.ef[this.i].y_ = ((Number(this.ay[this.mens[this.ef[this.i].attached].b_head_start]) - 30) * this.GSPEED + Number(this.ef[this.i].y_) * 5) / (5 + this.GSPEED);
                        }
                     }
                     if(this.ef[this.i].totalFrames < 90)
                     {
                        if(this.ef[this.i].currentFrame > 20 + Number(this.ef[this.i].msgtext.text.length) * 2)
                        {
                           this.ef[this.i].alpha -= this.GSPEED * 0.1;
                           if(this.ef[this.i].alpha < 0)
                           {
                              this.ef[this.i].visible = false;
                           }
                        }
                     }
                  }
               }
            }
            ++this.i;
         }
      }
      
      public function PlayerLogic() : void
      {
         var rotate:*;
         var i:int = 0;
         var traceA:* = undefined;
         var traceB:* = undefined;
         var target_dx:Number = NaN;
         var target_dy:Number = NaN;
         var target_di:Number = NaN;
         var cx:Number = NaN;
         var cy:Number = NaN;
         var radians:Number = NaN;
         var intens:Number = NaN;
         var fine_rad:Number = NaN;
         var last_act_fire:Boolean = false;
         var betterdist:Number = NaN;
         var betteri:int = 0;
         var newdis:Number = NaN;
         var init_shot_rot:Number = NaN;
         var ping_limited:Number = NaN;
         var correct_not_fine:Boolean = false;
         var step:Number = NaN;
         var side:Number = NaN;
         var bullet_dist:Number = NaN;
         var water_friction:Boolean = false;
         var dot_effects:Boolean = false;
         var e:int = 0;
         var target_frame:int = 0;
         var ef:Object = null;
         var inverse_legs:Boolean = false;
         var dx:Number = NaN;
         var dy:Number = NaN;
         var di:Number = NaN;
         i = 0;
         while(i < this.playerstotal)
         {
            if(this.mens[i].io)
            {
               if(i == this.MP_myid)
               {
                  this.thispulspeed = this.GSPEED2;
               }
               else
               {
                  this.thispulspeed = this.GSPEED;
               }
               if(this.mens[i].team == this.mens[this.MP_myid].team || this.PRO_BOTS || Boolean(this.mens[i].isplayer))
               {
                  if(!this.mens[i].dying)
                  {
                     if(!this.mens[i].dead)
                     {
                        if(this.mens[i].hea > 0)
                        {
                           if(Number(this.mens[i].regentim) * this.thispulspeed < 180 * this.GLOBAL_REGEN_DELAY)
                           {
                              ++this.mens[i].regentim;
                           }
                           if(Number(this.mens[i].regentim) * this.thispulspeed > 30 * this.GLOBAL_REGEN_DELAY)
                           {
                              if(this.mens[i].hea < this.mens[i].hmax)
                              {
                                 if(!this.ARCADE_GAME_MODE)
                                 {
                                    if(Number(this.mens[i].regentim) * this.thispulspeed > 60 * this.GLOBAL_REGEN_DELAY)
                                    {
                                       this.mens[i].hea = Math.min(this.mens[i].hea + 1 * this.GLOBAL_REGEN_SPEED,this.mens[i].hmax);
                                       if(this.MP_mode && Boolean(this.mens[i].isplayer))
                                       {
                                          this.IncludeRegenInHPLimit(this.mens[i],1 * this.GLOBAL_REGEN_SPEED);
                                       }
                                    }
                                 }
                                 else if(Number(this.mens[i].regentim) * this.thispulspeed < 60 * this.GLOBAL_REGEN_DELAY)
                                 {
                                    this.mens[i].hea = Math.min(this.mens[i].hea + 1 * this.GLOBAL_REGEN_SPEED,this.mens[i].hmax);
                                    if(this.MP_mode && Boolean(this.mens[i].isplayer))
                                    {
                                       this.IncludeRegenInHPLimit(this.mens[i],1 * this.GLOBAL_REGEN_SPEED);
                                    }
                                 }
                                 else if(Number(this.mens[i].regentim) * this.thispulspeed < 90 * this.GLOBAL_REGEN_DELAY)
                                 {
                                    this.mens[i].hea = Math.min(this.mens[i].hea + 2 * this.GLOBAL_REGEN_SPEED,this.mens[i].hmax);
                                    if(this.MP_mode && Boolean(this.mens[i].isplayer))
                                    {
                                       this.IncludeRegenInHPLimit(this.mens[i],2 * this.GLOBAL_REGEN_SPEED);
                                    }
                                 }
                                 else
                                 {
                                    this.mens[i].hea = Math.min(this.mens[i].hea + 4 * this.GLOBAL_REGEN_SPEED,this.mens[i].hmax);
                                    if(this.MP_mode && Boolean(this.mens[i].isplayer))
                                    {
                                       this.IncludeRegenInHPLimit(this.mens[i],4 * this.GLOBAL_REGEN_SPEED);
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
               if(this.mens[i].brk_body && (this.ax[this.mens[i].b_body] > this.render_minX && this.ax[this.mens[i].b_body] < this.render_maxX && this.ay[this.mens[i].b_body] > this.render_minY && this.ay[this.mens[i].b_body] < this.render_maxY || this.ax[this.mens[i].b_toe] > this.render_minX && this.ax[this.mens[i].b_toe] < this.render_maxX && this.ay[this.mens[i].b_toe] > this.render_minY && this.ay[this.mens[i].b_toe] < this.render_maxY) || !this.mens[i].brk_body && this.ax[this.mens[i].b_body] > this.render_minX && this.ax[this.mens[i].b_body] < this.render_maxX && this.ay[this.mens[i].b_body] > this.render_minY && this.ay[this.mens[i].b_body] < this.render_maxY || this.mens[i].x > this.render_minX && this.mens[i].x < this.render_maxX && this.mens[i].y > this.render_minY && this.mens[i].y < this.render_maxY || this.mens[i].isplayer || this.mens[i].hunt != -1 || !this.mens[i].isplayer && this.mens[i].botaction == 1 || this.mens[i].incar != -1 && this.aactive[-200 - Number(this.mens[i].incar)])
               {
                  this.aactive[i] = true;
                  this.mc = this.mens[i];
                  if(!this.mc.isplayer || i == this.MP_myid || !this.MP_mode)
                  {
                     this.mc.real_hea = this.mc.hea;
                  }
                  if(this.mc.notspawned)
                  {
                     this.SpawnPlayerImmediately(this.mc);
                  }
                  if(this.MP_mode)
                  {
                     this.VeriftMP(this.mc.b_body,-7);
                     this.VeriftMP(this.mc.b_toe,-7);
                     this.VeriftMP(this.mc.b_leg1,-7);
                     this.VeriftMP(this.mc.b_leg2,-7);
                     this.VeriftMP(this.mc.b_arm1,-7);
                     this.VeriftMP(this.mc.b_arm2,-7);
                     this.VeriftMP(this.mc.b_head_start,-7);
                     this.VeriftMP(this.mc.b_head_end,-7);
                     if(isNaN(this.mc.hea))
                     {
                        this.mc.hea = 0;
                     }
                     if(isNaN(this.mc.real_hea))
                     {
                        this.mc.real_hea = this.mc.hea;
                     }
                  }
                  if(this.MP_gamestate != 1 || !this.mc.dead)
                  {
                     if(this.mc.isplayer)
                     {
                        if(this.mc.mp_controlled)
                        {
                           if(!this.mc.brk_body)
                           {
                              target_dx = Number(this.mens[i].mp_x2) - Number(this.mens[i].mp_x);
                              target_dy = Number(this.mens[i].mp_y2) - Number(this.mens[i].mp_y);
                              target_di = target_dx * target_dx + target_dy * target_dy;
                              if(target_di > 1)
                              {
                                 target_di = Math.sqrt(target_di);
                                 cx = (this.ax[this.mens[i].b_body] + this.ax[this.mens[i].b_toe]) / 2;
                                 cy = (this.ay[this.mens[i].b_body] + this.ay[this.mens[i].b_toe]) / 2;
                                 radians = Math.atan2(Number(this.ax[this.mens[i].b_body]) - Number(this.ax[this.mens[i].b_toe]),Number(this.ay[this.mens[i].b_body]) - Number(this.ay[this.mens[i].b_toe])) - Math.atan2(target_dx,target_dy);
                                 while(radians > Math.PI)
                                 {
                                    radians -= Math.PI * 2;
                                 }
                                 while(radians < -Math.PI)
                                 {
                                    radians += Math.PI * 2;
                                 }
                                 if(Math.abs(radians) > Math.PI * 0.25)
                                 {
                                    rotate = function(param1:*):void
                                    {
                                       var _loc2_:* = undefined;
                                       var _loc3_:* = undefined;
                                       var _loc4_:* = undefined;
                                       var _loc5_:* = undefined;
                                       _loc2_ = Math.cos(-radians);
                                       _loc3_ = Math.sin(-radians);
                                       _loc4_ = _loc2_ * (Number(ax[param1]) - cx) + _loc3_ * (Number(ay[param1]) - cy) + cx;
                                       _loc5_ = _loc2_ * (Number(ay[param1]) - cy) - _loc3_ * (Number(ax[param1]) - cx) + cy;
                                       atox[param1] += (_loc4_ - Number(ax[param1])) * 0.5;
                                       atoy[param1] += (_loc5_ - Number(ay[param1])) * 0.5;
                                       ax[param1] = _loc4_;
                                       ay[param1] = _loc5_;
                                    };
                                    radians *= 0.1 * this.GSPEED;
                                    rotate(this.mens[i].b_toe);
                                    rotate(this.mens[i].b_leg1);
                                    rotate(this.mens[i].b_leg2);
                                    rotate(this.mens[i].b_body);
                                    rotate(this.mens[i].b_head_start);
                                    rotate(this.mens[i].b_head_end);
                                    rotate(this.mens[i].b_arm1);
                                    rotate(this.mens[i].b_arm2);
                                    cx = Number(this.ax[this.mens[i].b_body]);
                                    cy = Number(this.ay[this.mens[i].b_body]);
                                    radians *= -1;
                                    rotate(this.mens[i].b_arm1);
                                    rotate(this.mens[i].b_arm2);
                                 }
                              }
                           }
                           this.u = Number(this.mens[i].mp_x) - Number(this.ax[this.mens[i].b_toe]);
                           this.v = Number(this.mens[i].mp_y) - Number(this.ay[this.mens[i].b_toe]);
                           this.u2 = Number(this.mens[i].mp_x2) - Number(this.ax[this.mens[i].b_body]);
                           this.v2 = Number(this.mens[i].mp_y2) - Number(this.ay[this.mens[i].b_body]);
                           this.mens[i].mp_time += this.GSPEED / 30 * 1000;
                           if(this.mens[i].mp_time > this.mens[i].ping)
                           {
                              this.mc.mp_controlled = false;
                           }
                           this.xx = this.VectorDist2D(this.u,this.v);
                           this.xx2 = this.VectorDist2D(this.u2,this.v2);
                           if(Boolean(isNaN(this.u)) || Boolean(isNaN(this.v)) || this.u == 0 || this.v == 0)
                           {
                           }
                           traceA = this.xx < 30 || this.TraceLineF_nopushers(this.mens[i].mp_x,this.mens[i].mp_y,this.ax[this.mens[i].b_toe],this.ay[this.mens[i].b_toe]);
                           traceB = this.xx2 < 30 || this.TraceLineF_nopushers(this.mens[i].mp_x2,this.mens[i].mp_y2,this.ax[this.mens[i].b_body],this.ay[this.mens[i].b_body]);
                           if(!this.mc.brk_body && this.xx < 400 && traceA || this.mc.brk_body && this.xx < 100 && this.xx2 < 100 && traceA && traceB)
                           {
                              intens = 0.75 / 2;
                              fine_rad = 10;
                              if(this.mc.brk_body)
                              {
                                 intens *= 0.5 / 2;
                                 fine_rad = 20;
                              }
                              if(this.xx > fine_rad)
                              {
                                 this.TurnMPBone2(this.mens[i].b_toe,this.u,this.v,this.mens[i].mp_tox,this.mens[i].mp_toy,this.GSPEED * 0.2 * intens);
                                 this.TurnMPBone2(this.mens[i].b_leg1,this.u,this.v,this.mens[i].mp_tox,this.mens[i].mp_toy,this.GSPEED * 0.1 * intens);
                                 this.TurnMPBone2(this.mens[i].b_leg2,this.u,this.v,this.mens[i].mp_tox,this.mens[i].mp_toy,this.GSPEED * 0.1 * intens);
                                 this.WakeUpAtom(this.mens[i].b_toe,true);
                                 this.WakeUpAtom(this.mens[i].b_leg1,true);
                                 this.WakeUpAtom(this.mens[i].b_leg2,true);
                              }
                              else
                              {
                                 this.atox[this.mens[i].b_toe] *= 0.8;
                                 this.atoy[this.mens[i].b_toe] *= 0.8;
                                 this.atox[this.mens[i].b_leg1] *= 0.8;
                                 this.atoy[this.mens[i].b_leg1] *= 0.8;
                                 this.atox[this.mens[i].b_leg2] *= 0.8;
                                 this.atoy[this.mens[i].b_leg2] *= 0.8;
                              }
                              if(this.VectorDist2D(this.u2,this.v2) > fine_rad)
                              {
                                 this.TurnMPBone2(this.mens[i].b_body,this.u2,this.v2,this.mens[i].mp_tox2,this.mens[i].mp_toy2,this.GSPEED * 0.2 * intens);
                                 this.TurnMPBone2(this.mens[i].b_head_start,this.u2,this.v2,this.mens[i].mp_tox2,this.mens[i].mp_toy2,this.GSPEED * 0.1 * intens);
                                 this.TurnMPBone2(this.mens[i].b_head_end,this.u2,this.v2,this.mens[i].mp_tox2,this.mens[i].mp_toy2,this.GSPEED * 0.1 * intens);
                                 this.TurnMPBone2(this.mens[i].b_arm1,this.u2,this.v2,this.mens[i].mp_tox2,this.mens[i].mp_toy2,this.GSPEED * 0.1 * intens);
                                 this.TurnMPBone2(this.mens[i].b_arm2,this.u2,this.v2,this.mens[i].mp_tox2,this.mens[i].mp_toy2,this.GSPEED * 0.1 * intens);
                                 this.WakeUpAtom(this.mens[i].b_body,true);
                                 this.WakeUpAtom(this.mens[i].b_head_start,true);
                                 this.WakeUpAtom(this.mens[i].b_head_end,true);
                                 this.WakeUpAtom(this.mens[i].b_arm1,true);
                                 this.WakeUpAtom(this.mens[i].b_arm2,true);
                              }
                              else
                              {
                                 this.atox[this.mens[i].b_body] *= 0.8;
                                 this.atoy[this.mens[i].b_body] *= 0.8;
                                 this.atox[this.mens[i].b_head_start] *= 0.8;
                                 this.atoy[this.mens[i].b_head_start] *= 0.8;
                                 this.atox[this.mens[i].b_head_end] *= 0.8;
                                 this.atoy[this.mens[i].b_head_end] *= 0.8;
                                 this.atox[this.mens[i].b_arm1] *= 0.8;
                                 this.atoy[this.mens[i].b_arm1] *= 0.8;
                                 this.atox[this.mens[i].b_arm2] *= 0.8;
                                 this.atoy[this.mens[i].b_arm2] *= 0.8;
                              }
                           }
                           else
                           {
                              this.WakeUpAtom(this.mens[i].b_toe,true);
                              this.WakeUpAtom(this.mens[i].b_leg1,true);
                              this.WakeUpAtom(this.mens[i].b_leg2,true);
                              this.WakeUpAtom(this.mens[i].b_body,true);
                              this.WakeUpAtom(this.mens[i].b_head_start,true);
                              this.WakeUpAtom(this.mens[i].b_head_end,true);
                              this.WakeUpAtom(this.mens[i].b_arm1,true);
                              this.WakeUpAtom(this.mens[i].b_arm2,true);
                              this.ax[this.mens[i].b_toe] += this.u;
                              this.ay[this.mens[i].b_toe] += this.v;
                              this.ax[this.mens[i].b_leg1] += this.u;
                              this.ay[this.mens[i].b_leg1] += this.v;
                              this.ax[this.mens[i].b_leg2] += this.u;
                              this.ay[this.mens[i].b_leg2] += this.v;
                              this.ax[this.mens[i].b_body] += this.u2;
                              this.ay[this.mens[i].b_body] += this.v2;
                              this.ax[this.mens[i].b_head_start] += this.u2;
                              this.ay[this.mens[i].b_head_start] += this.v2;
                              this.ax[this.mens[i].b_head_end] += this.u2;
                              this.ay[this.mens[i].b_head_end] += this.v2;
                              this.ax[this.mens[i].b_arm1] += this.u2;
                              this.ay[this.mens[i].b_arm1] += this.v2;
                              this.ax[this.mens[i].b_arm2] += this.u2;
                              this.ay[this.mens[i].b_arm2] += this.v2;
                              if(this.mc.b_brk1 != this.mc.b_body)
                              {
                                 this.ax[this.mens[i].b_brk1] += this.u2;
                                 this.ay[this.mens[i].b_brk1] += this.v2;
                              }
                              if(this.mc.b_brk2 != this.mc.b_body)
                              {
                                 this.ax[this.mens[i].b_brk2] += this.u;
                                 this.ay[this.mens[i].b_brk2] += this.v;
                              }
                              if(this.GET_LITE_PHYS())
                              {
                                 this.lax[this.mens[i].b_toe] += this.u;
                                 this.lay[this.mens[i].b_toe] += this.v;
                                 this.lax[this.mens[i].b_leg1] += this.u;
                                 this.lay[this.mens[i].b_leg1] += this.v;
                                 this.lax[this.mens[i].b_leg2] += this.u;
                                 this.lay[this.mens[i].b_leg2] += this.v;
                                 this.lax[this.mens[i].b_body] += this.u2;
                                 this.lay[this.mens[i].b_body] += this.v2;
                                 this.lax[this.mens[i].b_head_start] += this.u2;
                                 this.lay[this.mens[i].b_head_start] += this.v2;
                                 this.lax[this.mens[i].b_head_end] += this.u2;
                                 this.lay[this.mens[i].b_head_end] += this.v2;
                                 this.lax[this.mens[i].b_arm1] += this.u2;
                                 this.lay[this.mens[i].b_arm1] += this.v2;
                                 this.lax[this.mens[i].b_arm2] += this.u2;
                                 this.lay[this.mens[i].b_arm2] += this.v2;
                                 if(this.mc.b_brk1 != this.mc.b_body)
                                 {
                                    this.lax[this.mens[i].b_brk1] += this.u2;
                                    this.lay[this.mens[i].b_brk1] += this.v2;
                                 }
                                 if(this.mc.b_brk2 != this.mc.b_body)
                                 {
                                    this.lax[this.mens[i].b_brk2] += this.u;
                                    this.lay[this.mens[i].b_brk2] += this.v;
                                 }
                              }
                           }
                        }
                     }
                  }
                  if(this.MP_mode)
                  {
                     this.VeriftMP(this.mc.b_body,-6);
                     this.VeriftMP(this.mc.b_toe,-6);
                     this.VeriftMP(this.mc.b_leg1,-6);
                     this.VeriftMP(this.mc.b_leg2,-6);
                     this.VeriftMP(this.mc.b_arm1,-6);
                     this.VeriftMP(this.mc.b_arm2,-6);
                     this.VeriftMP(this.mc.b_head_start,-6);
                     this.VeriftMP(this.mc.b_head_end,-6);
                  }
                  if(this.mc.hea > 0)
                  {
                     this.i2 = 0;
                     while(this.i2 < this.regionstotal)
                     {
                        if(this.regions[this.i2].use_on != 0)
                        {
                           if(this.mc.x > this.regions[this.i2].x)
                           {
                              if(this.mc.x < this.regions[this.i2].x + this.regions[this.i2].w)
                              {
                                 if(this.mc.y - 41 > this.regions[this.i2].y)
                                 {
                                    if(this.mc.y - 41 < this.regions[this.i2].y + this.regions[this.i2].h)
                                    {
                                       if(this.regions[this.i2].use_on == 1 && (i == this.MP_myid && this.key_pick && this.mc.incar == -1) || this.regions[this.i2].use_on == 2 && this.mc.incar == -1 || this.regions[this.i2].use_on == 3 && this.mc.incar != -1 || this.regions[this.i2].use_on == 4 || (this.regions[this.i2].use_on == 6 || this.regions[this.i2].use_on == 7) && this.mc.isplayer && (!this.MP_mode || i == this.MP_myid) && this.mc.hea > 0 || this.regions[this.i2].use_on == 9 && (i == this.MP_myid && this.key_pick && this.mc.team == 12 && this.mc.incar == -1) || this.regions[this.i2].use_on == 10 && (i == this.MP_myid && this.key_pick && this.mc.team == 13 && this.mc.incar == -1) || this.regions[this.i2].use_on == 13 && (i == this.MP_myid && this.mc.team == 12 && this.mc.incar == -1 && this.mc.hea > 0) || this.regions[this.i2].use_on == 14 && (i == this.MP_myid && this.mc.team == 13 && this.mc.incar == -1 && this.mc.hea > 0))
                                       {
                                          if(this.regions[this.i2].use_on == 7)
                                          {
                                             this.ok2 = true;
                                             this.i4 = 0;
                                             this.i3 = 0;
                                             while(this.i3 < this.playerstotal)
                                             {
                                                if(this.mens[this.i3].team == this.mc.team)
                                                {
                                                   if(this.mens[this.i3].char == 1 || this.mens[this.i3].char == 3 || this.mens[this.i3].char == 13)
                                                   {
                                                      if(this.mens[this.i3].x > this.regions[this.i2].x && this.mens[this.i3].x < this.regions[this.i2].x + this.regions[this.i2].w && Number(this.mens[this.i3].y) - 41 > this.regions[this.i2].y && Number(this.mens[this.i3].y) - 41 < this.regions[this.i2].y + this.regions[this.i2].h && !this.mens[this.i3].dying)
                                                      {
                                                         ++this.i4;
                                                      }
                                                      else
                                                      {
                                                         this.ok2 = false;
                                                      }
                                                   }
                                                }
                                                ++this.i3;
                                             }
                                          }
                                          if(this.regions[this.i2].use_on == 6 || this.regions[this.i2].use_on < 6 || this.ok2 || this.regions[this.i2].use_on == 9 || this.regions[this.i2].use_on == 10 || this.regions[this.i2].use_on == 13 || this.regions[this.i2].use_on == 14)
                                          {
                                             if(this.regions[this.i2].use_target != -1)
                                             {
                                                if(this.regions[this.i2].use_on == 1 || this.regions[this.i2].use_on == 9 || this.regions[this.i2].use_on == 10)
                                                {
                                                   if(this.regions[this.i2].play_sound)
                                                   {
                                                      if(Boolean(this.triggers[this.regions[this.i2].use_target].enabledd) && (this.triggers[this.regions[this.i2].use_target].maxcalls > 0 || this.triggers[this.regions[this.i2].use_target].maxcalls == -1))
                                                      {
                                                         this.PlaySound(this.s_t_switch2,this.regions[this.i2].x + Number(this.regions[this.i2].w) / 2,this.regions[this.i2].y + Number(this.regions[this.i2].h) / 2);
                                                      }
                                                      else
                                                      {
                                                         this.PlaySound(this.s_t_switch_denied,this.regions[this.i2].x + Number(this.regions[this.i2].w) / 2,this.regions[this.i2].y + Number(this.regions[this.i2].h) / 2);
                                                      }
                                                   }
                                                   this.key_pick = false;
                                                }
                                                if(this.MP_mode && i == this.MP_myid && this.triggers[this.regions[this.i2].use_target].enabledd && (this.triggers[this.regions[this.i2].use_target].maxcalls > 0 || this.triggers[this.regions[this.i2].use_target].maxcalls == -1))
                                                {
                                                   this.MP_custom_events += ";exec|" + this.regions[this.i2].use_target + "#" + i + "#" + this.i2;
                                                }
                                                if(!this.MP_mode || this.regions[this.i2].use_on != 1)
                                                {
                                                   this.TRIGGER_PLAYER_INITIATOR = i;
                                                   this.triggers[this.regions[this.i2].use_target].forcehyperjump = false;
                                                   this.EXEC_TRIGGER(this.regions[this.i2].use_target);
                                                }
                                                if(this.regions[this.i2].use_on == 1 || this.regions[this.i2].use_on == 9 || this.regions[this.i2].use_on == 10)
                                                {
                                                   if(this.regions[this.i2].mc != undefined)
                                                   {
                                                      if(Boolean(this.triggers[this.regions[this.i2].use_target].enabledd) && (this.triggers[this.regions[this.i2].use_target].maxcalls > 0 || this.triggers[this.regions[this.i2].use_target].maxcalls == -1))
                                                      {
                                                         this.regions[this.i2].mc.gotoAndStop(2);
                                                      }
                                                      else
                                                      {
                                                         this.regions[this.i2].mc.gotoAndStop(3);
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     if(i == this.MP_myid && !this.MP_half_bot)
                     {
                        if(!this.MP_spectator)
                        {
                           if(this.MP_gamestate != 2)
                           {
                              if(this.key_left)
                              {
                                 this.mc.act_movex = -1;
                              }
                              else if(this.key_right)
                              {
                                 this.mc.act_movex = 1;
                              }
                              else
                              {
                                 this.mc.act_movex = 0;
                              }
                              if(this.key_up)
                              {
                                 this.mc.act_movey = -1;
                              }
                              else if(this.key_down)
                              {
                                 this.mc.act_movey = 1;
                              }
                              else
                              {
                                 this.mc.act_movey = 0;
                              }
                           }
                           else
                           {
                              this.mc.act_movex = 0;
                              this.mc.act_movey = 0;
                           }
                           this.mc.tarx = (this.mouse_x - this.game_x) / this.game_scale;
                           this.mc.tary = (this.mouse_y - this.game_y) / this.game_scale;
                           if(Boolean(is_firing) && this.MP_gamestate == 0)
                           {
                              if(this.mc.act_fire == false)
                              {
                                 if(!this.MP_favor_the_shooter)
                                 {
                                    this.MP_custom_events += ";ss|" + this.MP_myid + "#" + this.mc.tarx + "#" + this.mc.tary;
                                 }
                              }
                              this.mc.act_fire = true;
                           }
                           else
                           {
                              this.mc.act_fire = false;
                           }
                           if(this.mc.act_fire || this.MP_mode || Math.random() > 0.97)
                           {
                              this.i2 = 0;
                              while(this.i2 < this.playerstotal)
                              {
                                 if(this.mens[this.i2].io)
                                 {
                                    if(this.mens[this.i2].team != this.mc.team)
                                    {
                                       if(!this.mens[this.i2].dead)
                                       {
                                          if(this.aactive[this.i2])
                                          {
                                             if(this.Dist2D(this.mc.tarx,this.mc.tary,this.mens[this.i2].x,this.mens[this.i2].y) < 150)
                                             {
                                                if(this.mc.hunt != this.i2)
                                                {
                                                   this.mc.hunt = -1;
                                                   this.Alerted(this.mc);
                                                   this.mc.hunt = this.i2;
                                                }
                                                this.i2 = this.playerstotal;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 ++this.i2;
                              }
                           }
                           if(this.mc.hunt != -1)
                           {
                              if(this.mc.hunt >= 0 && this.mc.hunt < this.playerstotal)
                              {
                                 if(this.mens[this.mc.hunt].io)
                                 {
                                    if(this.mens[this.mc.hunt].dead)
                                    {
                                       this.MakeHappy(this.mc);
                                       this.mc.hunt = -1;
                                    }
                                    else if(this.Dist2D(this.mc.tarx,this.mc.tary,this.mens[this.mc.hunt].x,this.mens[this.mc.hunt].y) > 250)
                                    {
                                       this.mc.hunt = -1;
                                    }
                                 }
                              }
                           }
                        }
                     }
                     else if(this.mc.botaction != 4)
                     {
                        if(this.MP_gamestate != 2)
                        {
                           if(!this.mc.isplayer || this.MP_myid == i && this.MP_half_bot)
                           {
                              if(this.DEBUG_MODE)
                              {
                              }
                              last_act_fire = Boolean(this.mc.act_fire);
                              this.mc.act_fire = false;
                              this.bugs = false;
                              this.injured = false;
                              this.mc.act_movex = 0;
                              this.mc.act_movey = 0;
                              if(this.mc.team == this.mens[this.MP_myid].team || !this.EASY_MODE)
                              {
                                 this.i2 = 0;
                                 while(this.i2 <= this.pulsmax)
                                 {
                                    if(this.puls[this.i2] != null)
                                    {
                                       if(this.puls[this.i2].visible == true)
                                       {
                                          if(this.mens[this.puls[this.i2].master].team != this.mc.team)
                                          {
                                             if(this.puls[this.i2].currentFrame == 14)
                                             {
                                                if(this.Dist2D(this.mc.x,this.mc.y,this.puls[this.i2].x,this.puls[this.i2].y) < 100)
                                                {
                                                   this.bugs = true;
                                                   this.mc.tarx = (this.mc.tarx + this.puls[this.i2].x) / 2;
                                                   this.mc.tary = (this.mc.tary + this.puls[this.i2].y) / 2;
                                                }
                                             }
                                          }
                                       }
                                    }
                                    ++this.i2;
                                 }
                                 if((this.CASUAL_MODE || this.MP_mode) && this.AUTO_REVIVE || this.mc.team != this.mens[this.MP_myid].team)
                                 {
                                    if(this.mc.hunt == -1 || this.MP_mode && this.mc.dying || this.PRO_BOTS && (this.mc.hunt != -1 && this.mens[this.mc.hunt] != i))
                                    {
                                       this.i2 = !!this.mc.dying ? i : 0;
                                       while(this.i2 < this.playerstotal && !this.injured)
                                       {
                                          if(this.mens[this.i2].io)
                                          {
                                             if(this.mens[this.i2].team == this.mc.team)
                                             {
                                                if(Boolean(this.mens[this.i2].dead) || Boolean(this.mens[this.i2].dying))
                                                {
                                                   if(!this.mens[this.i2].brk_head && !this.mens[this.i2].brk_arms && !this.mens[this.i2].brk_legs && !this.mens[this.i2].brk_body || this.i2 == i && (this.mens[i].hunt == -1 || this.mens[i].hea <= 15))
                                                   {
                                                      if(this.Dist2D(this.ax[this.mens[this.i2].b_body],this.ay[this.mens[this.i2].b_body],this.mc.x,this.mc.y) < 400)
                                                      {
                                                         this.ok = true;
                                                         if(this.mc.curwea == -1 || this.guns[this.mc.curwea].stat_class != 7)
                                                         {
                                                            this.i3 = 0;
                                                            while(this.i3 < this.gunstotal && this.ok)
                                                            {
                                                               if(this.guns[this.i3].io)
                                                               {
                                                                  if(!this.guns[this.i3].forcars)
                                                                  {
                                                                     if(this.guns[this.i3].stat_class == 7)
                                                                     {
                                                                        if(this.guns[this.i3].picken_by == i)
                                                                        {
                                                                           this.ok = false;
                                                                           if(!(this.MP_mode && i == this.MP_myid) || Math.random() < 0.2)
                                                                           {
                                                                              this.mc.curwea = this.i3;
                                                                              this.ChangedGun(i);
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                               ++this.i3;
                                                            }
                                                         }
                                                         if(this.mc.curwea != -1)
                                                         {
                                                            if(this.guns[this.mc.curwea].stat_class == 7)
                                                            {
                                                               if(this.mc.x < this.ax[this.mens[this.i2].b_body])
                                                               {
                                                                  this.mc.act_movex = 1;
                                                               }
                                                               else
                                                               {
                                                                  this.mc.act_movex = -1;
                                                               }
                                                               this.mc.act_movey = 1;
                                                               if(this.i2 == i)
                                                               {
                                                                  this.mc.tarx = (this.mc.tarx + this.ax[this.mens[this.i2].b_leg1]) / 2;
                                                                  this.mc.tary = (this.mc.tary + this.ay[this.mens[this.i2].b_leg1] + 20) / 2;
                                                               }
                                                               else
                                                               {
                                                                  this.mc.tarx = (this.mc.tarx + this.ax[this.mens[this.i2].b_body]) / 2;
                                                                  this.mc.tary = (this.mc.tary + this.ay[this.mens[this.i2].b_body]) / 2;
                                                               }
                                                               if(this.Dist2D(this.ax[this.mens[this.i2].b_body],this.ay[this.mens[this.i2].b_body],this.mc.x,this.mc.y) < 100 || this.i2 == i)
                                                               {
                                                                  this.mc.act_fire = true;
                                                               }
                                                               this.mens[this.i2].deadtim = 0;
                                                               this.mens[this.i2].alpha = 1;
                                                               this.injured = true;
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                          ++this.i2;
                                       }
                                    }
                                 }
                              }
                              if(this.bugs || this.injured)
                              {
                                 if(this.bugs)
                                 {
                                    if(this.mc.curwea != -1)
                                    {
                                       this.mc.curwea = -1;
                                       this.ChangedGun(i);
                                    }
                                    else if(this.mc.team != this.mens[this.MP_myid].team || Math.random() > 0.95 || this.PRO_BOTS)
                                    {
                                       if(this.injured && Boolean(this.mc.act_fire))
                                       {
                                          this.mc.act_movex = -Number(this.mc.side);
                                       }
                                       else
                                       {
                                          this.mc.act_fire = true;
                                       }
                                    }
                                 }
                                 this.ok = false;
                              }
                              else
                              {
                                 if(this.mc.isplayer && Math.random() > 0.5 || !this.mc.isplayer && Math.random() > 0.92)
                                 {
                                    this.mc.rand = Math.random();
                                    this.mc.rand2 = Math.random();
                                    this.mc.rand3 = Math.random();
                                    if(!(i == this.MP_myid && this.MP_mode) || Math.random() < 0.1)
                                    {
                                       if(!this.mc.dying)
                                       {
                                          if(this.mc.curwea != -1 && this.Dist2D(this.mc.x,this.mc.y,this.mc.tarx,this.mc.tary) < 100 && this.mc.hunt != -1)
                                          {
                                             this.mc.curwea = -1;
                                             this.ChangedGun(i);
                                          }
                                          else if(Math.random() > 0.8 || this.mc.curwea == -1 && this.Dist2D(this.mc.x,this.mc.y,this.mc.tarx,this.mc.tary) > 100)
                                          {
                                             this.i2 = 0;
                                             while(this.i2 < this.gunstotal)
                                             {
                                                if(this.guns[this.i2].io)
                                                {
                                                   if(this.guns[this.i2].picken_by == i)
                                                   {
                                                      if(!this.guns[this.i2].forcars)
                                                      {
                                                         if(this.i2 != this.mc.curwea)
                                                         {
                                                            if(this.guns[this.i2].wep > 0)
                                                            {
                                                               if(this.mc.curwea == -1 || this.CalcWepPriority(this.guns[this.mc.curwea]) < this.CalcWepPriority(this.guns[this.i2]))
                                                               {
                                                                  this.mc.curwea = this.i2;
                                                                  this.ChangedGun(i);
                                                                  this.i2 = this.gunstotal;
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                                ++this.i2;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 this.ok = true;
                                 if(this.mc.hunt != -1)
                                 {
                                    if(this.mens[this.mc.hunt].io)
                                    {
                                       this.mc2 = this.mens[this.mc.hunt];
                                       this.mc.act_movex = 0;
                                       this.mc.act_movey = 0;
                                       this.mc.last_contact += 1;
                                       this.xx = this.Dist2D(this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1],this.ax[this.mc2.b_body],this.ay[this.mc2.b_body]);
                                       if(this.mc.curwea != -1)
                                       {
                                          this.i3 = this.guns[this.mc.curwea].stat_class;
                                       }
                                       else
                                       {
                                          this.i3 = -1;
                                       }
                                       if(this.mc2.hea > 0 && this.mc2.stability > 0)
                                       {
                                          if(this.i3 != 2)
                                          {
                                             this.rx = this.mc2.x - 30 + Number(this.mc.rand) * 60;
                                             this.ry = this.mc2.y + 10 - Number(this.mc.rand2) * 102;
                                          }
                                          else
                                          {
                                             this.rx = this.mc2.x - 20 + Number(this.mc.rand) * 40;
                                             this.ry = this.mc2.y - Number(this.mc.rand2) * 82;
                                          }
                                          if(!this.EASY_MODE || i == this.MP_myid)
                                          {
                                             if(this.xx < 270)
                                             {
                                                if(this.mc.rand3 > 0.9)
                                                {
                                                   this.ry = this.mc2.y - 82;
                                                }
                                             }
                                          }
                                       }
                                       else
                                       {
                                          this.rx = Number(this.ax[this.mc2.b_body]) - 25 + Number(this.mc.rand) * 50;
                                          this.ry = Number(this.ay[this.mc2.b_body]) - 25 + Number(this.mc.rand2) * 50;
                                       }
                                       if(this.mc2.incar == -1)
                                       {
                                          if(this.i3 == 0)
                                          {
                                             this.rx += Number(this.atox[this.mc2.b_toe]) * this.xx / this.pspeed;
                                             this.ry += Number(this.atoy[this.mc2.b_toe]) * this.xx / this.pspeed;
                                             if(!this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]))
                                             {
                                                this.rx += (Number(this.ax[this.mc.b_arm1]) - Number(this.ax[this.mc2.b_body])) / this.xx * 100;
                                                this.ry += (Number(this.ay[this.mc.b_arm1]) - Number(this.ay[this.mc2.b_body])) / this.xx * 100;
                                             }
                                          }
                                          if(this.i3 == 1)
                                          {
                                             this.rx += Number(this.atox[this.mc2.b_toe]) * this.xx / this.pspeed;
                                             this.ry += Number(this.atoy[this.mc2.b_toe]) * this.xx / this.pspeed;
                                          }
                                          if(this.i3 == 2)
                                          {
                                          }
                                          if(this.i3 == 4 || this.i3 == 6)
                                          {
                                             this.rx += Number(this.atox[this.mc2.b_toe]) * this.xx / this.pspeed;
                                             this.ry += Number(this.atoy[this.mc2.b_toe]) * this.xx / this.pspeed + (Number(this.ay[this.mc.b_arm1]) - Number(this.ay[this.mc2.b_body])) * 0.5 - this.Math_abs(Number(this.ax[this.mc.b_arm1]) - Number(this.ax[this.mc2.b_body])) * 0.5;
                                          }
                                       }
                                       if(this.PRO_BOTS && (!this.LOW_HPS || this.FORCE_CUSTOM_MAP || this.MP_mode))
                                       {
                                          this.ok2 = true;
                                       }
                                       else
                                       {
                                          this.ok2 = (this.mc.side == 1 && this.mc.x < this.rx + 100 || this.mc.side == -1 && this.mc.x > this.rx - 100) && (this.mens[this.mc.hunt].alpha > 0.1 || this.mens[this.mc.hunt].incar != -1) && this.TraceLine(this.rx,this.ry,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]) || this.xx < 100 || i == this.MP_myid;
                                       }
                                       if(this.mc.enemy_vis_tim > 0 || this.ok2)
                                       {
                                          --this.mc.enemy_vis_tim;
                                          if(this.ok2)
                                          {
                                             this.mc.enemy_vis_tim = 45 / this.thispulspeed;
                                          }
                                          if(i == this.MP_myid && this.MP_mode)
                                          {
                                             this.mc.tarx = (Number(this.mc.tarx) * 13 + this.rx) / 14;
                                             this.mc.tary = (Number(this.mc.tary) * 13 + this.ry) / 14;
                                          }
                                          else if(this.EASY_MODE && i != this.MP_myid)
                                          {
                                             this.mc.tarx = (Number(this.mc.tarx) * 13 + this.rx) / 14;
                                             this.mc.tary = (Number(this.mc.tary) * 13 + this.ry) / 14;
                                          }
                                          else
                                          {
                                             this.mc.tarx = (Number(this.mc.tarx) * 1 + this.rx) / 2;
                                             this.mc.tary = (Number(this.mc.tary) * 1 + this.ry) / 2;
                                          }
                                          this.ok = false;
                                       }
                                       else
                                       {
                                          if(this.TraceLine(this.rx,this.ry,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]))
                                          {
                                             this.mc.tarx = (Number(this.mc.tarx) * 5 + this.rx) / 6;
                                             this.mc.tary = (Number(this.mc.tary) * 5 + this.ry) / 6;
                                          }
                                          if(this.Dist2D(this.mc.tarx,this.mc.tary,this.rx,this.ry) > 500)
                                          {
                                             this.mc.tarx = (Number(this.mc.tarx) * 10 + this.rx) / 11;
                                             this.mc.tary = (Number(this.mc.tary) * 50 + this.ry) / 51;
                                          }
                                          this.mc.act_movey = 1;
                                       }
                                       if((this.mc.curwea != -1 && this.guns[this.mc.curwea].ready || this.mc.arm1.lower.psi.visible) && (!this.mc.dying || !this.EASY_MODE && Math.random() > 0.85 || this.mc.incar != -1) && (this.mc.stability >= -0.1 || !this.EASY_MODE))
                                       {
                                          cx = Number(this.mc.rand3) * 200;
                                          if(!this.ok && ((this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]) || this.mens[this.mc.hunt].alpha <= 0.1) && this.TraceAllyLine(i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1])))
                                          {
                                             this.mc.last_contact = 0;
                                             if(this.mc.curwea == -1 && Boolean(this.mc.arm1.lower.psi.visible))
                                             {
                                                if(this.Dist2D(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]) > 50)
                                                {
                                                   if(this.ax[this.mc.b_arm1] > this.mc.tarx)
                                                   {
                                                      this.mc.act_movex = -1;
                                                   }
                                                   else
                                                   {
                                                      this.mc.act_movex = 1;
                                                   }
                                                }
                                                if(this.Dist2D(this.mc.tarx,this.mc.tary,this.rx,this.ry) < 200)
                                                {
                                                   if(this.Dist2D(this.rx,this.ry,this.mc.x,this.mc.y - 41) < 70)
                                                   {
                                                      this.mc.act_fire = true;
                                                   }
                                                }
                                             }
                                             else
                                             {
                                                if(this.xx > 570 / this.game_scale + cx && this.EASY_MODE || this.xx > 1400 / this.game_scale)
                                                {
                                                   this.mc.act_fire = false;
                                                }
                                                else if(this.i3 != 2 && this.Dist2D(this.mc.tarx,this.mc.tary,this.rx,this.ry) < 50 + cx * 0.1 || this.i3 == 2 && this.Dist2D(this.mc.tarx,this.mc.tary,this.rx,this.ry) < 30 || this.xx > 600 / this.game_scale && this.Dist2D(this.mc.tarx,this.mc.tary,this.rx,this.ry) < 100 + cx || this.mens[this.mc.hunt].alpha <= 0.1)
                                                {
                                                   if(i == this.MP_myid && this.MP_mode)
                                                   {
                                                      if(Math.random() < Math.pow(0.8,this.GSPEED))
                                                      {
                                                         this.mc.act_fire = true;
                                                      }
                                                   }
                                                   else if(this.EASY_MODE && i != this.MP_myid)
                                                   {
                                                      if(Math.random() < Math.pow(0.2,this.GSPEED))
                                                      {
                                                         this.mc.act_fire = true;
                                                      }
                                                   }
                                                   else
                                                   {
                                                      this.mc.tarx = this.rx;
                                                      this.mc.tary = this.ry;
                                                      this.mc.act_fire = true;
                                                   }
                                                }
                                                if(this.mc.hea > Number(this.mc.hmax) * 0.5)
                                                {
                                                   if(this.Dist2D(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]) > 250 + cx)
                                                   {
                                                      if(this.ax[this.mc.b_arm1] > this.mc.tarx)
                                                      {
                                                         this.mc.act_movex = -1;
                                                      }
                                                      else
                                                      {
                                                         this.mc.act_movex = 1;
                                                      }
                                                   }
                                                }
                                                else if(this.Dist2D(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]) < 350 + cx)
                                                {
                                                   if(this.ax[this.mc.b_arm1] < this.mc.tarx)
                                                   {
                                                      this.mc.act_movex = -1;
                                                   }
                                                   else
                                                   {
                                                      this.mc.act_movex = 1;
                                                   }
                                                   if(this.mens[this.mc.hunt].curwea == -1 && !this.mens[this.mc.hunt].dying)
                                                   {
                                                      this.mc.act_movex = -Number(this.mc.act_movex);
                                                   }
                                                }
                                             }
                                          }
                                          else if(this.mc.hea > Number(this.mc.hmax) * 0.2 && this.mc.team != this.mens[this.MP_myid].team || this.mc.hea > Number(this.mc.hmax) * 0.5)
                                          {
                                             if(this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] - (100 + Number(this.mc.rand) * 100) - cx,this.ay[this.mc.b_arm1]) && this.TraceAllyLine(i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]))
                                             {
                                                this.mc.act_movex = -1;
                                             }
                                             else if(this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] + (100 + Number(this.mc.rand) * 100) + cx,this.ay[this.mc.b_arm1]) && this.TraceAllyLine(i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] + 50 + cx,this.ay[this.mc.b_arm1]))
                                             {
                                                this.mc.act_movex = 1;
                                             }
                                             else if(this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] - (100 + Number(this.mc.rand) * 100),Number(this.ay[this.mc.b_arm1]) - 100 * Number(this.mc.mobility)) && this.TraceAllyLine(i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] - (100 + Number(this.mc.rand) * 100),Number(this.ay[this.mc.b_arm1]) - 100 * Number(this.mc.mobility)))
                                             {
                                                this.mc.act_movex = -1;
                                                this.mc.act_movey = -1;
                                             }
                                             else if(this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] + (100 + Number(this.mc.rand) * 100),Number(this.ay[this.mc.b_arm1]) - 100 * Number(this.mc.mobility)) && this.TraceAllyLine(i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] + (100 + Number(this.mc.rand) * 100),Number(this.ay[this.mc.b_arm1]) - 100 * Number(this.mc.mobility)))
                                             {
                                                this.mc.act_movex = 1;
                                                this.mc.act_movey = -1;
                                             }
                                             else if(this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],Number(this.ay[this.mc.b_arm1]) - 100 * Number(this.mc.mobility)) && this.TraceAllyLine(i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],Number(this.ay[this.mc.b_arm1]) - 100 * Number(this.mc.mobility)))
                                             {
                                                this.mc.act_movey = -1;
                                             }
                                             else if(this.mc.sit < 0.5 && this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1] + 50) && this.TraceAllyLine(i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1] + 50))
                                             {
                                                this.mc.act_movey = 1;
                                             }
                                             else if(this.TraceLine(this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1],this.ax[this.mc.b_arm1] + (Number(this.mc.rand) - 0.5) * 800,Number(this.ay[this.mc.b_arm1]) - Number(this.mc.rand2) * 200) && this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] + (Number(this.mc.rand) - 0.5) * 800,Number(this.ay[this.mc.b_arm1]) - Number(this.mc.rand2) * 200) && this.TraceAllyLine(i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] + (Number(this.mc.rand) - 0.5) * 800,Number(this.ay[this.mc.b_arm1]) - Number(this.mc.rand2) * 200))
                                             {
                                                if(this.mc.rand > 0.5)
                                                {
                                                   this.mc.act_movex = 1;
                                                }
                                                else
                                                {
                                                   this.mc.act_movex = -1;
                                                }
                                                if(this.mc.rand2 > 0.5)
                                                {
                                                   this.mc.act_movey = -1;
                                                }
                                             }
                                             else if(cx > 80)
                                             {
                                                if(this.mc.tarx > this.mc.x)
                                                {
                                                   this.mc.act_movex = 1;
                                                }
                                                else
                                                {
                                                   this.mc.act_movex = -1;
                                                }
                                             }
                                          }
                                       }
                                       else if(this.mc.curwea != -1)
                                       {
                                          if(this.TraceLine(this.ax[this.mc.b_body],this.ay[this.mc.b_body],this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                          {
                                             if(!this.TraceLine(this.ax[this.mc.b_body] + 30 + Number(this.mc.rand3) * 100,this.ay[this.mc.b_body],this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                             {
                                                this.mc.act_movex = 1;
                                             }
                                             else if(!this.TraceLine(Number(this.ax[this.mc.b_body]) - 30 - Number(this.mc.rand3) * 100,this.ay[this.mc.b_body],this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                             {
                                                this.mc.act_movex = -1;
                                             }
                                             else if(!this.TraceLine(this.ax[this.mc.b_body],Number(this.ay[this.mc.b_body]) - 100,this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                             {
                                                this.mc.act_movey = -1;
                                             }
                                             else if(!this.TraceLine(this.ax[this.mc.b_body],this.ay[this.mc.b_body] + 50,this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                             {
                                                this.mc.act_movey = 1;
                                             }
                                             else if(!this.TraceLine(Number(this.ax[this.mc.b_body]) - 200,Number(this.ay[this.mc.b_body]) - 100,this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                             {
                                                this.mc.act_movey = -1;
                                                this.mc.act_movex = -1;
                                             }
                                             else if(!this.TraceLine(this.ax[this.mc.b_body] + 200,Number(this.ay[this.mc.b_body]) - 100,this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                             {
                                                this.mc.act_movey = -1;
                                                this.mc.act_movex = 1;
                                             }
                                          }
                                       }
                                       else
                                       {
                                          this.i3 = -1;
                                          this.xx = 0;
                                          if(this.mc2.incar == -1)
                                          {
                                             this.i2 = 0;
                                             while(this.i2 < this.gunstotal)
                                             {
                                                if(this.guns[this.i2].io)
                                                {
                                                   this.mc2 = this.guns[this.i2];
                                                   this.yy = this.Dist2D(this.mc.x,this.mc.y,this.mc2.x,this.mc2.y);
                                                   if(this.yy < 800)
                                                   {
                                                      if(this.mc2.forcars == false)
                                                      {
                                                         if((this.mc2.picken_by == -1 || this.mens[this.mc2.picken_by].hea < 50) && (this.i3 == -1 || this.yy < this.xx) && (this.mc2.command == -1 || this.mc2.command != -1 && this.mc2.command == this.mc.team && (this.mc.isplayer || this.mens[this.MP_myid].team != this.mc.team)))
                                                         {
                                                            if(this.mc.x < this.mc2.x - 20)
                                                            {
                                                               this.mc.act_movex = 1;
                                                            }
                                                            else if(this.mc.x > this.mc2.x + 20)
                                                            {
                                                               this.mc.act_movex = -1;
                                                            }
                                                            else if(this.mc.y > this.mc2.y)
                                                            {
                                                               this.mc.act_movey = -1;
                                                            }
                                                            else
                                                            {
                                                               this.mc.act_movey = 1;
                                                            }
                                                            this.xx = this.yy;
                                                            this.i3 = this.i2;
                                                         }
                                                      }
                                                   }
                                                }
                                                ++this.i2;
                                             }
                                          }
                                       }
                                       if(Math.random() > 0.5)
                                       {
                                          this.i2 = 0;
                                          while(this.i2 < this.playerstotal)
                                          {
                                             if(this.i2 != i)
                                             {
                                                if(this.mens[this.i2].io)
                                                {
                                                   if(this.mens[this.i2].hea > 0)
                                                   {
                                                      if(this.mens[this.i2].team == this.mc.team)
                                                      {
                                                         if(this.mens[this.i2].hunt == -1)
                                                         {
                                                            if(this.mens[this.i2].x > this.mc.x - 500)
                                                            {
                                                               if(this.mens[this.i2].x < this.mc.x + 500)
                                                               {
                                                                  if(this.mens[this.i2].y > this.mc.y - 300)
                                                                  {
                                                                     if(this.mens[this.i2].y < this.mc.y + 300)
                                                                     {
                                                                        if(this.PRO_BOTS || this.TraceLine(this.mens[this.i2].x,Number(this.mens[this.i2].y) - 50,this.mc.x,this.mc.y - 50))
                                                                        {
                                                                           if(this.mens[this.i2].last_contact > this.HUNT_LOST)
                                                                           {
                                                                              this.Alerted(this.mens[this.i2]);
                                                                           }
                                                                           if(this.mens[this.i2].last_contact > this.mc.last_contact + 10)
                                                                           {
                                                                              this.mens[this.i2].last_contact = this.mc.last_contact + 10;
                                                                              this.mens[this.i2].hunt = this.mc.hunt;
                                                                              this.mens[this.i2].tarx = Number(this.mc.tarx) - 100 + Math.random() * 200;
                                                                              this.mens[this.i2].tary = Number(this.mc.tary) - 50 + Math.random() * 100;
                                                                              if(this.mens[this.i2].enemy_vis_tim > this.mc.enemy_vis_tim)
                                                                              {
                                                                                 this.mens[this.i2].enemy_vis_tim = this.mc.enemy_vis_tim;
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                             ++this.i2;
                                          }
                                       }
                                       if(this.mc.incar != -1 && !this.vehicles[this.mc.incar].ecosystem)
                                       {
                                          if(this.mc.x < this.mens[this.mc.hunt].x)
                                          {
                                             this.mc.act_movex = 1;
                                          }
                                          else
                                          {
                                             this.mc.act_movex = -1;
                                          }
                                       }
                                       if(this.mens[this.mc.hunt].team == this.mc.team)
                                       {
                                          if(this.mc.team == 0 || this.PRO_BOTS)
                                          {
                                             this.mc.hunt = -1;
                                          }
                                          if(this.DEBUG_MODE)
                                          {
                                          }
                                       }
                                       if(this.mc2.dying && (Math.random() > 0.9 && this.mc.team != this.mens[this.MP_myid].team) || !this.mc2.io || this.mc2.hea < -30 || this.mc2.hea <= 0 && this.mc2.incar != -1)
                                       {
                                          if(!this.PRO_BOTS || Boolean(this.mc2.dead))
                                          {
                                             this.mc.hunt = -1;
                                          }
                                          if(this.DEBUG_MODE)
                                          {
                                          }
                                          if(this.mc.botaction == 0)
                                          {
                                             if(Math.random() > 0.5)
                                             {
                                                this.mc.botaction = 2;
                                             }
                                             else
                                             {
                                                this.mc.botaction = 3;
                                             }
                                          }
                                          this.MakeHappy(this.mc);
                                       }
                                       if(this.mc.hunt == i)
                                       {
                                          this.mc.hunt = -1;
                                          if(this.DEBUG_MODE)
                                          {
                                          }
                                          if(this.mc.botaction == 0)
                                          {
                                             this.mc.botaction = 3;
                                          }
                                       }
                                       if(this.mc.last_contact > this.HUNT_LOST && !this.PRO_BOTS)
                                       {
                                          this.mc.hunt = -1;
                                          if(this.mc.botaction == 0)
                                          {
                                             this.mc.botaction = 3;
                                          }
                                       }
                                    }
                                 }
                              }
                              if(this.DEBUG_MODE)
                              {
                              }
                              if(this.ok)
                              {
                                 if(this.mc.botaction == 1 && this.mc.team == this.mens[this.MP_myid].team && this.mens[this.MP_myid].hea > 0)
                                 {
                                    this.xx = this.mens[this.MP_myid].x + Number(this.mc.side) * 100;
                                    if(this.mens[this.MP_myid].act_movey == 1 && this.mens[this.MP_myid].side == this.mc.side)
                                    {
                                       this.xx = Number(this.mens[this.MP_myid].x) - Number(this.mc.side) * 100;
                                    }
                                    if(this.Math_abs(this.mc.x - this.xx) * (Math.sin(i) * 0.25 + 0.75) + this.Math_abs(this.mc.y - Number(this.mens[this.MP_myid].y)) > 100 || this.Math_abs(this.mc.x - Number(this.mens[this.MP_myid].x)) < 30)
                                    {
                                       if(this.mc.inwater)
                                       {
                                          if(this.mc.y > this.mens[this.MP_myid].y)
                                          {
                                             this.mc.act_movey = -1;
                                          }
                                          else
                                          {
                                             this.mc.act_movey = 1;
                                          }
                                       }
                                       if(this.mc.x > this.xx)
                                       {
                                          this.mc.act_movex = -1;
                                       }
                                       else
                                       {
                                          this.mc.act_movex = 1;
                                       }
                                    }
                                    else if(!this.mc.inwater)
                                    {
                                       if(this.mens[this.MP_myid].side == this.mc.side)
                                       {
                                          if(this.mens[this.MP_myid].act_movey != 1)
                                          {
                                             this.mc.act_movey = 1;
                                          }
                                       }
                                    }
                                    if(this.mens[this.MP_myid].hunt != -1 || Boolean(this.mens[this.MP_myid].act_fire))
                                    {
                                       this.mc.tarx = (Number(this.mc.tarx) * 3 + this.mens[this.MP_myid].tarx) / 4;
                                       this.mc.tary = (Number(this.mc.tary) * 3 + this.mens[this.MP_myid].tary) / 4;
                                    }
                                    else
                                    {
                                       if(this.mc.rand3 > 0.95)
                                       {
                                          this.mc.randtim = -Number(this.mc.randtim);
                                          this.mc.rand3 = Math.random() * 0.95;
                                       }
                                       if(this.mc.randtim == 0)
                                       {
                                          this.mc.randtim = this.mc.side;
                                       }
                                       this.mc.tarx = (Number(this.mc.tarx) * 7 + this.mc.x + (Number(this.mc.rand2) * 400 + 200) * Number(this.mc.randtim)) / 8;
                                       this.mc.tary = (Number(this.mc.tary) * 7 + this.mc.y - 50 + (Number(this.mc.rand3) * 100 - 50)) / 8;
                                    }
                                 }
                                 else if(this.mc.hunt == -1)
                                 {
                                    if(this.mc.botaction == 2 || this.mc.botaction == 3)
                                    {
                                       if(this.mc.rand3 > 0.95)
                                       {
                                          this.mc.randtim = -Number(this.mc.randtim);
                                       }
                                       else
                                       {
                                          if(this.mc.randtim == 0)
                                          {
                                             this.mc.randtim = this.mc.side;
                                          }
                                          this.mc.tarx = (Number(this.mc.tarx) * 10 + (this.mc.x + Number(this.mc.randtim) * 200)) / 11;
                                          this.mc.tary = (Number(this.mc.tary) * 10 + (this.mc.y - 41 + Number(this.mc.rand2) * 100 - 50)) / 11;
                                       }
                                       if(this.mc.botaction == 3)
                                       {
                                          if(!this.TracePoint(this.mc.x + Number(this.mc.side) * 50,this.mc.y + 20) || !this.TracePoint(this.mc.x + Number(this.mc.side) * 50,this.mc.y + 150))
                                          {
                                             if(this.TracePoint(this.mc.x + Number(this.mc.side) * 100,this.mc.y - 40) || this.TracePoint(this.mc.x + Number(this.mc.side) * 100,this.mc.y - 100))
                                             {
                                                this.mc.act_movex = this.mc.side;
                                             }
                                          }
                                       }
                                    }
                                    else
                                    {
                                       this.mc.tarx = (Number(this.mc.tarx) * 10 + (this.mc.x + Number(this.mc.side) * 200)) / 11;
                                       this.mc.tary = (Number(this.mc.tary) * 10 + (this.mc.y - 41)) / 11;
                                    }
                                 }
                              }
                              if(this.mc.hunt == -1 || this.mc.act_movex == 0 && this.mc.act_movey == 0 && !this.mc.act_fire)
                              {
                                 this.i2 = 0;
                                 while(this.i2 < this.playerstotal)
                                 {
                                    if(this.i2 != i)
                                    {
                                       if(this.mens[this.i2].io)
                                       {
                                          this.mc2 = this.mens[this.i2];
                                          if(this.mc2.hea > 0 && !this.mc2.dying)
                                          {
                                             if(this.mc2.x > this.mc.x - this.hscreenX * 1.5 / this.game_scale)
                                             {
                                                if(this.mc2.x < this.mc.x + this.hscreenX * 1.5 / this.game_scale)
                                                {
                                                   if(this.mc2.y > this.mc.y - this.hscreenY * 1.5 / this.game_scale)
                                                   {
                                                      if(this.mc2.y < this.mc.y + this.hscreenY * 1.5 / this.game_scale)
                                                      {
                                                         if(this.mc2.x > this.mc.x - 100 && this.mc.side > 0 || this.mc2.x < this.mc.x + 100 && this.mc.side < 0 || this.PRO_BOTS)
                                                         {
                                                            if(this.mc2.team != this.mc.team)
                                                            {
                                                               if(this.PRO_BOTS || this.TraceLine(this.mc2.x - 25 + Math.random() * 50,this.mc2.y - Math.random() * 82,Number(this.ax[this.mc.b_head_start]) - 30 + Math.random() * 60,Number(this.ay[this.mc.b_head_start]) - 30 + Math.random() * 60))
                                                               {
                                                                  if(this.mc.hunt == -1)
                                                                  {
                                                                     this.Alerted(this.mc);
                                                                  }
                                                                  this.mc.hunt = this.i2;
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    ++this.i2;
                                 }
                              }
                              if(!this.injured)
                              {
                                 this.i4 = 0;
                                 this.i3 = 0;
                                 this.i2 = 0;
                                 while(this.i2 < this.playerstotal)
                                 {
                                    if(this.i2 != i)
                                    {
                                       if(this.mens[this.i2].io)
                                       {
                                          this.mc2 = this.mens[this.i2];
                                          if(this.mc2.io)
                                          {
                                             if(this.mc2.hea > 0 && !this.mc2.dying)
                                             {
                                                if(this.mc2.x > this.mc.x - this.screenX / this.game_scale)
                                                {
                                                   if(this.mc2.x < this.mc.x + this.screenX / this.game_scale)
                                                   {
                                                      if(this.mc2.y > this.mc.y - this.screenY / this.game_scale)
                                                      {
                                                         if(this.mc2.y < this.mc.y + this.screenY / this.game_scale)
                                                         {
                                                            if(this.mc2.team == this.mc.team || this.TraceLine(this.mc2.x - 25,this.mc2.y - 41,this.ax[this.mc.b_head_start],this.ay[this.mc.b_head_start]))
                                                            {
                                                               if(this.mc2.team != this.mc.team)
                                                               {
                                                                  this.i4 = this.i4 - 1;
                                                                  if(this.i2 != this.mc.hunt)
                                                                  {
                                                                     this.i3 = this.i2;
                                                                  }
                                                               }
                                                               else
                                                               {
                                                                  this.i4 += 1;
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    ++this.i2;
                                 }
                                 if(this.i4 < -1)
                                 {
                                    if(this.mc.x > this.mens[this.i3].x)
                                    {
                                       this.mc.act_movex = 1;
                                    }
                                    else
                                    {
                                       this.mc.act_movex = -1;
                                    }
                                    if(this.mc.act_movey == 1)
                                    {
                                       this.mc.act_movey = 0;
                                    }
                                 }
                              }
                              if(this.mc.incar == -1)
                              {
                                 this.ok = true;
                                 this.i4 = -1;
                                 this.i2 = 0;
                                 while(this.i2 <= this.pulsmax)
                                 {
                                    if(this.puls[this.i2] != null)
                                    {
                                       if(this.puls[this.i2].visible == true)
                                       {
                                          if(this.mens[this.puls[this.i2].master].team != this.mc.team)
                                          {
                                             if(this.puls[this.i2].master >= 0)
                                             {
                                                if(this.puls[this.i2].cclass == 0 || this.puls[this.i2].cclass == 1 || this.puls[this.i2].cclass == 2)
                                                {
                                                   if((this.puls[this.i2].x > this.mc.x && this.mc.side > 0 || this.puls[this.i2].x < this.mc.x && this.mc.side < 0) && this.TraceLine(this.puls[this.i2].x,this.puls[this.i2].y,this.ax[this.mc.b_head_start],this.ay[this.mc.b_head_start]))
                                                   {
                                                      if(this.CheckCross(this.puls[this.i2].x,this.puls[this.i2].y,this.puls[this.i2].x + Number(this.puls[this.i2].spx) * 10,this.puls[this.i2].y + Number(this.puls[this.i2].spy) * 10,this.mc.x,this.mc.y,this.mc.x,this.mc.y - 60,this.i2))
                                                      {
                                                         this.mc.act_movey = -1;
                                                         if(!this.mens[this.puls[this.i2].master].dead)
                                                         {
                                                            if(this.mc.hunt == -1)
                                                            {
                                                               this.Alerted(this.mc);
                                                               this.mc.hunt = this.puls[this.i2].master;
                                                            }
                                                         }
                                                         this.ok = false;
                                                         this.i4 = this.i2;
                                                      }
                                                      if(this.CheckCross(Number(this.puls[this.i2].x) - Number(this.puls[this.i2].spx) * 5,Number(this.puls[this.i2].y) - Number(this.puls[this.i2].spy) * 5,this.puls[this.i2].x + Number(this.puls[this.i2].spx) * 20,this.puls[this.i2].y + Number(this.puls[this.i2].spy) * 20,this.mc.x,this.mc.y - 60,this.mc.x,this.mc.y - 102,this.i2))
                                                      {
                                                         this.mc.act_movey = 1;
                                                         if(!this.mens[this.puls[this.i2].master].dead)
                                                         {
                                                            if(this.mc.hunt == -1)
                                                            {
                                                               this.Alerted(this.mc);
                                                               this.mc.hunt = this.puls[this.i2].master;
                                                            }
                                                         }
                                                         this.ok = false;
                                                         this.i4 = this.i2;
                                                      }
                                                   }
                                                }
                                                if(this.puls[this.i2].cclass == 4 || this.puls[this.i2].cclass == 6)
                                                {
                                                   if(this.mc.x > Number(this.puls[this.i2].x) - 150)
                                                   {
                                                      if(this.mc.x < this.puls[this.i2].x + 150)
                                                      {
                                                         if(this.mc.y > Number(this.puls[this.i2].y) - 150)
                                                         {
                                                            if(this.mc.y < this.puls[this.i2].y + 150)
                                                            {
                                                               if(this.TraceLine(this.ax[this.mc.b_head_start],this.ay[this.mc.b_head_start],this.puls[this.i2].x,this.puls[this.i2].y))
                                                               {
                                                                  if(this.mc.x > this.puls[this.i2].x)
                                                                  {
                                                                     this.mc.act_movex = 1;
                                                                  }
                                                                  else
                                                                  {
                                                                     this.mc.act_movex = -1;
                                                                  }
                                                                  if(Math.random() > 0.9)
                                                                  {
                                                                     this.mc.act_movey = -1;
                                                                  }
                                                                  if(!this.mens[this.puls[this.i2].master].dead)
                                                                  {
                                                                     if(this.mc.hunt == -1)
                                                                     {
                                                                        this.Alerted(this.mc);
                                                                        this.mc.hunt = this.puls[this.i2].master;
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                                if(this.mc.hunt == -1)
                                                {
                                                   if(this.Dist2D(this.ax[this.mc.b_head_start],this.ay[this.mc.b_head_start],this.puls[this.i2].x,this.puls[this.i2].y) < 350)
                                                   {
                                                      if(this.puls[this.i2].x > this.mc.x && this.mc.side == 1 || this.puls[this.i2].x < this.mc.x && this.mc.side == -1)
                                                      {
                                                         if(this.TraceLine(this.ax[this.mc.b_head_start],this.ay[this.mc.b_head_start],this.puls[this.i2].x,this.puls[this.i2].y))
                                                         {
                                                            if(!this.mens[this.puls[this.i2].master].dead)
                                                            {
                                                               this.Alerted(this.mc);
                                                               this.mc.hunt = this.puls[this.i2].master;
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    ++this.i2;
                                 }
                                 if(!this.ok)
                                 {
                                    if(this.i4 >= 0 && this.i4 <= this.pulsmax)
                                    {
                                       if(this.mc.curwea == -1 && Boolean(this.mc.arm1.lower.psi.visible))
                                       {
                                          if(Math.random() < Math.pow(0.3,this.GSPEED))
                                          {
                                             if(this.Dist2D(this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1],this.puls[this.i4].x,this.puls[this.i4].y) < 150)
                                             {
                                                this.mc.act_fire = true;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 if(!this.mc.inwater)
                                 {
                                    if(this.TraceLineF(this.ax[this.mc.b_toe] + Number(this.mc.act_movex) * 50,Number(this.ay[this.mc.b_toe]) - 50,this.ax[this.mc.b_toe] + Number(this.mc.act_movex) * 100 + Number(this.mc.tox) * 10,this.ay[this.mc.b_toe] + 250))
                                    {
                                       if(this.TraceLineF(this.ax[this.mc.b_toe] + Number(this.mc.act_movex) * 50,this.ay[this.mc.b_toe] + 25,this.ax[this.mc.b_toe] + Number(this.mc.act_movex) * 150,this.ay[this.mc.b_toe] + 25))
                                       {
                                          this.mc.act_movey = -1;
                                       }
                                       else
                                       {
                                          this.mc.act_movex = -Number(this.mc.act_movex);
                                          if(this.mc.act_movey == -1)
                                          {
                                             this.mc.act_movey = 0;
                                          }
                                       }
                                    }
                                    if(this.TraceLineF(this.ax[this.mc.b_toe],Number(this.ay[this.mc.b_toe]) - 50,this.ax[this.mc.b_toe] + Number(this.mc.tox) * 10,this.ay[this.mc.b_toe] + 250))
                                    {
                                       if(!this.TraceLineF(this.ax[this.mc.b_toe],Number(this.ay[this.mc.b_toe]) - 50,this.ax[this.mc.b_toe] + Number(this.mc.tox) * 10 + 100,this.ay[this.mc.b_toe] + 250))
                                       {
                                          this.mc.act_movex = 1;
                                       }
                                       if(!this.TraceLineF(this.ax[this.mc.b_toe],Number(this.ay[this.mc.b_toe]) - 50,this.ax[this.mc.b_toe] + Number(this.mc.tox) * 10 - 100,this.ay[this.mc.b_toe] + 250))
                                       {
                                          this.mc.act_movex = -1;
                                       }
                                    }
                                    if(this.mc.act_movex != 0)
                                    {
                                       if(!this.TracePointNoRagdolls(this.ax[this.mc.b_toe] + Number(this.mc.act_movex) * 50,this.ay[this.mc.b_toe] + 5) || this.Math_abs(this.mc.tox) < 4 && Math.random() > 0.9)
                                       {
                                          if(this.TracePointNoRagdolls(this.ax[this.mc.b_toe] + Number(this.mc.act_movex) * 50,Number(this.ay[this.mc.b_toe]) - 70) || this.TracePointNoRagdolls(this.ax[this.mc.b_toe] + Number(this.mc.act_movex) * 50,Number(this.ay[this.mc.b_toe]) - 170))
                                          {
                                             this.mc.act_movey = -1;
                                          }
                                          else
                                          {
                                             this.mc.act_movex = 0;
                                          }
                                       }
                                    }
                                 }
                              }
                              if(this.mc.botaction == 1)
                              {
                                 if(!this.mc.inwater)
                                 {
                                    if(this.mc.act_movex != 0)
                                    {
                                       if(this.mc.x == this.mc.walk_x)
                                       {
                                          if(this.mc.walk_bug == undefined)
                                          {
                                             this.mc.walk_bug = 0;
                                          }
                                          this.mc.walk_bug += this.GSPEED;
                                          if(this.mc.walk_bug > 5)
                                          {
                                             this.mc.act_movey = -1;
                                          }
                                       }
                                       else
                                       {
                                          this.mc.walk_bug = 0;
                                          this.mc.walk_x = this.mc.x;
                                       }
                                    }
                                 }
                              }
                              if(this.MP_half_bot)
                              {
                                 if(i == this.MP_myid)
                                 {
                                    if(is_firing)
                                    {
                                       this.mc.tarx = (this.mouse_x - this.game_x) / this.game_scale;
                                       this.mc.tary = (this.mouse_y - this.game_y) / this.game_scale;
                                    }
                                    if(this.key_up)
                                    {
                                       this.mc.act_movey = -1;
                                    }
                                    else if(this.key_down)
                                    {
                                       this.mc.act_movey = 1;
                                    }
                                    if(this.key_left)
                                    {
                                       this.mc.act_movex = -1;
                                    }
                                    else if(this.key_right)
                                    {
                                       this.mc.act_movex = 1;
                                    }
                                    if(this.MP_gamestate == 2)
                                    {
                                       this.mc.act_movex = 0;
                                       this.mc.act_movey = 0;
                                    }
                                    if(this.MP_mode)
                                    {
                                       if(!last_act_fire && Boolean(this.mc.act_fire))
                                       {
                                          if(!this.MP_favor_the_shooter)
                                          {
                                             this.MP_custom_events += ";ss|" + this.MP_myid + "#" + this.mc.tarx + "#" + this.mc.tary;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
                  if(this.MP_mode)
                  {
                     this.VeriftMP(this.mc.b_body,-5);
                     this.VeriftMP(this.mc.b_toe,-5);
                     this.VeriftMP(this.mc.b_leg1,-5);
                     this.VeriftMP(this.mc.b_leg2,-5);
                     this.VeriftMP(this.mc.b_arm1,-5);
                     this.VeriftMP(this.mc.b_arm2,-5);
                     this.VeriftMP(this.mc.b_head_start,-5);
                     this.VeriftMP(this.mc.b_head_end,-5);
                  }
                  if(this.mc.real_hea <= 0)
                  {
                     if(!this.mc.dead)
                     {
                        if(this.mc.hmax > 0 && (!this.MP_mode || !this.spawn))
                        {
                           if(this.mc.voice.death.length > 0)
                           {
                              if(!(this.mc.isplayer && this.MP_mode && (this.MP_myid != i || this.MP_spectator)))
                              {
                                 this.Say(this.mc,this.mc.voice.death[Math.floor(Math.random() * Number(this.mc.voice.death.length))],true);
                              }
                           }
                        }
                        if(i == this.MP_myid)
                        {
                           if(this.CASUAL_MODE)
                           {
                              this.ok = true;
                              betterdist = 0;
                              betteri = -1;
                              this.i4 = 0;
                              while(this.i4 < this.playerstotal && this.ok)
                              {
                                 if(this.mens[this.i4].io)
                                 {
                                    if(this.mens[this.i4].team == this.mc.team)
                                    {
                                       if(this.mens[this.i4].hea > 0)
                                       {
                                          if(!this.mens[this.i4].dying)
                                          {
                                             newdis = this.Dist2D(this.mens[this.i4].x,this.mens[this.i4].y,this.mens[this.MP_myid].x,this.mens[this.MP_myid].y);
                                             if(betteri == -1 || betterdist > newdis)
                                             {
                                                betteri = this.i4;
                                                betterdist = newdis;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 ++this.i4;
                              }
                              if(betteri != -1)
                              {
                                 this.ok = false;
                                 this.MP_myid = betteri;
                                 this.GSPEED = 0.01;
                                 this.new_active.visible = true;
                                 this.new_active.gotoAndPlay(1);
                                 this.PlaySound_full(this.s_team_switch);
                                 this.mens[betteri].isplayer = true;
                                 this.mens[i].isplayer = false;
                                 this.UpdateWeps();
                              }
                              if(this.ok)
                              {
                                 this.darkness.visible = true;
                                 if(!this.MP_spectator)
                                 {
                                    this.xx = Math.random() * Math.PI * 2;
                                    if(this.MP_mode)
                                    {
                                       this.xx *= 0.1;
                                    }
                                    this.game_x += Math.sin(this.xx) * 200;
                                    this.game_y += Math.cos(this.xx) * 200;
                                 }
                                 if(!this.MP_mode)
                                 {
                                    this.LEVEL_END_FORCE = "failed";
                                    this.LAST_ERROR = "YOUR TEAM IS DEAD.";
                                    if(this.HINTS)
                                    {
                                       this.SetHint("Your team is dead.");
                                    }
                                 }
                              }
                           }
                           else
                           {
                              this.darkness.visible = true;
                              if(!this.MP_spectator)
                              {
                                 this.xx = Math.random() * Math.PI * 2;
                                 if(this.MP_mode)
                                 {
                                    this.xx *= 0.1;
                                 }
                                 this.game_x += Math.sin(this.xx) * 200;
                                 this.game_y += Math.cos(this.xx) * 200;
                              }
                              if(!this.MP_mode)
                              {							  
                                 this.LEVEL_END_FORCE = "failed";
                                 if(this.mens[this.MP_myid].lastshotby == this.MP_myid || this.mens[this.MP_myid].lastshotby == -1)
                                 {
                                    this.LAST_ERROR = "BAD LUCK, YOU DIED.";
                                    if(this.HINTS)
                                    {
                                       this.SetHint("Try not to kill yourself.");
                                    }
                                 }
                                 else
                                 {
                                    this.LAST_ERROR = "YOU ARE DEAD.";
                                    if(this.HINTS)
                                    {
                                       this.SetHint("You are dead.");
                                    }
                                 }
                              }
                           }
                        }
                        if(this.mc.hp_legs > 100)
                        {
                           this.mc.hp_legs = 100;
                        }
                        if(this.mc.hp_arms > 100)
                        {
                           this.mc.hp_arms = 100;
                        }
                        if(this.mc.hp_body > 100)
                        {
                           this.mc.hp_body = 100;
                        }
                        if(this.mc.hp_head > 100)
                        {
                           this.mc.hp_head = 100;
                        }
                        if(this.MP_mode && this.MP_myid == i)
                        {
                           if(!this.spawn)
                           {
                              if(this.MP_enc_deaths >= 0)
                              {
                                 ++this.MP_enc_deaths;
                              }
                              this.MP_gbd = this.mc.curwea;
                              try
                              {
                                 if(Number(getTimer()) - Number(this.mc.whenlastshot) > 7000)
                                 {
                                    this.mc.lastshotby = -1;
                                 }
                              }
                              catch(error:Error)
                              {
                                 LAST_ERROR = "Oh! Something terrible happend :(\nData sent incorrectly (1):\n" + error.errorID + " :: " + error.message;
                                 DropGameTimer();
                                 gotoAndStop("menu");
                              }
                              try
                              {
                                 this.MP_kills_in_a_row = 0;
                                 this.MP_custom_events += ";frag|" + i + "#" + this.mc.lastshotby + "#" + this.mc.lastshotbygun + "#" + this.mc.lastshot + "#" + this.r2(Math.random());
                              }
                              catch(error:Error)
                              {
                                 LAST_ERROR = "Oh! Something terrible happend :(\nData sent incorrectly (2):\n" + error.errorID + " :: " + error.message;
                                 DropGameTimer();
                                 gotoAndStop("menu");
                              }
                              if(this.MP_real_deaths == this.MP_enc_deaths - 1 && !this.MP_favor_the_shooter)
                              {
                                 this.MP_custom_events += ";dd|" + i + "#" + this.r2(this.ax[this.mc.b_leg1]) + "#" + this.r2(this.ay[this.mc.b_leg1]) + "#" + this.r2(this.atox[this.mc.b_leg1]) + "#" + this.r2(this.atoy[this.mc.b_leg1]) + "#" + this.r2(this.ax[this.mc.b_leg2]) + "#" + this.r2(this.ay[this.mc.b_leg2]) + "#" + this.r2(this.atox[this.mc.b_leg2]) + "#" + this.r2(this.atoy[this.mc.b_leg2]) + "#" + this.r2(this.ax[this.mc.b_arm1]) + "#" + this.r2(this.ay[this.mc.b_arm1]) + "#" + this.r2(this.atox[this.mc.b_arm1]) + "#" + this.r2(this.atoy[this.mc.b_arm1]) + "#" + this.r2(this.ax[this.mc.b_arm2]) + "#" + this.r2(this.ay[this.mc.b_arm2]) + "#" + this.r2(this.atox[this.mc.b_arm2]) + "#" + this.r2(this.atoy[this.mc.b_arm2]) + "#" + this.r2(this.ax[this.mc.b_body]) + "#" + this.r2(this.ay[this.mc.b_body]) + "#" + this.r2(this.atox[this.mc.b_body]) + "#" + this.r2(this.atoy[this.mc.b_body]) + "#" + this.r2(this.ax[this.mc.b_toe]) + "#" + this.r2(this.ay[this.mc.b_toe]) + "#" + this.r2(this.atox[this.mc.b_toe]) + "#" + this.r2(this.atoy[this.mc.b_toe]) + "#" + this.r2(this.ax[this.mc.b_head_start]) + "#" + this.r2(this.ay[this.mc.b_head_start]) + "#" + this.r2(this.atox[this.mc.b_head_start]) + "#" + this.r2(this.atoy[this.mc.b_head_start]) + "#" + this.r2(this.ax[this.mc.b_head_end]) + "#" + this.r2(this.ay[this.mc.b_head_end]) + "#" + this.r2(this.atox[this.mc.b_head_end]) + "#" + this.r2(this.atoy[this.mc.b_head_end]) + "#" + this.r2(this.ax[this.mc.b_brk1]) + "#" + this.r2(this.ay[this.mc.b_brk1]) + "#" + this.r2(this.atox[this.mc.b_brk1]) + "#" + this.r2(this.atoy[this.mc.b_brk1]) + "#" + this.r2(this.ax[this.mc.b_brk2]) + "#" + this.r2(this.ay[this.mc.b_brk2]) + "#" + this.r2(this.atox[this.mc.b_brk2]) + "#" + this.r2(this.atoy[this.mc.b_brk2]);
                              }
                              else
                              {
                                 this.MP_enc_deaths = -1;
                              }
                              this.darkness.alpha = 0;
                              //this.GCTime();
                           }
                           else
                           {
                              this.mc.alpha = 0;
                              this.spawn = false;
                           }
                        }
                        this.mc.dead = true;
                        if(this.mc.isGhost)
                        {
                           this.mc.alpha = 1;
                        }
                        if(this.mc.hmax > 0)
                        {
                           if(this.mc.team != this.mens[this.MP_myid].team)
                           {
                              ++this.FUN_ELEMINATED;
                              if(this.mc.lastshotby == this.MP_myid)
                              {
                                 this.incBadge(0);
                                 if(this.PRO_BOTS)
                                 {
                                    this.incBadge(19);
                                 }
                                 if(this.mc.lastshotbygun == "swords")
                                 {
                                    this.incBadge(1);
                                    if(this.mc.char == 12)
                                    {
                                       this.incBadge(18);
                                    }
                                 }
                                 if(this.mens[this.MP_myid].dead)
                                 {
                                    this.incBadge(3);
                                 }
                                 else if(this.mens[this.MP_myid].dying)
                                 {
                                    this.incBadge(4);
                                 }
                                 if(!this.mens[this.MP_myid].dead)
                                 {
                                    if(this.mens[this.MP_myid].stability <= 0)
                                    {
                                       this.incBadge(5);
                                    }
                                 }
                              }
                           }
                        }
                        this.mc.dying = true;
                        this.mc.stability = -2;
                        this.mc.arm1.lower.psi.visible = false;
                        this.mc.arm2.lower.psi.visible = false;
                        if(this.mc.ondeath != -1)
                        {
                           if(!this.mc.isplayer || i == this.MP_myid || !this.MP_mode)
                           {
                              this.TRIGGER_PLAYER_INITIATOR = i;
                              this.TRIGGER_PLAYER_KILLER = this.mc.lastshotby;
                              this.triggers[this.mc.ondeath].forcehyperjump = false;
                              this.EXEC_TRIGGER(this.mc.ondeath);
                           }
                        }
                     }
                  }
                  if(this.MP_mode)
                  {
                     this.VeriftMP(this.mc.b_body,-4);
                     this.VeriftMP(this.mc.b_toe,-4);
                     this.VeriftMP(this.mc.b_leg1,-4);
                     this.VeriftMP(this.mc.b_leg2,-4);
                     this.VeriftMP(this.mc.b_arm1,-4);
                     this.VeriftMP(this.mc.b_arm2,-4);
                     this.VeriftMP(this.mc.b_head_start,-4);
                     this.VeriftMP(this.mc.b_head_end,-4);
                  }
                  if((this.mc.real_hea > 0 || this.mc.last_shoot_chance) && this.mc.stability > -1)
                  {
                     if(i == this.MP_myid && this.key_grab || Boolean(this.mc.brk_arms))
                     {
                        if(this.mc.incar == -1)
                        {
                           if(this.mc.curwea != -1)
                           {
                              if(this.mc.can_drop_guns)
                              {
                                 this.mc2 = this.guns[this.mc.curwea];
                                 this.mc2.picken_by = -1;
                                 if(i == this.MP_myid && this.key_grab)
                                 {
                                    this.IgnoreGunPickTemp(this.mc2);
                                 }
                                 if(!this.mc.brk_arms)
                                 {
                                    this.atox[this.mc2.b_p1] += Math.sin(this.mc.ang) * 7;
                                    this.atoy[this.mc2.b_p1] += Math.cos(this.mc.ang) * 7 - 2;
                                    this.atox[this.mc2.b_p2] += Math.sin(this.mc.ang) * 1;
                                    this.atoy[this.mc2.b_p2] += Math.cos(this.mc.ang) * 1 + 2;
                                    this.ax[this.mc2.b_p1] += Number(this.mc.side) * 20;
                                    this.ax[this.mc2.b_p2] += Number(this.mc.side) * 20;
                                 }
                                 this.WakeUpAtom(this.mc2.b_p1);
                                 this.WakeUpAtom(this.mc2.b_p2);
                                 this.mc.curwea = -1;
                                 this.ChangedGun(i);
                              }
                           }
                        }
                     }
                     if(!this.mc.brk_arms)
                     {
                        if(this.mc.sword_spam_strength < 1)
                        {
                           if(this.MP_mode)
                           {
                              this.mc.sword_spam_strength = Math.min(1,this.mc.sword_spam_strength + this.thispulspeed / 5);
                           }
                           else
                           {
                              this.mc.sword_spam_strength = Math.min(1,this.mc.sword_spam_strength + this.thispulspeed / 2);
                           }
                        }
                        if(this.mc.mp_must_shoot_once != undefined && this.mc.mp_must_shoot_once > Number(getTimer()) - 500)
                        {
                           this.mc.act_fire = true;
                        }
                        if(Boolean(this.mc.act_fire) && this.mc.wep_pause <= 0)
                        {
                           if(this.mc.curwea != -1)
                           {
                              this.mc2 = this.guns[this.mc.curwea];
                              if(this.mc2.ready)
                              {
                                 if(this.mc2.CanShoot == undefined || Boolean(this.mc2.CanShoot()))
                                 {
                                    if(this.mc2.forcars && this.mc.incar != -1 || !this.mc2.forcars && this.mc.incar == -1)
                                    {
                                       this.PAlert(this.ax[this.mc2.b_p2],this.ay[this.mc2.b_p2]);
                                       if(this.mc2.onshot != -1)
                                       {
                                          this.TRIGGER_PLAYER_INITIATOR = i;
                                          if(i == this.MP_myid || !this.mc.isplayer)
                                          {
                                             if(this.EXEC_TRIGGER(this.mc2.onshot))
                                             {
                                                if(i == this.MP_myid && this.MP_mode)
                                                {
                                                   this.MP_custom_events += ";exec|" + this.mc2.onshot + "#" + i + "#" + -1;
                                                }
                                             }
                                          }
                                       }
                                       this.u = (Math.random() * 2 - 1) * Number(this.mc2.av) * Number(this.mc2.av) * 2;
                                       this.mc2.av += this.mc2.stat_averange_add;
                                       if(this.mc.stability < 0.5)
                                       {
                                          this.xx = this.u - Math.PI / 2 - this.mc2.rotation / 180 * Math.PI;
                                       }
                                       else
                                       {
                                          this.xx = this.u + this.mc.ang + Math.PI;
                                       }
                                       init_shot_rot = this.xx;
                                       this.mc.mp_must_shoot_once = undefined;
                                       this.i3 = 0;
                                       while(this.i3 < this.mc2.stat_count)
                                       {
                                          if(this.puls[this.pulscur] != null)
                                          {
                                             if(this.game.contains(this.puls[this.pulscur]))
                                             {
                                                this.puls[this.pulscur].visible = false;
                                                this.game.removeChild(this.puls[this.pulscur]);
                                                this.puls[this.pulscur] = null;
                                             }
                                             else if(this.graphics_3d_front.contains(this.puls[this.pulscur]))
                                             {
                                                this.puls[this.pulscur].visible = false;
                                                this.graphics_3d_front.removeChild(this.puls[this.pulscur]);
                                                this.puls[this.pulscur] = null;
                                             }
                                          }
                                          if(this.mc2.stat_class == 0 || this.mc2.stat_class == 5 || this.mc2.stat_class == 2 || this.mc2.stat_bullets == 9)
                                          {
                                             this.puls[this.pulscur] = this.graphics_3d_front.addChildAt(new lazer(),this.graphics_3d_front.numChildren);
                                          }
                                          else
                                          {
                                             this.puls[this.pulscur] = this.game.addChildAt(new lazer(),this.game.numChildren);
                                          }
                                          this.NewBullet(this.puls[this.pulscur]);
                                          if(this.MP_mode && this.mc.isplayer && this.mc2.stat_class != 4)
                                          {
                                             if(i == this.MP_myid)
                                             {
                                                this.puls[this.pulscur].lag = this.MP_ping2 / this.c_sim_rt2;
                                             }
                                             else
                                             {
                                                this.puls[this.pulscur].lag = -this.MP_ping2 / this.c_sim_rt2;
                                             }
                                          }
                                          else
                                          {
                                             this.puls[this.pulscur].lag = 0;
                                          }
                                          if(this.MP_favor_the_shooter)
                                          {
                                             this.puls[this.pulscur].lag = 0;
                                          }
                                          if(i == this.MP_myid)
                                          {
                                             ++this.FUN_SPENT_BULLETS;
                                          }
                                          this.NoMouse(this.puls[this.pulscur]);
                                          this.xx = init_shot_rot;
                                          if(this.MP_mode && i != this.MP_myid && Boolean(this.mc.isplayer))
                                          {
                                             if(this.MP_favor_the_shooter)
                                             {
                                                if(Boolean(this.mc.mp_shot_correct) && this.mc.mp_shot_correct.time > Number(getTimer()) - 1000)
                                                {
                                                   if(this.TraceLineF_nopushers(this.mc.mp_shot_correct.x,this.mc.mp_shot_correct.y,this.ax[this.mc2.b_p2],this.ay[this.mc2.b_p2]) || this.TraceLineF_nopushers(this.mc.mp_shot_correct.x,this.mc.mp_shot_correct.y,this.ax[this.mc.b_body],this.ay[this.mc.b_body]) || this.TraceLineF_nopushers(this.ax[this.mc.b_body],this.mc.mp_shot_correct.y,this.ax[this.mc.b_body],this.ay[this.mc.b_body]) && this.TraceLineF_nopushers(this.ax[this.mc.b_body],this.mc.mp_shot_correct.y,this.mc.mp_shot_correct.x,this.mc.mp_shot_correct.y) || this.mc.hea <= 0)
                                                   {
                                                      this.xx = this.mc.mp_shot_correct.xx;
                                                      ping_limited = Math.min(this.mc.ping + this.MP_ping2,400) + 32;
                                                      correct_not_fine = true;
                                                      step = 0;
                                                      while(step <= ping_limited && correct_not_fine)
                                                      {
                                                         side = -1;
                                                         while(side <= 1 && correct_not_fine)
                                                         {
                                                            if(step > 0 || side == -1)
                                                            {
                                                               bullet_dist = this.Dist2D(this.mc.mp_shot_correct.x,this.mc.mp_shot_correct.y,this.ax[this.mc2.b_p2] + Number(this.atox[this.mc.b_body]) * step / 1000 * 30 * side,this.ay[this.mc2.b_p2] + Number(this.atoy[this.mc.b_body]) * step / 1000 * 30 * side);
                                                               if(bullet_dist < Math.max(60,this.MP_ping2 + 60) + (this.mc.hea <= 0 ? 400 : 200))
                                                               {
                                                                  if(step == 0 || this.mc.hea <= 0 || this.TraceLineF_nopushers(this.ax[this.mc2.b_p2],this.ay[this.mc2.b_p2],this.ax[this.mc2.b_p2] + Number(this.atox[this.mc.b_body]) * step / 1000 * 30 * side,this.ay[this.mc2.b_p2] + Number(this.atoy[this.mc.b_body]) * step / 1000 * 30 * side))
                                                                  {
                                                                     this.puls[this.pulscur].x = this.mc.mp_shot_correct.x;
                                                                     this.puls[this.pulscur].y = this.mc.mp_shot_correct.y;
                                                                     correct_not_fine = false;
                                                                     break;
                                                                  }
                                                               }
                                                            }
                                                            side += 2;
                                                         }
                                                         step += 16;
                                                      }
                                                      if(correct_not_fine)
                                                      {
                                                         this.puls[this.pulscur].x = (Number(this.mc.mp_shot_correct.x) - Number(this.ax[this.mc2.b_p2])) / bullet_dist * 60 + this.ax[this.mc2.b_p2];
                                                         this.puls[this.pulscur].y = (Number(this.mc.mp_shot_correct.y) - Number(this.ay[this.mc2.b_p2])) / bullet_dist * 60 + this.ay[this.mc2.b_p2];
                                                      }
                                                   }
                                                   if(this.mc.real_hea > 0 && this.mc.hea > 0)
                                                   {
                                                      if(this.Dist2D(Math.sin(this.xx),Math.cos(this.xx),Math.sin(init_shot_rot),Math.cos(init_shot_rot)) > Math.max(0.7,this.MP_ping2 / 50 * 0.7))
                                                      {
                                                         this.xx = init_shot_rot;
                                                      }
                                                   }
                                                }
                                                else
                                                {
                                                   this.puls[this.pulscur].x = this.ax[this.mc2.b_p2];
                                                   this.puls[this.pulscur].y = this.ay[this.mc2.b_p2];
                                                }
                                             }
                                             else
                                             {
                                                this.puls[this.pulscur].x = Number(this.ax[this.mc2.b_p2]) - Number(this.mc.mp_offset_x);
                                                this.puls[this.pulscur].y = Number(this.ay[this.mc2.b_p2]) - Number(this.mc.mp_offset_y);
                                             }
                                          }
                                          else
                                          {
                                             this.puls[this.pulscur].x = this.ax[this.mc2.b_p2];
                                             this.puls[this.pulscur].y = this.ay[this.mc2.b_p2];
                                          }
                                          this.xx += Number(this.mc2.stat_averange) / Number(this.mc2.stat_count) * this.i3 + Math.random() * Number(this.mc2.stat_averange) / Number(this.mc2.stat_count) - Number(this.mc2.stat_averange) / 2;
                                          this.puls[this.pulscur].attached = -1;
                                          this.puls[this.pulscur].alpha = 0;
                                          this.puls[this.pulscur].thisis = this.mc2.model;
                                          this.puls[this.pulscur].cclass = this.mc2.stat_class;
                                          this.puls[this.pulscur].nx = this.ax[this.mc.b_body];
                                          this.puls[this.pulscur].ny = this.ay[this.mc.b_body];
                                          this.puls[this.pulscur].power = this.mc2.stat_power;
                                          this.puls[this.pulscur].maxpower = this.mc2.stat_power;
                                          this.puls[this.pulscur].knockback_multiplier = this.mc2.knockback_multiplier;
                                          this.puls[this.pulscur].inwater = this.ainwater[this.mc.b_arm1] && this.wa_friction[this.ainwater_shape[this.mc.b_arm1]];
                                          if(Math.abs(Number(this.puls[this.pulscur].x) - Number(this.puls[this.pulscur].nx)) > 350 || Math.abs(Number(this.puls[this.pulscur].y) - Number(this.puls[this.pulscur].ny)) > 350)
                                          {
                                             this.puls[this.pulscur].x = this.puls[this.pulscur].nx;
                                             this.puls[this.pulscur].y = this.puls[this.pulscur].ny;
                                          }
                                          if(this.MP_favor_the_shooter && i == this.MP_myid)
                                          {
                                             if(getTimer() > this.MP_last_clear_shot_time + 150)
                                             {
                                                this.MP_last_clear_shot_time = getTimer();
                                                this.MP_custom_events += ";acs|" + [this.MP_myid,this.puls[this.pulscur].x,this.puls[this.pulscur].y,init_shot_rot].join("#");
                                             }
                                          }
                                          this.puls[this.pulscur].lastin = i;
                                          this.puls[this.pulscur].lastinbox = this.boxestotal;
                                          this.puls[this.pulscur].master = i;
                                          this.puls[this.pulscur].gotoAndStop(this.mc2.stat_bullets);
                                          this.puls[this.pulscur].rotation = 90 - this.xx / Math.PI * 180;
                                          this.yy = Math.cos(this.xx);
                                          this.xx = Math.sin(this.xx);
                                          this.x4 = this.mc2.stat_power;
                                          if(this.x4 > 3 / Number(this.mc2.stat_count))
                                          {
                                             this.x4 = 3 / Number(this.mc2.stat_count);
                                          }
                                          this.x4 *= this.mc2.recoil_multiplier;
                                          this.puls[this.pulscur].scaleX = this.puls[this.pulscur].scaleY = this.mc2.projectile_scale;
                                          this.atox[this.mc.b_arm1] += this.xx * 5 * this.x4;
                                          this.atoy[this.mc.b_arm1] += this.yy * 5 * this.x4 - 3 * this.x4;
                                          this.atox[this.mc.b_arm2] += this.xx * 5 * this.x4;
                                          this.atoy[this.mc.b_arm2] += this.yy * 5 * this.x4;
                                          this.atox[this.mc.b_body] += this.xx * 2 * this.x4;
                                          this.atoy[this.mc.b_body] += this.yy * 2 * this.x4;
                                          this.atox[this.mc.b_toe] += this.xx * 1 * this.x4;
                                          this.atoy[this.mc.b_toe] += this.yy * 1 * this.x4;
                                          this.atox[this.mc.b_head_start] += this.xx * 1 * this.x4;
                                          this.atoy[this.mc.b_head_start] += this.yy * 1 * this.x4;
                                          this.atox[this.mc.b_head_end] += this.xx * 1 * this.x4;
                                          this.atoy[this.mc.b_head_end] += this.yy * 1 * this.x4;
                                          this.puls[this.pulscur].life = 0;
                                          this.puls[this.pulscur].maxbulletlife = this.maxbulletlife;
                                          if(this.mc2.stat_class == 0 || this.mc2.stat_class == 2)
                                          {
                                             this.puls[this.pulscur].spx = -this.xx * this.pspeed;
                                             this.puls[this.pulscur].spy = -this.yy * this.pspeed;
                                             this.puls[this.pulscur].x += this.xx * 25;
                                             this.puls[this.pulscur].y += this.yy * 25;
                                          }
                                          else if(this.mc2.stat_class == 5)
                                          {
                                             this.puls[this.pulscur].spx = -this.xx * 30 * this.plasma_speed_mult;
                                             this.puls[this.pulscur].spy = -this.yy * 30 * this.plasma_speed_mult;
                                             this.puls[this.pulscur].maxbulletlife = this.maxbulletlife * 1.5;
                                             this.puls[this.pulscur].rot_glow.visible = true;
                                          }
                                          else if(this.mc2.stat_class == 1)
                                          {
                                             this.puls[this.pulscur].spx = -this.xx * 25 * this.rocket_speed_mult;
                                             this.puls[this.pulscur].spy = -this.yy * 25 * this.rocket_speed_mult;
                                             this.puls[this.pulscur].maxbulletlife = this.maxbulletlife * 1.4;
                                             if(this.mc2.stat_bullets == 9)
                                             {
                                                this.puls[this.pulscur].spx = -this.xx * 35 * this.rocket_speed_mult;
                                                this.puls[this.pulscur].spy = -this.yy * 35 * this.rocket_speed_mult;
                                                this.puls[this.pulscur].maxbulletlife = 180;
                                             }
                                          }
                                          else if(this.mc2.stat_class == 4 || this.mc2.stat_class == 6)
                                          {
                                             if(this.mc2.stat_bullets == 14)
                                             {
                                                this.puls[this.pulscur].maxbulletlife = 300 + Math.random() * 60;
                                                this.puls[this.pulscur].spx = -this.xx * 19 * (Math.random() * 0.3 + 0.7) * this.grenade_speed_mult;
                                                this.puls[this.pulscur].spy = -this.yy * 19 * (Math.random() * 0.3 + 0.7) * this.grenade_speed_mult - 2;
                                                this.puls[this.pulscur].dead = false;
                                                this.puls[this.pulscur].attached = this.CreatePoint(this.puls[this.pulscur].x,this.puls[this.pulscur].y,this.puls[this.pulscur].spx,this.puls[this.pulscur].spy,6 * Number(this.mc2.projectile_scale),true,10,-300 - this.pulscur);
                                                this.aactive[this.puls[this.pulscur].attached] = 1000;
                                                this.aactive[-300 - this.pulscur] = true;
                                             }
                                             else
                                             {
                                                this.puls[this.pulscur].spx = -this.xx * 19 * this.grenade_speed_mult;
                                                this.puls[this.pulscur].spy = -this.yy * 19 * this.grenade_speed_mult;
                                                this.puls[this.pulscur].maxbulletlife = 90;
                                                if(this.mc2.stat_bullets == 19)
                                                {
                                                   this.puls[this.pulscur].nadekind = 3;
                                                   this.puls[this.pulscur].gotoAndStop(19);
                                                   this.puls[this.pulscur].maxbulletlife = 60 + 30 * 60;
                                                   this.puls[this.pulscur].hasexploded = false;
                                                   this.puls[this.pulscur].radius = 0;
                                                   this.puls[this.pulscur].hea = 10;
                                                   this.puls[this.pulscur].heapo = 90;
                                                   this.puls[this.pulscur].losthea = 0;
                                                   this.puls[this.pulscur].spx = Number(this.mc.side) * 0.5;
                                                   this.puls[this.pulscur].spy = 4;
                                                }
                                                if(this.mc2.stat_bullets == 45)
                                                {
                                                   this.puls[this.pulscur].maxbulletlife = 30 * 15 + Math.random() * 15;
                                                }
                                                this.puls[this.pulscur].attached = this.CreatePoint(this.puls[this.pulscur].x,this.puls[this.pulscur].y,this.puls[this.pulscur].spx,this.puls[this.pulscur].spy,6 * Number(this.mc2.projectile_scale),true,8,-300 - this.pulscur);
                                                this.aactive[this.puls[this.pulscur].attached] = 1000;
                                                this.aactive[-300 - this.pulscur] = true;
                                             }
                                             if(this.MP_favor_the_shooter && Boolean(this.mc.isplayer))
                                             {
                                                if(this.mc.stability < 0.5)
                                                {
                                                   this.atox[this.puls[this.pulscur].attached] += this.atox[this.mc.b_body];
                                                   this.atoy[this.puls[this.pulscur].attached] += this.atoy[this.mc.b_body];
                                                }
                                                else
                                                {
                                                   this.atox[this.puls[this.pulscur].attached] += this.mc.tox;
                                                   this.atoy[this.puls[this.pulscur].attached] += this.mc.toy;
                                                }
                                             }
                                             this.SetAtomOriginalPosition(this.puls[this.pulscur].attached,this.ax[this.mc.b_body],this.ay[this.mc.b_body]);
                                          }
                                          this.nextpul();
                                          ++this.i3;
                                       }
                                       if(this.mc.stability > 0 && (!this.mc.stand || Number(this.mc2.stat_power) * Number(this.mc2.stat_count) > 5 / Number(this.mc.mobility)))
                                       {
                                          this.xx *= this.mc2.recoil_multiplier;
                                          this.yy *= this.mc2.recoil_multiplier;
                                          if(this.mc.sit > 0.5 && Boolean(this.mc.stand))
                                          {
                                             this.mc.tox += this.xx * 0.2 * Number(this.mc2.stat_power) * Number(this.mc2.stat_count) * Number(this.mc.mobility);
                                             this.mc.toy += this.yy * 0.2 * Number(this.mc2.stat_power) * Number(this.mc2.stat_count) * Number(this.mc.mobility);
                                          }
                                          else
                                          {
                                             this.mc.tox += this.xx * 0.5 * Number(this.mc2.stat_power) * Number(this.mc2.stat_count) * Number(this.mc.mobility);
                                             this.mc.toy += this.yy * 0.5 * Number(this.mc2.stat_power) * Number(this.mc2.stat_count) * Number(this.mc.mobility);
                                          }
                                          if(this.mc2.recoil_multiplier > 0)
                                          {
                                             if(this.mc.stand)
                                             {
                                                if(this.mc.sit > 0.5)
                                                {
                                                   this.mc.stability = Math.max(0.5,Number(this.mc.stability) - Number(this.mc2.stat_power) * Number(this.mc2.stat_count) * Number(this.mc.mobility) * 0.1);
                                                }
                                                else
                                                {
                                                   this.mc.stability = Math.max(0.2,Number(this.mc.stability) - Number(this.mc2.stat_power) * Number(this.mc2.stat_count) * Number(this.mc.mobility) * 0.1);
                                                }
                                             }
                                             else
                                             {
                                                this.mc.stability -= Number(this.mc2.stat_power) * Number(this.mc2.stat_count) * Number(this.mc.mobility) * 0.1;
                                                if(this.mc.stability <= 0)
                                                {
                                                   this.mc.stability = -1;
                                                }
                                             }
                                          }
                                       }
                                       if(this.mc2.stat_class == 7)
                                       {
                                          this.i3 = 0;
                                          while(this.i3 < this.playerstotal)
                                          {
                                             if(this.mens[this.i3].io)
                                             {
                                                if(this.mens[this.i3].can_be_hit)
                                                {
                                                   if(this.ax[this.mc.b_arm1] > Number(this.ax[this.mens[this.i3].b_body]) - 60)
                                                   {
                                                      if(this.ax[this.mc.b_arm1] < this.ax[this.mens[this.i3].b_body] + 60)
                                                      {
                                                         if(this.ay[this.mc.b_arm1] > Number(this.ay[this.mens[this.i3].b_body]) - 40)
                                                         {
                                                            if(this.ay[this.mc.b_arm1] < this.ay[this.mens[this.i3].b_body] + 80)
                                                            {
                                                               if(this.MP_mode && this.MP_myid == this.mc.idd || this.MP_mode && !this.MP_favor_the_shooter || !this.MP_mode || !this.mc.isplayer)
                                                               {
                                                                  this.HealGunApplied(this.i3,this.mc,this.mc2.stat_power,false,this.mc2.model);
                                                               }
                                                               if(this.MP_mode && this.MP_favor_the_shooter && this.MP_myid == this.mc.idd)
                                                               {
                                                                  this.MP_custom_events += ";heal|" + [this.MP_myid,this.i3,this.mc2.stat_power,0,this.mc2.model].join("#");
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                             ++this.i3;
                                          }
                                       }
                                       this.mc2.ready = false;
                                       this.mc2.floatframe = 2;
                                       this.mc2.gotoAndStop(2);
                                       if(this.mc2.sou != null)
                                       {
                                          this.PlaySound(this.mc2.sou,this.mc2.x,this.mc2.y);
                                       }
                                    }
                                 }
                              }
                           }
                           if(this.mc.curwea == -1 && this.mc.incar == -1)
                           {
                              if(this.mc.arm1.lower.psi.visible)
                              {
                                 this.xx = this.mc.ang + Math.PI;
                                 this.yy = Math.cos(this.xx);
                                 this.xx = Math.sin(this.xx);
                                 if(!this.mc.stand && this.atoy[this.mc.b_body] < 0 && !this.mc.dying && this.mc.boost > 0)
                                 {
                                    this.xx2 = 0.33;
                                    this.xx2 *= this.mc.boost;
                                    this.mc.boost = Math.max(0,Number(this.mc.boost) - 0.45 * this.thispulspeed * this.xx2);
                                    this.xx2 *= 2;
                                    this.xx2 *= Math.min(1,this.mc.mobility);
                                    this.xx *= this.BOOST_MULT;
                                    this.mc.tox -= this.xx * this.xx2 * this.thispulspeed;
                                    this.mc.toy -= this.yy * this.xx2 * this.thispulspeed;
                                    if(this.GET_LITE_PHYS())
                                    {
                                       this.xx2 *= this.BOOST_LOW_PHYSICS;
                                    }
                                    else
                                    {
                                       this.xx2 *= this.BOOST_HIGH_PHYSICS;
                                    }
                                    this.atox[this.mc.b_body] -= this.xx * this.xx2 * this.thispulspeed * 2;
                                    this.atoy[this.mc.b_body] -= this.yy * this.xx2 * this.thispulspeed * 2;
                                    this.atox[this.mc.b_head_start] -= this.xx * this.xx2 * this.thispulspeed * 2;
                                    this.atoy[this.mc.b_head_start] -= this.yy * this.xx2 * this.thispulspeed * 2;
                                    this.atox[this.mc.b_head_end] -= this.xx * this.xx2 * this.thispulspeed * 2;
                                    this.atoy[this.mc.b_head_end] -= this.yy * this.xx2 * this.thispulspeed * 2;
                                    this.atox[this.mc.b_arm1] -= this.xx * this.xx2 * this.thispulspeed;
                                    this.atoy[this.mc.b_arm1] -= this.yy * this.xx2 * this.thispulspeed;
                                    this.atox[this.mc.b_arm2] -= this.xx * this.xx2 * this.thispulspeed;
                                    this.atoy[this.mc.b_arm2] -= this.yy * this.xx2 * this.thispulspeed;
                                 }
                                 this.mc.melee_ani += 0.4 * this.thispulspeed;
                                 this.mc.melee_tim += 0.4 * this.thispulspeed;
                                 if(this.mc.melee_ani > Math.PI * 2)
                                 {
                                    this.mc.melee_ani -= Math.PI * 2;
                                 }
                                 if(this.mc.melee_tim > Math.PI)
                                 {
                                    if(this.mc.sword_spam_strength >= 1)
                                    {
                                       this.mc.melee_tim = 0;
                                       if(this.last_psi == 1)
                                       {
                                          this.PlaySound(this.s_psi1,this.mc.x,this.mc.y - 50);
                                          if(Math.random() > 0.5)
                                          {
                                             this.last_psi = 2;
                                          }
                                          else
                                          {
                                             this.last_psi = 3;
                                          }
                                       }
                                       else if(this.last_psi == 2)
                                       {
                                          this.PlaySound(this.s_psi2,this.mc.x,this.mc.y - 50);
                                          if(Math.random() > 0.5)
                                          {
                                             this.last_psi = 1;
                                          }
                                          else
                                          {
                                             this.last_psi = 3;
                                          }
                                       }
                                       else
                                       {
                                          this.PlaySound(this.s_psi3,this.mc.x,this.mc.y - 50);
                                          if(Math.random() > 0.5)
                                          {
                                             this.last_psi = 1;
                                          }
                                          else
                                          {
                                             this.last_psi = 2;
                                          }
                                       }
                                       if(this.puls[this.pulscur] != null)
                                       {
                                          if(this.game.contains(this.puls[this.pulscur]))
                                          {
                                             this.game.removeChild(this.puls[this.pulscur]);
                                             this.puls[this.pulscur] = null;
                                          }
                                       }
                                       this.puls[this.pulscur] = this.game.addChildAt(new lazer(),0);
                                       this.NewBullet(this.puls[this.pulscur]);
                                       this.NoMouse(this.puls[this.pulscur]);
                                       if(this.MP_mode && i == this.MP_myid)
                                       {
                                          this.puls[this.pulscur].lag = this.MP_ping2 / this.c_sim_rt2 * 2;
                                       }
                                       else
                                       {
                                          this.puls[this.pulscur].lag = 0;
                                       }
                                       if(this.MP_favor_the_shooter)
                                       {
                                          this.puls[this.pulscur].lag = 0;
                                       }
                                       this.mc.mp_must_shoot_once = undefined;
                                       this.puls[this.pulscur].life = 0;
                                       this.puls[this.pulscur].thisis = "swords";
                                       this.puls[this.pulscur].maxbulletlife = 6;
                                       this.puls[this.pulscur].cclass = 3;
                                       this.puls[this.pulscur].x = this.ax[this.mc.b_body];
                                       this.puls[this.pulscur].y = this.ay[this.mc.b_body];
                                       this.puls[this.pulscur].nx = this.ax[this.mc.b_body];
                                       this.puls[this.pulscur].ny = this.ay[this.mc.b_body];
                                       this.puls[this.pulscur].power = 3.5 * Number(this.mc.scale) * Number(this.mc.sword_spam_strength);
                                       this.puls[this.pulscur].knockback_multiplier = 1;
                                       this.puls[this.pulscur].inwater = this.ainwater[this.mc.b_arm2] && this.wa_friction[this.ainwater_shape[this.mc.b_arm2]];
                                       this.puls[this.pulscur].alpha = 0;
                                       this.puls[this.pulscur].master = i;
                                       this.puls[this.pulscur].gotoAndStop(1);
                                       this.puls[this.pulscur].lastin = i;
                                       this.puls[this.pulscur].lastinbox = this.boxestotal;
                                       this.puls[this.pulscur].spx = -this.xx * 10 * Number(this.mc.scale);
                                       this.puls[this.pulscur].spy = -this.yy * 10 * Number(this.mc.scale);
                                       this.nextpul();
                                       this.mc.sword_spam_strength = 0;
                                    }
                                 }
                              }
                           }
                        }
                        else
                        {
                           this.mc.melee_ani += Math.PI / 2;
                           this.mc.melee_tim = Math.PI * 2 + 1;
                           if(this.mc.wep_pause > 0)
                           {
                              this.mc.wep_pause -= 0.4 * this.thispulspeed;
                           }
                        }
                     }
                  }
                  this.mc.last_shoot_chance = false;
                  if(this.MP_mode)
                  {
                     this.VeriftMP(this.mc.b_body,-3);
                     this.VeriftMP(this.mc.b_toe,-3);
                     this.VeriftMP(this.mc.b_leg1,-3);
                     this.VeriftMP(this.mc.b_leg2,-3);
                     this.VeriftMP(this.mc.b_arm1,-3);
                     this.VeriftMP(this.mc.b_arm2,-3);
                     this.VeriftMP(this.mc.b_head_start,-3);
                     this.VeriftMP(this.mc.b_head_end,-3);
                  }
                  if(this.mc.y > this.g_maxy)
                  {
                     this.mc.hea = 0;
                     this.mc.lastshot = "body";
                     this.mc.lastshotbygun = "nothing";
                  }
                  if(!this.OpenTop)
                  {
                     if(this.mc.y < this.g_miny || this.mc.x < this.g_minx || this.mc.x > this.g_maxx)
                     {
                        this.mc.hea = 0;
                        this.mc.lastshot = "body";
                        this.mc.lastshotbygun = "nothing";
                     }
                  }
                  this.i2 = 0;
                  while(this.i2 < this.pushstotal)
                  {
                     if(this.mc.x > Number(this.pushx[this.i2]) - 150)
                     {
                        if(this.mc.x < this.pushw[this.i2] + 150)
                        {
                           if(this.mc.y > Number(this.pushy[this.i2]) - 150)
                           {
                              if(this.mc.y < this.pushh[this.i2] + 240)
                              {
                                 cx = Math.min(this.ax[this.mc.b_leg1],Math.min(this.ax[this.mc.b_leg2],Math.min(this.ax[this.mc.b_head_end],Math.min(this.ax[this.mc.b_body],Math.min(this.ax[this.mc.b_toe]))))) - 10;
                                 this.xx = Math.max(this.ax[this.mc.b_leg1],Math.max(this.ax[this.mc.b_leg2],Math.max(this.ax[this.mc.b_head_end],Math.min(this.ax[this.mc.b_body],Math.max(this.ax[this.mc.b_toe]))))) + 10;
                                 cy = Math.min(this.ay[this.mc.b_leg1],Math.min(this.ay[this.mc.b_leg2],Math.min(this.ay[this.mc.b_head_end],Math.min(this.ay[this.mc.b_body],Math.min(this.ay[this.mc.b_toe]))))) - 10;
                                 this.yy = Math.max(this.ay[this.mc.b_leg1],Math.max(this.ay[this.mc.b_leg2],Math.max(this.ay[this.mc.b_head_end],Math.min(this.ay[this.mc.b_body],Math.max(this.ay[this.mc.b_toe]))))) + 10;
                                 if(!(this.xx < this.pushx[this.i2] || cx > this.pushw[this.i2] || (this.yy < this.pushy[this.i2] || cy > this.pushh[this.i2])))
                                 {
                                    this.mc.tox += Number(this.pushtox[this.i2]) * this.thispulspeed;
                                    this.mc.toy += Number(this.pushtoy[this.i2]) * this.thispulspeed;
                                    this.mc.stability -= Number(this.pushstab[this.i2]) * 0.01 * this.thispulspeed;
                                    if(this.pushdamage[this.i2] != 0 && !this.mc.dead)
                                    {
                                       if(!this.MP_mode || this.MP_myid == i || !this.mc.isplayer)
                                       {
                                          this.mc.hea -= Math.abs(Number(this.pushdamage[this.i2]) * this.thispulspeed);
                                          this.mc.lastshot = "body";
                                          this.mc.lastshotbygun = "nothing";
                                       }
                                       if(this.pushdamage[this.i2] < 0)
                                       {
                                          this.u = this.mc.x - 20 + Math.random() * 40;
                                          this.v = this.mc.y - Math.random() * 80;
                                          if(this.u < this.pushx[this.i2])
                                          {
                                             this.u = this.pushx[this.i2];
                                          }
                                          if(this.u > this.pushw[this.i2])
                                          {
                                             this.u = this.pushw[this.i2];
                                          }
                                          if(this.v < this.pushy[this.i2])
                                          {
                                             this.v = this.pushy[this.i2];
                                          }
                                          if(this.v > this.pushh[this.i2])
                                          {
                                             this.v = this.pushh[this.i2];
                                          }
                                          if(this.mc.hea <= 0)
                                          {
                                             if(this.MP_myid == i && !this.CASUAL_MODE || this.mc.team != this.mens[this.MP_myid].team)
                                             {
                                                if(this.mc.hp_body > 0)
                                                {
                                                   this.mc.hp_body = 0;
                                                }
                                             }
                                          }
                                          this.effcolor = i;
                                          this.FlowAt(this.u,this.v,0,-3 + Math.random() * 6,-3 + Math.random() * 6,5);
                                       }
                                       if(Math.random() > 0.95 || this.pushdamage[this.i2] < 0)
                                       {
                                          this.Hurt(i);
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                     ++this.i2;
                  }
                  if(this.mc.hea > 0)
                  {
                     this.mc.x += Number(this.mc.tox) * this.thispulspeed;
                     this.mc.y += Number(this.mc.toy) * this.thispulspeed;
                     this.mc.toy += this.gravity * this.thispulspeed;
                     this.mc.stand = false;
                     this.hup = false;
                     if(this.MP_mode)
                     {
                        this.VeriftMP(this.mc.b_body,-2);
                        this.VeriftMP(this.mc.b_toe,-2);
                        this.VeriftMP(this.mc.b_leg1,-2);
                        this.VeriftMP(this.mc.b_leg2,-2);
                        this.VeriftMP(this.mc.b_arm1,-2);
                        this.VeriftMP(this.mc.b_arm2,-2);
                        this.VeriftMP(this.mc.b_head_start,-2);
                        this.VeriftMP(this.mc.b_head_end,-2);
                     }
                     if(this.mc.incar == -1)
                     {
                        if(this.mc.stability >= 0)
                        {
                           this.x4 = 0;
                           this.y4 = 0;
                           this.retux = 0;
                           this.retuy = 0;
                           this.rx = 0;
                           this.ry = 0;
                           this.ok3 = true;
                           for each(this.i2 in this.GetNearBoxBSP_at(this.mc.x,this.mc.y - 40))
                           {
                              cx = Number(this.boxx[this.i2]) - this.PLAYER_WIDTH * Number(this.mc.scale);
                              this.xx = this.boxx[this.i2] + this.boxw[this.i2] + this.PLAYER_WIDTH * Number(this.mc.scale);
                              cy = this.boxy[this.i2] + Number(this.mc.sit) * this.sitmax * Number(this.mc.scale);
                              this.yy = this.boxy[this.i2] + this.boxh[this.i2] + 82 * Number(this.mc.scale);
                              this.xx2 = this.boxw[this.i2];
                              this.yy2 = this.boxh[this.i2];
                              this.Collision(this.mc,this.mc.idd,cx,this.xx,cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                           }
                           this.ok2 = false;
                           this.i2 = 0;
                           while(this.i2 < this.doorstotal)
                           {
                              this.x4 = this.doors[this.i2].tox;
                              this.y4 = this.doors[this.i2].toy;
                              cx = Number(this.doors[this.i2].x) - this.PLAYER_WIDTH * Number(this.mc.scale);
                              this.xx = this.doors[this.i2].x + this.doors[this.i2].w + this.PLAYER_WIDTH * Number(this.mc.scale);
                              cy = this.doors[this.i2].y + Number(this.mc.sit) * this.sitmax * Number(this.mc.scale);
                              this.yy = this.doors[this.i2].y + this.doors[this.i2].h + 82 * Number(this.mc.scale);
                              this.xx2 = this.doors[this.i2].w;
                              this.yy2 = this.doors[this.i2].h;
                              this.Collision(this.mc,this.mc.idd,cx,this.xx,cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                              ++this.i2;
                           }
                           if(this.retux == 1 && this.rx == 1 || this.retuy == 1 && this.ry == 1)
                           {
                              if(this.retuy == 1 && this.ry == 1 && this.mc.sit < 0.8)
                              {
                                 this.mc.sit = 1;
                              }
                              else
                              {
                                 this.mc.stability = Math.min(-0.1,this.mc.stability);
                              }
                           }
                           if(this.mc.pressure > 0)
                           {
                              --this.mc.pressure;
                           }
                           this.i2 = 0;
                           while(this.i2 < this.barrelstotal)
                           {
                              this.mc2 = this.barrels[this.i2];
                              if(this.barrels[this.i2].hea > 0)
                              {
                                 this.x4 = (this.atox[this.mc2.b_left_top] + this.atox[this.mc2.b_right_bottom]) / 2;
                                 this.y4 = (this.atoy[this.mc2.b_left_top] + this.atoy[this.mc2.b_right_bottom]) / 2;
                                 cx = this.mc2.x - 7 - this.PLAYER_WIDTH * Number(this.mc.scale) - this.Math_abs(this.x4) / 2;
                                 this.xx = this.mc2.x + 7 + this.PLAYER_WIDTH * Number(this.mc.scale) + this.Math_abs(this.x4) / 2;
                                 cy = this.mc2.y - 15 + Number(this.mc.sit) * this.sitmax * Number(this.mc.scale) - this.Math_abs(this.y4) / 2;
                                 this.yy = this.mc2.y + 15 + 82 * Number(this.mc.scale) + this.Math_abs(this.y4) / 2;
                                 this.xx2 = 20;
                                 this.yy2 = 30;
                                 this.ok3 = true;
                                 this.Collision(this.mc,this.mc.idd,cx,this.xx,cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                              }
                              else
                              {
                                 this.ok3 = false;
                                 this.xx2 = 20;
                                 this.yy2 = 20;
                                 this.x4 = (this.atox[this.mc2.b_left_top] + this.atox[this.mc2.b_right1]) / 2;
                                 this.y4 = (this.atoy[this.mc2.b_left_top] + this.atoy[this.mc2.b_right1]) / 2;
                                 if(Math.abs(this.x4) + Math.abs(this.y4) > 3)
                                 {
                                    cx = (this.ax[this.mc2.b_left_top] + this.ax[this.mc2.b_right1]) / 2 - 10 - this.Math_abs(this.x4) / 2;
                                    this.xx = (this.ax[this.mc2.b_left_top] + this.ax[this.mc2.b_right1]) / 2 + 10 + this.Math_abs(this.x4) / 2;
                                    cy = (this.ay[this.mc2.b_left_top] + this.ay[this.mc2.b_right1]) / 2 - 10 + Number(this.mc.sit) * this.sitmax * Number(this.mc.scale) - this.Math_abs(this.y4) / 2;
                                    this.yy = (this.ay[this.mc2.b_left_top] + this.ay[this.mc2.b_right1]) / 2 + 10 + 82 * Number(this.mc.scale) - this.Math_abs(this.y4) / 2;
                                    this.Collision(this.mc,this.mc.idd,cx,this.xx,cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                                 }
                                 this.x4 = (this.atox[this.mc2.b_left_bottom] + this.atox[this.mc2.b_right2]) / 2;
                                 this.y4 = (this.atoy[this.mc2.b_left_bottom] + this.atoy[this.mc2.b_right2]) / 2;
                                 if(Math.abs(this.x4) + Math.abs(this.y4) > 3)
                                 {
                                    cx = (this.ax[this.mc2.b_left_bottom] + this.ax[this.mc2.b_right2]) / 2 - 10 - this.Math_abs(this.x4) / 2;
                                    this.xx = (this.ax[this.mc2.b_left_bottom] + this.ax[this.mc2.b_right2]) / 2 + 10 + this.Math_abs(this.x4) / 2;
                                    cy = (this.ay[this.mc2.b_left_bottom] + this.ay[this.mc2.b_right2]) / 2 - 10 + Number(this.mc.sit) * this.sitmax * Number(this.mc.scale) - this.Math_abs(this.y4) / 2;
                                    this.yy = (this.ay[this.mc2.b_left_bottom] + this.ay[this.mc2.b_right2]) / 2 + 10 + 82 * Number(this.mc.scale) + this.Math_abs(this.y4) / 2;
                                    this.Collision(this.mc,this.mc.idd,cx,this.xx,cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                                 }
                              }
                              ++this.i2;
                           }
                           this.i3 = 0;
                           while(this.i3 < this.vehiclestotal)
                           {
                              if(this.vehicles[this.i3].io)
                              {
                                 if((this.vehicles[this.i3].typ != 3 || this.vehicles[this.i3].typ == 3 && !this.vehicles[this.i3].dead) && this.vehicles[this.i3].typ != 2)
                                 {
                                    this.ok3 = true;
                                    if(this.vehicles[this.i3].typ == 4 || this.vehicles[this.i3].typ == 7)
                                    {
                                       this.i4 = 0;
                                       while(this.i4 < 2)
                                       {
                                          if(this.i4 == 0)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_c;
                                          }
                                          if(this.i4 == 1)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_c1;
                                          }
                                          this.x4 = this.atox[this.i2];
                                          this.y4 = this.atoy[this.i2];
                                          cx = Number(this.ax[this.i2]) - Number(this.arad[this.i2]) - this.PLAYER_WIDTH * Number(this.mc.scale) - this.Math_abs(this.x4);
                                          this.xx = this.ax[this.i2] + this.arad[this.i2] + this.PLAYER_WIDTH * Number(this.mc.scale) + this.Math_abs(this.x4);
                                          cy = Number(this.ay[this.i2]) - Number(this.arad[this.i2]) + Number(this.mc.sit) * this.sitmax * Number(this.mc.scale) - this.Math_abs(this.y4);
                                          this.yy = this.ay[this.i2] + this.arad[this.i2] + 82 * Number(this.mc.scale) + this.Math_abs(this.y4);
                                          this.xx2 = Number(this.arad[this.i2]) * 2;
                                          this.yy2 = Number(this.arad[this.i2]) * 2;
                                          this.Collision(this.mc,this.mc.idd,cx,this.xx,cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                                          ++this.i4;
                                       }
                                    }
                                    if(this.vehicles[this.i3].typ == 3)
                                    {
                                       this.i2 = this.vehicles[this.i3].b_c;
                                       this.x4 = this.atox[this.i2];
                                       this.y4 = this.atoy[this.i2];
                                       cx = Number(this.ax[this.i2]) - Number(this.arad[this.i2]) - this.PLAYER_WIDTH * Number(this.mc.scale) - this.Math_abs(this.x4);
                                       this.xx = this.ax[this.i2] + this.arad[this.i2] + this.PLAYER_WIDTH * Number(this.mc.scale) + this.Math_abs(this.x4);
                                       cy = Number(this.ay[this.i2]) - Number(this.arad[this.i2]) + Number(this.mc.sit) * this.sitmax * Number(this.mc.scale) - this.Math_abs(this.y4);
                                       this.yy = this.ay[this.i2] + this.arad[this.i2] + 82 * Number(this.mc.scale) + this.Math_abs(this.y4);
                                       this.xx2 = Number(this.arad[this.i2]) * 2;
                                       this.yy2 = Number(this.arad[this.i2]) * 2;
                                       this.Collision(this.mc,this.mc.idd,cx,this.xx,cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                                    }
                                    if(this.vehicles[this.i3].typ == 0)
                                    {
                                       this.i4 = 0;
                                       while(this.i4 < 7)
                                       {
                                          if(this.i4 == 0)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w1;
                                          }
                                          if(this.i4 == 1)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w2;
                                          }
                                          if(this.i4 == 2)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_c;
                                          }
                                          if(this.i4 == 3)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_c2;
                                          }
                                          if(this.i4 == 4)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_c3;
                                          }
                                          if(this.i4 == 5)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w1b;
                                          }
                                          if(this.i4 == 6)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w2b;
                                          }
                                          this.x4 = this.atox[this.i2];
                                          this.y4 = this.atoy[this.i2];
                                          cx = Number(this.ax[this.i2]) - Number(this.arad[this.i2]) - this.PLAYER_WIDTH * Number(this.mc.scale) - this.Math_abs(this.x4);
                                          this.xx = this.ax[this.i2] + this.arad[this.i2] + this.PLAYER_WIDTH * Number(this.mc.scale) + this.Math_abs(this.x4);
                                          cy = Number(this.ay[this.i2]) - Number(this.arad[this.i2]) + Number(this.mc.sit) * this.sitmax * Number(this.mc.scale) - this.Math_abs(this.y4);
                                          this.yy = this.ay[this.i2] + this.arad[this.i2] + 82 * Number(this.mc.scale) + this.Math_abs(this.y4);
                                          this.xx2 = Number(this.arad[this.i2]) * 2;
                                          this.yy2 = Number(this.arad[this.i2]) * 2;
                                          this.Collision(this.mc,this.mc.idd,cx,this.xx,cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                                          ++this.i4;
                                       }
                                    }
                                    if(this.vehicles[this.i3].typ == 1)
                                    {
                                       this.i4 = 0;
                                       while(this.i4 < 7)
                                       {
                                          if(this.i4 == 0)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w1;
                                          }
                                          if(this.i4 == 1)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w2;
                                          }
                                          if(this.i4 == 2)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_p1;
                                          }
                                          if(this.i4 == 3)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_p2;
                                          }
                                          if(this.i4 == 4)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_p3;
                                          }
                                          if(this.i4 == 5)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w1b;
                                          }
                                          if(this.i4 == 6)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w2b;
                                          }
                                          this.x4 = this.atox[this.i2];
                                          this.y4 = this.atoy[this.i2];
                                          cx = Number(this.ax[this.i2]) - Number(this.arad[this.i2]) - this.PLAYER_WIDTH * Number(this.mc.scale) - this.Math_abs(this.x4) / 2;
                                          this.xx = this.ax[this.i2] + this.arad[this.i2] + this.PLAYER_WIDTH * Number(this.mc.scale) + this.Math_abs(this.x4) / 2;
                                          cy = Number(this.ay[this.i2]) - Number(this.arad[this.i2]) + Number(this.mc.sit) * this.sitmax * Number(this.mc.scale) - this.Math_abs(this.y4) / 2;
                                          this.yy = this.ay[this.i2] + this.arad[this.i2] + 82 * Number(this.mc.scale) + this.Math_abs(this.y4) / 2;
                                          this.xx2 = Number(this.arad[this.i2]) * 2;
                                          this.yy2 = Number(this.arad[this.i2]) * 2;
                                          this.Collision(this.mc,this.mc.idd,cx,this.xx,cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                                          ++this.i4;
                                       }
                                    }
                                 }
                              }
                              ++this.i3;
                           }
                           if(this.ok2)
                           {
                              if(this.retux == 1 && this.rx == 1 || this.retuy == 1 && this.ry == 1)
                              {
                                 this.mc.stability = Math.min(-0.1,this.mc.stability);
                              }
                           }
                        }
                     }
                     this.mc.inwater = false;
                     water_friction = true;
                     this.i2 = 0;
                     while(this.i2 < this.watertotal && !this.mc.inwater)
                     {
                        if(this.ax[this.mc.b_toe] > Number(this.wax[this.i2]) - 10)
                        {
                           if(this.ax[this.mc.b_toe] < this.wax[this.i2] + this.waw[this.i2] + 10)
                           {
                              if(this.ay[this.mc.b_toe] > Number(this.way[this.i2]) - 10)
                              {
                                 if(this.ay[this.mc.b_toe] < this.way[this.i2] + this.wah[this.i2] + 40)
                                 {
                                    this.mc.inwater = true;
                                    water_friction = Boolean(this.wa_friction[this.i2]);
                                    if(this.ay[this.mc.b_toe] < this.way[this.i2] + Number(this.mc.sit) * this.sitmax + 50 && this.TracePointNoRagdolls(this.ax[this.mc.b_toe],Number(this.way[this.i2]) - 10))
                                    {
                                       this.mc.stand = true;
                                    }
                                    else
                                    {
                                       this.mc.stand = false;
                                    }
                                    if(!this.MP_mode || !this.mc.isplayer || this.MP_myid == i)
                                    {
                                       if(this.mc.stability > -0.1)
                                       {
                                          this.mc.stability = -0.1;
                                       }
                                    }
                                    if(this.wadamage[this.i2] > 0)
                                    {
                                       if(!this.MP_mode || this.MP_myid == i || !this.mc.isplayer)
                                       {
                                          this.mc.hea -= Number(this.wadamage[this.i2]) * this.thispulspeed;
                                          this.mc.lastshot = "body";
                                          this.mc.lastshotbygun = "acid";
                                       }
                                       this.mc.regentim = 0;
                                       if(Math.random() > 0.95)
                                       {
                                          this.Hurt(i);
                                       }
                                       if(i == this.MP_myid)
                                       {
                                          this.HurtMyPlayer(-1,0,Number(this.wadamage[this.i2]) / 4 * this.thispulspeed);
                                          this.HurtMyPlayer(1,0,Number(this.wadamage[this.i2]) / 4 * this.thispulspeed);
                                          this.HurtMyPlayer(0,-1,Number(this.wadamage[this.i2]) / 4 * this.thispulspeed);
                                          this.HurtMyPlayer(0,1,Number(this.wadamage[this.i2]) / 4 * this.thispulspeed);
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     if(this.MP_mode)
                     {
                        this.VeriftMP(this.mc.b_body,-1);
                        this.VeriftMP(this.mc.b_toe,-1);
                        this.VeriftMP(this.mc.b_leg1,-1);
                        this.VeriftMP(this.mc.b_leg2,-1);
                        this.VeriftMP(this.mc.b_arm1,-1);
                        this.VeriftMP(this.mc.b_arm2,-1);
                        this.VeriftMP(this.mc.b_head_start,-1);
                        this.VeriftMP(this.mc.b_head_end,-1);
                     }
                     if(this.mc.stability > -0.1 && this.mc.isplayer || this.mc.stability >= 0.3 || Boolean(this.mc.inwater))
                     {
                        if(!this.mc.dying)
                        {
                           if(this.mc.tarx > this.mc.x)
                           {
                              this.mc.side = 1;
                           }
                           else
                           {
                              this.mc.side = -1;
                           }
                        }
                     }
                     if(this.mc.isplayer && i != this.MP_myid && !this.MP_favor_the_shooter)
                     {
                        if(!this.TraceLineF_nopushers(this.ax[this.mc.b_p2],this.ay[this.mc.b_p2],Number(this.ax[this.mc.b_p2]) - Number(this.mc.mp_offset_x),Number(this.ay[this.mc.b_p2]) - Number(this.mc.mp_offset_y)))
                        {
                           this.mc.mp_offset_x = 0;
                           this.mc.mp_offset_y = 0;
                        }
                        this.mc.ang = Math.atan2(Number(this.mc.tarx) - Number(this.ax[this.mc.b_body]) + this.mc.mp_offset_x,Number(this.mc.tary) - Number(this.ay[this.mc.b_body]) + this.mc.mp_offset_y);
                     }
                     else
                     {
                        this.mc.ang = Math.atan2(Number(this.mc.tarx) - Number(this.ax[this.mc.b_body]),Number(this.mc.tary) - Number(this.ay[this.mc.b_body]));
                     }
                     if(this.mc.stability > 0)
                     {
                        if(this.mc.stability < 0.2)
                        {
                           this.mc.sit = 1;
                           this.mc.x = Number(this.ax[this.mc.b_toe]) * (1 - Number(this.mc.stability)) + this.mc.x * Number(this.mc.stability);
                           this.mc.y = (this.ay[this.mc.b_toe] + (Number(this.mc.sit) * this.sitmax + 10) * Number(this.mc.scale)) * (1 - Number(this.mc.stability)) + this.mc.y * Number(this.mc.stability);
                        }
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,100);
                           this.VeriftMP(this.mc.b_toe,100);
                           this.VeriftMP(this.mc.b_leg1,100);
                           this.VeriftMP(this.mc.b_leg2,100);
                           this.VeriftMP(this.mc.b_arm1,100);
                           this.VeriftMP(this.mc.b_arm2,100);
                           this.VeriftMP(this.mc.b_head_start,100);
                           this.VeriftMP(this.mc.b_head_end,100);
                        }
                        this.i2 = 0;
                        while(this.i2 < this.playerstotal)
                        {
                           if(this.i2 != i)
                           {
                              if(this.mens[this.i2].io)
                              {
                                 this.mc2 = this.mens[this.i2];
                                 if(this.mc2.team != this.mc.team || this.mc.team > 0 || this.mc2.team > 0)
                                 {
                                    if(this.mc2.stability > 0)
                                    {
                                       if(this.mc2.hea > 0)
                                       {
                                          if(this.mc.x + 10 * Number(this.mc.scale) > this.mc2.x - 20 * Number(this.mc2.scale))
                                          {
                                             if(this.mc.x - 10 * Number(this.mc.scale) < this.mc2.x + 20 * Number(this.mc2.scale))
                                             {
                                                if(this.mc.y - Number(this.mc.sit) * this.sitmax * Number(this.mc.scale) > this.mc2.y - 82 * Number(this.mc2.scale))
                                                {
                                                   if(this.mc.y - 82 * Number(this.mc.scale) < this.mc2.y - Number(this.mc2.sit) * this.sitmax * Number(this.mc2.scale))
                                                   {
                                                      cx = this.Math_abs(this.mc2.x - this.mc.x) * 2.5;
                                                      cy = this.Math_abs(this.mc2.y - this.mc.y);
                                                      if(this.mc.y < this.mc2.y - 82 * Number(this.mc2.scale) + Number(this.mc.sit) * this.sitmax * Number(this.mc.scale) + 32)
                                                      {
                                                         cx = 0;
                                                         cy = 1;
                                                      }
                                                      if(cx > cy)
                                                      {
                                                         this.u = (this.mc.x + this.mc2.x) / 2;
                                                         this.v = (Number(this.mc.tox) * Number(this.mc.mobility) + Number(this.mc2.tox) * Number(this.mc2.mobility)) / (this.mc.mobility + this.mc2.mobility);
                                                         if(this.mc.x < this.mc2.x)
                                                         {
                                                            this.mc.x = this.u - 15;
                                                            this.mc2.x = this.u + 15;
                                                            this.mc.tox = this.v - 0.1;
                                                            this.mc2.tox = this.v + 0.1;
                                                         }
                                                         else
                                                         {
                                                            this.mc2.x = this.u - 15;
                                                            this.mc.x = this.u + 15;
                                                            this.mc2.tox = this.v - 0.1;
                                                            this.mc.tox = this.v + 0.1;
                                                         }
                                                      }
                                                      else
                                                      {
                                                         this.u = (this.mc.y - (82 - Number(this.mc.sit) * this.sitmax) * Number(this.mc.scale) / 2 + this.mc2.y - (82 - Number(this.mc2.sit) * this.sitmax) * Number(this.mc2.scale) / 2) / 2;
                                                         this.v = (Number(this.mc.toy) * Number(this.mc.mobility) + Number(this.mc2.toy) * Number(this.mc2.mobility)) / (this.mc.mobility + this.mc2.mobility);
                                                         if(this.mc.y < this.mc2.y)
                                                         {
                                                            if(this.mc.toy >= this.mc2.toy)
                                                            {
                                                               this.mc.y = this.u + Number(this.mc.sit) * this.sitmax / 2 * Number(this.mc.scale);
                                                               if(!this.mc2.stand)
                                                               {
                                                                  this.mc2.y = this.u + 82 * Number(this.mc2.scale) - Number(this.mc.sit) * this.sitmax / 2 * Number(this.mc.scale);
                                                               }
                                                               this.mc.toy = this.v;
                                                               this.mc2.toy = this.v;
                                                               if(!this.mc.stand)
                                                               {
                                                                  this.mc.stand = true;
                                                                  this.x4 = this.mc2.tox;
                                                                  this.mc.tox += (this.x4 / 6 - Number(this.mc.tox) * 1 / 6) * this.thispulspeed;
                                                                  if(this.mc.tox > this.x4 + 0.5 * 3 * this.thispulspeed)
                                                                  {
                                                                     this.mc.tox -= 0.5 * 3 * this.thispulspeed;
                                                                  }
                                                                  else if(this.mc.tox < this.x4 - 0.5 * 3 * this.thispulspeed)
                                                                  {
                                                                     this.mc.tox += 0.5 * 3 * this.thispulspeed;
                                                                  }
                                                                  else
                                                                  {
                                                                     this.mc.tox = this.x4;
                                                                  }
                                                               }
                                                            }
                                                         }
                                                         else if(this.mc.toy <= this.mc2.toy)
                                                         {
                                                            this.mc2.y = this.u + Number(this.mc2.sit) * this.sitmax / 2;
                                                            if(!this.mc.stand)
                                                            {
                                                               this.mc.y = this.u + 82 - Number(this.mc2.sit) * this.sitmax / 2;
                                                            }
                                                            this.mc2.toy = this.v;
                                                            this.mc.toy = this.v;
                                                            if(!this.mc2.stand)
                                                            {
                                                               this.mc2.stand = true;
                                                               this.x4 = this.mc.tox;
                                                               this.mc2.tox += (this.x4 / 6 - Number(this.mc2.tox) * 1 / 6) * this.thispulspeed;
                                                               if(this.mc2.tox > this.x4 + 0.5 * 3 * this.thispulspeed)
                                                               {
                                                                  this.mc2.tox -= 0.5 * 3 * this.thispulspeed;
                                                               }
                                                               else if(this.mc2.tox < this.x4 - 0.5 * 3 * this.thispulspeed)
                                                               {
                                                                  this.mc2.tox += 0.5 * 3 * this.thispulspeed;
                                                               }
                                                               else
                                                               {
                                                                  this.mc2.tox = this.x4;
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.i2;
                        }
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,110);
                           this.VeriftMP(this.mc.b_toe,110);
                           this.VeriftMP(this.mc.b_leg1,110);
                           this.VeriftMP(this.mc.b_leg2,110);
                           this.VeriftMP(this.mc.b_arm1,110);
                           this.VeriftMP(this.mc.b_arm2,110);
                           this.VeriftMP(this.mc.b_head_start,110);
                           this.VeriftMP(this.mc.b_head_end,110);
                        }
                        if(Number(this.mc.tox) / Number(this.mc.scale) * Number(this.mc.tox) / Number(this.mc.scale) + Number(this.mc.toy) / Number(this.mc.scale) * Number(this.mc.toy) / Number(this.mc.scale) > 400)
                        {
                           if(this.mc.stability > 0)
                           {
                              this.mc.stability *= Math.pow(0.9,this.thispulspeed);
                           }
                           this.mc.stability -= 0.05 * this.thispulspeed;
                        }
                        if(this.mc.act_movey == 1 || !this.mc.stand && (!this.MP_mode || (this.MP_myid != i || !this.mc.isplayer)) || this.hup)
                        {
                           if(this.mc.sit < 1)
                           {
                              this.mc.sit += this.gravity / this.sitmax * this.thispulspeed * 5;
                              if(this.mc.stand)
                              {
                                 if(this.mc.stability >= 0)
                                 {
                                    this.mc.y += this.gravity * this.thispulspeed * 5;
                                 }
                              }
                           }
                           if(this.mc.sit > 1)
                           {
                              this.mc.sit = 1;
                           }
                        }
                        else
                        {
                           if(this.mc.sit > 0)
                           {
                              this.mc.sit -= 0.3 * this.thispulspeed;
                           }
                           if(this.mc.sit < 0)
                           {
                              this.mc.sit = 0;
                           }
                        }
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,120);
                           this.VeriftMP(this.mc.b_toe,120);
                           this.VeriftMP(this.mc.b_leg1,120);
                           this.VeriftMP(this.mc.b_leg2,120);
                           this.VeriftMP(this.mc.b_arm1,120);
                           this.VeriftMP(this.mc.b_arm2,120);
                           this.VeriftMP(this.mc.b_head_start,120);
                           this.VeriftMP(this.mc.b_head_end,120);
                        }
                        this.mc.waiting += 0.1;
                        if(this.mc.waiting > Math.PI * 2)
                        {
                           this.mc.waiting -= Math.PI * 2;
                        }
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,121);
                           this.VeriftMP(this.mc.b_toe,121);
                           this.VeriftMP(this.mc.b_leg1,121);
                           this.VeriftMP(this.mc.b_leg2,121);
                           this.VeriftMP(this.mc.b_arm1,121);
                           this.VeriftMP(this.mc.b_arm2,121);
                           this.VeriftMP(this.mc.b_head_start,121);
                           this.VeriftMP(this.mc.b_head_end,121);
                        }
                        this.TurnBone(this.mc.b_toe,this.mc.x,this.mc.y + (-31 - 3) * Number(this.mc.scale),this.mc,0.2 + 0.6 * Number(this.mc.stability));
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,122);
                           this.VeriftMP(this.mc.b_toe,122);
                           this.VeriftMP(this.mc.b_leg1,122);
                           this.VeriftMP(this.mc.b_leg2,122);
                           this.VeriftMP(this.mc.b_arm1,122);
                           this.VeriftMP(this.mc.b_arm2,122);
                           this.VeriftMP(this.mc.b_head_start,122);
                           this.VeriftMP(this.mc.b_head_end,122);
                        }
                        this.TurnBone(this.mc.b_body,this.ax[this.mc.b_toe] + Number(this.mc.tox) * 1 + Math.sin(this.mc.waiting) * Number(this.mc.scale),this.mc.y + (-31 - 3 - this.normal_spine_length + this.normal_shoulder_length + Number(this.mc.sit) * 7) * Number(this.mc.scale),this.mc,0.1 + 0.6 * Number(this.mc.stability));
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,123);
                           this.VeriftMP(this.mc.b_toe,123);
                           this.VeriftMP(this.mc.b_leg1,123);
                           this.VeriftMP(this.mc.b_leg2,123);
                           this.VeriftMP(this.mc.b_arm1,123);
                           this.VeriftMP(this.mc.b_arm2,123);
                           this.VeriftMP(this.mc.b_head_start,123);
                           this.VeriftMP(this.mc.b_head_end,123);
                        }
                        if(this.mc.act_fire)
                        {
                           this.xx = 2;
                        }
                        else
                        {
                           this.xx = 0;
                        }
                        this.TurnBone(this.mc.b_head_start,this.ax[this.mc.b_body] + Number(this.mc.tox) * 0.3 + Number(this.mc.side) * this.xx * Number(this.mc.scale),Number(this.ay[this.mc.b_body]) - this.normal_shoulder_length * Number(this.mc.scale),this.mc,0.1 + 0.8 * Number(this.mc.stability));
                        this.TurnBone(this.mc.b_head_end,this.ax[this.mc.b_body] + Number(this.mc.tox) * 0.3 + (-Math.sin(Number(this.mc.ang) - Math.PI / 2) * Number(this.mc.side) * 5 + Number(this.mc.side) * this.xx) * Number(this.mc.scale),this.ay[this.mc.b_body] + (-this.normal_shoulder_length - 9 - Math.cos(Number(this.mc.ang) - Math.PI / 2) * 5 * Number(this.mc.side)) * Number(this.mc.scale),this.mc,0.1 + 0.8 * Number(this.mc.stability));
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,1);
                           this.VeriftMP(this.mc.b_toe,1);
                           this.VeriftMP(this.mc.b_leg1,1);
                           this.VeriftMP(this.mc.b_leg2,1);
                           this.VeriftMP(this.mc.b_arm1,1);
                           this.VeriftMP(this.mc.b_arm2,1);
                           this.VeriftMP(this.mc.b_head_start,1);
                           this.VeriftMP(this.mc.b_head_end,1);
                        }
                        if(this.mc.act_movex == 1)
                        {
                           this.mc.moving_speed = 1 * Math.min((this.mc.mobility + 1) / 2,2) * Number(this.mc.scale);
                        }
                        else if(this.mc.act_movex == -1)
                        {
                           this.mc.moving_speed = -1 * Math.min((this.mc.mobility + 1) / 2,2) * Number(this.mc.scale);
                        }
                        else
                        {
                           this.mc.moving_speed = 0;
                        }
                        if(this.mc.curwea == -1 && Boolean(this.mc.isplayer))
                        {
                           this.mc.moving_speed *= 1.1;
                        }
                        if(this.mc.stability < 0.5)
                        {
                           this.mc.moving_speed *= 0.4;
                        }
                        if(this.mc.stand)
                        {
                           if(this.mc.moving_speed == 0)
                           {
                              this.mc.idle_phase += Math.sin(Number(this.mc.idle_phase) - 0.3) * 0.5;
                           }
                           if(this.mc.sit == 0)
                           {
                              this.xx = (1 - Number(this.mc.stability)) * 10;
                              this.TurnBone(this.mc.b_leg1,this.mc.x + (this.xx + Math.sin(this.mc.idle_phase) * 13) * Number(this.mc.scale),this.mc.y + (-3 + Math.cos(this.mc.idle_phase) * 5 * this.Math_abs(Number(this.mc.moving_speed) / Number(this.mc.scale)) * 2 - Number(this.mc.sit) * this.sitmax) * Number(this.mc.scale),this.mc,0.4 + 0.2 * Number(this.mc.stability));
                              this.TurnBone(this.mc.b_leg2,this.mc.x + (-this.xx - Math.sin(this.mc.idle_phase) * 13) * Number(this.mc.scale),this.mc.y + (-3 - Math.cos(this.mc.idle_phase) * 5 * this.Math_abs(Number(this.mc.moving_speed) / Number(this.mc.scale)) * 2 - Number(this.mc.sit) * this.sitmax) * Number(this.mc.scale),this.mc,0.4 + 0.2 * Number(this.mc.stability));
                           }
                           else
                           {
                              this.i3 = this.mc.b_leg2;
                              this.i2 = this.mc.b_leg1;
                              if(Number(this.ax[this.mc.b_leg1]) * Number(this.mc.side) > Number(this.ax[this.mc.b_leg2]) * Number(this.mc.side))
                              {
                                 this.i3 = this.mc.b_leg1;
                                 this.i2 = this.mc.b_leg2;
                              }
                              if(this.mc.act_movex == 0)
                              {
                                 this.TurnBone(this.i3,this.mc.x + Number(this.mc.side) * 15 * Number(this.mc.scale),this.mc.y + (-3 - Number(this.mc.sit) * this.sitmax) * Number(this.mc.scale),this.mc,0.4 + 0.2 * Number(this.mc.stability));
                                 this.TurnBone(this.i2,this.mc.x - Number(this.mc.side) * 15 * Number(this.mc.scale),this.mc.y + (-3 - Number(this.mc.sit) * this.sitmax) * Number(this.mc.scale),this.mc,0.4 + 0.2 * Number(this.mc.stability));
                              }
                              else
                              {
                                 this.TurnBone(this.i3,this.mc.x + (Math.sin(this.mc.idle_phase) * 10 + Number(this.mc.side) * 10) * Number(this.mc.scale),this.mc.y + (-3 + Math.min(Math.cos(this.mc.idle_phase),0) * 5 * this.Math_abs(Number(this.mc.moving_speed) / Number(this.mc.scale)) - Number(this.mc.sit) * this.sitmax) * Number(this.mc.scale),this.mc,0.4 + 0.2 * Number(this.mc.stability));
                                 this.TurnBone(this.i2,this.mc.x + (-Math.sin(this.mc.idle_phase) * 10 - Number(this.mc.side) * 5) * Number(this.mc.scale),this.mc.y + (-3 - Math.min(Math.cos(this.mc.idle_phase),0) * 5 * this.Math_abs(Number(this.mc.moving_speed) / Number(this.mc.scale)) - Number(this.mc.sit) * this.sitmax) * Number(this.mc.scale),this.mc,0.4 + 0.2 * Number(this.mc.stability));
                              }
                           }
                           if(this.mc.act_movey == -1 && !this.hup)
                           {
                              this.mc.toy = -8 * Number(this.mc.stability) * Math.min((this.mc.mobility + 1) / 2,2) * Number(this.mc.scale) * Number(this.mc.jump_scale);
                              --this.mc.y;
                              if(this.mc.curwea == -1 && Boolean(this.mc.isplayer))
                              {
                                 this.mc.toy -= 2 * Number(this.mc.scale) * Number(this.mc.jump_scale);
                              }
                              if(this.mc.moving_speed > 0 && this.mc.tox > 0.3 || this.mc.moving_speed < 0 && this.mc.tox < -0.3)
                              {
                                 this.mc.tox += Number(this.mc.moving_speed) * Number(this.mc.scale) * Number(this.mc.jump_scale);
                              }
                              this.TurnBone(this.mc.b_leg1,this.mc.x + (-Number(this.mc.tox) - 5) * Number(this.mc.scale),this.mc.y,this.mc,this.mc.stability);
                              this.TurnBone(this.mc.b_leg2,this.mc.x + (-Number(this.mc.tox) + 5) * Number(this.mc.scale),this.mc.y,this.mc,this.mc.stability);
                           }
                           if(this.mc.moving_speed != 0)
                           {
                              this.mc.idle_phase -= 0.2 * (2 - Number(this.mc.sit) * 0.75) * Number(this.mc.moving_speed) / Number(this.mc.scale) * this.thispulspeed;
                              this.mc.tox += Number(this.mc.moving_speed) * (2 - Number(this.mc.sit) * 0.75) / 2 * 3 * this.thispulspeed;
                              this.mc.step_sound_phase -= 0.2 * (2 - Number(this.mc.sit) * 0.75) * Number(this.mc.moving_speed) / Number(this.mc.scale) * this.thispulspeed;
                              if(this.mc.step_sound_phase > Math.PI || this.mc.step_sound_phase < -Math.PI)
                              {
                                 if(this.mc.step_sound_phase > 0)
                                 {
                                    this.mc.step_sound_phase -= Math.PI;
                                 }
                                 else
                                 {
                                    this.mc.step_sound_phase += Math.PI;
                                 }
                                 if(this.mc.sit == 0)
                                 {
                                    this.i3 = int(Math.random() * 4);
                                    if(this.mc.armored == 2)
                                    {
                                       if(this.i3 == 0)
                                       {
                                          this.PlaySound(this.s_robo_step1,this.mc.x,this.mc.y);
                                       }
                                       else if(this.i3 == 1)
                                       {
                                          this.PlaySound(this.s_robo_step2,this.mc.x,this.mc.y);
                                       }
                                       else if(this.i3 == 2)
                                       {
                                          this.PlaySound(this.s_robo_step3,this.mc.x,this.mc.y);
                                       }
                                       else if(this.i3 == 3)
                                       {
                                          this.PlaySound(this.s_robo_step4,this.mc.x,this.mc.y);
                                       }
                                    }
                                    else if(this.i3 == 0)
                                    {
                                       this.PlaySound(this.s_step1,this.mc.x,this.mc.y);
                                    }
                                    else if(this.i3 == 1)
                                    {
                                       this.PlaySound(this.s_step2,this.mc.x,this.mc.y);
                                    }
                                    else if(this.i3 == 2)
                                    {
                                       this.PlaySound(this.s_step3,this.mc.x,this.mc.y);
                                    }
                                    else if(this.i3 == 3)
                                    {
                                       this.PlaySound(this.s_step4,this.mc.x,this.mc.y);
                                    }
                                 }
                              }
                           }
                        }
                        else
                        {
                           this.u = (Number(this.mc.tox) / Number(this.mc.scale) * 2 + Number(this.mc.tox) / Number(this.mc.scale) * 3) * (Number(this.mc.toy) / Number(this.mc.scale) + 5) * 0.1;
                           this.v = -15 + (Number(this.mc.toy) / Number(this.mc.scale) + 5) * 2 + 31;
                           this.u2 = this.VectorDist2D(this.u,this.v);
                           if(this.u2 > 31)
                           {
                              this.u /= this.u2 / 31;
                              this.v /= this.u2 / 31;
                           }
                           this.TurnBone(this.mc.b_leg1,this.mc.x + this.u * Number(this.mc.scale),this.mc.y + (-31 + this.v) * Number(this.mc.scale),this.mc,0.8 * Number(this.mc.stability));
                           this.u = (-Number(this.mc.tox) / Number(this.mc.scale) * 1 + Number(this.mc.tox) / Number(this.mc.scale) * 3) * Number(this.mc.toy) / Number(this.mc.scale) * 0.1;
                           this.v = -10 + 31;
                           this.u2 = this.VectorDist2D(this.u,this.v);
                           if(this.u2 > 31)
                           {
                              this.u /= this.u2 / 31;
                              this.v /= this.u2 / 31;
                           }
                           this.TurnBone(this.mc.b_leg2,this.mc.x + this.u * Number(this.mc.scale),this.mc.y + (-31 + this.v) * Number(this.mc.scale),this.mc,0.8 * Number(this.mc.stability));
                           if(Number(this.mc.tox) * Number(this.mc.moving_speed) < 3)
                           {
                              this.mc.tox += Number(this.mc.moving_speed) * 0.4 * this.thispulspeed;
                           }
                        }
                     }
                     else
                     {
                        this.mc.x = this.ax[this.mc.b_toe];
                        this.mc.y = (this.ay[this.mc.b_leg1] + this.ay[this.mc.b_leg2]) / 2;
                        this.mc.sit = 1;
                        this.mc.tox = this.atox[this.mc.b_toe];
                        this.mc.toy = this.atoy[this.mc.b_toe];
                     }
                     if(this.MP_mode)
                     {
                        this.VeriftMP(this.mc.b_body,2);
                        this.VeriftMP(this.mc.b_toe,2);
                        this.VeriftMP(this.mc.b_leg1,2);
                        this.VeriftMP(this.mc.b_leg2,2);
                        this.VeriftMP(this.mc.b_arm1,2);
                        this.VeriftMP(this.mc.b_arm2,2);
                        this.VeriftMP(this.mc.b_head_start,2);
                        this.VeriftMP(this.mc.b_head_end,2);
                     }
                     if(this.mc.hea > 0)
                     {
                        dot_effects = false;
                        e = 0;
                        while(e < this.mc.effects.length)
                        {
                           ef = this.mc.effects[e];
                           if(ef.type == "DOT")
                           {
                              dot_effects = true;
                              this.mc.hea -= Number(ef.power) * this.thispulspeed;
                              if(Math.random() > 0.95)
                              {
                                 this.Hurt(i);
                              }
                              ef.duration -= this.thispulspeed;
                              if(ef.duration <= 0 || this.mc.hea <= 0)
                              {
                                 this.Hurt(i);
                                 this.mc.effects.splice(e,1);
                                 e--;
                              }
                           }
                           e++;
                        }
                        target_frame = 1;
                        if(dot_effects)
                        {
                           target_frame = 2;
                        }
                        if(this.mc.gui.currentFrame != target_frame)
                        {
                           this.mc.gui.gotoAndStop(target_frame);
                        }
                        if(this.mc.dying)
                        {
                           if(this.mc.inwater)
                           {
                              if(water_friction)
                              {
                                 if(Math.random() > 0.8)
                                 {
                                    this.Effect(this.ax[this.mc.b_head_start],this.ay[this.mc.b_head_start],2,0,0);
                                 }
                              }
                           }
                           if(this.mc.isplayer)
                           {
                              this.mc.hea -= 0.1 * this.thispulspeed;
                              if(this.MP_gamestate != 0)
                              {
                                 if(this.MP_type == 3)
                                 {
                                    if(this.mc.hea < 1)
                                    {
                                       this.mc.hea = 1;
                                    }
                                 }
                              }
                           }
                           else if(this.mc.team == this.mens[this.MP_myid].team)
                           {
                              if(this.mc.x < Number(this.mens[this.MP_myid].x) - 600 || this.mc.x > this.mens[this.MP_myid].x + 600 || this.mc.y < Number(this.mens[this.MP_myid].y) - 600 || this.mc.y > this.mens[this.MP_myid].y + 600)
                              {
                                 this.mc.hea -= 0.01 * this.thispulspeed;
                              }
                           }
                           else
                           {
                              this.mc.hea -= 0.05 * this.thispulspeed;
                           }
                           if(this.mc.stability > -0.2)
                           {
                              this.mc.stability = -0.2;
                           }
                           this.atox[this.mc.b_toe] -= Number(this.mc.side) * 0.2 * this.thispulspeed;
                           this.atox[this.mc.b_leg1] += Number(this.mc.side) * 0.1 * this.thispulspeed;
                           this.atox[this.mc.b_leg2] += Number(this.mc.side) * 0.1 * this.thispulspeed;
                           this.atoy[this.mc.b_body] -= 0.8 * this.thispulspeed;
                           this.atoy[this.mc.b_toe] += 0.8 * this.thispulspeed;
                           this.atoy[this.mc.b_head_end] -= (0.7 - 0.5 - Math.sin(Number(this.mc.hea) * 0.3)) * this.thispulspeed;
                           this.atoy[this.mc.b_toe] += (0.7 - 0.5 - Math.sin(Number(this.mc.hea) * 0.3)) * this.thispulspeed;
                           this.atox[this.mc.b_body] += Number(this.mc.side) * 0.2 * this.thispulspeed;
                           this.atox[this.mc.b_arm1] += Math.sin(Number(this.mc.hea) * 0.9) * 0.7 * Number(this.mc.side) * this.thispulspeed;
                           this.atoy[this.mc.b_arm1] += Math.cos(Number(this.mc.hea) * 0.9) * 0.4 * this.thispulspeed;
                           this.atox[this.mc.b_arm2] -= Math.sin(Number(this.mc.hea) * 0.9) * 0.7 * Number(this.mc.side) * this.thispulspeed;
                           this.atoy[this.mc.b_arm2] -= Math.cos(Number(this.mc.hea) * 0.9) * 0.4 * this.thispulspeed;
                           this.atoy[this.mc.b_toe] += Math.cos(Number(this.mc.hea) * 0.9) * 0.8 * this.thispulspeed;
                           if(this.ay[this.mc.b_body] > Number(this.ay[this.mc.b_leg1]) - 20)
                           {
                              if(this.ay[this.mc.b_body] > Number(this.ay[this.mc.b_leg2]) - 20)
                              {
                                 if(this.ax[this.mc.b_body] > this.ax[this.mc.b_toe])
                                 {
                                    this.mc.side = 1;
                                 }
                                 else
                                 {
                                    this.mc.side = -1;
                                 }
                              }
                           }
                        }
                        else if(this.mc.team == this.mens[this.MP_myid].team || Boolean(this.mc.isplayer))
                        {
                           this.mc.hp_head = Math.max(Number(this.mc.hea) * 0.9 - 30,this.mc.hp_head);
                           this.mc.hp_body = Math.max(Number(this.mc.hea) * 0.9 - 30,this.mc.hp_body);
                           this.mc.hp_legs = Math.max(Number(this.mc.hea) * 0.9 - 30,this.mc.hp_legs);
                           this.mc.hp_arms = Math.max(Number(this.mc.hea) * 0.9 - 30,this.mc.hp_arms);
                        }
                        else if(this.PRO_BOTS)
                        {
                           this.mc.hp_head = (Math.max(Number(this.mc.hea) * 0.9 - 30,this.mc.hp_head) + Number(this.mc.hp_head) * 20) / 21;
                           this.mc.hp_body = (Math.max(Number(this.mc.hea) * 0.9 - 30,this.mc.hp_body) + Number(this.mc.hp_body) * 20) / 21;
                           this.mc.hp_legs = (Math.max(Number(this.mc.hea) * 0.9 - 30,this.mc.hp_legs) + Number(this.mc.hp_legs) * 20) / 21;
                           this.mc.hp_arms = (Math.max(Number(this.mc.hea) * 0.9 - 30,this.mc.hp_arms) + Number(this.mc.hp_arms) * 20) / 21;
                        }
                        this.WakeUpAtom(this.mc.b_body);
                        this.WakeUpAtom(this.mc.b_toe);
                        this.WakeUpAtom(this.mc.b_leg1);
                        this.WakeUpAtom(this.mc.b_leg2);
                        this.WakeUpAtom(this.mc.b_arm1);
                        this.WakeUpAtom(this.mc.b_arm2);
                        this.WakeUpAtom(this.mc.b_head_start);
                        this.WakeUpAtom(this.mc.b_head_end);
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,3);
                           this.VeriftMP(this.mc.b_toe,3);
                           this.VeriftMP(this.mc.b_leg1,3);
                           this.VeriftMP(this.mc.b_leg2,3);
                           this.VeriftMP(this.mc.b_arm1,3);
                           this.VeriftMP(this.mc.b_arm2,3);
                           this.VeriftMP(this.mc.b_head_start,3);
                           this.VeriftMP(this.mc.b_head_end,3);
                        }
                     }
                     if(this.mc.stability > -1)
                     {
                        this.xx = 0.8;
                        if(this.mc.stability > 0 || Boolean(this.mc.inwater))
                        {
                           this.xx = 1;
                        }
                        if(this.mc.dying)
                        {
                           if(this.mc.isplayer)
                           {
                              this.xx *= 0.9;
                           }
                           else
                           {
                              this.xx *= 0.7;
                           }
                        }
                        if(this.key_kinetic && i == this.MP_myid)
                        {
                           this.TurnBone(this.mc.b_arm2,this.ax[this.mc.b_body] + Math.sin(this.mc.ang + Number(this.mc.side) * 0.2) * 30 * Number(this.mc.scale),this.ay[this.mc.b_body] + Math.cos(this.mc.ang + Number(this.mc.side) * 0.2) * 30 * Number(this.mc.scale),this.mc,1);
                           if(this.mc.wep_pause < 1)
                           {
                              this.mc.wep_pause = 1;
                           }
                           this.u = this.Dist2D(this.ax[this.mc.b_arm2],this.ay[this.mc.b_arm2],this.mc.tarx,this.mc.tary);
                           if(this.u < 70)
                           {
                           }
                           if(this.u > 750)
                           {
                              this.u = 750;
                           }
                           if(this.cinetic_target != -1)
                           {
                              if(this.aio[this.cinetic_target] == true || this.aio[this.cinetic_target] == false)
                              {
                                 if(this.TraceLine(this.ax[this.mc.b_arm2],this.ay[this.mc.b_arm2],this.ax[this.cinetic_target],this.ay[this.cinetic_target]))
                                 {
                                    if(this.Dist2D(this.atox[this.mc.b_body],this.atoy[this.mc.b_body],this.atox[this.cinetic_target],this.atoy[this.cinetic_target]) < 8 || this.VectorDist2D(this.atox[this.mc.b_body],this.atoy[this.mc.b_body]) < 8)
                                    {
                                       if(this.u < 800)
                                       {
                                          if(this.u < 1)
                                          {
                                             this.u = 1;
                                          }
                                          cx = this.ax[this.mc.b_arm2] + Math.sin(this.mc.ang) * this.u;
                                          cy = this.ay[this.mc.b_arm2] + Math.cos(this.mc.ang) * this.u;
                                          cx = (cx - Number(this.ax[this.cinetic_target])) / this.u * 4;
                                          cy = (cy - Number(this.ay[this.cinetic_target])) / this.u * 4;
                                          this.u = this.Dist2D(cx,cy,0,0);
                                          if(this.u < 1)
                                          {
                                             this.u = 1;
                                          }
                                          cx = cx / this.u * 100 * Math.min(this.u / 30,1);
                                          cy = cy / this.u * 100 * Math.min(this.u / 30,1);
                                          this.atox[this.cinetic_target] += cx * this.thispulspeed;
                                          this.atoy[this.cinetic_target] += cy * this.thispulspeed;
                                          if(this.aactive[this.cinetic_target] != 1000)
                                          {
                                             this.atox[this.mc.b_body] -= cx * this.thispulspeed;
                                             this.atoy[this.mc.b_body] -= cy * this.thispulspeed;
                                             this.mc.tox -= cx * this.thispulspeed / 6;
                                             this.mc.toy -= cy * this.thispulspeed / 6;
                                             if(!this.mc.stand || cy > 0)
                                             {
                                                if(this.mc.stability > -0.1)
                                                {
                                                   this.mc.stability = Math.max(-0.1,Number(this.mc.stability) - this.Dist2D(this.atox[this.mc.b_body],this.atoy[this.mc.b_body],this.atox[this.cinetic_target],this.atoy[this.cinetic_target]) * this.thispulspeed * 0.025);
                                                }
                                             }
                                             if(this.aof[this.cinetic_target] >= 0 && this.aof[this.cinetic_target] < 100 && this.mens[this.aof[this.cinetic_target]].incar == -1)
                                             {
                                                if(!this.mens[this.aof[this.cinetic_target]].stand || cy < 0)
                                                {
                                                   if(this.mens[this.aof[this.cinetic_target]].stability > -0.1)
                                                   {
                                                      this.mens[this.aof[this.cinetic_target]].stability = Math.max(-0.1,Number(this.mens[this.aof[this.cinetic_target]].stability) - this.Dist2D(this.atox[this.mc.b_body],this.atoy[this.mc.b_body],this.atox[this.cinetic_target],this.atoy[this.cinetic_target]) * this.thispulspeed * 0.025);
                                                   }
                                                }
                                                this.mens[this.aof[this.cinetic_target]].tox += cx * this.thispulspeed / 6;
                                                this.mens[this.aof[this.cinetic_target]].toy += cy * this.thispulspeed / 6;
                                                if(this.mens[this.aof[this.cinetic_target]].team != this.mens[this.MP_myid].team)
                                                {
                                                   if(this.mens[this.aof[this.cinetic_target]].hunt != this.MP_myid)
                                                   {
                                                      if(this.mens[this.aof[this.cinetic_target]].hea > 0)
                                                      {
                                                         this.Alerted(this.mens[this.aof[this.cinetic_target]]);
                                                         this.mens[this.aof[this.cinetic_target]].hunt = this.MP_myid;
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                          if(Math.random() > 0.7)
                                          {
                                             this.Effect(this.ax[this.cinetic_target],this.ay[this.cinetic_target],13,0,0);
                                             this.Effect(this.ax[this.mc.b_arm2],this.ay[this.mc.b_arm2],13,0,0);
                                          }
                                          this.aio[this.cinetic_target] = true;
                                          this.atim[this.cinetic_target] = 0;
                                          if(this.aactive[this.cinetic_target] != 1000)
                                          {
                                             if(this.aof[this.cinetic_target] < 0 && this.aof[this.cinetic_target] > -100)
                                             {
                                                if(this.guns[-Number(this.aof[this.cinetic_target]) - 1].picken_by != -1)
                                                {
                                                   this.ok = true;
                                                   if(!this.guns[-Number(this.aof[this.cinetic_target]) - 1].forcars)
                                                   {
                                                      if(this.guns[-Number(this.aof[this.cinetic_target]) - 1].picken_by != this.MP_myid)
                                                      {
                                                         if(this.mens[this.guns[-Number(this.aof[this.cinetic_target]) - 1].picken_by].team == this.mens[this.MP_myid].team)
                                                         {
                                                            if(this.mens[this.guns[-Number(this.aof[this.cinetic_target]) - 1].picken_by].can_drop_guns)
                                                            {
                                                               if(this.mens[this.guns[-Number(this.aof[this.cinetic_target]) - 1].picken_by].curwea == -Number(this.aof[this.cinetic_target]) - 1)
                                                               {
                                                                  this.mens[this.guns[-Number(this.aof[this.cinetic_target]) - 1].picken_by].curwea = -1;
                                                               }
                                                               this.guns[-Number(this.aof[this.cinetic_target]) - 1].picken_by = -1;
                                                               this.ok = false;
                                                            }
                                                         }
                                                      }
                                                   }
                                                   if(this.ok)
                                                   {
                                                      this.cinetic_target = -1;
                                                   }
                                                }
                                             }
                                          }
                                          if(!this.key_kinetic)
                                          {
                                             this.cinetic_target = -1;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        if(this.mc.curwea != -1)
                        {
                           if(this.mc.act_fire)
                           {
                              this.xx *= 0.7;
                           }
                           if(i != this.MP_myid || this.mc.act_fire || !this.key_kinetic)
                           {
                              this.TurnBone(this.mc.b_arm1,this.ax[this.mc.b_body] + Math.sin(this.mc.ang) * 30 * Number(this.guns[this.mc.curwea].xpos1) * Number(this.mc.scale),this.ay[this.mc.b_body] + Math.cos(this.mc.ang) * 30 * Number(this.guns[this.mc.curwea].xpos1) * Number(this.mc.scale),this.mc,this.xx * 1.5);
                              if(i != this.MP_myid || !this.key_kinetic)
                              {
                                 this.TurnBone(this.mc.b_arm2,this.ax[this.mc.b_body] + Math.sin(this.mc.ang) * 30 * Number(this.guns[this.mc.curwea].xpos2) * Number(this.mc.scale),this.ay[this.mc.b_body] + Math.cos(this.mc.ang) * 30 * Number(this.guns[this.mc.curwea].xpos2) * Number(this.mc.scale),this.mc,this.xx * 1.5);
                              }
                           }
                           else if(this.key_kinetic)
                           {
                              this.TurnBone(this.mc.b_arm1,this.ax[this.mc.b_body] + Math.sin(this.mc.ang) * 15 * Number(this.guns[this.mc.curwea].xpos1) * Number(this.mc.scale),this.ay[this.mc.b_body] + (Math.cos(this.mc.ang) * 15 * Number(this.guns[this.mc.curwea].xpos1) + 15) * Number(this.mc.scale),this.mc,this.xx * 1.5);
                           }
                        }
                        else if(Boolean(this.mc.act_fire) && (i != this.MP_myid || !this.key_kinetic))
                        {
                           this.xx = 0.6;
                           if(this.NO_PSI)
                           {
                              this.xx *= 0.9;
                              this.u = 30 + Math.sin(this.mc.melee_ani) * 15;
                              this.v = 30 - Math.sin(this.mc.melee_ani) * 15;
                           }
                           else
                           {
                              this.u = 25 + Math.sin(this.mc.melee_ani) * 20;
                              this.v = 25 - Math.sin(this.mc.melee_ani) * 20;
                           }
                           if(this.u > 30)
                           {
                              this.u = 30;
                           }
                           if(this.v > 30)
                           {
                              this.v = 30;
                           }
                           this.TurnBone(this.mc.b_arm1,this.ax[this.mc.b_body] + Math.sin(Number(this.mc.ang) - 0.1 + Math.sin(this.mc.melee_ani) * 0.3) * this.u * Number(this.mc.scale),this.ay[this.mc.b_body] + Math.cos(Number(this.mc.ang) - 0.1 + Math.sin(this.mc.melee_ani) * 0.3) * this.u * Number(this.mc.scale),this.mc,this.xx);
                           this.TurnBone(this.mc.b_arm2,this.ax[this.mc.b_body] + Math.sin(this.mc.ang + 0.1 + Math.cos(this.mc.melee_ani) * 0.3) * this.v * Number(this.mc.scale),this.ay[this.mc.b_body] + Math.cos(this.mc.ang + 0.1 + Math.sin(this.mc.melee_ani) * 0.3) * this.v * Number(this.mc.scale),this.mc,this.xx);
                        }
                        else
                        {
                           this.TurnBone(this.mc.b_arm1,this.ax[this.mc.b_body] + (5 + Number(this.mc.tox) * 2 * Math.sin(Number(this.mc.idle_phase) * 0.5)) * Number(this.mc.scale),this.ay[this.mc.b_body] + (25 + Number(this.mc.toy) * 1) * Number(this.mc.scale),this.mc,this.xx * 0.3);
                           if(i != this.MP_myid || !this.key_kinetic)
                           {
                              this.TurnBone(this.mc.b_arm2,this.ax[this.mc.b_body] + (-5 - Number(this.mc.tox) * 2 * Math.sin(Number(this.mc.idle_phase) * 0.5)) * Number(this.mc.scale),this.ay[this.mc.b_body] + (25 - Number(this.mc.toy) * 1) * Number(this.mc.scale),this.mc,this.xx * 0.3);
                           }
                        }
                        if(this.mc.stability <= 0)
                        {
                           this.atoy[this.mc.b_head_end] += Math.cos(this.mc.ang + Math.PI / 2 * Number(this.mc.side)) * this.thispulspeed;
                           this.atoy[this.mc.b_head_start] -= Math.cos(this.mc.ang + Math.PI / 2 * Number(this.mc.side)) * this.thispulspeed;
                           this.atox[this.mc.b_head_end] += Math.sin(this.mc.ang + Math.PI / 2 * Number(this.mc.side)) * this.thispulspeed;
                           this.atox[this.mc.b_head_start] -= Math.sin(this.mc.ang + Math.PI / 2 * Number(this.mc.side)) * this.thispulspeed;
                        }
                        if(this.mc.inwater)
                        {
                           this.u = 0.75;
                           if(!water_friction)
                           {
                              this.u = 0.36;
                           }
                           else if(this.MP_mode)
                           {
                              if(this.MP_type != 2)
                              {
                                 this.u = 1;
                              }
                           }
                           this.u *= this.thispulspeed;
                           if(this.mc.act_movex != 0 && this.mc.act_movey != 0)
                           {
                              this.u *= 0.7071;
                           }
                           if(this.mc.act_movex == 1)
                           {
                              this.atox[this.mc.b_body] += 3 * this.u;
                              this.atox[this.mc.b_toe] += 1 * this.u;
                              this.atox[this.mc.b_head_start] += 1 * this.u;
                              this.atox[this.mc.b_head_end] += 1 * this.u;
                              this.mc.idle_phase += 0.1 * this.thispulspeed;
                           }
                           if(this.mc.act_movex == -1)
                           {
                              this.atox[this.mc.b_body] -= 3 * this.u;
                              this.atox[this.mc.b_toe] -= 1 * this.u;
                              this.atox[this.mc.b_head_start] -= 1 * this.u;
                              this.atox[this.mc.b_head_end] -= 1 * this.u;
                              this.mc.idle_phase += 0.1 * this.thispulspeed;
                           }
                           if(this.mc.act_movey == -1)
                           {
                              this.atoy[this.mc.b_body] -= 3 * this.u;
                              this.atoy[this.mc.b_toe] -= 2 * this.u;
                              this.atoy[this.mc.b_head_start] -= 1 * this.u;
                              this.atoy[this.mc.b_head_end] -= 1 * this.u;
                           }
                           if(this.mc.act_movey == 1)
                           {
                              this.atoy[this.mc.b_body] += 3 * this.u;
                              this.atoy[this.mc.b_toe] += 2 * this.u;
                              this.atoy[this.mc.b_head_start] += 1 * this.u;
                              this.atoy[this.mc.b_head_end] += 1 * this.u;
                           }
                           this.atoy[this.mc.b_leg1] += Math.sin(Number(this.mc.idle_phase) * 2) * 0.3 * this.thispulspeed;
                           this.atoy[this.mc.b_leg2] -= Math.sin(Number(this.mc.idle_phase) * 2) * 0.3 * this.thispulspeed;
                           if(this.mc.stand)
                           {
                              if(this.mc.act_movey == -1)
                              {
                                 this.atoy[this.mc.b_body] = -8;
                                 this.mc.toy = -8;
                                 this.mc.stability = 0.7;
                              }
                           }
                        }
                     }
                     if(i == this.MP_myid && this.key_fall || i != this.MP_myid && this.mc.isplayer && this.mc.stability == -0.1)
                     {
                        if(!this.MP_mode || this.MP_type != 2 || this.MP_gamestate != 2)
                        {
                           if(this.mc.stability > 0)
                           {
                              this.mc.stability *= 0.7;
                              this.mc.stability -= 0.1;
                           }
                           if(this.mc.stability > -0.1)
                           {
                              this.mc.stability = -0.1;
                           }
                           this.xx = Math.atan2(Number(this.ax[this.mc.b_toe]) - Number(this.ax[this.mc.b_body]),Number(this.ay[this.mc.b_toe]) - Number(this.ay[this.mc.b_body])) + Math.PI / 2;
                           this.atox[this.mc.b_head_start] += Math.sin(this.xx) * Number(this.mc.act_movex) / 4 * this.thispulspeed;
                           this.atoy[this.mc.b_head_start] += Math.cos(this.xx) * Number(this.mc.act_movex) / 4 * this.thispulspeed;
                           this.atox[this.mc.b_head_end] += Math.sin(this.xx) * Number(this.mc.act_movex) / 4 * this.thispulspeed;
                           this.atoy[this.mc.b_head_end] += Math.cos(this.xx) * Number(this.mc.act_movex) / 4 * this.thispulspeed;
                           this.atox[this.mc.b_body] += (Math.sin(this.xx) * Number(this.mc.act_movex) / 4 + Number(this.mc.act_movex) / 2) * this.thispulspeed;
                           this.atoy[this.mc.b_body] += Math.cos(this.xx) * Number(this.mc.act_movex) / 4 * this.thispulspeed;
                           this.atox[this.mc.b_toe] -= Math.sin(this.xx) * Number(this.mc.act_movex) / 4 * this.thispulspeed;
                           this.atoy[this.mc.b_toe] -= Math.cos(this.xx) * Number(this.mc.act_movex) / 4 * this.thispulspeed;
                           this.atox[this.mc.b_leg1] -= Math.sin(this.xx) * Number(this.mc.act_movex) / 4 * this.thispulspeed;
                           this.atoy[this.mc.b_leg1] -= Math.cos(this.xx) * Number(this.mc.act_movex) / 4 * this.thispulspeed;
                           this.atox[this.mc.b_leg2] -= Math.sin(this.xx) * Number(this.mc.act_movex) / 4 * this.thispulspeed;
                           this.atoy[this.mc.b_leg2] -= Math.cos(this.xx) * Number(this.mc.act_movex) / 4 * this.thispulspeed;
                        }
                     }
                     if(this.mc.stand)
                     {
                        this.mc.boost = Math.min(this.mc.boost + 0.4 * this.thispulspeed,this.mc.stability);
                     }
                     if(this.mc.stability < 0)
                     {
                        this.xx = 1;
                        if((this.ay[this.mc.b_leg1] + this.ay[this.mc.b_leg2]) / 2 > Number(this.ay[this.mc.b_body]) - 70)
                        {
                           this.xx = 2;
                        }
                        if(!this.mc.dying)
                        {
                           if(i != this.MP_myid || i == this.MP_myid && !this.key_fall)
                           {
                              if(Math.sqrt(Number(this.atox[this.mc.b_toe]) * Number(this.atox[this.mc.b_toe]) + Number(this.atoy[this.mc.b_toe]) * Number(this.atoy[this.mc.b_toe])) < 4 * this.xx)
                              {
                                 if(!this.mc.mp_controlled)
                                 {
                                    this.mc.stability += 0.02 * this.thispulspeed;
                                 }
                                 if(!this.MP_mode || this.MP_myid == i || !this.mc.isplayer)
                                 {
                                    if(this.TraceLine(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe],this.ax[this.mc.b_toe],Number(this.ay[this.mc.b_toe]) - 20))
                                    {
                                       if(!this.TraceLine(this.ax[this.mc.b_toe] + 30,this.ay[this.mc.b_toe],Number(this.ax[this.mc.b_toe]) - 30,this.ay[this.mc.b_toe] + 60) || !this.TraceLine(Number(this.ax[this.mc.b_toe]) - 30,this.ay[this.mc.b_toe],this.ax[this.mc.b_toe] + 60,this.ay[this.mc.b_toe] + 60))
                                       {
                                          if(!this.mc.mp_controlled)
                                          {
                                             this.mc.stability += this.xx * 0.04 * Math.min(1,this.mc.mobility) * this.thispulspeed;
                                          }
                                          this.mc.sit = 1;
                                       }
                                    }
                                 }
                                 if(!this.mc.inwater)
                                 {
                                    if(this.mc.stability != -0.1)
                                    {
                                       if(!this.TracePointNoRagdolls(this.ax[this.mc.b_leg1],this.ay[this.mc.b_leg1] + this.arad[this.mc.b_leg1] + 5) || !this.TracePointNoRagdolls(this.ax[this.mc.b_leg2],this.ay[this.mc.b_leg2] + this.arad[this.mc.b_leg2] + 5) || !this.TracePointNoRagdolls(this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1] + this.arad[this.mc.b_arm1] + 5) || !this.TracePointNoRagdolls(this.ax[this.mc.b_arm2],this.ay[this.mc.b_arm2] + this.arad[this.mc.b_arm2] + 5) || !this.TracePointNoRagdolls(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe] + this.arad[this.mc.b_toe] + 5))
                                       {
                                          this.atoy[this.mc.b_toe] -= 0.5 * this.thispulspeed;
                                          this.atoy[this.mc.b_body] -= 0.5 * this.thispulspeed;
                                          this.atoy[this.mc.b_arm1] -= 1 * this.thispulspeed;
                                          this.atoy[this.mc.b_arm2] += 1 * this.thispulspeed;
                                          this.atoy[this.mc.b_head_start] -= 1 * this.thispulspeed;
                                          this.atoy[this.mc.b_head_end] -= 1 * this.thispulspeed;
                                          this.atox[this.mc.b_leg1] -= 0.3 * this.thispulspeed;
                                          this.atox[this.mc.b_leg2] += 0.3 * this.thispulspeed;
                                          this.atoy[this.mc.b_leg1] += 0.5 * this.thispulspeed;
                                          this.atoy[this.mc.b_leg2] += 0.5 * this.thispulspeed;
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                     else if(this.mc.stability < 1)
                     {
                        if(!this.mc.mp_controlled)
                        {
                           this.mc.stability += Math.max(0.1,this.mc.stability) * 0.1 * this.thispulspeed;
                        }
                     }
                     if(this.mc.stability > 1)
                     {
                        this.mc.stability = 1;
                     }
                     if(this.mc.stability < -0.5)
                     {
                        this.mc.stability = -0.5;
                     }
                  }
                  if(this.mc.notseen)
                  {
                     this.mc.notseen = false;
                     this.WakeUpAtom(this.mc.b_toe);
                     this.WakeUpAtom(this.mc.b_body);
                  }
                  if(Boolean(this.aio[this.mc.b_toe]) || Boolean(this.aio[this.mc.b_body]))
                  {
                     this.mc.leg1.scaleX = Number(this.mc.side) * Number(this.mc.scale);
                     this.mc.leg1.x = Number(this.ax[this.mc.b_toe]) - this.mc.x;
                     this.mc.leg1.y = Number(this.ay[this.mc.b_toe]) - this.mc.y;
                     this.mc.leg1.rotation = 180 - Math.atan2(Number(this.ax[this.mc.b_toe]) - Number(this.ax[this.mc.b_leg1]),Number(this.ay[this.mc.b_toe]) - Number(this.ay[this.mc.b_leg1])) / Math.PI * 180;
                     this.mc.leg2.scaleX = Number(this.mc.side) * Number(this.mc.scale);
                     this.mc.leg2.x = Number(this.ax[this.mc.b_toe]) - this.mc.x + 2;
                     this.mc.leg2.y = Number(this.ay[this.mc.b_toe]) - this.mc.y;
                     this.mc.leg2.rotation = 180 - Math.atan2(Number(this.ax[this.mc.b_toe]) - Number(this.ax[this.mc.b_leg2]),Number(this.ay[this.mc.b_toe]) - Number(this.ay[this.mc.b_leg2])) / Math.PI * 180;
                     if(this.mc.brk_legs)
                     {
                        this.LegBone(this.mc.leg1,120,false,false);
                        this.LegBone(this.mc.leg2,120,false,false);
                     }
                     else
                     {
                        inverse_legs = this.mc.mdl_leg1_upper == 34;
                        this.LegBone(this.mc.leg1,Math.max(1,Math.min(120,this.Dist2D(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe],this.ax[this.mc.b_leg1],this.ay[this.mc.b_leg1]) / 31 * 120 / Number(this.mc.scale))),inverse_legs,this.mc.stand);
                        this.LegBone(this.mc.leg2,Math.max(1,Math.min(120,this.Dist2D(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe],this.ax[this.mc.b_leg2],this.ay[this.mc.b_leg2]) / 31 * 120 / Number(this.mc.scale))),inverse_legs,this.mc.stand);
                     }
                     this.mc.arm1.scaleX = Number(this.mc.side) * Number(this.mc.scale);
                     this.mc.arm1.x = Number(this.ax[this.mc.b_body]) - this.mc.x;
                     this.mc.arm1.y = Number(this.ay[this.mc.b_body]) - this.mc.y;
                     this.mc.arm1.rotation = 180 - Math.atan2(Number(this.ax[this.mc.b_body]) - Number(this.ax[this.mc.b_arm1]),Number(this.ay[this.mc.b_body]) - Number(this.ay[this.mc.b_arm1])) / Math.PI * 180;
                     this.mc.arm2.scaleX = Number(this.mc.side) * Number(this.mc.scale);
                     this.mc.arm2.x = Number(this.ax[this.mc.b_body]) - this.mc.x + 2;
                     this.mc.arm2.y = Number(this.ay[this.mc.b_body]) - this.mc.y;
                     this.mc.arm2.rotation = 180 - Math.atan2(Number(this.ax[this.mc.b_body]) - Number(this.ax[this.mc.b_arm2]),Number(this.ay[this.mc.b_body]) - Number(this.ay[this.mc.b_arm2])) / Math.PI * 180;
                     if(this.mc.brk_arms)
                     {
                        this.ArmBone(this.mc.arm1,60);
                        this.ArmBone(this.mc.arm2,60);
                     }
                     else
                     {
                        this.ArmBone(this.mc.arm1,Math.max(1,Math.min(60,this.Dist2D(this.ax[this.mc.b_body],this.ay[this.mc.b_body],this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]) / 30 * 60 / Number(this.mc.scale))));
                        this.ArmBone(this.mc.arm2,Math.max(1,Math.min(60,this.Dist2D(this.ax[this.mc.b_body],this.ay[this.mc.b_body],this.ax[this.mc.b_arm2],this.ay[this.mc.b_arm2]) / 30 * 60 / Number(this.mc.scale))));
                     }
                     this.mc.toe.scaleX = Number(this.mc.side) * Number(this.mc.scale);
                     this.mc.toe.x = Number(this.ax[this.mc.b_toe]) - this.mc.x;
                     this.mc.toe.y = Number(this.ay[this.mc.b_toe]) - this.mc.y;
                     if(Boolean(this.mc.brk_body) && (this.VIOLENCE || this.MP_mode))
                     {
                        this.mc.toe.rotation = -Math.atan2(Number(this.ax[this.mc.b_toe]) - Number(this.ax[this.mc.b_brk2]),Number(this.ay[this.mc.b_toe]) - Number(this.ay[this.mc.b_brk2])) / Math.PI * 180;
                     }
                     else
                     {
                        this.mc.toe.rotation = -Math.atan2(Number(this.ax[this.mc.b_toe]) - Number(this.ax[this.mc.b_body]),Number(this.ay[this.mc.b_toe]) - Number(this.ay[this.mc.b_body])) / Math.PI * 180;
                     }
                     if(Boolean(this.mc.brk_body) && (this.VIOLENCE || this.MP_mode))
                     {
                        this.xx = Math.atan2(Number(this.ax[this.mc.b_brk1]) - Number(this.ax[this.mc.b_body]),Number(this.ay[this.mc.b_brk1]) - Number(this.ay[this.mc.b_body]));
                     }
                     else
                     {
                        this.xx = Math.atan2(Number(this.ax[this.mc.b_toe]) - Number(this.ax[this.mc.b_body]),Number(this.ay[this.mc.b_toe]) - Number(this.ay[this.mc.b_body]));
                     }
                     this.mc.body.scaleX = Number(this.mc.side) * Number(this.mc.scale);
                     this.mc.body.x = Number(this.ax[this.mc.b_body]) - this.mc.x + Math.sin(this.xx) * 24 * Number(this.mc.scale);
                     this.mc.body.y = Number(this.ay[this.mc.b_body]) - this.mc.y + Math.cos(this.xx) * 24 * Number(this.mc.scale);
                     this.mc.body.rotation = -this.xx / Math.PI * 180;
                     this.mc.head.scaleX = Number(this.mc.side) * Number(this.mc.scale);
                     this.mc.head.x = Number(this.ax[this.mc.b_head_start]) - this.mc.x;
                     this.mc.head.y = Number(this.ay[this.mc.b_head_start]) - this.mc.y;
                     this.mc.head.rotation = -Math.atan2(Number(this.ax[this.mc.b_head_start]) - Number(this.ax[this.mc.b_head_end]),Number(this.ay[this.mc.b_head_start]) - Number(this.ay[this.mc.b_head_end])) / Math.PI * 180;
                  }
                  if(this.mc.io)
                  {
                     if(this.mc.gui.visible)
                     {
                        this.mc.gui.x = Number(this.ax[this.mc.b_head_start]) - this.mc.x;
                        this.mc.gui.y = Number(this.ay[this.mc.b_head_start]) - this.mc.y - 50;
                        if(this.mc.real_hea > 0)
                        {
                           if(this.mc.hea > this.mc.hmax)
                           {
                              this.mc.gui.h.scaleX = 1;
                           }
                           else
                           {
                              this.mc.gui.h.scaleX = Number(this.mc.hea) / Number(this.mc.hmax);
                           }
                        }
                        else if(this.mc.gui.alpha > 0)
                        {
                           this.mc.gui.h.scaleX = 0;
                           this.mc.gui.alpha -= 0.1 * this.GSPEED;
                        }
                        else
                        {
                           this.mc.gui.visible = false;
                        }
                     }
                     if(!this.mens[i].visible)
                     {
                        this.mens[i].visible = true;
                     }
                     if(this.mc.isGhost)
                     {
                        if(!this.mc.dead)
                        {
                           if(!this.MP_mode || !this.MP_app)
                           {
                              if(this.mc.alpha > 0)
                              {
                                 this.mc.alpha -= 0.02 * this.GSPEED;
                              }
                              if(this.mc.dying)
                              {
                                 this.mc.alpha = 0.05 + Math.random() * 0.1;
                              }
                           }
                        }
                     }
                     if(this.mc.char == 5)
                     {
                        if(!this.MP_mode || !this.MP_app)
                        {
                           if(this.mc.alpha > 0)
                           {
                              this.mc.alpha = 0;
                           }
                        }
                     }
                     if(this.mc.antigravity != 0)
                     {
                        if(!this.mc.dead)
                        {
                           if(!this.MP_mode || !this.MP_app)
                           {
                              this.i2 = 0;
                              while(this.i2 < this.playerstotal)
                              {
                                 if(this.mens[this.i2].io)
                                 {
                                    if(this.mens[this.i2] != this.mc)
                                    {
                                       if(this.mens[this.i2].incar == -1)
                                       {
                                          if(this.mens[this.i2].hea > 0)
                                          {
                                             dx = Number(this.ax[this.mc.b_body]) - Number(this.ax[this.mens[this.i2].b_body]);
                                             dy = Number(this.ay[this.mc.b_body]) - Number(this.ay[this.mens[this.i2].b_body]);
                                             di = this.Dist2D(dx,dy,0,0);
                                             if(di < this.mc.antigravity_radius)
                                             {
                                                if(di >= 1)
                                                {
                                                   di *= 1.5;
                                                   this.atox[this.mc.b_body] += dx / di * this.GSPEED * 6;
                                                   this.atoy[this.mc.b_body] += dy / di * this.GSPEED * 6;
                                                   this.atox[this.mens[this.i2].b_body] -= dx / di * this.GSPEED * 6;
                                                   this.atoy[this.mens[this.i2].b_body] -= dy / di * this.GSPEED * 6;
                                                   this.mc.tox += dx / di * this.GSPEED;
                                                   this.mc.toy += dy / di * this.GSPEED;
                                                   this.mens[this.i2].tox -= dx / di * this.GSPEED;
                                                   this.mens[this.i2].toy -= dy / di * this.GSPEED;
                                                   if(Math.random() > 0.7)
                                                   {
                                                      this.Effect(this.ax[this.mc.b_body],this.ay[this.mc.b_body],13,0,0);
                                                      this.Effect(this.ax[this.mens[this.i2].b_body],this.ay[this.mens[this.i2].b_body],13,0,0);
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                                 ++this.i2;
                              }
                              this.i2 = 0;
                              while(this.i2 <= this.pulsmax)
                              {
                                 if(this.puls[this.i2] != null)
                                 {
                                    if(this.puls[this.i2].visible == true)
                                    {
                                       dx = Number(this.ax[this.mc.b_body]) - Number(this.puls[this.i2].x);
                                       dy = Number(this.ay[this.mc.b_body]) - Number(this.puls[this.i2].y);
                                       di = this.Dist2D(dx,dy,0,0);
                                       if(di < this.mc.antigravity_radius)
                                       {
                                          if(di >= 1)
                                          {
                                             di *= 1.5;
                                             di /= 7.5;
                                             if(this.puls[this.i2].cclass == 6 || this.puls[this.i2].cclass == 4)
                                             {
                                                this.i3 = this.puls[this.i2].attached;
                                                this.atox[this.i3] -= dx / di * this.GSPEED;
                                                this.atoy[this.i3] -= dy / di * this.GSPEED;
                                                this.mc.tox += dx / di * this.GSPEED * 0.2;
                                                this.mc.toy += dy / di * this.GSPEED * 0.2;
                                                this.WakeUpAtom(this.i3);
                                                if(Math.random() > 0.7)
                                                {
                                                   this.Effect(this.ax[this.mc.b_body],this.ay[this.mc.b_body],13,0,0);
                                                   this.Effect(this.ax[this.i3],this.ay[this.i3],13,0,0);
                                                }
                                             }
                                             else
                                             {
                                                this.puls[this.i2].spx -= dx / di * this.GSPEED;
                                                this.puls[this.i2].spy -= dy / di * this.GSPEED;
                                                this.puls[this.i2].rotation = 270 - Math.atan2(this.puls[this.i2].spx,this.puls[this.i2].spy) / Math.PI * 180;
                                                this.mc.tox += dx / di * this.GSPEED * 0.1;
                                                this.mc.toy += dy / di * this.GSPEED * 0.1;
                                                if(Math.random() > 0.7)
                                                {
                                                   this.Effect(this.ax[this.mc.b_body],this.ay[this.mc.b_body],13,0,0);
                                                   this.Effect(this.puls[this.i2].x,this.puls[this.i2].y,13,0,0);
                                                }
                                             }
                                             if(this.mens[this.puls[this.i2].master].team != this.mc.team)
                                             {
                                                this.puls[this.i2].master = this.mc.idd;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 ++this.i2;
                              }
                           }
                        }
                     }
                     if(this.mc.dead)
                     {
                        if(!this.mc.isplayer)
                        {
                           if(this.mc.team != this.mens[this.MP_myid].team || this.MP_mode || this.mc.team != 0)
                           {
                              if(!this.SUPER_COMPUTER && !this.HQ || this.MEAT_MODE || this.MP_mode)
                              {
                                 this.mc.deadtim += this.GSPEED;
                              }
                              if(this.c_sim_stress && !this.MP_mode)
                              {
                                 if(this.mc.deadtim > 100)
                                 {
                                    this.mc.alpha -= 0.4;
                                 }
                              }
                              else if(this.mc.alpha >= 0)
                              {
                                 if(this.mc.deadtim > 200)
                                 {
                                    this.mc.alpha -= 0.1;
                                 }
                              }
                              if(this.mc.alpha < 0)
                              {
                                 this.mc.io = false;
                                 this.mc.visible = false;
                                 this.aactive[i] = false;
                                 if(!this.MP_mode)
                                 {
                                    if(i != this.MP_myid)
                                    {
                                       this.aactive[i] = false;
                                       this.aio[this.mc.b_toe] = -1;
                                       this.aio[this.mc.b_body] = -1;
                                       this.aio[this.mc.b_arm1] = -1;
                                       this.aio[this.mc.b_arm2] = -1;
                                       this.aio[this.mc.b_leg1] = -1;
                                       this.aio[this.mc.b_leg2] = -1;
                                       this.aio[this.mc.b_head_start] = -1;
                                       this.aio[this.mc.b_head_end] = -1;
                                       this.aio[this.mc.b_brk1] = -1;
                                       this.aio[this.mc.b_brk2] = -1;
                                       this.mc.x = -10000;
                                       this.mc.y = -10000;
                                       this.mc.scaleX = 0;
                                       this.mc.scaleY = 0;
                                       this.game.removeChild(this.mc);
                                       this.mens[i] = new Object();
                                       this.mens[i].io = false;
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
               else
               {
                  this.aactive[i] = false;
                  if(this.mens[i].visible)
                  {
                     this.mens[i].visible = false;
                     this.mens[i].notseen = true;
                  }
               }
            }
            i++;
         }
      }
      
      public function DebugBugCaches() : void
      {
         var _loc1_:int = 0;
         _loc1_ = 0;
         while(_loc1_ < this.atotal)
         {
            if(this.aio[_loc1_] == true || this.aio[_loc1_] == false)
            {
               if(this.amat[_loc1_] == 1 || this.amat[_loc1_] == 0)
               {
                  if(this.mens[this.aof[_loc1_]].io)
                  {
                     if(this.mens[this.aof[_loc1_]].b_leg1 != _loc1_)
                     {
                        if(this.mens[this.aof[_loc1_]].b_leg2 != _loc1_)
                        {
                           if(this.mens[this.aof[_loc1_]].b_body != _loc1_)
                           {
                              if(this.mens[this.aof[_loc1_]].b_toe != _loc1_)
                              {
                                 if(this.mens[this.aof[_loc1_]].b_head_end != _loc1_)
                                 {
                                    if(this.mens[this.aof[_loc1_]].b_head_start != _loc1_)
                                    {
                                       if(this.mens[this.aof[_loc1_]].b_arm1 != _loc1_)
                                       {
                                          if(this.mens[this.aof[_loc1_]].b_arm2 != _loc1_)
                                          {
                                             if(this.mens[this.aof[_loc1_]].b_brk1 != _loc1_)
                                             {
                                                if(this.mens[this.aof[_loc1_]].b_brk2 != _loc1_)
                                                {
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
            _loc1_++;
         }
      }
      
      public function VarHash(param1:*, param2:Number) : *
      {
         var _loc3_:String = null;
         var _loc4_:* = undefined;
         if(typeof param1 == "string")
         {
            _loc3_ = "";
            _loc4_ = 0;
            while(_loc4_ < param1.length)
            {
               _loc3_ += param1.charAt(_loc4_) + (param2 + _loc4_ + this.vs_salt) % 10;
               _loc4_++;
            }
            return _loc3_;
         }
         return param1 * (1.223 + Math.sin(param2 * 0.775)) + param2 * 31.101;
      }
      
      public function VarUnHash(param1:*, param2:Number) : *
      {
         var _loc3_:String = null;
         var _loc4_:* = undefined;
         if(typeof param1 == "string")
         {
            _loc3_ = "";
            _loc4_ = 0;
            while(_loc4_ < param1.length)
            {
               _loc3_ += param1.charAt(_loc4_);
               if(_loc4_ + 1 < param1.length && param1.charAt(_loc4_ + 1) != (param2 + _loc4_ / 2 + this.vs_salt) % 10 + "")
               {
                  _loc3_ += param1.charAt(_loc4_);
               }
               _loc4_ += 2;
            }
            return _loc3_;
         }
         return (param1 - param2 * 31.101) / (1.223 + Math.sin(param2 * 0.775));
      }
      
      public function VarChangeCheck(param1:*, param2:*) : void
      {
         var v:* = param1;
         var i:* = param2;
		 fscommand("quit");
         if(this.VarUnHash(this.vc_cache[i],i) == v || Boolean(isNaN(this.vc_cache[i])) && Boolean(isNaN(v)))
         {
            return;
         }
         if(Math.abs(this.VarUnHash(this.vc_cache[i],i) - v) < 0.01)
         {
            return;
         }
         if(this.VarUnHash(this.vc_cache[i],i) > 10000)
         {
            if(v > 10000)
            {
               return;
            }
         }
      }
      
      public function VarChangeCache(param1:*, param2:*) : void
      {
         this.vc_cache[param2] = this.VarHash(param1,param2);
      }
      
      public function VarChangePreventStart() : void
      {
		 return;
         if(currentFrame != 18)
         {
            return;
         }
         if(this.vc_fresh)
         {
            this.vc_fresh = false;
            return;
         }
         if(!this.MP_mode || this.FORCE_CUSTOM_MAP)
         {
            return;
         }
         var _loc1_:int = 0;
         this.VarChangeCheck(this.grenades_total,_loc1_++);
         this.VarChangeCheck(this.grenades_port_total,_loc1_++);
         this.VarChangeCheck(this.grenades_sh_total,_loc1_++);
         this.VarChangeCheck(this.MP_start_grenades_count,_loc1_++);
         this.VarChangeCheck(this.MP_start_grenades_port_count,_loc1_++);
         this.VarChangeCheck(this.MP_start_grenades_sh_count,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].team,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].hea,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].real_hea,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].hmax,_loc1_++);
         this.VarChangeCheck(this.pspeed,_loc1_++);
         this.VarChangeCheck(this.maxbulletlife,_loc1_++);
         this.VarChangeCheck(this.GLOBAL_REGEN_SPEED,_loc1_++);
         this.VarChangeCheck(this.GLOBAL_REGEN_DELAY,_loc1_++);
         this.VarChangeCheck(this.GLOBAL_FALL_DAMAGE_MULT,_loc1_++);
         this.VarChangeCheck(this.GLOBAL_FALL_SENSITIVITY_MULT,_loc1_++);
         this.VarChangeCheck(this.BOOST_MULT,_loc1_++);
         this.VarChangeCheck(this.BOOST_HIGH_PHYSICS,_loc1_++);
         this.VarChangeCheck(this.BOOST_LOW_PHYSICS,_loc1_++);
         this.VarChangeCheck(this.unstable,_loc1_++);
         this.VarChangeCheck(this.gravity,_loc1_++);
         this.VarChangeCheck(this.regionstotal,_loc1_++);
         this.VarChangeCheck(this.doorstotal,_loc1_++);
         this.VarChangeCheck(this.playerstotal,_loc1_++);
         this.VarChangeCheck(this.watertotal,_loc1_++);
         this.VarChangeCheck(this.gunstotal,_loc1_++);
         this.VarChangeCheck(this.pushstotal,_loc1_++);
         this.VarChangeCheck(this.MP_type,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].stability,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].scale,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].x,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].y,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].tox,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].toy,_loc1_++);
         this.VarChangeCheck(this.timeshift,_loc1_++);
         this.VarChangeCheck(this.weapon_penetration_factor,_loc1_++);
         this.VarChangeCheck(this.rocket_speed_mult,_loc1_++);
         this.VarChangeCheck(this.grenade_speed_mult,_loc1_++);
         this.VarChangeCheck(this.plasma_speed_mult,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].antigravity,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].antigravity_radius,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].tarx,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].tary,_loc1_++);
         this.VarChangeCheck(this.mouse_x,_loc1_++);
         this.VarChangeCheck(this.mouse_y,_loc1_++);
         this.VarChangeCheck(this.MP_favor_the_shooter,_loc1_++);
         this.VarChangeCheck(this.game_scale,_loc1_++);
         this.VarChangeCheck(this.game.scaleX,_loc1_++);
         this.VarChangeCheck(this.game.scaleY,_loc1_++);
         this.VarChangeCheck(this.multiplayer_repsawn_timer_speed,_loc1_++);
         this.VarChangeCheck(this.MP_app,_loc1_++);
         this.VarChangeCheck(this.MP_fps,_loc1_++);
         this.VarChangeCheck(this.GSPEED,_loc1_++);
         this.VarChangeCheck(this.GSPEED2,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].stand,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].mobility,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].inwater,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].can_be_hit,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].login_name,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].nick,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].jump_scale,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].can_drop_guns,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].char,_loc1_++);
         this.VarChangeCheck(this.MP_room_name,_loc1_++);
         this.VarChangeCheck(this.MP_map_name,_loc1_++);
         this.VarChangeCheck(this.ANONYMOUS_MODE,_loc1_++);
         this.VarChangeCheck(this.KINETIC_MODULE_ENABLED,_loc1_++);
         this.VarChangeCheck(this.ALLOW_TIMESHIFT,_loc1_++);
         this.VarChangeCheck(this.MP_let_alive_players_hear_dead,_loc1_++);
         this.VarChangeCheck(this.MP_allow_leaderboard_details,_loc1_++);
         this.VarChangeCheck(this.PLAZMA_GAME,_loc1_++);
         this.VarChangeCheck(this.GUEST_ACCESS,_loc1_++);
         this.VarChangeCheck(this.PRO_BOTS,_loc1_++);
         this.VarChangeCheck(this.EASY_MODE,_loc1_++);
         this.VarChangeCheck(this.game_scale,_loc1_++);
         this.VarChangeCheck(this.lgame_scale,_loc1_++);
      }
      
      public function VarChangePreventEnd() : void
      {
		 return;
         var i:int;
         if(currentFrame != 18)
         {
            return;
         }
         if(this.vc_fresh)
         {
            fscommand("exit");
         }
         i = 0;
         this.VarChangeCache(this.grenades_total,i++);
         this.VarChangeCache(this.grenades_port_total,i++);
         this.VarChangeCache(this.grenades_sh_total,i++);
         this.VarChangeCache(this.MP_start_grenades_count,i++);
         this.VarChangeCache(this.MP_start_grenades_port_count,i++);
         this.VarChangeCache(this.MP_start_grenades_sh_count,i++);
         this.VarChangeCache(this.mens[this.MP_myid].team,i++);
         this.VarChangeCache(this.mens[this.MP_myid].hea,i++);
         this.VarChangeCache(this.mens[this.MP_myid].real_hea,i++);
         this.VarChangeCache(this.mens[this.MP_myid].hmax,i++);
         this.VarChangeCache(this.pspeed,i++);
         this.VarChangeCache(this.maxbulletlife,i++);
         this.VarChangeCache(this.GLOBAL_REGEN_SPEED,i++);
         this.VarChangeCache(this.GLOBAL_REGEN_DELAY,i++);
         this.VarChangeCache(this.GLOBAL_FALL_DAMAGE_MULT,i++);
         this.VarChangeCache(this.GLOBAL_FALL_SENSITIVITY_MULT,i++);
         this.VarChangeCache(this.BOOST_MULT,i++);
         this.VarChangeCache(this.BOOST_HIGH_PHYSICS,i++);
         this.VarChangeCache(this.BOOST_LOW_PHYSICS,i++);
         this.VarChangeCache(this.unstable,i++);
         this.VarChangeCache(this.gravity,i++);
         this.VarChangeCache(this.regionstotal,i++);
         this.VarChangeCache(this.doorstotal,i++);
         this.VarChangeCache(this.playerstotal,i++);
         this.VarChangeCache(this.watertotal,i++);
         this.VarChangeCache(this.gunstotal,i++);
         this.VarChangeCache(this.pushstotal,i++);
         this.VarChangeCache(this.MP_type,i++);
         this.VarChangeCache(this.mens[this.MP_myid].stability,i++);
         this.VarChangeCache(this.mens[this.MP_myid].scale,i++);
         this.VarChangeCache(this.mens[this.MP_myid].x,i++);
         this.VarChangeCache(this.mens[this.MP_myid].y,i++);
         this.VarChangeCache(this.mens[this.MP_myid].tox,i++);
         this.VarChangeCache(this.mens[this.MP_myid].toy,i++);
         this.VarChangeCache(this.timeshift,i++);
         this.VarChangeCache(this.weapon_penetration_factor,i++);
         this.VarChangeCache(this.rocket_speed_mult,i++);
         this.VarChangeCache(this.grenade_speed_mult,i++);
         this.VarChangeCache(this.plasma_speed_mult,i++);
         this.VarChangeCache(this.mens[this.MP_myid].antigravity,i++);
         this.VarChangeCache(this.mens[this.MP_myid].antigravity_radius,i++);
         this.VarChangeCache(this.mens[this.MP_myid].tarx,i++);
         this.VarChangeCache(this.mens[this.MP_myid].tary,i++);
         this.VarChangeCache(this.mouse_x,i++);
         this.VarChangeCache(this.mouse_y,i++);
         this.VarChangeCache(this.MP_favor_the_shooter,i++);
         this.VarChangeCache(this.game_scale,i++);
         this.VarChangeCache(this.game.scaleX,i++);
         this.VarChangeCache(this.game.scaleY,i++);
         this.VarChangeCache(this.multiplayer_repsawn_timer_speed,i++);
         this.VarChangeCache(this.MP_app,i++);
         this.VarChangeCache(this.MP_fps,i++);
         this.VarChangeCache(this.GSPEED,i++);
         this.VarChangeCache(this.GSPEED2,i++);
         this.VarChangeCache(this.mens[this.MP_myid].stand,i++);
         this.VarChangeCache(this.mens[this.MP_myid].mobility,i++);
         this.VarChangeCache(this.mens[this.MP_myid].inwater,i++);
         this.VarChangeCache(this.mens[this.MP_myid].can_be_hit,i++);
         this.VarChangeCache(this.mens[this.MP_myid].login_name,i++);
         this.VarChangeCache(this.mens[this.MP_myid].nick,i++);
         this.VarChangeCache(this.mens[this.MP_myid].jump_scale,i++);
         this.VarChangeCache(this.mens[this.MP_myid].can_drop_guns,i++);
         this.VarChangeCache(this.mens[this.MP_myid].char,i++);
         this.VarChangeCache(this.MP_room_name,i++);
         this.VarChangeCache(this.MP_map_name,i++);
         this.VarChangeCache(this.ANONYMOUS_MODE,i++);
         this.VarChangeCache(this.KINETIC_MODULE_ENABLED,i++);
         this.VarChangeCache(this.ALLOW_TIMESHIFT,i++);
         this.VarChangeCache(this.MP_let_alive_players_hear_dead,i++);
         this.VarChangeCache(this.MP_allow_leaderboard_details,i++);
         this.VarChangeCache(this.PLAZMA_GAME,i++);
         this.VarChangeCache(this.GUEST_ACCESS,i++);
         this.VarChangeCache(this.PRO_BOTS,i++);
         this.VarChangeCache(this.EASY_MODE,i++);
         this.VarChangeCache(this.game_scale,i++);
         this.VarChangeCache(this.lgame_scale,i++);
      }
      
      public function VarChangePreventFlush() : void
      {
         this.vc_fresh = true;
      }
      
      public function onEnterFrame(param1:Event) : void
      {
         var player_got_dot_effects:Boolean = false;
         var e:int = 0;
         var target_frame:int = 0;
         var look_x:Number = NaN;
         var look_y:Number = NaN;
         var old_x:Number = NaN;
         var old_y:Number = NaN;
         var i:int = 0;
         var local_speed_x:Number = NaN;
         var local_speed_y:Number = NaN;
         var dx:Number = NaN;
         var dy:Number = NaN;
         var di:* = undefined;
         var allow_reload:Boolean = false;
         var i2:int = 0;
         var skips:int = 0;
         var c:Color = null;
         var targ_a:Number = NaN;
         var t:* = undefined;
         var f:* = undefined;
         var event:Event = param1;
		 try {
			 if(this.FRAMERATE > 60) {
				 var originalFrameRate = stage.frameRate;
				 this.fps_toggle_perf = !this.fps_toggle_perf;
				 if (this.fps_toggle_perf)
				 {
					originalFrameRate = stage.frameRate;
					stage.frameRate = 1000;
				 }
				 else
				 {
					stage.frameRate = originalFrameRate;
				 }
			 }
		 } catch(e:*) {
			 
		 }
         this.VarChangePreventStart();
         try
         {
			this.gt_func();
		    this.rt_func();
	        this.fr_func();
            this.allow_unlag_fps = true;
            this.DebugBugCaches();
            /*if(this.MP_get_done_HAP)
            {
               this.MP_get_done(this.MP_get_done_STR);
            }
            else if(this.MP_mode)
            {
               if(!this.MP_force_disconnect)
               {
                  if(this.RECONNECT_ON_LOST_CONNECTION)
                  {
                     if(Number(getTimer()) - this.MP_ping1 > 3500)
                     {
                        this.MP_get();
                     }
                  }
               }
            }*/
            if(mouseX != 0 || mouseY != 0)
            {
               this.mouse_x = mouseX;
               this.mouse_y = mouseY;
            }
            this.c_sim_rt = getTimer();
            this.c_sim_rt2 = Number(getTimer()) - this.c_sim_rt2;
            if(this.DEBUG_MODE)
            {
               this.debug_screen.graphics.clear();
            }
            if(this.firstframe)
            {
               this.system_non_stop = true;
            }
            if(this.MP_mode)
            {
               if(this.MP_app && Number(getTimer()) - this.MP_ping1 > 500 || Number(getTimer()) - this.MP_ping1 > 3500)
               {
                  this.INLAG = true;
                  if(!this.lags.visible)
                  {
                     if(Number(getTimer()) - this.MP_ping_last > 500)
                     {
                        this.lags.visible = true;
                     }
                  }
                  this.lags.val.text = "Your ping is " + this._mp_ping_rl + " ms";
               }
               else
               {
                  this.INLAG = false;
                  if(this.lags.visible)
                  {
                     this.lags.visible = false;
                  }
               }
            }
            if(this.system_non_stop)
            {
               if(this.FREEZE_OFFSCREEN_ENTITIES)
               {
                  this.render_minX = (-this.game_x - 300) / this.game_scale;
                  this.render_minY = (-this.game_y - 200) / this.game_scale;
                  this.render_maxX = (-this.game_x + this.screenX + 300) / this.game_scale;
                  this.render_maxY = (-this.game_y + this.screenY + 200) / this.game_scale;
               }
               else
               {
                  this.render_minX = -100000;
                  this.render_minY = -100000;
                  this.render_maxX = 100000;
                  this.render_maxY = 100000;
               }
               this.FUN_TIME_SPEND += this.WSPEED;
               if(this.PLAZMA_GAME && this.ALLOW_TIMESHIFT)
               {
                  if(this.energy <= 0 || Boolean(this.mens[this.MP_myid].dead))
                  {
                     if(this.timeshift != 0)
                     {
                        this.timeshift = 0;
                        this.timeshiftch = this.s_slow_up.play(0,0,this.vol);
                        if(this.SCREEN_EFFECTS)
                        {
                           this.whitness.alpha += 1;
                           this.whitness.visible = true;
                        }
                     }
                  }
                  if(this.timeshift == 0)
                  {
                     if(this.energy < this.energy_max)
                     {
                        this.energy += 0.2 * this.GSPEED2;
                     }
                     if(this.energy >= this.energy_max)
                     {
                        this.energy = this.energy_max;
                     }
                  }
                  else
                  {
                     this.energy -= 0.4 * this.GSPEED2;
                  }
               }

			   if(this.GET_LITE_PHYS())
			   {
				  this.Physics();
				  this.LITE_PHYS_tim = !this.LITE_PHYS_tim;
			   }
			   else
			   {
				  this.Physics();
			   }
				
			   /*if(getTimer() > this.temp_timer + ((1 / (this.temp_fps * 2)) * 100)) {
				   this.UpdateAtomPathCache();
				   this.temp_timer = getTimer();
			   }*/
               this.DoorLogic();
               this.BulletLogic();
               this.PlayerLogic();
               this.ThinkOfFlakes();
               this.EffectsLogic();
		   
			   this.updateEffects();
			   this.updateMap();
		   
               if(this.lock_camera_intensity > 0)
               {
                  if(this.lock_camera_intensity > 1)
                  {
                     this.lock_camera_intensity = 1;
                  }
                  this.xx2 = this.game_x;
                  this.yy2 = this.game_y;
                  this.xx = -Number(this.lock_camera_region.x) * this.game.scaleX * this.lock_camera_intensity + this.game_x * (1 - this.lock_camera_intensity);
                  this.yy = -Number(this.lock_camera_region.y) * this.game.scaleY * this.lock_camera_intensity + this.game_y * (1 - this.lock_camera_intensity) + Math.sin(Number(getTimer()) * 0.05) * this.SHAKEAMMOUT * this.game_scale;
                  if(Math.round(this.xx) == this.xx2)
                  {
                     if(this.xx > -Number(this.lock_camera_region.x) * this.game.scaleX)
                     {
                        this.xx -= 1 * this.game.scaleX;
                     }
                     if(this.xx < -Number(this.lock_camera_region.x) * this.game.scaleX)
                     {
                        this.xx += 1 * this.game.scaleX;
                     }
                  }
                  if(Math.round(this.yy) == this.yy2)
                  {
                     if(this.yy > -Number(this.lock_camera_region.y) * this.game.scaleY)
                     {
                        this.yy -= 1 * this.game.scaleY;
                     }
                     if(this.yy < -Number(this.lock_camera_region.y) * this.game.scaleY)
                     {
                        this.yy += 1 * this.game.scaleY;
                     }
                  }
                  this.game_x = Math.round(this.xx);
                  this.game_y = Math.round(this.yy);
               }
               else if(this.MP_mode && this.mens[this.MP_myid].dead || this.MP_spectator)
               {
                  if(this.death_cam >= 0 && this.death_cam < this.playerstotal)
                  {
                     old_x = this.game_x;
                     old_y = this.game_y;
                     if(this.MP_spectator)
                     {
                        if(this.MP_myid != this.death_cam)
                        {
                           this.MP_myid = this.death_cam;
                           i = 0;
                           while(i < this.playerstotal)
                           {
                              this.UpdateTeamColor(this.mens[i]);
                              i++;
                           }
                        }
                        look_x = this.mens[this.death_cam].tarx + this.game_x;
                        look_y = this.mens[this.death_cam].tary + this.game_y;
                     }
                     else
                     {
                        look_x = this.min_max(0,this.mouse_x,this.screenX);
                        look_y = this.min_max(0,this.mouse_y,this.screenY);
                     }
                     if(this.SOFT_SCREEN)
                     {
                        this.game_x = Math.round(((-Number(this.ax[this.mens[this.death_cam].b_toe]) * this.game_scale + this.hscreenX - look_x + this.hscreenX + this.game_x * 10 / this.GSPEED2) / (1 + 10 / this.GSPEED2)));
                        this.game_y = Math.round(((-Number(this.ay[this.mens[this.death_cam].b_toe]) * this.game_scale + this.hscreenY - look_y + this.hscreenY + this.game_y * 10 / this.GSPEED2) / (1 + 10 / this.GSPEED2) + Math.sin(Number(getTimer()) * 0.05) * this.SHAKEAMMOUT * this.game_scale));
                     }
                     else
                     {
                        this.game_x = Math.round(((-Number(this.ax[this.mens[this.death_cam].b_toe]) * this.game_scale + this.hscreenX - look_x + this.hscreenX + this.game_x) / 2));
                        this.game_y = Math.round(((-Number(this.ay[this.mens[this.death_cam].b_toe]) * this.game_scale + this.hscreenY - look_y + this.hscreenY + this.game_y) / 2 + Math.sin(Number(getTimer()) * 0.05) * this.SHAKEAMMOUT * this.game_scale));
                     }
                     if(this.MP_spectator)
                     {
                        this.myCursor.x = (this.myCursor.x + look_x) / 2 - this.game_x + old_x;
                        this.myCursor.y = (this.myCursor.y + look_y) / 2 - this.game_y + old_y;
                     }
                  }
                  else
                  {
                     if(this.key_left)
                     {
                        this.game_x += 15;
                     }
                     if(this.key_right)
                     {
                        this.game_x -= 15;
                     }
                     if(this.key_up)
                     {
                        this.game_y += 15;
                     }
                     if(this.key_down)
                     {
                        this.game_y -= 15;
                     }
                  }
                  if(this.darkness.alpha >= 0.25 || this.MP_spectator || this.death_cam == -1 || this.death_cam != this.MP_myid)
                  {
                     if(is_firing)
                     {
                        is_firing = false;
                        ++this.death_cam;
                        while(this.death_cam < this.playerstotal && this.death_cam >= 0 && this.death_cam != this.MP_myid && Boolean(this.mens[this.death_cam].dead))
                        {
                           ++this.death_cam;
                        }
                        if(this.death_cam >= this.playerstotal)
                        {
                           this.death_cam = -1;
                        }
                     }
                  }
               }
               else
               {
                  if(this.SOFT_SCREEN)
                  {
                     this.game_x = Math.round((-Number(this.ax[this.mens[this.MP_myid].b_toe]) * this.game_scale + this.hscreenX - this.min_max(0,this.mouse_x,this.screenX) + this.hscreenX + this.game_x * 10 / this.GSPEED2) / (1 + 10 / this.GSPEED2));
                     this.game_y = Math.round((-Number(this.ay[this.mens[this.MP_myid].b_toe]) * this.game_scale + this.hscreenY - this.min_max(0,this.mouse_y,this.screenY) + this.hscreenY + this.game_y * 10 / this.GSPEED2) / (1 + 10 / this.GSPEED2) + Math.sin(Number(getTimer()) * 0.05) * this.SHAKEAMMOUT * this.game_scale);
                  }
                  else
                  {
                     this.game_x = Math.round((-Number(this.ax[this.mens[this.MP_myid].b_toe]) * this.game_scale + this.hscreenX - this.min_max(0,this.mouse_x,this.screenX) + this.hscreenX + this.game_x) / 2);
                     this.game_y = Math.round((-Number(this.ay[this.mens[this.MP_myid].b_toe]) * this.game_scale + this.hscreenY - this.min_max(0,this.mouse_y,this.screenY) + this.hscreenY + this.game_y) / 2 + Math.sin(Number(getTimer()) * 0.05) * this.SHAKEAMMOUT * this.game_scale);
                  }
                  this.death_cam = this.MP_myid;
               }
               if(this.SHAKEAMMOUT > 0.05)
               {
                  this.SHAKEAMMOUT -= 0.05;
                  this.SHAKEAMMOUT *= 0.93;
                  if(this.SHAKEAMMOUT > 30)
                  {
                     this.SHAKEAMMOUT = 30;
                  }
               }
               else
               {
                  this.SHAKEAMMOUT = 0;
               }
               if(this.new_active.visible)
               {
                  this.new_active.x = this.mens[this.MP_myid].x + this.game_x;
                  this.new_active.y = Number(this.mens[this.MP_myid].y) - 90 + this.game_y;
               }
               if(!this.MP_spectator)
               {
                  this.mc = this.mens[this.MP_myid];
                  this.ok = false;
                  if(!this.mc.dead)
                  {
                     if(this.mc.hunt == -1 || this.mc.curwea != -1 && this.guns[this.mc.curwea].stat_class == 7)
                     {
                        i2 = 0;
                        while(i2 < this.playerstotal && !this.ok)
                        {
                           if(i2 != this.MP_myid)
                           {
                              if(this.mens[i2].io)
                              {
                                 if(this.mens[i2].team == this.mc.team)
                                 {
                                    if(Boolean(this.mens[i2].dead) || Boolean(this.mens[i2].dying))
                                    {
                                       if(!this.mens[i2].brk_head && !this.mens[i2].brk_arms && !this.mens[i2].brk_legs && !this.mens[i2].brk_body)
                                       {
                                          if(this.Dist2D(this.ax[this.mens[i2].b_body],this.ay[this.mens[i2].b_body],this.mc.x,this.mc.y) < 350)
                                          {
                                             this.i3 = 0;
                                             while(this.i3 < this.gunstotal && !this.ok)
                                             {
                                                if(this.guns[this.i3].io)
                                                {
                                                   if(!this.guns[this.i3].forcars)
                                                   {
                                                      if(this.guns[this.i3].stat_class == 7)
                                                      {
                                                         if(this.guns[this.i3].picken_by == this.MP_myid)
                                                         {
                                                            this.ok = true;
                                                            this.need_heal.visible = true;
                                                            this.need_heal.x = Number(this.ax[this.mens[i2].b_body]) * this.game_scale + this.game_x;
                                                            this.need_heal.y = (Number(this.ay[this.mens[i2].b_body]) - 41) * this.game_scale + this.game_y;
                                                         }
                                                      }
                                                   }
                                                }
                                                ++this.i3;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           i2++;
                        }
                     }
                  }
                  if(!this.ok)
                  {
                     this.need_heal.visible = false;
                  }
               }
               if(this.game_scale != this.lgame_scale)
               {
                  this.game.scaleX = this.game_scale;
                  this.game.scaleY = this.game_scale;
                  this.graphics_3d_front.scaleX = this.graphics_3d.scaleX = this.game_scale;
                  this.graphics_3d_front.scaleY = this.graphics_3d.scaleY = this.game_scale;
                  this.lgame_scale = this.game_scale;
                  this.game_x = Math.round(-Number(this.ax[this.mens[this.MP_myid].b_toe]) * this.game_scale + this.hscreenX - this.mouse_x + this.hscreenX);
                  this.game_y = Math.round(-Number(this.ay[this.mens[this.MP_myid].b_toe]) * this.game_scale + this.hscreenY - this.mouse_y + this.hscreenY);
               }
               //this.graphics_3d_front.x = this.graphics_3d.x = this.game_x;
               //this.graphics_3d_front.y = this.graphics_3d.y = this.game_y;
               i = 0;
               while(i < this.surf_lnk.length)
               {
                  this.surf_lnk[i].x = this.doors[this.surf_lnk_to[i]].x;
                  this.surf_lnk[i].y = this.doors[this.surf_lnk_to[i]].y;
                  i++;
               }
			   i = 0;
			   while(i < this.playerstotal) {
				   if(this.mens[i].x < this.render_minX || this.mens[i].x > this.render_maxX) {
					   if(!this.mens[i].visible) {
						   i++;
						   continue;
					   }
					   this.mens[i].visible = false;
					   //this.aactive[i] = false;
				   } else {
					   if(this.mens[i].visible) {
						   i++;
						   continue;
					   }
					   this.mens[i].visible = true;
					   //this.aactive[i] = true;
				   }
				   i++;
			   }
		   
			   i = 0;
			   while(i < this.doorstotal) {
				   if(this.gamedoor[i] != undefined) {
					   if(this.gamedoor[i].x + (this.gamedoor[i].scaleX * 100) < this.render_minX || this.gamedoor[i].x > this.render_maxX) {
						   if(!this.gamedoor[i].visible) {
								i++;
							   continue;
						   }
						   this.gamedoor[i].visible = false;
					   } else {
						   if(this.gamedoor[i].visible) {
								i++;
						        continue;
						   }
						   this.gamedoor[i].visible = true;
					   }
				   }
				   i++;
			   }
		   
			   i = 0;
			   while(i < this.decorstotal) {
				   if(this.decorbox[i] != undefined) {
					   if(this.decorbox[i].x < this.render_minX || this.decorbox[i].x > this.render_maxX) {
						   if(!this.decorbox[i].custom_bitmap.visible) {
								i++;
							    continue;
						   }
						   this.decorbox[i].custom_bitmap.visible = false;
					   } else{
						   if(this.decorbox[i].custom_bitmap.visible) {
								i++;
						        continue;
						   }
						   this.decorbox[i].custom_bitmap.visible = true;
					   }
				   }
				   i++;
			   }
		   
			   i = 0;
			   while(i < this.boxestotal) { 
				   // DOORS STUFF 
				   if(this.gamebox[i].x + (this.gamebox[i].scaleX * 100) < this.render_minX || this.gamebox[i].x > this.render_maxX) {
					   if(!this.gamebox[i].visible) {
						   i++;
						   continue;
					   }
					   this.gamebox[i].visible = false;
					   if(this.ledgebox[i] != undefined) {
						this.ledgebox[i].visible = false;
					   }
					   if(this.bottomsurface[i] != undefined) {
						   this.bottomsurface[i].visible = false;
					   }
					   if(this.topsurface[i] != undefined) {
						   this.topsurface[i].visible = false;
					   }
				   } else {
					   if(this.gamebox[i].visible) {
						   i++;
						   continue;
					   }
					   this.gamebox[i].visible = true;
					   if(this.ledgebox[i] != undefined) {
						this.ledgebox[i].visible = true;
					   }
					   if(this.bottomsurface[i] != undefined) {
						   this.bottomsurface[i].visible = true;
					   }
					   if(this.topsurface[i] != undefined) {
						   this.topsurface[i].visible = true;
					   }
				   }
				   i++;
			   }
		   
			   i = 0;
			   while(i < this.maxef) {
				   if(this.ef[i] != null) {
					   if(this.ef[i].x < this.render_minX || this.ef[i].x > this.render_maxX) {
						   if(this.game.contains(this.ef[i]))
						   {
							  this.game.removeChild(this.ef[i]);
							  this.ef[i] = null;
						   }
						   else if(this.graphics_3d_front.contains(this.ef[i]))
						   {
							  this.graphics_3d_front.removeChild(this.ef[i]);
							  this.ef[i] = null;
						   }
						   
					   }
				   }
				   i++;
			   }
		   
			   i = 0;
			   while(i < this.bgstotal) {
				   if(this.bgbox != undefined) {
					   if(this.bgx[i] + (this.bgw[i] * 100) < this.render_minX || this.bgx[i] > this.render_maxX) {
						   if(!this.bgbox[i].visible) {
							   i++;
							   continue;
						   }
						   this.bgbox[i].visible = false;
					   } else {
						   if(this.bgbox[i].visible) {
							   i++;
							   continue;
						   }
						   this.bgbox[i].visible = true;
					   }
					   i++;
				   }
			   }
		   
               /*if(this.game.contains(this.ef[this.nextef]))
               {
                  this.game.removeChild(this.ef[this.nextef]);
                  this.ef[this.nextef] = null;
               }
               else if(this.graphics_3d_front.contains(this.ef[this.nextef]))
               {
                  this.graphics_3d_front.removeChild(this.ef[this.nextef]);
                  this.ef[this.nextef] = null;
               }*/		   
		   
               i = 0;
               while(i < this.vehiclestotal)
               {
                  if(this.vehicles[i].io)
                  {
                     if(this.vehicles[i].x > this.render_minX - 400 && this.vehicles[i].x < this.render_maxX + 400 && this.vehicles[i].y > this.render_minY - 400 && this.vehicles[i].y < this.render_maxY + 400 || this.vehicles[i].master != -1 && this.aactive[this.vehicles[i].master] || this.vehicles[i].typ == 6 && this.MP_mode)
                     {
                        this.mc = this.vehicles[i];
                        this.aactive[-200 - i] = true;
                        if(this.MP_mode)
                        {
                           if(this.mc.hea <= 0)
                           {
                              if(!this.mc.dead)
                              {
                                 this.mc.hea = 1;
                              }
                           }
                        }
                        if(this.mc.typ == 0)
                        {
                           this.xx = Math.atan2(Number(this.ax[this.mc.b_w1]) - Number(this.ax[this.mc.b_w2]),Number(this.ay[this.mc.b_w1]) - Number(this.ay[this.mc.b_w2]));
                           if(this.mc.wep0 == -1)
                           {
                              i2 = 0;
                              while(i2 < this.gunstotal)
                              {
                                 if(this.guns[i2].io)
                                 {
                                    if(this.guns[i2].forcars)
                                    {
                                       if(this.guns[i2].picken_by == -1)
                                       {
                                          if(this.guns[i2].x > this.mc.x - 100 && this.guns[i2].x < this.mc.x + 100 && this.guns[i2].y > this.mc.y - 100 && this.guns[i2].y < this.mc.y + 100)
                                          {
                                             this.guns[i2].picken_by = i;
                                             this.mc.wep0 = i2;
                                             this.ChangedGun(this.mc.master);
                                          }
                                       }
                                    }
                                 }
                                 i2++;
                              }
                           }
                           else
                           {
                              this.mc2 = this.guns[this.mc.wep0];
                              if(this.mc.master != -1)
                              {
                                 this.yy = this.mens[this.mc.master].ang;
                                 this.mens[this.mc.master].curwea = this.mc.wep0;
                                 if(Math.sin(this.yy) > 0)
                                 {
                                    this.mc2.scaleY = 1;
                                 }
                                 else
                                 {
                                    this.mc2.scaleY = -1;
                                 }
                                 this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_c],this.ay[this.mc.b_c],this.atox[this.mc.b_c],this.atoy[this.mc.b_c],1);
                                 this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_c] + Math.sin(this.yy) * Number(this.mc2.len2),this.ay[this.mc.b_c] + Math.cos(this.yy) * Number(this.mc2.len2),this.atox[this.mc.b_c],this.atoy[this.mc.b_c],1);
                                 if(this.mens[this.mc.master].dead)
                                 {
                                    this.PutoutCar(i);
                                 }
                              }
                              else
                              {
                                 this.mc2.scaleY = this.mc.side;
                                 this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_c],this.ay[this.mc.b_c],this.atox[this.mc.b_c],this.atoy[this.mc.b_c],1);
                                 this.TurnBone3(this.mc2.b_p2,Number(this.ax[this.mc.b_c]) - Math.sin(this.xx) * Number(this.mc2.len2),Number(this.ay[this.mc.b_c]) - Math.cos(this.xx) * Number(this.mc2.len2),this.atox[this.mc.b_c],this.atoy[this.mc.b_c],1);
                              }
                           }
                           if(this.mc.hea <= 0)
                           {
                              if(!this.mc.dead)
                              {
                                 this.mc.dead = true;
                                 this.mc.gotoAndStop(3);
                                 this.PlaySound(this.s_steel_hard,this.mc.x,this.mc.y);
                                 this.mc.carbody.scaleY = this.mc.side;
                                 if(this.mc.master != -1)
                                 {
                                    this.PutoutCar(i);
                                 }
                                 this.ExplosionSound(this.ax[this.mc.b_c],this.ay[this.mc.b_c] + 30);
                                 this.PhysicsExplosion(this.ax[this.mc.b_c],this.ay[this.mc.b_c] + 30,300,20,100,-1,"vehicle");
                                 this.atoy[this.mc.b_c] -= 10;
                                 this.atoy[this.mc.b_c2] -= 15;
                                 this.atoy[this.mc.b_c3] -= 5;
                                 this.atoy[this.mc.b_w1] -= 8;
                                 this.atoy[this.mc.b_w2] -= 6;
                                 this.mc.b_w1b = this.CreatePoint(this.ax[this.mc.b_w1],this.ay[this.mc.b_w1],this.atox[this.mc.b_w1],this.atoy[this.mc.b_w1],this.arad[this.mc.b_w1],true,4,-i - 200);
                                 this.mc.b_w2b = this.CreatePoint(this.ax[this.mc.b_w2],this.ay[this.mc.b_w2],this.atox[this.mc.b_w1],this.atoy[this.mc.b_w1],this.arad[this.mc.b_w2],true,4,-i - 200);
                                 this.arad[this.mc.b_w1] = 8;
                                 this.arad[this.mc.b_w2] = 8;
                                 this.amat[this.mc.b_w1] = 5;
                                 this.amat[this.mc.b_w2] = 5;
                                 this.around[this.mc.b_w1] = false;
                                 this.around[this.mc.b_w2] = false;
                              }
                           }
                           else if(this.mc.master != -1)
                           {
                              this.mc2 = this.mens[this.mc.master];
                              this.mc2.stability = -0.1;
                              this.mc2.side = this.mc.side;
                              this.TurnBone3(this.mc2.b_leg1,this.ax[this.mc.b_c3],this.ay[this.mc.b_c3],this.atox[this.mc.b_c3],this.atoy[this.mc.b_c3],1);
                              this.TurnBone3(this.mc2.b_leg2,this.ax[this.mc.b_c3],this.ay[this.mc.b_c3],this.atox[this.mc.b_c3],this.atoy[this.mc.b_c3],1);
                              this.TurnBone3(this.mc2.b_body,this.ax[this.mc.b_c],Number(this.ay[this.mc.b_c]) - Number(this.chdef[this.mc2.ch_body]),this.atox[this.mc.b_c3],this.atoy[this.mc.b_c3],1);
                              if(this.mc2.act_movex != 0)
                              {
                                 if(this.acollided[this.mc.b_w1] > 0 || this.aio[this.mc.b_w1] == false)
                                 {
                                    this.atox[this.mc.b_w1] -= Math.sin(this.xx) * 3 * Number(this.mc2.act_movex) * Number(this.mc.side);
                                    this.atoy[this.mc.b_w1] -= Math.cos(this.xx) * 3 * Number(this.mc2.act_movex) * Number(this.mc.side);
                                    this.WakeUpAtom(this.mc.b_w1);
                                 }
                                 if(this.acollided[this.mc.b_w2] > 0 || this.aio[this.mc.b_w2] == false)
                                 {
                                    this.atox[this.mc.b_w2] -= Math.sin(this.xx) * 3 * Number(this.mc2.act_movex) * Number(this.mc.side);
                                    this.atoy[this.mc.b_w2] -= Math.cos(this.xx) * 3 * Number(this.mc2.act_movex) * Number(this.mc.side);
                                    this.WakeUpAtom(this.mc.b_w2);
                                 }
                              }
                              if(this.key_pick && this.mens[this.mc.master].hea > 0 && this.mc.master == this.MP_myid)
                              {
                                 this.PutoutCar(i);
                              }
                           }
                           else if(this.key_pick && this.mens[this.MP_myid].hea > 0)
                           {
                              if(this.mens[this.MP_myid].x > this.mc.x - 200 && this.mens[this.MP_myid].x < this.mc.x + 200 && this.mens[this.MP_myid].y > this.mc.y - 100 && this.mens[this.MP_myid].y < this.mc.y + 100)
                              {
                                 if(this.mens[this.MP_myid].stability >= 1)
                                 {
                                    this.key_pick = false;
                                    this.PutInCar(0,i);
                                 }
                              }
                           }
                           this.mc.x = this.ax[this.mc.b_c];
                           this.mc.y = this.ay[this.mc.b_c];
                           if(this.mc.dead)
                           {
                              this.mc.w1.x = Number(this.ax[this.mc.b_w1b]) - Number(this.ax[this.mc.b_c]);
                              this.mc.w1.y = Number(this.ay[this.mc.b_w1b]) - Number(this.ay[this.mc.b_c]);
                              this.mc.w2.x = Number(this.ax[this.mc.b_w2b]) - Number(this.ax[this.mc.b_c]);
                              this.mc.w2.y = Number(this.ay[this.mc.b_w2b]) - Number(this.ay[this.mc.b_c]);
                              this.mc.w1.rotation = (this.mc.x + this.mc.w1.x) * 1;
                              this.mc.w2.rotation = (this.mc.x + this.mc.w2.x) * 1;
                           }
                           else
                           {
                              this.mc.w1.x = Number(this.ax[this.mc.b_w1]) - Number(this.ax[this.mc.b_c]);
                              this.mc.w1.y = Number(this.ay[this.mc.b_w1]) - Number(this.ay[this.mc.b_c]);
                              this.mc.w2.x = Number(this.ax[this.mc.b_w2]) - Number(this.ax[this.mc.b_c]);
                              this.mc.w2.y = Number(this.ay[this.mc.b_w2]) - Number(this.ay[this.mc.b_c]);
                              this.mc.w1.rotation = (this.mc.x + this.mc.w1.x) * 1;
                              this.mc.w2.rotation = (this.mc.x + this.mc.w2.x) * 1;
                           }
                           this.mc.carbody.rotation = 270 - this.xx / Math.PI * 180;
                        }
                        if(this.mc.typ == 1)
                        {
                           this.xx = Math.atan2(Number(this.ax[this.mc.b_p1]) - Number(this.ax[this.mc.b_p2]),Number(this.ay[this.mc.b_p1]) - Number(this.ay[this.mc.b_p2]));
                           if(this.mc.wep0 == -1)
                           {
                              i2 = 0;
                              while(i2 < this.gunstotal)
                              {
                                 if(this.guns[i2].io)
                                 {
                                    if(this.guns[i2].forcars)
                                    {
                                       if(this.guns[i2].picken_by == -1)
                                       {
                                          if(this.guns[i2].x > this.mc.x - 200 && this.guns[i2].x < this.mc.x + 200 && this.guns[i2].y > this.mc.y - 100 && this.guns[i2].y < this.mc.y + 300)
                                          {
                                             this.guns[i2].picken_by = i;
                                             this.mc.wep0 = i2;
                                             this.ChangedGun(this.mc.master);
                                          }
                                       }
                                    }
                                 }
                                 i2++;
                              }
                           }
                           else
                           {
                              this.mc2 = this.guns[this.mc.wep0];
                              if(this.mc.master != -1)
                              {
                                 if(this.mc.side == 1)
                                 {
                                    if(this.mens[this.mc.master].tarx < this.mc.x + 300)
                                    {
                                       this.mens[this.mc.master].tarx = this.mc.x + 300;
                                    }
                                 }
                                 else if(this.mens[this.mc.master].tarx > this.mc.x - 300)
                                 {
                                    this.mens[this.mc.master].tarx = this.mc.x - 300;
                                 }
                                 this.yy = this.mens[this.mc.master].ang;
                                 this.mens[this.mc.master].curwea = this.mc.wep0;
                                 if(Math.sin(this.yy) > 0)
                                 {
                                    this.mc2.scaleY = 1;
                                 }
                                 else
                                 {
                                    this.mc2.scaleY = -1;
                                 }
                                 this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_p2],this.ay[this.mc.b_p2],this.atox[this.mc.b_p2],this.atoy[this.mc.b_p2],1);
                                 this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_p2] + Math.sin(this.yy) * Number(this.mc2.len2),this.ay[this.mc.b_p2] + Math.cos(this.yy) * Number(this.mc2.len2),this.atox[this.mc.b_p2],this.atoy[this.mc.b_p2],1);
                                 if(this.mens[this.mc.master].dead)
                                 {
                                    this.PutoutCar(i);
                                 }
                              }
                              else
                              {
                                 this.mc2.scaleY = this.mc.side;
                                 this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_p2],this.ay[this.mc.b_p2],this.atox[this.mc.b_p2],this.atoy[this.mc.b_p2],1);
                                 this.TurnBone3(this.mc2.b_p2,Number(this.ax[this.mc.b_p2]) - Math.sin(this.xx) * Number(this.mc2.len2),Number(this.ay[this.mc.b_p2]) - Math.cos(this.xx) * Number(this.mc2.len2),this.atox[this.mc.b_p2],this.atoy[this.mc.b_p2],1);
                              }
                           }
                           if(this.mc.hea <= 0)
                           {
                              if(!this.mc.dead)
                              {
                                 this.mc.dead = true;
                                 this.mc.deadtim = 0;
                                 this.mc.leg1.x = 0;
                                 this.mc.leg1.y = 0;
                                 this.mc.leg2.x = 0;
                                 this.mc.leg2.y = 0;
                                 this.mc.leg1.scaleX = this.mc.side;
                                 this.mc.leg2.scaleX = this.mc.side;
                                 this.mc.leg1b.scaleX = this.mc.side;
                                 this.mc.leg2b.scaleX = this.mc.side;
                                 this.mc.carbody.scaleY = this.mc.side;
                                 this.PlaySound(this.s_walker_die,this.mc.x,this.mc.y);
                                 this.chdef[this.mc.ch_cross2] = 70;
                                 if(this.mc.master != -1)
                                 {
                                    this.PutoutCar(i);
                                 }
                                 if(this.mc.hea < -100)
                                 {
                                    this.ExplosionSound(this.ax[this.mc.b_p1],this.ay[this.mc.b_p1] + 30);
                                    this.PhysicsExplosion(this.ax[this.mc.b_p1],this.ay[this.mc.b_p1] + 30,300,20,100,-1,"vehicle");
                                    this.atoy[this.mc.b_p2] -= 10;
                                    this.atox[this.mc.b_p1] += 5 * Number(this.mc.side);
                                    this.atox[this.mc.b_p3] += 5 * Number(this.mc.side);
                                    this.atox[this.mc.b_w1] -= 10 * Number(this.mc.side);
                                    this.atox[this.mc.b_w2] -= 5 * Number(this.mc.side);
                                 }
                              }
                              else if(this.mc.io)
                              {
                                 if(this.mc.deadtim > 1000)
                                 {
                                    if(this.mc.alpha > 0.7)
                                    {
                                       this.mc.alpha = 0.7;
                                    }
                                    else
                                    {
                                       this.mc.alpha -= 0.05 * this.GSPEED;
                                    }
                                    if(this.mc.alpha < 0.3)
                                    {
                                       this.aio[this.mc.b_p1] = -1;
                                       this.aio[this.mc.b_p2] = -1;
                                       this.aio[this.mc.b_p3] = -1;
                                       this.aio[this.mc.b_w1] = -1;
                                       this.aio[this.mc.b_w2] = -1;
                                       this.aio[this.mc.b_w1b] = -1;
                                       this.aio[this.mc.b_w2b] = -1;
                                       this.mc.io = false;
                                    }
                                 }
                                 this.mc.deadtim += 10 * this.GSPEED;
                              }
                           }
                           else if(this.mc.master != -1)
                           {
                              this.mc2 = this.mens[this.mc.master];
                              this.mc2.stability = -0.1;
                              this.mc2.side = this.mc.side;
                              this.TurnBone3(this.mc2.b_leg1,this.ax[this.mc.b_p2],this.ay[this.mc.b_p2],this.atox[this.mc.b_p2],this.atoy[this.mc.b_p2],1);
                              this.TurnBone3(this.mc2.b_leg2,this.ax[this.mc.b_p2],this.ay[this.mc.b_p2],this.atox[this.mc.b_p2],this.atoy[this.mc.b_p2],1);
                              this.TurnBone3(this.mc2.b_body,this.ax[this.mc.b_p3],this.ay[this.mc.b_p3],this.atox[this.mc.b_p3],this.atoy[this.mc.b_p3],1);
                              this.TurnBone3(this.mc2.b_toe,this.ax[this.mc.b_p1],this.ay[this.mc.b_p1],this.atox[this.mc.b_p1],this.atoy[this.mc.b_p1],1);
                              this.x3 = Math.sin(this.mc.move_state) * 30;
                              this.y3 = Math.cos(this.mc.move_state) * 10 * Number(this.mc.move_height);
                              if(this.mc.move_height > 1)
                              {
                                 this.y3 = Math.cos(this.mc.move_state) * 40 * (Number(this.mc.move_height) - 0.75);
                              }
                              this.x4 = 1;
                              if(this.mc2.act_movex == 0)
                              {
                                 if(this.mc.move_height > 0.05)
                                 {
                                    this.mc.move_height -= 0.05 * this.GSPEED;
                                 }
                                 else
                                 {
                                    this.mc.move_height = 0;
                                 }
                              }
                              if(this.mc2.act_movey == 1)
                              {
                                 if(this.mc.corpse_h > 60)
                                 {
                                    this.mc.corpse_h -= 5 * this.GSPEED;
                                    if(this.acollided[this.mc.b_w1] > 0 || this.acollided[this.mc.b_w2] > 0)
                                    {
                                       this.atoy[this.mc.b_p1] += 1 * this.GSPEED;
                                       this.atoy[this.mc.b_p2] += 1 * this.GSPEED;
                                       this.atoy[this.mc.b_p3] += 1 * this.GSPEED;
                                       this.atoy[this.mc.b_w1] += 1 * this.GSPEED;
                                       this.atoy[this.mc.b_w1] += 1 * this.GSPEED;
                                    }
                                 }
                              }
                              else if(this.mc2.act_movey == -1)
                              {
                                 if(this.mc.corpse_h < 100)
                                 {
                                    this.mc.corpse_h += 5;
                                    if(this.acollided[this.mc.b_w1] > 0 || this.acollided[this.mc.b_w2] > 0)
                                    {
                                       this.atoy[this.mc.b_p1] -= 2 * this.GSPEED;
                                       this.atoy[this.mc.b_p2] -= 2 * this.GSPEED;
                                       this.atoy[this.mc.b_p3] -= 2 * this.GSPEED;
                                       this.atox[this.mc.b_p1] += Number(this.mc2.act_movex) * 3 * this.GSPEED;
                                       this.atox[this.mc.b_p2] += Number(this.mc2.act_movex) * 1 * this.GSPEED;
                                       this.atox[this.mc.b_p3] += Number(this.mc2.act_movex) * 2 * this.GSPEED;
                                       this.atox[this.mc.b_w1] += Number(this.mc2.act_movex) * 1 * this.GSPEED;
                                       this.atox[this.mc.b_w2] += Number(this.mc2.act_movex) * 2 * this.GSPEED;
                                    }
                                 }
                              }
                              else if(this.mc.corpse_h < 90)
                              {
                                 this.mc.corpse_h += 1 * this.GSPEED;
                              }
                              else if(this.mc.corpse_h > 90)
                              {
                                 this.mc.corpse_h -= 1 * this.GSPEED;
                              }
                              this.xx2 = (this.ax[this.mc.b_p1] + this.ax[this.mc.b_w1]) / 2;
                              this.yy2 = (this.ay[this.mc.b_p1] + this.ay[this.mc.b_w1]) / 2;
                              this.TurnBone4(this.mc.b_p1,this.xx2 + this.x3,this.yy2 - Number(this.mc.corpse_h) + this.y3,this.x4);
                              this.TurnBone4(this.mc.b_w1,this.xx2 - this.x3,this.yy2 + this.mc.corpse_h - this.y3,this.x4);
                              this.xx2 = (this.ax[this.mc.b_p1] + this.ax[this.mc.b_w2]) / 2;
                              this.yy2 = (this.ay[this.mc.b_p1] + this.ay[this.mc.b_w2]) / 2;
                              this.TurnBone4(this.mc.b_p1,this.xx2 - this.x3,this.yy2 - Number(this.mc.corpse_h) - this.y3,this.x4);
                              this.TurnBone4(this.mc.b_w2,this.xx2 + this.x3,this.yy2 + this.mc.corpse_h + this.y3,this.x4);
                              this.xx2 = (this.ax[this.mc.b_p1] + this.ax[this.mc.b_p2]) / 2;
                              this.yy2 = (this.ay[this.mc.b_p1] + this.ay[this.mc.b_p2]) / 2;
                              this.TurnBone4(this.mc.b_p1,this.xx2 - 25 * Number(this.mc.side),this.yy2,this.x4);
                              this.TurnBone4(this.mc.b_p2,this.xx2 + 25 * Number(this.mc.side),this.yy2,this.x4);
                              this.aio[this.mc.b_p1] = true;
                              this.atim[this.mc.b_p1] = 0;
                              this.aio[this.mc.b_w1] = true;
                              this.atim[this.mc.b_w1] = 0;
                              this.aio[this.mc.b_w2] = true;
                              this.atim[this.mc.b_w2] = 0;
                              if(this.mc2.act_movex != 0)
                              {
                                 if(this.mc.move_height < 1)
                                 {
                                    this.xx2 = -Number(this.mc2.act_movex) * 0.08 * Number(this.mc.move_height);
                                 }
                                 else
                                 {
                                    this.xx2 = -Number(this.mc2.act_movex) * 0.08 * (2 - Number(this.mc.move_height));
                                 }
                                 this.mc.move_state += this.xx2 * this.GSPEED;
                                 this.mc.jump_state += this.xx2 * this.GSPEED;
                                 if(this.mc.jump_state > Math.PI)
                                 {
                                    this.PlaySound(this.s_walker_phase1,this.mc.x,this.mc.y);
                                    this.mc.jump_state -= Math.PI;
                                 }
                                 if(this.mc.jump_state < -Math.PI)
                                 {
                                    this.PlaySound(this.s_walker_phase1,this.mc.x,this.mc.y);
                                    this.mc.jump_state += Math.PI;
                                 }
                                 this.mc.jump_state2 += this.xx2 * this.GSPEED;
                                 if(this.mc.jump_state2 > Math.PI)
                                 {
                                    this.PlaySound(this.s_walker_phase2,this.mc.x,this.mc.y);
                                    this.mc.jump_state2 -= Math.PI;
                                 }
                                 if(this.mc.jump_state2 < -Math.PI)
                                 {
                                    this.PlaySound(this.s_walker_phase2,this.mc.x,this.mc.y);
                                    this.mc.jump_state2 += Math.PI;
                                 }
                                 if(this.acollided[this.mc.b_w1] > 0 || this.acollided[this.mc.b_w2] > 0)
                                 {
                                    this.atox[this.mc.b_p1] += Number(this.mc2.act_movex) * 1.5 * this.GSPEED;
                                 }
                                 if(this.mc.move_height < 0.95)
                                 {
                                    this.mc.move_height += 0.05 * this.GSPEED;
                                 }
                                 if(!this.TracePoint((this.ax[this.mc.b_w1] + this.ax[this.mc.b_w1]) / 2 + Number(this.mc2.act_movex) * 150,(this.ay[this.mc.b_w1] + this.ay[this.mc.b_w1]) / 2))
                                 {
                                    if(this.mc.move_height < 1.45)
                                    {
                                       this.mc.move_height += 0.05 * this.GSPEED;
                                    }
                                    else
                                    {
                                       this.mc.move_height = 1.5 * this.GSPEED;
                                    }
                                 }
                                 else if(this.mc.move_height > 1.05)
                                 {
                                    this.mc.move_height -= 0.05 * this.GSPEED;
                                 }
                              }
                              if(this.key_pick && this.mens[this.mc.master].hea > 0 && this.mc.master == this.MP_myid)
                              {
                                 this.PutoutCar(i);
                              }
                           }
                           else
                           {
                              this.x4 = 1;
                              this.x3 = Math.sin(this.mc.move_state) * 25;
                              this.y3 = Math.cos(this.mc.move_state) * 10 * Number(this.mc.move_height);
                              if(this.mc.move_height > 0.05)
                              {
                                 this.mc.move_height -= 0.05;
                              }
                              else
                              {
                                 this.mc.move_height = 0;
                              }
                              this.xx2 = (this.ax[this.mc.b_p1] + this.ax[this.mc.b_w1]) / 2;
                              this.yy2 = (this.ay[this.mc.b_p1] + this.ay[this.mc.b_w1]) / 2;
                              this.TurnBone4(this.mc.b_p1,this.xx2 + this.x3,this.yy2 - 90 + this.y3,this.x4);
                              this.TurnBone4(this.mc.b_w1,this.xx2 - this.x3,this.yy2 + 90 - this.y3,this.x4);
                              this.xx2 = (this.ax[this.mc.b_p1] + this.ax[this.mc.b_w2]) / 2;
                              this.yy2 = (this.ay[this.mc.b_p1] + this.ay[this.mc.b_w2]) / 2;
                              this.TurnBone4(this.mc.b_p1,this.xx2 - 10 - this.x3,this.yy2 - 90 - this.y3,this.x4);
                              this.TurnBone4(this.mc.b_w2,this.xx2 + 10 + this.x3,this.yy2 + 90 + this.y3,this.x4);
                              this.xx2 = (this.ax[this.mc.b_p1] + this.ax[this.mc.b_p2]) / 2;
                              this.yy2 = (this.ay[this.mc.b_p1] + this.ay[this.mc.b_p2]) / 2;
                              this.TurnBone4(this.mc.b_p1,this.xx2 - 23 * Number(this.mc.side),this.yy2 - 10,this.x4);
                              this.TurnBone4(this.mc.b_p2,this.xx2 + 23 * Number(this.mc.side),this.yy2 + 10,this.x4);
                              if(this.key_pick && this.mens[this.MP_myid].hea > 0)
                              {
                                 if(this.mens[this.MP_myid].x > this.mc.x - 200 && this.mens[this.MP_myid].x < this.mc.x + 200 && this.mens[this.MP_myid].y > this.mc.y - 100 && this.mens[this.MP_myid].y < this.mc.y + 300)
                                 {
                                    if(this.mens[this.MP_myid].stability >= 1)
                                    {
                                       this.PutInCar(0,i);
                                    }
                                 }
                              }
                           }
                           this.chdef[this.mc.ch_leg1upper] = this.chdef[this.mc.ch_leg1lower] = this.Dist2D(this.ax[this.mc.b_p1],this.ay[this.mc.b_p1],this.ax[this.mc.b_w1],this.ay[this.mc.b_w1]) / 3;
                           this.chdef[this.mc.ch_leg2upper] = this.chdef[this.mc.ch_leg2lower] = this.Dist2D(this.ax[this.mc.b_p1],this.ay[this.mc.b_p1],this.ax[this.mc.b_w2],this.ay[this.mc.b_w2]) / 3;
                           this.mc.x = this.ax[this.mc.b_p1];
                           this.mc.y = this.ay[this.mc.b_p1];
                           //this.MeasureStop(12);
                           this.mc.carbody.rotation = 270 - this.xx / Math.PI * 180;
                           this.mc.leg1.rotation = 180 - Math.atan2(Number(this.ax[this.mc.b_p1]) - Number(this.ax[this.mc.b_w1]),Number(this.ay[this.mc.b_p1]) - Number(this.ay[this.mc.b_w1])) / Math.PI * 180;
                           this.SetMCFrame(this.mc.leg1,Math.max(1,Math.min(100,Math.round(this.Dist2D(this.ax[this.mc.b_p1],this.ay[this.mc.b_p1],this.ax[this.mc.b_w1],this.ay[this.mc.b_w1]) / 210 * 100))),5);
                           this.mc.leg2.rotation = 180 - Math.atan2(Number(this.ax[this.mc.b_p1]) - Number(this.ax[this.mc.b_w2]),Number(this.ay[this.mc.b_p1]) - Number(this.ay[this.mc.b_w2])) / Math.PI * 180;
                           this.SetMCFrame(this.mc.leg2,Math.max(1,Math.min(100,Math.round(this.Dist2D(this.ax[this.mc.b_p1],this.ay[this.mc.b_p1],this.ax[this.mc.b_w2],this.ay[this.mc.b_w2]) / 210 * 100))),5);
                           this.mc.leg1b.x = Number(this.ax[this.mc.b_w1]) - Number(this.ax[this.mc.b_p1]);
                           this.mc.leg1b.y = Number(this.ay[this.mc.b_w1]) - Number(this.ay[this.mc.b_p1]);
                           this.mc.leg2b.x = Number(this.ax[this.mc.b_w2]) - Number(this.ax[this.mc.b_p1]);
                           this.mc.leg2b.y = Number(this.ay[this.mc.b_w2]) - Number(this.ay[this.mc.b_p1]);
                           if(Boolean(this.acollided[this.mc.b_w1]) && !this.mc.dead)
                           {
                              this.mc.leg1b.rotation /= 2;
                           }
                           else
                           {
                              this.mc.leg1b.rotation = (this.mc.leg1.rotation + Number(this.mc.leg1b.rotation) * 5) / 6;
                           }
                           if(Boolean(this.acollided[this.mc.b_w2]) && !this.mc.dead)
                           {
                              this.mc.leg2b.rotation /= 2;
                           }
                           else
                           {
                              this.mc.leg2b.rotation = (this.mc.leg2.rotation + Number(this.mc.leg2b.rotation) * 5) / 6;
                           }
                           //this.MeasureStop(12);
                        }
                        if(this.mc.typ == 2)
                        {
                           this.xx = (this.ax[this.mc.b_lt] + this.ax[this.mc.b_rb]) / 2;
                           this.yy = (this.ay[this.mc.b_lt] + this.ay[this.mc.b_rb]) / 2;
                           if(this.mc.hea <= 0)
                           {
                              if(!this.mc.dead)
                              {
                                 this.mc.dead = true;
                                 this.mc.gotoAndStop(3);
                                 this.chio[this.mc.ch_t0] = -1;
                                 this.chio[this.mc.ch_t1] = -1;
                                 this.chio[this.mc.ch_t2] = -1;
                                 this.chio[this.mc.ch_t3] = -1;
                                 this.chio[this.mc.ch_t4] = -1;
                                 this.chio[this.mc.ch_t5] = -1;
                                 this.chio[this.mc.ch_t6] = -1;
                                 this.chio[this.mc.ch_t7] = -1;
                                 this.atox[this.mc.b_lt] = 0;
                                 this.atoy[this.mc.b_lt] = 0;
                                 this.atox[this.mc.b_lt2] = 0;
                                 this.atoy[this.mc.b_lt2] = 0;
                                 this.atox[this.mc.b_rt] = 0;
                                 this.atoy[this.mc.b_rt] = 0;
                                 this.atox[this.mc.b_rt2] = 0;
                                 this.atoy[this.mc.b_rt2] = 0;
                                 this.atox[this.mc.b_lb] = 0;
                                 this.atoy[this.mc.b_lb] = 0;
                                 this.atox[this.mc.b_lb2] = 0;
                                 this.atoy[this.mc.b_lb2] = 0;
                                 this.atox[this.mc.b_rb] = 0;
                                 this.atoy[this.mc.b_rb] = 0;
                                 this.atox[this.mc.b_rb2] = 0;
                                 this.atoy[this.mc.b_rb2] = 0;
                                 this.atox[this.mc.b_lb2] -= 5;
                                 this.atox[this.mc.b_lt2] -= 10;
                                 this.atox[this.mc.b_rb2] += 5;
                                 this.atox[this.mc.b_rt2] += 10;
                                 this.atoy[this.mc.b_rt] -= 2 + Math.random() * 10;
                                 this.atoy[this.mc.b_lt] -= 2 + Math.random() * 10;
                                 this.xx2 = 3 + Math.random() * 4;
                                 this.atox[this.mc.b_rt] += this.xx2;
                                 this.atox[this.mc.b_lt] += this.xx2;
                                 if(this.mc.master != -1)
                                 {
                                    i2 = int(this.mc.master);
                                    this.PutoutCar(i);
                                    this.mens[i2].stability = -1;
                                    this.mens[i2].x = this.xx;
                                    this.mens[i2].y = this.yy;
                                    this.mens[i2].tox = 0;
                                    this.mens[i2].toy = 0;
                                 }
                              }
                           }
                           else if(this.mc.master != -1)
                           {
                              this.mc2 = this.mens[this.mc.master];
                              this.mc2.stability = -0.1;
                              this.mc2.side = this.mc.side;
                              this.mc2.x = this.mc.x;
                              this.mc2.y = this.mc.y;
                              this.mc2.tox = 0;
                              this.mc2.toy = 0;
                              this.xx2 = 0;
                              this.yy2 = 0;
                              this.TurnBone3(this.mc2.b_leg1,this.xx,this.yy + 30,this.xx2,this.yy2,1);
                              this.TurnBone3(this.mc2.b_leg2,this.xx,this.yy + 30,this.xx2,this.yy2,1);
                              this.TurnBone3(this.mc2.b_toe,this.xx,this.yy,this.xx2,this.yy2,1);
                              this.TurnBone3(this.mc2.b_head_end,this.xx,this.yy - 30,this.xx2,this.yy2,1);
                           }
                           this.mc.x = this.xx;
                           this.mc.y = this.yy;
                           this.xx2 = Math.atan2(Number(this.ax[this.mc.b_lb]) - Number(this.ax[this.mc.b_rb]),Number(this.ay[this.mc.b_lb]) - Number(this.ay[this.mc.b_rb]));
                           this.mc.cap_b.rotation = 270 - this.xx2 / Math.PI * 180;
                           this.mc.cap_b.x = (this.ax[this.mc.b_lb] + this.ax[this.mc.b_rb]) / 2 - this.xx;
                           this.mc.cap_b.y = (this.ay[this.mc.b_lb] + this.ay[this.mc.b_rb]) / 2 - this.yy;
                           this.xx2 = Math.atan2(Number(this.ax[this.mc.b_lt]) - Number(this.ax[this.mc.b_rt]),Number(this.ay[this.mc.b_lt]) - Number(this.ay[this.mc.b_rt]));
                           this.mc.cap_t.rotation = 90 - this.xx2 / Math.PI * 180;
                           this.mc.cap_t.x = (this.ax[this.mc.b_lt] + this.ax[this.mc.b_rt]) / 2 - this.xx;
                           this.mc.cap_t.y = (this.ay[this.mc.b_lt] + this.ay[this.mc.b_rt]) / 2 - this.yy;
                           this.xx2 = Math.atan2(Number(this.ax[this.mc.b_lt2]) - Number(this.ax[this.mc.b_lb2]),Number(this.ay[this.mc.b_lt2]) - Number(this.ay[this.mc.b_lb2]));
                           this.mc.cap_l.rotation = 180 - this.xx2 / Math.PI * 180;
                           this.mc.cap_l.x = (this.ax[this.mc.b_lt2] + this.ax[this.mc.b_lb2]) / 2 - this.xx;
                           this.mc.cap_l.y = (this.ay[this.mc.b_lt2] + this.ay[this.mc.b_lb2]) / 2 - this.yy;
                           this.xx2 = Math.atan2(Number(this.ax[this.mc.b_rt2]) - Number(this.ax[this.mc.b_rb2]),Number(this.ay[this.mc.b_rt2]) - Number(this.ay[this.mc.b_rb2]));
                           this.mc.cap_r.rotation = -this.xx2 / Math.PI * 180;
                           this.mc.cap_r.x = (this.ax[this.mc.b_rt2] + this.ax[this.mc.b_rb2]) / 2 - this.xx;
                           this.mc.cap_r.y = (this.ay[this.mc.b_rt2] + this.ay[this.mc.b_rb2]) / 2 - this.yy;
                        }
                        else if(this.mc.typ == 3)
                        {
                           if(this.mc.hea <= 0)
                           {
                              if(!this.mc.dead)
                              {
                                 this.mc.dead = true;
                                 this.PlaySound(this.s_box_die,this.mc.x,this.mc.y);
                                 this.mc.rotation = 0;
                                 this.mc.gotoAndStop(2);
                                 this.n2 = 0;
                                 while(this.n2 < 10)
                                 {
                                    this.mc["b_g" + this.n2] = this.CreatePoint(this.mc.x + this.mc["g" + this.n2].x,this.mc.y + this.mc["g" + this.n2].y,(Math.random() - 0.5) * 10,(Math.random() - 0.5) * 10,0,false,9,-i - 200);
                                    if(Math.random() < 0.33)
                                    {
                                       this.mc["g" + this.n2].gotoAndStop(1);
                                    }
                                    else if(Math.random() > 0.5)
                                    {
                                       this.mc["g" + this.n2].gotoAndStop(2);
                                    }
                                    else
                                    {
                                       this.mc["g" + this.n2].gotoAndStop(3);
                                    }
                                    ++this.n2;
                                 }
                                 this.aio[this.mc.b_c] = -1;
                                 this.aio[this.mc.b_lt] = -1;
                                 this.aio[this.mc.b_rt] = -1;
                                 this.aio[this.mc.b_lb] = -1;
                                 this.aio[this.mc.b_rb] = -1;
                                 if(this.mc.wep0 != -1)
                                 {
                                    i2 = int(this.mc.wep0);
                                    this.guns[i2].picken_by = -1;
                                    this.guns[i2].forcars = false;
                                    this.aio[this.guns[i2].b_p1] = true;
                                    this.atim[this.guns[i2].b_p1] = 0;
                                    this.aio[this.guns[i2].b_p2] = true;
                                    this.atim[this.guns[i2].b_p2] = 0;
                                    this.atox[this.guns[i2].b_p1] = -3 + Math.random() * 6;
                                    this.atoy[this.guns[i2].b_p1] = -3 + Math.random() * 6;
                                    this.atox[this.guns[i2].b_p2] = -3 + Math.random() * 6;
                                    this.atoy[this.guns[i2].b_p2] = -3 + Math.random() * 6;
                                    this.guns[i2].alpha = 1;
                                 }
                                 if(this.mc.wep1 != -1)
                                 {
                                    i2 = int(this.mc.wep1);
                                    this.guns[i2].picken_by = -1;
                                    this.guns[i2].forcars = false;
                                    this.aio[this.guns[i2].b_p1] = true;
                                    this.atim[this.guns[i2].b_p1] = 0;
                                    this.aio[this.guns[i2].b_p2] = true;
                                    this.atim[this.guns[i2].b_p2] = 0;
                                    this.atox[this.guns[i2].b_p1] = -3 + Math.random() * 6;
                                    this.atoy[this.guns[i2].b_p1] = -3 + Math.random() * 6;
                                    this.atox[this.guns[i2].b_p2] = -3 + Math.random() * 6;
                                    this.atoy[this.guns[i2].b_p2] = -3 + Math.random() * 6;
                                    this.guns[i2].alpha = 1;
                                 }
                                 if(this.mc.wep2 != -1)
                                 {
                                    i2 = int(this.mc.wep2);
                                    this.guns[i2].picken_by = -1;
                                    this.guns[i2].forcars = false;
                                    this.aio[this.guns[i2].b_p1] = true;
                                    this.atim[this.guns[i2].b_p1] = 0;
                                    this.aio[this.guns[i2].b_p2] = true;
                                    this.atim[this.guns[i2].b_p2] = 0;
                                    this.atox[this.guns[i2].b_p1] = -3 + Math.random() * 6;
                                    this.atoy[this.guns[i2].b_p1] = -3 + Math.random() * 6;
                                    this.atox[this.guns[i2].b_p2] = -3 + Math.random() * 6;
                                    this.atoy[this.guns[i2].b_p2] = -3 + Math.random() * 6;
                                    this.guns[i2].alpha = 1;
                                 }
                              }
                           }
                           else
                           {
                              if(this.mc.grabtim > 0)
                              {
                                 --this.mc.grabtim;
                                 if(this.mc.wep0 == -1)
                                 {
                                    i2 = 0;
                                    while(i2 < this.gunstotal && this.mc.wep0 == -1)
                                    {
                                       if(this.guns[i2].io)
                                       {
                                          if(!this.guns[i2].forcars)
                                          {
                                             if(this.guns[i2].picken_by == -1)
                                             {
                                                if(this.guns[i2].x > this.mc.x - 100 && this.guns[i2].x < this.mc.x + 100 && this.guns[i2].y > this.mc.y - 100 && this.guns[i2].y < this.mc.y + 100)
                                                {
                                                   this.guns[i2].picken_by = i;
                                                   this.guns[i2].forcars = true;
                                                   this.guns[i2].alpha = 0;
                                                   this.mc.wep0 = i2;
                                                }
                                             }
                                          }
                                       }
                                       i2++;
                                    }
                                 }
                                 else if(this.mc.wep1 == -1)
                                 {
                                    i2 = 0;
                                    while(i2 < this.gunstotal && this.mc.wep1 == -1)
                                    {
                                       if(this.guns[i2].io)
                                       {
                                          if(!this.guns[i2].forcars)
                                          {
                                             if(this.guns[i2].picken_by == -1)
                                             {
                                                if(this.guns[i2].x > this.mc.x - 100 && this.guns[i2].x < this.mc.x + 100 && this.guns[i2].y > this.mc.y - 100 && this.guns[i2].y < this.mc.y + 100)
                                                {
                                                   this.guns[i2].picken_by = i;
                                                   this.guns[i2].forcars = true;
                                                   this.guns[i2].alpha = 0;
                                                   this.mc.wep1 = i2;
                                                }
                                             }
                                          }
                                       }
                                       i2++;
                                    }
                                 }
                                 else if(this.mc.wep2 == -1)
                                 {
                                    i2 = 0;
                                    while(i2 < this.gunstotal && this.mc.wep2 == -1)
                                    {
                                       if(this.guns[i2].io)
                                       {
                                          if(!this.guns[i2].forcars)
                                          {
                                             if(this.guns[i2].picken_by == -1)
                                             {
                                                if(this.guns[i2].x > this.mc.x - 100 && this.guns[i2].x < this.mc.x + 100 && this.guns[i2].y > this.mc.y - 100 && this.guns[i2].y < this.mc.y + 100)
                                                {
                                                   this.guns[i2].picken_by = i;
                                                   this.guns[i2].forcars = true;
                                                   this.guns[i2].alpha = 0;
                                                   this.mc.wep2 = i2;
                                                }
                                             }
                                          }
                                       }
                                       i2++;
                                    }
                                 }
                              }
                              if(this.mc.wep0 != -1)
                              {
                                 this.mc2 = this.guns[this.mc.wep0];
                                 this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_lt],this.ay[this.mc.b_lt],this.atox[this.mc.b_lt],this.atoy[this.mc.b_lt],1);
                                 this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_rb],this.ay[this.mc.b_rb],this.atox[this.mc.b_rb],this.atoy[this.mc.b_rb],1);
                              }
                              if(this.mc.wep1 != -1)
                              {
                                 this.mc2 = this.guns[this.mc.wep1];
                                 this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_lt],this.ay[this.mc.b_lt],this.atox[this.mc.b_lt],this.atoy[this.mc.b_lt],1);
                                 this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_rb],this.ay[this.mc.b_rb],this.atox[this.mc.b_rb],this.atoy[this.mc.b_rb],1);
                              }
                              if(this.mc.wep2 != -1)
                              {
                                 this.mc2 = this.guns[this.mc.wep2];
                                 this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_lt],this.ay[this.mc.b_lt],this.atox[this.mc.b_lt],this.atoy[this.mc.b_lt],1);
                                 this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_rb],this.ay[this.mc.b_rb],this.atox[this.mc.b_rb],this.atoy[this.mc.b_rb],1);
                              }
                           }
                           if(this.mc.currentFrame == 1)
                           {
                              this.mc.x = this.ax[this.mc.b_c];
                              this.mc.y = this.ay[this.mc.b_c];
                              this.xx2 = Math.atan2(Number(this.ax[this.mc.b_lb]) - Number(this.ax[this.mc.b_rb]),Number(this.ay[this.mc.b_lb]) - Number(this.ay[this.mc.b_rb]));
                              this.mc.rotation = 180 - this.xx2 / Math.PI * 180;
                           }
                           else
                           {
                              this.n2 = 0;
                              while(this.n2 < 10)
                              {
                                 if(this.mc["g" + this.n2].visible == true)
                                 {
                                    this.mc["g" + this.n2].x = Number(this.ax[this.mc["b_g" + this.n2]]) - this.mc.x;
                                    this.mc["g" + this.n2].y = Number(this.ay[this.mc["b_g" + this.n2]]) - this.mc.y;
                                    this.mc["g" + this.n2].rotation = Number(this.mc["g" + this.n2].x) * 3 + this.n2 * 60;
                                    if(this.aio[this.mc["b_g" + this.n2]] == false)
                                    {
                                       if(this.mc["g" + this.n2].alpha > 0)
                                       {
                                          this.mc["g" + this.n2].alpha -= 0.1;
                                       }
                                       else
                                       {
                                          this.mc["g" + this.n2].visible = false;
                                          this.aio[this.mc["b_g" + this.n2]] = -1;
                                       }
                                    }
                                    else if(this.mc["g" + this.n2].alpha < 1)
                                    {
                                       this.mc["g" + this.n2].alpha += 0.1;
                                    }
                                 }
                                 ++this.n2;
                              }
                           }
                        }
                        else if(this.mc.typ == 4 || this.mc.typ == 7)
                        {
                           this.xx2 = Math.atan2(Number(this.ax[this.mc.b_c]) - Number(this.ax[this.mc.b_c1]),Number(this.ay[this.mc.b_c]) - Number(this.ay[this.mc.b_c1]));
                           if(this.mc.wep0 == -1)
                           {
                              i2 = 0;
                              while(i2 < this.gunstotal)
                              {
                                 if(this.guns[i2].io)
                                 {
                                    if(this.guns[i2].forcars)
                                    {
                                       if(this.guns[i2].picken_by == -1)
                                       {
                                          if(this.guns[i2].x > this.mc.x - 100 && this.guns[i2].x < this.mc.x + 100 && this.guns[i2].y > this.mc.y - 100 && this.guns[i2].y < this.mc.y + 100)
                                          {
                                             this.guns[i2].picken_by = i;
                                             this.mc.wep0 = i2;
                                             this.ChangedGun(this.mc.master);
                                          }
                                       }
                                    }
                                 }
                                 i2++;
                              }
                           }
                           else
                           {
                              this.mc2 = this.guns[this.mc.wep0];
                              this.mc2.scaleY = this.mc.side;
                              if(this.mc.master != -1 && this.mc.hea > 0)
                              {
                                 this.yy = this.mens[this.mc.master].ang;
                                 this.mens[this.mc.master].curwea = this.mc.wep0;
                                 this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_c2],this.ay[this.mc.b_c2],this.atox[this.mc.b_c2],this.atoy[this.mc.b_c2],1);
                                 this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_c2] + Math.sin(this.yy) * Number(this.mc2.len2),this.ay[this.mc.b_c2] + Math.cos(this.yy) * Number(this.mc2.len2),this.atox[this.mc.b_c2],this.atoy[this.mc.b_c2],1);
                              }
                              else
                              {
                                 this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_c2],this.ay[this.mc.b_c2],this.atox[this.mc.b_c2],this.atoy[this.mc.b_c2],1);
                                 this.TurnBone3(this.mc2.b_p2,Number(this.ax[this.mc.b_c2]) - Math.sin(this.xx2) * Number(this.mc2.len2),Number(this.ay[this.mc.b_c2]) - Math.cos(this.xx2) * Number(this.mc2.len2),this.atox[this.mc.b_c2],this.atoy[this.mc.b_c2],1);
                              }
                           }
                           if(this.mc.master != -1)
                           {
                              if(this.mens[this.mc.master].io)
                              {
                                 this.mc2 = this.mens[this.mc.master];
                                 if(this.mc2.dead)
                                 {
                                    this.mc.hea = 0;
                                 }
                                 if(this.mc.hea > 0)
                                 {
                                    if(!this.mc2.isplayer)
                                    {
                                       if(this.mc.typ == 4)
                                       {
                                          if(this.TraceLine(this.mc.x,this.mc.y,this.mc.x,this.mc.y + 400))
                                          {
                                             this.mc2.act_movey = 1;
                                          }
                                       }
                                       if(this.mc.typ == 7)
                                       {
                                          if(!this.TraceLine(this.mc.x,this.mc.y,this.mc.x + Number(this.mc2.act_movex) * 200,this.mc.y - 100))
                                          {
                                             this.mc2.act_movey = 1;
                                          }
                                       }
                                       if(!this.TraceLine(this.mc.x,this.mc.y,this.mc.x + Number(this.mc2.act_movex) * 200,this.mc.y + 100))
                                       {
                                          this.mc2.act_movey = -1;
                                       }
                                    }
                                    this.u = 1;
                                    this.v = 1;
                                    if(this.mc.typ == 7)
                                    {
                                       this.u = 2;
                                       this.v = 1.5;
                                    }
                                    this.atoy[this.mc.b_c] -= 0.8 * this.GSPEED;
                                    this.atoy[this.mc.b_c1] -= 0.8 * this.GSPEED;
                                    this.atoy[this.mc.b_c2] += 0.8 * this.GSPEED;
                                    this.atoy[this.mc.b_c3] += 0.8 * this.GSPEED;
                                    this.atox[this.mc.b_c] *= Math.pow(0.9,this.GSPEED);
                                    this.atoy[this.mc.b_c] *= Math.pow(0.9,this.GSPEED);
                                    this.atox[this.mc.b_c1] *= Math.pow(0.9,this.GSPEED);
                                    this.atoy[this.mc.b_c1] *= Math.pow(0.9,this.GSPEED);
                                    this.atox[this.mc.b_c2] *= Math.pow(0.9,this.GSPEED);
                                    this.atoy[this.mc.b_c2] *= Math.pow(0.9,this.GSPEED);
                                    this.atox[this.mc.b_c3] *= Math.pow(0.9,this.GSPEED);
                                    this.atoy[this.mc.b_c3] *= Math.pow(0.9,this.GSPEED);
                                    this.atoy[this.mc.b_c] += Number(this.mc2.act_movey) * 2 * this.GSPEED * this.v;
                                    this.atoy[this.mc.b_c1] += Number(this.mc2.act_movey) * 2 * this.GSPEED * this.v;
                                    this.atox[this.mc.b_c] += Number(this.mc2.act_movex) * 1 * this.GSPEED * this.u;
                                    this.atox[this.mc.b_c1] += Number(this.mc2.act_movex) * 1 * this.GSPEED * this.u;
                                    this.atox[this.mc.b_c2] += Number(this.mc2.act_movex) * 0.5 * this.GSPEED * this.u;
                                    this.atox[this.mc.b_c3] += Number(this.mc2.act_movex) * 0.5 * this.GSPEED * this.u;
                                    this.aio[this.mc.b_c] = true;
                                    this.aio[this.mc.b_c1] = true;
                                    this.aio[this.mc.b_c2] = true;
                                    this.aio[this.mc.b_c3] = true;
                                    this.atim[this.mc.b_c] = 0;
                                    this.atim[this.mc.b_c1] = 0;
                                    this.atim[this.mc.b_c2] = 0;
                                    this.atim[this.mc.b_c3] = 0;
                                    if(this.mc2.tarx > this.mc.x + 50 && this.mc.side == -1 || this.mc2.tarx < this.mc.x - 50 && this.mc.side == 1)
                                    {
                                       i2 = int(this.mc.b_c);
                                       this.mc.b_c = this.mc.b_c1;
                                       this.mc.b_c1 = i2;
                                       i2 = int(this.mc.b_c2);
                                       this.mc.b_c2 = this.mc.b_c3;
                                       this.mc.b_c3 = i2;
                                       if(this.mc2.tarx > this.mc.x)
                                       {
                                          this.mc.side = 1;
                                       }
                                       else
                                       {
                                          this.mc.side = -1;
                                       }
                                       this.mc.carbody.scaleY = this.mc.side;
                                       this.xx2 = Math.atan2(Number(this.ax[this.mc.b_c]) - Number(this.ax[this.mc.b_c1]),Number(this.ay[this.mc.b_c]) - Number(this.ay[this.mc.b_c1]));
                                    }
                                 }
                                 else
                                 {
                                    this.mc.hea = 0;
                                 }
                                 this.mc2.stability = -0.1;
                                 this.xx = this.ax[this.mc.b_c];
                                 this.yy = this.ay[this.mc.b_c];
                                 this.TurnBone3(this.mc2.b_toe,this.xx,this.yy,0,0,1);
                                 this.mc2.x = this.xx;
                                 this.mc2.y = this.yy;
                                 this.mc2.tox = 0;
                                 this.mc2.toy = 0;
                              }
                           }
                           if(this.mc.hea <= 0)
                           {
                              if(!this.mc.dead)
                              {
                                 this.mc.dead = true;
                                 if(this.mc.master != -1)
                                 {
                                    this.mc2.hea = 0;
                                    this.mc2.visible = false;
                                    this.mc2.alpha = 0;
                                 }
                                 this.mc.gotoAndStop(3);
                                 this.mc.carbody.scaleY = this.mc.side;
                                 if(this.mc.typ == 4)
                                 {
                                    this.PlaySound(this.s_drone_die,this.mc.x,this.mc.y);
                                 }
                                 else
                                 {
                                    this.PlaySound(this.s_corvett_die,this.mc.x,this.mc.y);
                                 }
                                 if(this.mc.typ == 4)
                                 {
                                    this.PhysicsExplosion(this.ax[this.mc.b_c1],this.ay[this.mc.b_c1],200,8,30,-1,"vehicle");
                                 }
                                 else
                                 {
                                    this.PhysicsExplosion(this.ax[this.mc.b_c1],this.ay[this.mc.b_c1],400,11,80,-1,"vehicle");
                                 }
                              }
                           }
                           this.mc.x = this.ax[this.mc.b_c];
                           this.mc.y = this.ay[this.mc.b_c] + 100;
                           this.mc.carbody.y = -100;
                           this.mc.carbody.rotation = 270 - this.xx2 / Math.PI * 180;
                        }
                        else if(this.mc.typ == 5)
                        {
                           this.ax[this.mc.b_c0] = this.mc.x;
                           this.ay[this.mc.b_c0] = this.mc.y;
                           this.atox[this.mc.b_c0] = 0;
                           this.atoy[this.mc.b_c0] = 0;
                           if(this.mc.resttim > 0)
                           {
                              --this.mc.resttim;
                           }
                           i2 = 0;
                           while(i2 < 9)
                           {
                              this.mc["ch" + i2].x = Number(this.ax[this.mc["b_c" + i2]]) - this.mc.x;
                              this.mc["ch" + i2].y = Number(this.ay[this.mc["b_c" + i2]]) - this.mc.y;
                              this.aio[this.mc["b_c" + i2]] = true;
                              this.atim[this.mc["b_c" + i2]] = 0;
                              this.mc["ch" + i2].rotation = 180 - Math.atan2(Number(this.ax[this.mc["b_c" + i2]]) - Number(this.ax[this.mc["b_c" + (i2 + 1)]]),Number(this.ay[this.mc["b_c" + i2]]) - Number(this.ay[this.mc["b_c" + (i2 + 1)]])) * 180 / Math.PI;
                              this.mc["ch" + i2].scaleY = this.Dist2D(this.ax[this.mc["b_c" + i2]],this.ay[this.mc["b_c" + i2]],this.ax[this.mc["b_c" + (i2 + 1)]],this.ay[this.mc["b_c" + (i2 + 1)]]) * 0.01;
                              if(this.mc.resttim <= 0)
                              {
                                 if(this.mc.master == -1)
                                 {
                                    if(!this.key_pick)
                                    {
                                       if(this.mens[this.MP_myid].incar == -1)
                                       {
                                          if(this.Dist2D(this.ax[this.mc["b_c" + i2]],this.ay[this.mc["b_c" + i2]],this.ax[this.mens[this.MP_myid].b_arm2],this.ay[this.mens[this.MP_myid].b_arm2]) < 40)
                                          {
                                             this.mc.master = this.MP_myid;
                                             this.mc.holdat = i2;
                                          }
                                       }
                                    }
                                 }
                              }
                              if(this.mc.master != -1)
                              {
                                 if(this.aactive[this.mc.master])
                                 {
                                    if(Math.round(this.mc.holdat) == i2)
                                    {
                                       this.mc2 = this.mens[this.mc.master];
                                       this.mc2.stability = -0.1;
                                       this.xx = (this.ax[this.mc2.b_body] + Number(this.ax[this.mc["b_c" + i2]]) * 3) * 0.25;
                                       this.yy = (this.ay[this.mc2.b_body] + Number(this.ay[this.mc["b_c" + i2]]) * 3) * 0.25;
                                       this.xx2 = (this.atox[this.mc2.b_body] + Number(this.atox[this.mc["b_c" + i2]]) * 3) * 0.25;
                                       this.yy2 = (this.atoy[this.mc2.b_body] + Number(this.atoy[this.mc["b_c" + i2]]) * 3) * 0.25;
                                       this.xx2 -= Math.cos(Math.atan2(this.mc.x - this.xx,this.mc.y - this.yy)) * Number(this.mc2.act_movex) * 1;
                                       this.yy2 -= Math.sin(Math.atan2(this.mc.x - this.xx,this.mc.y - this.yy)) * Number(this.mc2.act_movex) * 1;
                                       this.lax[this.mc["b_c" + i2]] = this.ax[this.mc["b_c" + i2]] = this.xx;
                                       this.lay[this.mc["b_c" + i2]] = this.ay[this.mc["b_c" + i2]] = this.yy;
                                       this.atox[this.mc["b_c" + i2]] = this.xx2;
                                       this.atoy[this.mc["b_c" + i2]] = this.yy2;
                                       this.u = this.xx2 - Number(this.atox[this.mc2.b_body]);
                                       this.v = this.yy2 - Number(this.atoy[this.mc2.b_body]);
                                       this.atox[this.mc2.b_body] += this.u;
                                       this.atoy[this.mc2.b_body] += this.v;
                                       this.atox[this.mc2.b_toe] += this.u * 0.8;
                                       this.atoy[this.mc2.b_toe] += this.v * 0.8;
                                       this.atox[this.mc2.b_head_start] += this.u;
                                       this.atoy[this.mc2.b_head_start] += this.v;
                                       this.atox[this.mc2.b_head_end] += this.u * 0.9;
                                       this.atoy[this.mc2.b_head_end] += this.v * 0.9;
                                       this.atox[this.mc2.b_arm1] += this.u;
                                       this.atoy[this.mc2.b_arm1] += this.v;
                                       this.atox[this.mc2.b_arm2] += this.u;
                                       this.atoy[this.mc2.b_arm2] += this.v;
                                       this.aio[this.mc["b_c" + i2]] = true;
                                       this.atim[this.mc["b_c" + i2]] = true;
                                       if(this.key_pick)
                                       {
                                          this.key_pick = false;
                                          this.mc.master = -1;
                                          this.mc.resttim = 10;
                                       }
                                       else if(this.key_fall || Boolean(this.mens[this.mc.master].dead))
                                       {
                                          this.key_fall = false;
                                          this.mc.master = -1;
                                          this.mc.resttim = 40;
                                       }
                                    }
                                 }
                              }
                              i2++;
                           }
                        }
                        else if(this.mc.typ == 6)
                        {
                           local_speed_x = 0;
                           local_speed_y = 0;
                           if(this.mc.attached != -1)
                           {
                              dx = this.mc.x;
                              dy = this.mc.y;
                              if(this.mc.side == 1)
                              {
                                 this.mc.x = this.doors[this.mc.attached].x;
                              }
                              else
                              {
                                 this.mc.x = this.doors[this.mc.attached].x + this.doors[this.mc.attached].w;
                              }
                              this.mc.y = this.doors[this.mc.attached].y;
                              local_speed_x = Number(this.doors[this.mc.attached].tox);
                              local_speed_y = Number(this.doors[this.mc.attached].toy);
                              if(this.mc.master != -1)
                              {
                                 dx -= this.mc.x;
                                 dy -= this.mc.y;
                                 di = this.Dist2D(dx,dy,0,0) / this.GSPEED;
                                 if(di > 50)
                                 {
                                    this.mc.master = -1;
                                    this.mc.resttim = 30;
                                 }
                              }
                           }
                           if(this.mc.resttim > 0)
                           {
                              this.mc.resttim -= 1 * this.GSPEED2;
                           }
                           if(this.mc.resttim <= 0)
                           {
                              if(this.mc.master == -1 || this.mens[this.mc.master] != undefined && this.mens[this.mc.master].team == this.mens[this.MP_myid].team)
                              {
                                 i2 = 0;
                                 while(i2 < this.playerstotal)
                                 {
                                    if(!this.key_pick || i2 != this.MP_myid)
                                    {
                                       if(i2 == this.MP_myid || !this.mens[i2].isplayer)
                                       {
                                          if(this.aactive[i2])
                                          {
                                             if(!this.mens[i2].dead)
                                             {
                                                if(this.mens[i2].incar == -1)
                                                {
                                                   if(this.mens[i2].side == this.mc.side)
                                                   {
                                                      if(this.mens[i2].x < this.mc.x && this.mc.side == 1 || this.mens[i2].x > this.mc.x && this.mc.side == -1)
                                                      {
                                                         if(this.Dist2D(this.mc.x,this.mc.y,this.ax[this.mens[i2].b_body],this.ay[this.mens[i2].b_body]) < 50)
                                                         {
                                                            if(this.mens[i2].act_movey == -1 || this.mens[i2].act_movex == this.mc.side)
                                                            {
                                                               if(this.mens[i2].act_movey != 1)
                                                               {
                                                                  if(this.Dist2D(this.atox[this.mens[i2].b_body],this.atoy[this.mens[i2].b_body],local_speed_x,local_speed_y) < 14)
                                                                  {
                                                                     if(this.ay[this.mens[i2].b_body] > this.mc.y)
                                                                     {
                                                                        if(this.atoy[this.mens[i2].b_body] > 0.2 + local_speed_y)
                                                                        {
                                                                           if(!this.mens[i2].stand)
                                                                           {
                                                                              if(this.mc.attached == -1 || this.TracePointOnlyBoxes(this.mc.x + Number(this.mc.side) * 5,this.mc.y - 5) && this.TracePointOnlyBoxes(this.mc.x - Number(this.mc.side) * 5,this.mc.y + 5))
                                                                              {
                                                                                 this.mc.master = i2;
                                                                                 if(this.MP_mode)
                                                                                 {
                                                                                    if(i2 == this.MP_myid)
                                                                                    {
                                                                                       this.MP_last_linked = i;
                                                                                    }
                                                                                 }
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    i2++;
                                 }
                              }
                           }
                           if(this.mc.master != -1)
                           {
                              if(this.aactive[this.mc.master])
                              {
                                 this.mc2 = this.mens[this.mc.master];
                                 if(this.mc2.stability > -0.1)
                                 {
                                    this.mc2.stability = -0.1;
                                 }
                                 this.ax[this.mc2.b_arm2] = this.mc.x;
                                 this.ay[this.mc2.b_arm2] = this.mc.y;
                                 if(this.GET_LITE_PHYS())
                                 {
                                    this.lax[this.mc2.b_arm2] = this.mc.x;
                                    this.lay[this.mc2.b_arm2] = this.mc.y;
                                 }
                                 this.atox[this.mc2.b_arm2] = local_speed_x;
                                 this.atoy[this.mc2.b_arm2] = local_speed_y;
                                 if(this.mc2.idd == this.MP_myid)
                                 {
                                    this.xx2 = Math.sqrt(this.GSPEED2);
                                 }
                                 else
                                 {
                                    this.xx2 = Math.sqrt(this.GSPEED);
                                 }
                                 this.yy2 = this.xx2;
                                 this.u = this.xx2 * 2;
                                 this.xx2 *= 1.5;
                                 if(this.mc2.isplayer && (this.mc2.act_movey == 1 || this.mc2.act_movex == -Number(this.mc2.side) || this.key_fall && this.mc.master == this.MP_myid) || Boolean(this.mc2.dead) || this.mc2.stability < -0.3)
                                 {
                                    this.atoy[this.mc2.b_toe] += 0.5;
                                    if(this.mc.master == this.MP_myid)
                                    {
                                       this.key_fall = false;
                                    }
                                    this.mc.master = -1;
                                    this.mc.resttim = 60;
                                 }
                                 else
                                 {
                                    if(!this.mc2.isplayer || this.mc2.act_movey == -1 || this.mc2.act_movex == this.mc2.side || this.key_pick && this.mc.master == this.MP_myid)
                                    {
                                       if(this.ax[this.mc2.b_toe] < this.mc.x + 5 && this.mc2.side == 1 || this.ax[this.mc2.b_toe] > this.mc.x - 5 && this.mc2.side == -1)
                                       {
                                          this.atoy[this.mc2.b_toe] -= 0.5 * this.xx2;
                                          this.atoy[this.mc2.b_body] -= 0.5 * this.xx2;
                                          this.ay[this.mc2.b_toe] -= 2 * this.u;
                                          this.ay[this.mc2.b_body] -= 3 * this.u;
                                          if(this.GET_LITE_PHYS())
                                          {
                                             this.lay[this.mc2.b_toe] -= 2 * this.u;
                                             this.lay[this.mc2.b_body] -= 3 * this.u;
                                          }
                                          if(this.Math_abs(this.atox[this.mc2.b_leg1]) < 2 || this.Math_abs(this.atox[this.mc2.b_leg2]) < 2)
                                          {
                                             this.atoy[this.mc2.b_body] *= Math.pow(0.7,this.yy2);
                                             this.atoy[this.mc2.b_toe] *= Math.pow(0.7,this.yy2);
                                             this.atoy[this.mc2.b_head_start] *= Math.pow(0.7,this.yy2);
                                             this.atoy[this.mc2.b_head_end] *= Math.pow(0.7,this.yy2);
                                             this.atoy[this.mc2.b_body] -= 1 * this.xx2;
                                             this.ay[this.mc2.b_body] -= 1 * this.u;
                                             this.atoy[this.mc2.b_head_start] -= 0.6 * this.xx2;
                                             this.ay[this.mc2.b_head_start] -= 0.6 * this.u;
                                             this.atox[this.mc2.b_head_start] += Number(this.mc.side) * 0.8 * this.xx2;
                                             this.atoy[this.mc2.b_head_end] -= 0.6 * this.xx2;
                                             this.ay[this.mc2.b_head_end] -= 0.6 * this.u;
                                             this.atox[this.mc2.b_head_end] += Number(this.mc.side) * 1 * this.xx2;
                                             this.atoy[this.mc2.b_toe] -= 1 * this.xx2;
                                             this.ay[this.mc2.b_toe] -= 1 * this.u;
                                             if(!this.GET_LITE_PHYS())
                                             {
                                                this.atox[this.mc2.b_body] += Number(this.mc.side) * 0.7 * this.xx2;
                                                this.atox[this.mc2.b_toe] += Number(this.mc.side) * 0.5 * this.xx2;
                                             }
                                             if(this.GET_LITE_PHYS())
                                             {
                                                this.lay[this.mc2.b_body] -= 1 * this.u;
                                                this.lay[this.mc2.b_toe] -= 1 * this.u;
                                                this.lay[this.mc2.b_head_start] -= 0.6 * this.u;
                                                this.lay[this.mc2.b_head_end] -= 0.6 * this.u;
                                             }
                                             if(this.ay[this.mc2.b_toe] < this.mc.y - 5 || (this.ay[this.mc2.b_leg1] < this.mc.y || this.ay[this.mc2.b_leg2] < this.mc.y))
                                             {
                                                this.mc.master = -1;
                                                this.mc.resttim = 30;
                                                this.mc2.stability = 0.5;
                                                this.mc2.sit = 1;
                                                this.mc2.tox = local_speed_x;
                                                this.mc2.toy = local_speed_y;
                                                this.u = this.mc.x + Number(this.mc2.side) * 5 * Number(this.mc2.scale) - this.mc2.x;
                                                this.v = this.mc.y + this.sitmax * Number(this.mc2.scale) - this.mc2.y;
                                                this.u = -this.u;
                                                this.v = -this.v;
                                                this.mc2.x = this.mc.x + Number(this.mc2.side) * 5 * Number(this.mc2.scale);
                                                this.mc2.y = this.mc.y + this.sitmax * Number(this.mc2.scale);
                                                this.mc2.gui.x += this.u;
                                                this.mc2.gui.y += this.v;
                                                this.mc2.body.x += this.u;
                                                this.mc2.body.y += this.v;
                                                this.mc2.head.x += this.u;
                                                this.mc2.head.y += this.v;
                                                this.mc2.toe.x += this.u;
                                                this.mc2.toe.y += this.v;
                                                this.mc2.arm1.x += this.u;
                                                this.mc2.arm1.y += this.v;
                                                this.mc2.arm2.x += this.u;
                                                this.mc2.arm2.y += this.v;
                                                this.mc2.leg1.x += this.u;
                                                this.mc2.leg1.y += this.v;
                                                this.mc2.leg2.x += this.u;
                                                this.mc2.leg2.y += this.v;
                                             }
                                          }
                                       }
                                       else if(this.mc2.side == 1)
                                       {
                                          this.atox[this.mc2.b_toe] -= 0.3 * this.xx2;
                                       }
                                       else
                                       {
                                          this.atox[this.mc2.b_toe] += 0.3 * this.xx2;
                                       }
                                    }
                                    this.atoy[this.mc2.b_arm1] += (this.mc.y - 5 - Number(this.ay[this.mc2.b_arm1])) * 0.1 * this.xx2;
                                    this.atoy[this.mc2.b_body] += (this.mc.y - Number(this.ay[this.mc2.b_body])) * 0.1 * this.xx2;
                                    this.ay[this.mc2.b_arm1] += (this.mc.y - 5 - Number(this.ay[this.mc2.b_arm1])) * 0.2 * this.xx2;
                                    this.ay[this.mc2.b_body] += (this.mc.y - Number(this.ay[this.mc2.b_body])) * 0.2 * this.xx2;
                                    if(this.GET_LITE_PHYS())
                                    {
                                       this.lay[this.mc2.b_arm1] += (this.mc.y - 5 - Number(this.ay[this.mc2.b_arm1])) * 0.2 * this.xx2;
                                       this.lay[this.mc2.b_body] += (this.mc.y - Number(this.ay[this.mc2.b_body])) * 0.2 * this.xx2;
                                    }
                                 }
                                 this.atox[this.mc2.b_body] += (this.mc.x - Number(this.ax[this.mc2.b_body])) * 0.1 * this.xx2;
                                 this.atox[this.mc2.b_toe] -= Number(this.mc2.side) * 0.5 * this.xx2;
                                 this.atox[this.mc2.b_leg1] += Number(this.mc2.side) * 0.6 * this.xx2;
                                 this.atox[this.mc2.b_leg2] += Number(this.mc2.side) * 0.6 * this.xx2;
                                 this.atoy[this.mc2.b_leg1] -= 0.05 * this.xx2;
                                 this.atoy[this.mc2.b_leg2] += 0.05 * this.xx2;
                                 if(this.mc2.side == 1)
                                 {
                                    if(this.ax[this.mc2.b_toe] > this.mc.x)
                                    {
                                       this.ax[this.mc2.b_toe] = this.lax[this.mc2.b_toe] = this.mc.x;
                                       this.atox[this.mc2.b_toe] = Math.min(local_speed_x,this.atox[this.mc2.b_toe]);
                                    }
                                    if(this.ax[this.mc2.b_body] > this.mc.x)
                                    {
                                       this.ax[this.mc2.b_body] = this.lax[this.mc2.b_body] = this.mc.x;
                                       this.atox[this.mc2.b_body] = Math.min(local_speed_x,this.atox[this.mc2.b_body]);
                                    }
                                    if(this.ax[this.mc2.b_leg2] > this.mc.x)
                                    {
                                       this.ax[this.mc2.b_leg2] = this.lax[this.mc2.b_leg2] = this.mc.x;
                                       this.atox[this.mc2.b_leg2] = Math.min(local_speed_x,this.atox[this.mc2.b_leg2]);
                                    }
                                    if(this.ax[this.mc2.b_leg1] > this.mc.x)
                                    {
                                       this.ax[this.mc2.b_leg1] = this.lax[this.mc2.b_leg1] = this.mc.x;
                                       this.atox[this.mc2.b_leg1] = Math.min(local_speed_x,this.atox[this.mc2.b_leg1]);
                                    }
                                 }
                                 else
                                 {
                                    if(this.ax[this.mc2.b_toe] < this.mc.x)
                                    {
                                       this.ax[this.mc2.b_toe] = this.lax[this.mc2.b_toe] = this.mc.x;
                                       this.atox[this.mc2.b_toe] = Math.max(local_speed_x,this.atox[this.mc2.b_toe]);
                                    }
                                    if(this.ax[this.mc2.b_body] < this.mc.x)
                                    {
                                       this.ax[this.mc2.b_body] = this.lax[this.mc2.b_body] = this.mc.x;
                                       this.atox[this.mc2.b_body] = Math.max(local_speed_x,this.atox[this.mc2.b_body]);
                                    }
                                    if(this.ax[this.mc2.b_leg2] < this.mc.x)
                                    {
                                       this.ax[this.mc2.b_leg2] = this.lax[this.mc2.b_leg2] = this.mc.x;
                                       this.atox[this.mc2.b_leg2] = Math.max(local_speed_x,this.atox[this.mc2.b_leg2]);
                                    }
                                    if(this.ax[this.mc2.b_leg1] < this.mc.x)
                                    {
                                       this.ax[this.mc2.b_leg1] = this.lax[this.mc2.b_leg1] = this.mc.x;
                                       this.atox[this.mc2.b_leg1] = Math.max(local_speed_x,this.atox[this.mc2.b_leg1]);
                                    }
                                 }
                              }
                           }
                        }
                        if(this.mc.gui.visible)
                        {
                           this.mc.gui.x = 0;
                           this.mc.gui.y = -150;
                           if(this.mc.hea > 0)
                           {
                              this.mc.gui.h.scaleX = Number(this.mc.hea) / Number(this.mc.hmax);
                           }
                           else if(this.mc.gui.alpha > 0)
                           {
                              this.mc.gui.h.scaleX = 0;
                              this.mc.gui.alpha -= 0.1 * this.GSPEED;
                           }
                           else
                           {
                              this.mc.gui.visible = false;
                           }
                        }
                        if(!this.vehicles[i].visible)
                        {
                           this.vehicles[i].visible = true;
                        }
                     }
                     else
                     {
                        this.aactive[-200 - i] = false;
                        if(this.vehicles[i].visible)
                        {
                           this.vehicles[i].visible = false;
                        }
                     }
                  }
                  i++;
               }
               i = 0;
               while(i < this.gunstotal)
               {
                  if(this.guns[i].io)
                  {
                     if(this.guns[i].picken_by == this.MP_myid)
                     {
                        if(this.guns[i].ThinkNow != undefined)
                        {
                           this.guns[i].ThinkNow(this.GSPEED2 * Number(this.guns[i].speed_multiplier));
                        }
                     }
                     else if(this.guns[i].ThinkNow != undefined)
                     {
                        this.guns[i].ThinkNow(this.GSPEED * Number(this.guns[i].speed_multiplier));
                     }
                     if(!this.guns[i].ready)
                     {
                        if(this.MP_mode)
                        {
                           if(this.MP_app)
                           {
                              if(this.guns[i].picken_by == -1)
                              {
                                 if(!this.guns[i].ready)
                                 {
                                    if(this.MP_type == 1 || this.MP_type == 3)
                                    {
                                       allow_reload = true;
                                       i2 = 0;
                                       while(i2 < this.playerstotal)
                                       {
                                          if(this.mens[i2].io)
                                          {
                                             if(Math.abs(Number(this.mens[i2].x) - Number(this.guns[i].x)) < 800)
                                             {
                                                if(Math.abs(Number(this.mens[i2].y) - Number(this.guns[i].y)) < 800)
                                                {
                                                   allow_reload = false;
                                                   break;
                                                }
                                             }
                                          }
                                          i2++;
                                       }
                                       if(allow_reload)
                                       {
                                          this.MakeGunByClass(this.guns[i].model,this.guns[i],true);
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        if(this.guns[i].picken_by == this.MP_myid)
                        {
                           this.guns[i].floatframe += this.GSPEED2 * Number(this.guns[i].speed_multiplier);
                        }
                        else
                        {
                           this.guns[i].floatframe += this.GSPEED * Number(this.guns[i].speed_multiplier);
                        }
                        //this.MeasureStop(13);
                        if(this.guns[i].floatframe >= this.guns[i].totalFrames)
                        {
                           if(!this.guns[i].ready)
                           {
                              if(this.guns[i].picken_by != -1)
                              {
                                 if(this.guns[i].onreload != -1)
                                 {
                                    this.TRIGGER_PLAYER_INITIATOR = this.guns[i].picken_by;
                                    if(this.guns[i].picken_by == this.MP_myid || !this.mens[this.guns[i].picken_by].isplayer)
                                    {
                                       if(this.EXEC_TRIGGER(this.guns[i].onreload))
                                       {
                                          if(this.guns[i].picken_by == this.MP_myid && this.MP_mode)
                                          {
                                             this.MP_custom_events += ";exec|" + this.guns[i].onreload + "#" + this.guns[i].picken_by + "#" + -1;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           this.guns[i].floatframe = 2;
                           this.guns[i].ready = true;
                           this.guns[i].gotoAndStop(2);
                        }
                        else if(this.guns[i].currentFrame < Math.floor(this.guns[i].floatframe))
                        {
                           skips = 0;
                           while(skips < Math.floor(this.guns[i].floatframe) - Number(this.guns[i].currentFrame))
                           {
                              this.guns[i].nextFrame();
                              skips++;
                           }
                        }
                        else
                        {
						   //trace(this.guns[i].floatframe + " FLOAT FRAME");
                           this.SetMCFrame(this.guns[i],Math.floor(this.guns[i].floatframe));
                        }
                        //this.MeasureStop(13);
                     }
                     if(this.guns[i].ready)
                     {
                        if(this.guns[i].currentFrame != 2)
                        {
                           this.guns[i].gotoAndStop(2);
                           this.guns[i].floatframe = 2;
                        }
                     }
                     if(this.ax[this.guns[i].b_p1] > this.render_minX && this.ax[this.guns[i].b_p1] < this.render_maxX && this.ay[this.guns[i].b_p1] > this.render_minY && this.ay[this.guns[i].b_p1] < this.render_maxY || this.firstframe || this.guns[i].picken_by != -1 && this.aactive[this.guns[i].picken_by])
                     {
                        this.mc = this.guns[i];
                        if(this.mc.av > this.mc.stat_averange_max)
                        {
                           this.mc.av = Number(this.mc.stat_averange_max) - Number(this.mc.stat_averange_substract);
                        }
                        else if(this.mc.picken_by == this.MP_myid)
                        {
                           this.mc.av -= Number(this.mc.stat_averange_substract) * this.GSPEED2;
                        }
                        else
                        {
                           this.mc.av -= Number(this.mc.stat_averange_substract) * this.GSPEED;
                        }
                        if(this.mc.av < this.mc.stat_averange_min)
                        {
                           this.mc.av = this.mc.stat_averange_min;
                        }
                        this.aactive[-1 - i] = true;
                        if(this.mc.forcars == false)
                        {
                           if(this.mc.picken_by != -1)
                           {
                              if(!this.mens[this.mc.picken_by].io)
                              {
                                 this.mc.picken_by = -1;
                              }
                           }
                           if(this.mc.picken_by != -1)
                           {
                              this.mc2 = this.mens[this.mc.picken_by];
                              this.mc.scaleY = this.mc2.side;
                              if(this.mc.alpha != this.mc2.alpha)
                              {
                                 this.mc.alpha = this.mc2.alpha;
                              }
                              if(this.mc2.curwea == i)
                              {
                                 if(!this.mc2.brk_arms)
                                 {
                                    this.xx = Math.atan2(Number(this.ax[this.mc2.b_body]) - Number(this.ax[this.mc2.b_arm1]),Number(this.ay[this.mc2.b_body]) - Number(this.ay[this.mc2.b_arm1]));
                                    this.yy = this.chdef[this.mc.ch_ch1];
                                    this.TurnBone2(this.mc.b_p1,this.ax[this.mc2.b_arm1] + Math.sin(this.xx - Math.PI / 2) * Number(this.mc.zpos) * Number(this.mc2.side),this.ay[this.mc2.b_arm1] + Math.cos(this.xx - Math.PI / 2) * Number(this.mc.zpos) * Number(this.mc2.side),this.mc2,1);
                                    if(!this.mc2.dying || this.mc2.isplayer || !this.EASY_MODE)
                                    {
                                       this.TurnBone2(this.mc.b_p2,Number(this.ax[this.mc2.b_arm1]) - Math.sin(this.xx) * this.yy + Math.sin(this.xx - Math.PI / 2) * Number(this.mc.zpos) * Number(this.mc2.side),Number(this.ay[this.mc2.b_arm1]) - Math.cos(this.xx) * this.yy + Math.cos(this.xx - Math.PI / 2) * Number(this.mc.zpos) * Number(this.mc2.side),this.mc2,1);
                                    }
                                 }
                              }
                              else
                              {
                                 if(this.mc.attachment == 0)
                                 {
                                    this.TurnBone2(this.mc.b_p1,this.ax[this.mc2.b_toe],this.ay[this.mc2.b_toe],this.mc2,1);
                                    this.TurnBone2(this.mc.b_p2,this.ax[this.mc2.b_leg1],this.ay[this.mc2.b_leg1],this.mc2,1);
                                 }
                                 if(this.mc.attachment == 1)
                                 {
                                    this.xx = Math.atan2(Number(this.ax[this.mc2.b_body]) - Number(this.ax[this.mc2.b_toe]),Number(this.ay[this.mc2.b_body]) - Number(this.ay[this.mc2.b_toe])) - Math.PI / 2;
                                    this.TurnBone2(this.mc.b_p2,Number(this.ax[this.mc2.b_toe]) - Math.sin(this.xx) * 15 * Number(this.mc2.side) * Number(this.mc2.scale),Number(this.ay[this.mc2.b_toe]) - Math.cos(this.xx) * 15 * Number(this.mc2.side) * Number(this.mc2.scale),this.mc2,1);
                                    this.TurnBone2(this.mc.b_p1,Number(this.ax[this.mc2.b_body]) - Math.sin(this.xx) * 15 * Number(this.mc2.side) * Number(this.mc2.scale),Number(this.ay[this.mc2.b_body]) - Math.cos(this.xx) * 15 * Number(this.mc2.side) * Number(this.mc2.scale),this.mc2,1);
                                 }
                                 if(this.mc.attachment == 2)
                                 {
                                    this.TurnBone2(this.mc.b_p1,this.ax[this.mc2.b_head_start],this.ay[this.mc2.b_head_start],this.mc2,1);
                                    this.TurnBone2(this.mc.b_p2,this.ax[this.mc2.b_head_end],this.ay[this.mc2.b_head_end],this.mc2,1);
                                 }
                                 if(this.mc.attachment == 3)
                                 {
                                    this.TurnBone2(this.mc.b_p1,this.ax[this.mc2.b_head_start],this.ay[this.mc2.b_head_start],this.mc2,1);
                                 }
                                 if(this.mc.attachment == 4)
                                 {
                                    this.TurnBone2(this.mc.b_p1,this.ax[this.mc2.b_body],this.ay[this.mc2.b_body],this.mc2,1);
                                 }
                              }
                              if(this.mc2.can_drop_guns)
                              {
                                 if(Boolean(this.mc2.dead) || !this.mc2.isplayer && (this.mc2.dying || this.mc2.stability < -0.2) && Math.random() < 0.01 * this.GSPEED && this.mc2.team != this.mens[this.MP_myid].team)
                                 {
                                    if(!this.CASUAL_MODE || !this.STRICT_MODE || this.mc2.team != this.mens[this.MP_myid].team || this.mc2.brk_arms || Boolean(this.mc2.brk_head) || Boolean(this.mc2.brk_legs) || Boolean(this.mc2.brk_body))
                                    {
                                       if(this.mc2.curwea == i)
                                       {
                                          this.mc2.curwea = -1;
                                       }
                                       this.ChangedGun(this.mc.picken_by);
                                       if(this.mc2.dead)
                                       {
                                          this.xx = 1 + Math.random() * Math.PI * 2;
                                          this.atox[this.mc.b_p1] += Math.sin(this.xx) * 2;
                                          this.atoy[this.mc.b_p1] += Math.cos(this.xx) * 2;
                                          this.atox[this.mc.b_p2] -= Math.sin(this.xx) * 2;
                                          this.atoy[this.mc.b_p2] -= Math.cos(this.xx) * 2;
                                       }
                                       if(this.mc.picken_by == this.MP_myid)
                                       {
                                          if(this.mc.wep == -2)
                                          {
                                             if(this.mc.nadekind == 1)
                                             {
                                                if(this.grenades_total > 0)
                                                {
                                                   this.grenades_total = this.grenades_total - 1;
                                                }
                                             }
                                             if(this.mc.nadekind == 2)
                                             {
                                                if(this.grenades_port_total > 0)
                                                {
                                                   this.grenades_port_total = this.grenades_port_total - 1;
                                                }
                                             }
                                             if(this.mc.nadekind == 3)
                                             {
                                                if(this.grenades_sh_total > 0)
                                                {
                                                   this.grenades_sh_total = this.grenades_sh_total - 1;
                                                }
                                             }
                                          }
                                       }
                                       this.mc.picken_by = -1;
                                    }
                                 }
                              }
                              this.WakeUpAtom(this.mc.b_p1);
                              this.WakeUpAtom(this.mc.b_p2);
                              this.amat[this.mc.b_p1] = -1;
                              this.amat[this.mc.b_p2] = -1;
                           }
                           else
                           {
                              this.ok = true;
                              i2 = 0;
                              while(i2 < this.gunstotal && this.ok)
                              {
                                 if(this.guns[i2].io)
                                 {
                                    if(!this.guns[i2].forcars)
                                    {
                                       if(this.guns[i2].wep > 0)
                                       {
                                          if(this.guns[i2].picken_by == this.MP_myid)
                                          {
                                             if(this.guns[i2].model == this.mc.model)
                                             {
                                                if(this.guns[i2].upg >= this.mc.upg)
                                                {
                                                   this.ok = false;
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                                 i2++;
                              }
                              if((this.mc.command != -1 || !this.ok) && this.mc.command != this.mens[this.MP_myid].team && !this.MP_mode)
                              {
                                 if(!this.SUPER_COMPUTER && (!this.HQ || this.c_sim_stress) || this.MEAT_MODE)
                                 {
                                    ++this.mc.deadtim;
                                 }
                                 if(this.c_sim_stress)
                                 {
                                    if(this.mc.deadtim > 200)
                                    {
                                       this.mc.alpha -= 0.4;
                                    }
                                 }
                                 else if(this.mc.deadtim > 400)
                                 {
                                    this.mc.alpha -= 0.1;
                                 }
                                 if(this.mc.alpha < 0)
                                 {
                                    this.DestroyGun(i);
                                 }
                              }
                              else if(this.mc.alpha != 1)
                              {
                                 this.mc.alpha = 1;
                              }
                           }
                        }
                        else if(this.mc.picken_by != -1)
                        {
                           this.mc2 = this.vehicles[this.mc.picken_by];
                           this.amat[this.mc.b_p1] = -1;
                           this.amat[this.mc.b_p2] = -1;
                        }
                        if(this.mc.io)
                        {
                           this.mc.x = this.ax[this.mc.b_p1];
                           this.mc.y = this.ay[this.mc.b_p1];
                           this.mc.rotation = -Math.atan2(Number(this.ax[this.mc.b_p1]) - Number(this.ax[this.mc.b_p2]),Number(this.ay[this.mc.b_p1]) - Number(this.ay[this.mc.b_p2])) / Math.PI * 180 - 90;
                           if(this.mc.picken_by == -1)
                           {
                              if(this.mc.forcars == false)
                              {
                                 i2 = 0;
                                 while(i2 < this.playerstotal && this.mc.picken_by == -1)
                                 {
                                    if(!this.mens[i2].dead)
                                    {
                                       if(!this.mens[i2].isplayer || this.MP_myid == i2 && !this.MP_spectator)
                                       {
                                          if(this.mc.command == -1 || this.MP_mode && this.MP_type == 1 || this.mc.command != -1 && this.mc.command == this.mens[i2].team && (this.mens[i2].isplayer || this.mens[this.MP_myid].team != this.mens[i2].team))
                                          {
                                             if(this.mens[i2].stability >= -0.5)
                                             {
                                                this.mc2 = this.mens[i2];
                                                if(!this.mc2.brk_arms)
                                                {
                                                   if(this.mc.x > this.mc2.x - 40)
                                                   {
                                                      if(this.mc.x < this.mc2.x + 40)
                                                      {
                                                         if(this.mc.y > this.mc2.y - 90)
                                                         {
                                                            if(this.mc.y < this.mc2.y + 30)
                                                            {
                                                               this.ok = true;
                                                               if(this.MP_mode)
                                                               {
                                                                  if(this.MP_gamestate != 0)
                                                                  {
                                                                     this.ok = false;
                                                                  }
                                                               }
                                                               if(this.mc.wep != -2)
                                                               {
                                                                  this.i3 = 0;
                                                                  while(this.i3 < this.gunstotal && this.ok)
                                                                  {
                                                                     if(this.guns[this.i3].io)
                                                                     {
                                                                        if(i != this.i3)
                                                                        {
                                                                           if(!this.guns[this.i3].forcars)
                                                                           {
                                                                              if(this.guns[this.i3].picken_by == i2 && this.guns[this.i3].wep == this.mc.wep)
                                                                              {
                                                                                 this.ok = false;
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                     ++this.i3;
                                                                  }
                                                               }
                                                               if(i2 == this.MP_myid && this.key_grab)
                                                               {
                                                                  this.ok = false;
                                                               }
                                                               if(i2 == this.MP_myid)
                                                               {
                                                                  if(this.mc.wep == -2)
                                                                  {
                                                                     if(this.mc.nadekind == 1)
                                                                     {
                                                                        if(this.grenades_total >= 6)
                                                                        {
                                                                           this.ok = false;
                                                                        }
                                                                     }
                                                                     if(this.mc.nadekind == 2)
                                                                     {
                                                                        if(this.grenades_port_total >= 6)
                                                                        {
                                                                           this.ok = false;
                                                                        }
                                                                     }
                                                                     if(this.mc.nadekind == 3)
                                                                     {
                                                                        if(this.grenades_sh_total >= 6)
                                                                        {
                                                                           this.ok = false;
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                               if(this.ok)
                                                               {
                                                                  if(i2 != this.MP_myid || this.IgnoreGunPickTempCanI(this.mc))
                                                                  {
                                                                     if(this.mc.wep == -2)
                                                                     {
                                                                        if(i2 == this.MP_myid)
                                                                        {
                                                                           if(this.mc.nadekind == 1)
                                                                           {
                                                                              ++this.grenades_total;
                                                                              this.UpdateWeps();
                                                                           }
                                                                           if(this.mc.nadekind == 2)
                                                                           {
                                                                              ++this.grenades_port_total;
                                                                              this.UpdateWeps();
                                                                           }
                                                                           if(this.mc.nadekind == 3)
                                                                           {
                                                                              ++this.grenades_sh_total;
                                                                              this.UpdateWeps();
                                                                           }
                                                                        }
                                                                     }
                                                                     if(i2 == this.MP_myid)
                                                                     {
                                                                        if(!this.firstframe)
                                                                        {
                                                                           this.PlaySound(this.s_wea_pickup,this.mc.x,this.mc.y);
                                                                        }
                                                                     }
                                                                     this.mc.picken_by = i2;
                                                                     if(i2 != this.MP_myid)
                                                                     {
                                                                        if(this.mc2.curwea == -1 || this.CalcWepPriority(this.guns[i]) > this.CalcWepPriority(this.guns[this.mc2.curwea]))
                                                                        {
                                                                           if(this.mc.wep >= 0)
                                                                           {
                                                                              this.mc2.curwea = i;
                                                                              this.mc.deadtim = 0;
                                                                              this.ChangedGun(i2);
                                                                           }
                                                                        }
                                                                     }
                                                                     if(i2 == this.MP_myid)
                                                                     {
                                                                        if(this.AUTO_PICK_NEW_WEPS && !this.firstframe || this.mc2.char == 1 && this.firstframe && this.curA == this.mc.model || this.mc2.char == 3 && this.firstframe && this.curB == this.mc.model)
                                                                        {
                                                                           if(this.mc.wep >= 0)
                                                                           {
                                                                              this.mc2.curwea = i;
                                                                              this.ChangedGun(i2);
                                                                           }
                                                                        }
																		else if(!this.firstframe)
                                                                        {
                                                                           if(this.mc.wep >= 0)
                                                                           {
                                                                              if(this.mc.wep <= 9)
                                                                              {
                                                                                 this.slots[this.mc.wep].gotoAndStop(2);
                                                                              }
                                                                           }
                                                                        }
                                                                        this.UpdateWeps();
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    i2++;
                                 }
                              }
                              this.amat[this.mc.b_p1] = 2;
                              this.amat[this.mc.b_p2] = 2;
                           }
                           if(!this.guns[i].visible)
                           {
                              this.guns[i].visible = true;
                           }
                        }
                     }
                     else
                     {
                        this.aactive[-1 - i] = false;
                        if(this.guns[i].visible)
                        {
                           this.guns[i].visible = false;
                        }
                     }
                     if(this.guns[i].ray != undefined)
                     {
                        this.ok = false;
                        this.ok2 = false;
                        if(this.guns[i].picken_by != -1)
                        {
                           if(!this.mens[this.guns[i].picken_by].dead)
                           {
                              if(this.mens[this.guns[i].picken_by].curwea == i)
                              {
                                 this.ok2 = true;
                                 this.xx = this.guns[i].x;
                                 this.yy = this.guns[i].y;
                                 this.xx2 = this.xx + Math.sin(this.mens[this.guns[i].picken_by].ang) * 3000;
                                 this.yy2 = this.yy + Math.cos(this.mens[this.guns[i].picken_by].ang) * 3000;
                                 this.u = 3000;
                                 i2 = 0;
                                 while(i2 < this.playerstotal)
                                 {
                                    if(!this.mens[i2].dying)
                                    {
                                       if(!this.mens[i2].dead)
                                       {
                                          if(this.mens[this.guns[i].picken_by].team != this.mens[i2].team)
                                          {
                                             if(this.CheckCrossSimpleOpti(this.xx,this.yy,this.xx2,this.yy2,Number(this.mens[i2].x) - this.PLAYER_WIDTH,Number(this.mens[i2].y) - 81,this.mens[i2].x + this.PLAYER_WIDTH,this.mens[i2].y) || this.CheckCrossSimpleOpti(this.xx,this.yy,this.xx2,this.yy2,this.mens[i2].x + this.PLAYER_WIDTH,Number(this.mens[i2].y) - 81,Number(this.mens[i2].x) - this.PLAYER_WIDTH,this.mens[i2].y))
                                             {
                                                if(this.TraceLine(this.retux,this.retuy,this.xx,this.yy))
                                                {
                                                   this.ok = true;
                                                   this.v = this.Dist2D(this.xx,this.yy,this.retux,this.retuy);
                                                   if(this.v < this.u)
                                                   {
                                                      this.xx2 = this.retux;
                                                      this.yy2 = this.retuy;
                                                      this.u = this.v;
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    i2++;
                                 }
                                 i2 = 0;
                                 while(i2 < this.boxestotal)
                                 {
                                    if(this.CheckCrossSimpleOpti(this.xx,this.yy,this.xx2,this.yy2,this.boxx[i2],this.boxy[i2],this.boxx[i2] + this.boxw[i2],this.boxy[i2]))
                                    {
                                       this.v = this.Dist2D(this.xx,this.yy,this.retux,this.retuy);
                                       if(this.v < this.u)
                                       {
                                          this.xx2 = this.retux;
                                          this.yy2 = this.retuy;
                                          this.u = this.v;
                                       }
                                    }
                                    if(this.CheckCrossSimpleOpti(this.xx,this.yy,this.xx2,this.yy2,this.boxx[i2],this.boxy[i2] + this.boxh[i2],this.boxx[i2] + this.boxw[i2],this.boxy[i2] + this.boxh[i2]))
                                    {
                                       this.v = this.Dist2D(this.xx,this.yy,this.retux,this.retuy);
                                       if(this.v < this.u)
                                       {
                                          this.xx2 = this.retux;
                                          this.yy2 = this.retuy;
                                          this.u = this.v;
                                       }
                                    }
                                    if(this.CheckCrossSimpleOpti(this.xx,this.yy,this.xx2,this.yy2,this.boxx[i2],this.boxy[i2],this.boxx[i2],this.boxy[i2] + this.boxh[i2]))
                                    {
                                       this.v = this.Dist2D(this.xx,this.yy,this.retux,this.retuy);
                                       if(this.v < this.u)
                                       {
                                          this.xx2 = this.retux;
                                          this.yy2 = this.retuy;
                                          this.u = this.v;
                                       }
                                    }
                                    if(this.CheckCrossSimpleOpti(this.xx,this.yy,this.xx2,this.yy2,this.boxx[i2] + this.boxw[i2],this.boxy[i2],this.boxx[i2] + this.boxw[i2],this.boxy[i2] + this.boxh[i2]))
                                    {
                                       this.v = this.Dist2D(this.xx,this.yy,this.retux,this.retuy);
                                       if(this.v < this.u)
                                       {
                                          this.xx2 = this.retux;
                                          this.yy2 = this.retuy;
                                          this.u = this.v;
                                       }
                                    }
                                    i2++;
                                 }
                              }
                           }
                        }
                        //this.MeasureStop(14);
                        if(this.guns[i].ready)
                        {
                           if(this.guns[i].riflestatus != undefined)
                           {
                              if(this.ok)
                              {
                                 this.SetMCFrame(this.guns[i].riflestatus,2);
                              }
                              else
                              {
                                 this.SetMCFrame(this.guns[i].riflestatus,1);
                              }
                           }
                        }
                        //this.MeasureStop(14);
                        if(this.ok2 && Boolean(this.guns[i].ready))
                        {
                           this.guns[i].ray.scaleX = this.u / 100;
                           if(!this.guns[i].ray.visible)
                           {
                              this.guns[i].ray.visible = true;
                           }
                           this.guns[i].ray.rotation = (90 - Number(this.guns[i].rotation) - Number(this.mens[this.guns[i].picken_by].ang) / Math.PI * 180) * Number(this.guns[i].scaleY);
                        }
                        else if(this.guns[i].ray.visible)
                        {
                           this.guns[i].ray.visible = false;
                        }
                     }
                  }
                  i++;
               }
               if(this.DEBUG_MODE)
               {
               }
               i = 0;
               while(i < this.timerstotal)
               {
                  if(this.DEBUG_MODE)
                  {
                  }
                  if(this.timers[i].enabledd)
                  {
                     if(this.timers[i].maxcalls > 0 || this.timers[i].maxcalls == -1)
                     {
                        this.yy2 = 1;
                        if(this.timers[i].forcehyperjump)
                        {
                           this.timers[i].forcehyperjump = false;
                           this.yy2 = this.MP_ping2 / this.c_sim_rt2;
                        }
                        this.timers[i].ticknew += this.GSPEED * this.yy2;
                        if(this.timers[i].ticknew >= this.timers[i].ddelay)
                        {
                           this.timers[i].ticknew = 0;
                           if(this.timers[i].maxcalls != -1)
                           {
                              --this.timers[i].maxcalls;
                              if(this.timers[i].maxcalls <= 0)
                              {
                                 this.timers[i].enabledd = false;
                              }
                           }
                           if(this.timers[i].actions_target != -1)
                           {
                              this.triggers[this.timers[i].actions_target].forcehyperjump = false;
                              this.EXEC_TRIGGER(this.timers[i].actions_target);
                           }
                        }
                     }
                  }
                  i++;
               }
               i = 0;
               while(i < this.barrelstotal)
               {
                  if(this.barrels[i].x > -this.game_x / this.game_scale - this.screenX / this.game_scale && this.barrels[i].x < -this.game_x / this.game_scale + this.screenX * 2 / this.game_scale && this.barrels[i].y > -this.game_y / this.game_scale - this.screenY / this.game_scale && this.barrels[i].y < -this.game_y / this.game_scale + this.screenY * 2 / this.game_scale || this.ax[this.barrels[i].b_left_top] > -this.game_x / this.game_scale - this.screenX / this.game_scale && this.ax[this.barrels[i].b_left_top] < -this.game_x / this.game_scale + this.screenX * 2 / this.game_scale && this.ay[this.barrels[i].b_left_top] > -this.game_y / this.game_scale - this.screenY / this.game_scale && this.ay[this.barrels[i].b_left_top] < -this.game_y / this.game_scale + this.screenY * 2 / this.game_scale || this.ax[this.barrels[i].b_left_bottom] > -this.game_x / this.game_scale - this.screenX / this.game_scale && this.ax[this.barrels[i].b_left_bottom] < -this.game_x / this.game_scale + this.screenX * 2 / this.game_scale && this.ay[this.barrels[i].b_left_bottom] > -this.game_y / this.game_scale - this.screenY / this.game_scale && this.ay[this.barrels[i].b_left_bottom] < -this.game_y / this.game_scale + this.screenY * 2 / this.game_scale)
                  {
                     this.aactive[-100 - i] = true;
                     this.mc = this.barrels[i];
                     if(this.mc.hea > 0)
                     {
                        this.mc.x = (this.ax[this.mc.b_left_top] + this.ax[this.mc.b_right_bottom] + this.ax[this.mc.b_right_top] + this.ax[this.mc.b_left_bottom]) / 4;
                        this.mc.y = (this.ay[this.mc.b_left_top] + this.ay[this.mc.b_right_bottom] + this.ay[this.mc.b_right_top] + this.ay[this.mc.b_left_bottom]) / 4;
                        this.mc.rotation = 180 - Math.atan2(Number(this.ax[this.mc.b_left_top]) - Number(this.ax[this.mc.b_left_bottom]),Number(this.ay[this.mc.b_left_top]) - Number(this.ay[this.mc.b_left_bottom])) / Math.PI * 180;
                        if(this.aio[this.barrels[i].b_left_top] == true || this.aio[this.barrels[i].b_left_bottom] == true || this.aio[this.barrels[i].b_right_top] == true || this.aio[this.barrels[i].b_right_bottom] == true)
                        {
                           this.u = this.Dist2D(this.ax[this.barrels[i].b_left_top],this.ay[this.barrels[i].b_left_top],this.ax[this.barrels[i].b_right_top],this.ay[this.barrels[i].b_right_top]);
                           this.v = this.Dist2D(this.ax[this.barrels[i].b_left_top],this.ay[this.barrels[i].b_left_top],this.ax[this.barrels[i].b_left_bottom],this.ay[this.barrels[i].b_left_bottom]);
                           this.yy = this.Dist2D(this.ax[this.barrels[i].b_left_bottom],this.ay[this.barrels[i].b_left_bottom],this.ax[this.barrels[i].b_right_top],this.ay[this.barrels[i].b_right_top]);
                           this.xx = (this.u + this.v + this.yy) * 0.5;
                           this.xx = this.xx * (this.xx - this.u) * (this.xx - this.v) * (this.xx - this.yy);
                           if(this.xx < 1)
                           {
                              this.mc.hea = 0;
                              this.HurtBarrel(i);
                           }
                        }
                     }
                     else
                     {
                        this.mc.b1.x = (this.ax[this.mc.b_left_top] + this.ax[this.mc.b_left1] + this.ax[this.mc.b_right_top] + this.ax[this.mc.b_right1]) / 4 - this.mc.x;
                        this.mc.b1.y = (this.ay[this.mc.b_left_top] + this.ay[this.mc.b_left1] + this.ay[this.mc.b_right_top] + this.ay[this.mc.b_right1]) / 4 - this.mc.y;
                        this.mc.b1.rotation = -Math.atan2(Number(this.ax[this.mc.b_left_top]) - Number(this.ax[this.mc.b_left1]),Number(this.ay[this.mc.b_left_top]) - Number(this.ay[this.mc.b_left1])) / Math.PI * 180;
                        this.mc.b2.x = (this.ax[this.mc.b_left_bottom] + this.ax[this.mc.b_left2] + this.ax[this.mc.b_right_bottom] + this.ax[this.mc.b_right2]) / 4 - this.mc.x;
                        this.mc.b2.y = (this.ay[this.mc.b_left_bottom] + this.ay[this.mc.b_left2] + this.ay[this.mc.b_right_bottom] + this.ay[this.mc.b_right2]) / 4 - this.mc.y;
                        this.mc.b2.rotation = -Math.atan2(Number(this.ax[this.mc.b_left_bottom]) - Number(this.ax[this.mc.b_left2]),Number(this.ay[this.mc.b_left_bottom]) - Number(this.ay[this.mc.b_left2])) / Math.PI * 180;
                        this.n2 = 0;
                        while(this.n2 < 10)
                        {
                           if(this.mc["g" + this.n2].visible == true)
                           {
                              this.mc["g" + this.n2].x = Number(this.ax[this.mc["b_g" + this.n2]]) - this.mc.x;
                              this.mc["g" + this.n2].y = Number(this.ay[this.mc["b_g" + this.n2]]) - this.mc.y;
                              this.mc["g" + this.n2].rotation = Number(this.mc["g" + this.n2].x) * 3 + this.n2 * 60;
                              if(this.aio[this.mc["b_g" + this.n2]] == false)
                              {
                                 if(this.mc["g" + this.n2].alpha > 0)
                                 {
                                    this.mc["g" + this.n2].alpha -= 0.1;
                                 }
                                 else
                                 {
                                    this.mc["g" + this.n2].visible = false;
                                    this.aio[this.mc["b_g" + this.n2]] = -1;
                                 }
                              }
                              else if(this.mc["g" + this.n2].alpha < 1)
                              {
                                 this.mc["g" + this.n2].alpha += 0.1;
                              }
                           }
                           ++this.n2;
                        }
                     }
                     if(!this.barrels[i].visible)
                     {
                        this.barrels[i].visible = true;
                     }
                  }
                  else
                  {
                     this.aactive[-100 - i] = false;
                     if(this.barrels[i].visible)
                     {
                        this.barrels[i].visible = false;
                     }
                  }
                  i++;
               }
               i = 0;
               while(i < this.flarestotal)
               {
                  this.mc = this.flare[i];
                  if(this.mc.x > -this.game_x / this.game_scale && this.mc.x < (-this.game_x + this.screenX) / this.game_scale && this.mc.y > -this.game_y / this.game_scale && this.mc.y < (-this.game_y + this.screenY) / this.game_scale)
                  {
                     this.mc.alpha = (this.mc.alpha + this.flare_power[i]) / 2;
                     if(!this.mc.visible)
                     {
                        this.mc.visible = true;
                     }
                  }
                  else
                  {
                     this.mc.alpha /= 2;
                     if(this.mc.visible && this.mc.alpha < 0.05)
                     {
                        this.mc.visible = false;
                     }
                  }
                  if(this.mc.visible)
                  {
                     if(this.HQ || this.SUPER_COMPUTER)
                     {
                        this.mc.f2.x = (-this.game_x + this.hscreenX - this.mc.x) * 0.4;
                        this.mc.f2.y = (-this.game_y + this.hscreenY - this.mc.y) * 0.4;
                        this.mc.f3.x = (-this.game_x + this.hscreenX - this.mc.x) * 0.8;
                        this.mc.f3.y = (-this.game_y + this.hscreenY - this.mc.y) * 0.8;
                        this.mc.f4.x = (-this.game_x + this.hscreenX - this.mc.x) * 1.4;
                        this.mc.f4.y = (-this.game_y + this.hscreenY - this.mc.y) * 1.4;
                        this.mc.f5.x = (-this.game_x + this.hscreenX - this.mc.x) * 1.8;
                        this.mc.f5.y = (-this.game_y + this.hscreenY - this.mc.y) * 1.8;
                        this.mc.f6.x = (-this.game_x + this.hscreenX - this.mc.x) * 1.5;
                        this.mc.f6.y = (-this.game_y + this.hscreenY - this.mc.y) * 1.5;
                     }
                     else if(this.mc.f2.visible)
                     {
                        this.mc.f2.visible = false;
                        this.mc.f3.visible = false;
                        this.mc.f4.visible = false;
                        this.mc.f5.visible = false;
                        this.mc.f6.visible = false;
                     }
                  }
                  i++;
               }
               player_got_dot_effects = false;
               e = 0;
               while(e < this.mens[this.MP_myid].effects.length)
               {
                  if(this.mens[this.MP_myid].effects[e].type == "DOT")
                  {
                     player_got_dot_effects = true;
                     break;
                  }
                  e++;
               }
               target_frame = 1;
               if(player_got_dot_effects)
               {
                  target_frame = 2;
               }
               if(this.hp_box.currentFrame != target_frame)
               {
                  this.hp_box.gotoAndStop(target_frame);
                  c = new Color();
                  c.setTint(target_frame == 1 ? 16711680 : 65280,1);
                  this.hp_box.hp.transform.colorTransform = c;
                  c = new Color();
                  c.setTint(target_frame == 1 ? 4128768 : 16128,1);
                  this.hp_box.hp_over.transform.colorTransform = c;
               }
               this.xx = Math.max(Number(this.mens[this.MP_myid].hea) / Number(this.mens[this.MP_myid].hmax),0);
               this.hp_box.hp.scaleX = this.xx;
               if(this.hp_box.hp_over.scaleX < this.xx)
               {
                  this.hp_box.hp_over.scaleX = this.xx;
               }
               else if(this.hp_box.hp_over.scaleX > this.xx)
               {
                  this.hp_box.hp_over.scaleX -= 0.01;
               }
               this.hp_box.hp_over.x = this.hp_box.hp.x;
               if(!this.SCREEN_FADE_EFFECTS)
               {
                  if(this.darkness.visible)
                  {
                     if(this.MP_mode)
                     {
                        this.hp_box.hp_over.scaleX = this.darkness.alpha;
                     }
                  }
               }
               this.hp_box.hp_txt.text = Math.ceil(Math.ceil(this.xx * Number(this.mens[this.MP_myid].hmax))).toString();
               if(this.mens[this.MP_myid].incar != -1)
               {
                  this.vehhp.hp.scaleX = Math.max(Number(this.vehicles[this.mens[this.MP_myid].incar].hea) / Number(this.vehicles[this.mens[this.MP_myid].incar].hmax),0);
                  this.vehhp.hp_txt.text = Math.ceil(Math.max(this.vehicles[this.mens[this.MP_myid].incar].hea,0)).toString();
               }
               if(this.nrg.visible)
               {
                  this.xx = Math.max(this.energy / this.energy_max,0);
                  this.nrg.en_txt.text = Math.ceil(Math.ceil(this.xx * this.energy_max)).toString();
                  this.nrg.en.scaleX = this.xx;
               }
               if(this.mini_scenario_cur != -1)
               {
                  if(this.mini_scenario_cur == 0)
                  {
                     this.mc = this.mens[this.MP_myid];
                     if(this.mini_scenario_phase == 0)
                     {
                        this.i3 = 1;
                        if(this.MP_mode)
                        {
                           this.i3 = this.MP_myspecials[this.MP_assigning_special].nadekind;
                        }
                        this.ok = true;
                        i2 = 0;
                        while(i2 < this.gunstotal)
                        {
                           if(this.guns[i2].io)
                           {
                              if(!this.guns[i2].forcars)
                              {
                                 if(this.guns[i2].picken_by == this.MP_myid)
                                 {
                                    if(this.guns[i2].wep == -2)
                                    {
                                       if(this.guns[i2].nadekind == this.i3)
                                       {
                                          if(!this.MP_mode)
                                          {
                                             this.guns[i2].x = -10000;
                                             this.guns[i2].y = -10000;
                                             this.guns[i2].scaleX = 0;
                                             this.guns[i2].scaleY = 0;
                                             this.game.removeChild(this.guns[i2]);
                                             this.guns[i2] = new Object();
                                             this.guns[i2].io = false;
                                          }
                                          else
                                          {
                                             this.guns[i2].alpha = 0;
                                             this.guns[i2].io = false;
                                          }
                                          i2 = this.gunstotal;
                                          this.ok = false;
                                          this.UpdateWeps();
                                       }
                                    }
                                 }
                              }
                           }
                           i2++;
                        }
                        if(this.MP_mode)
                        {
                           if(this.i3 == 1)
                           {
                              if(this.grenades_total > 0)
                              {
                                 --this.grenades_total;
                                 this.ok = false;
                                 this.UpdateWeps();
                              }
                           }
                           else if(this.i3 == 2)
                           {
                              if(this.grenades_port_total > 0)
                              {
                                 --this.grenades_port_total;
                                 this.ok = false;
                                 this.UpdateWeps();
                              }
                           }
                           else if(this.i3 == 3)
                           {
                              if(this.grenades_sh_total > 0)
                              {
                                 --this.grenades_sh_total;
                                 this.ok = false;
                                 this.UpdateWeps();
                              }
                           }
                        }
                        if(this.ok)
                        {
                           this.mini_scenario_cur = -1;
                           this.mini_scenario_phase = 0;
                        }
                     }
                     if(this.mini_scenario_phase == 1)
                     {
                        if(this.puls[this.pulscur] != null)
                        {
                           if(this.game.contains(this.puls[this.pulscur]))
                           {
                              this.game.removeChild(this.puls[this.pulscur]);
                              this.puls[this.pulscur] = null;
                           }
                        }
                        this.puls[this.pulscur] = this.game.addChildAt(new lazer(),this.game.numChildren);
                        this.NewBullet(this.puls[this.pulscur]);
                        this.NoMouse(this.puls[this.pulscur]);
                        this.xx = this.mc.ang + Math.PI;
                        this.puls[this.pulscur].lag = 0;
                        this.PlaySound(this.s_nade_throw,this.mc.x,this.mc.y - 50);
                        this.puls[this.pulscur].thisis = "item_grenade";
                        this.puls[this.pulscur].cclass = 6;
                        this.puls[this.pulscur].nadekind = 1;
                        this.puls[this.pulscur].notbliped = true;
                        this.puls[this.pulscur].x = this.ax[this.mc.b_arm2];
                        this.puls[this.pulscur].y = this.ay[this.mc.b_arm2];
                        this.puls[this.pulscur].nx = this.ax[this.mc.b_body];
                        this.puls[this.pulscur].ny = this.ay[this.mc.b_body];
                        this.puls[this.pulscur].power = 3;
                        this.puls[this.pulscur].maxpower = 3;
                        this.puls[this.pulscur].knockback_multiplier = 1;
                        this.puls[this.pulscur].inwater = this.ainwater[this.mc.b_arm2] && this.wa_friction[this.ainwater_shape[this.mc.b_arm2]];
                        this.puls[this.pulscur].lastin = 0;
                        this.puls[this.pulscur].lastinbox = this.boxestotal;
                        this.puls[this.pulscur].master = this.MP_myid;
                        this.i3 = 1;
                        if(this.MP_mode)
                        {
                           this.i3 = this.MP_myspecials[this.MP_assigning_special].nadekind;
                        }
                        this.puls[this.pulscur].nadekind = this.i3;
                        this.puls[this.pulscur].maxbulletlife = 60;
                        if(this.i3 == 1)
                        {
                           this.puls[this.pulscur].gotoAndStop(11);
                        }
                        if(this.i3 == 2)
                        {
                           this.puls[this.pulscur].gotoAndStop(17);
                        }
                        if(this.i3 == 3)
                        {
                           this.puls[this.pulscur].gotoAndStop(19);
                           this.puls[this.pulscur].maxbulletlife = 60 + 30 * 60;
                           this.puls[this.pulscur].hasexploded = false;
                           this.puls[this.pulscur].radius = 0;
                           this.puls[this.pulscur].hea = 10;
                           this.puls[this.pulscur].heapo = 90;
                           this.puls[this.pulscur].losthea = 0;
                        }
                        this.puls[this.pulscur].rotation = 90 - this.xx / Math.PI * 180;
                        this.puls[this.pulscur].life = 0;
                        this.yy = Math.cos(this.xx);
                        this.xx = Math.sin(this.xx);
                        this.puls[this.pulscur].spx = 0;
                        this.puls[this.pulscur].spy = 0;
                        this.puls[this.pulscur].attached = this.CreatePoint(this.puls[this.pulscur].x,this.puls[this.pulscur].y,this.puls[this.pulscur].spx,this.puls[this.pulscur].spy,3,true,8,-300 - this.pulscur);
                        this.aactive[this.puls[this.pulscur].attached] = 1000;
                        this.aactive[-300 - this.pulscur] = true;
                        this.mc.arm_nade = this.puls[this.pulscur].attached;
                        if(this.MP_mode)
                        {
                           this.MP_myspecials[this.MP_assigning_special].pul = this.pulscur;
                           this.MP_myspecials[this.MP_assigning_special].atom = this.puls[this.pulscur].attached;
                           this.MP_myspecials[this.MP_assigning_special].stat = 3;
                        }
                        this.nextpul();
                     }
                     if(this.mini_scenario_phase >= 1)
                     {
                        if(!this.mc.dead)
                        {
                           if(this.mini_scenario_phase < 5)
                           {
                              this.TurnBone(this.mens[this.MP_myid].b_arm2,this.ax[this.mens[this.MP_myid].b_head_end] + Number(this.mens[this.MP_myid].side) * 10,this.ay[this.mens[this.MP_myid].b_head_end] + 30,this.mens[this.MP_myid],1);
                           }
                           else if(this.mini_scenario_phase < 7)
                           {
                              this.xx = this.mc.ang + Math.PI;
                              this.yy = Math.cos(this.xx);
                              this.xx = Math.sin(this.xx);
                              this.TurnBone(this.mens[this.MP_myid].b_arm2,Number(this.ax[this.mens[this.MP_myid].b_body]) - this.xx * 25,Number(this.ay[this.mens[this.MP_myid].b_body]) - this.yy * 25,this.mens[this.MP_myid],1);
                           }
                           this.xx = this.mc.ang + Math.PI;
                           this.yy = Math.cos(this.xx);
                           this.xx = Math.sin(this.xx);
                           if(this.mini_scenario_phase < 7)
                           {
                              this.TurnBone(this.mens[this.MP_myid].b_arm1,this.ax[this.mens[this.MP_myid].b_head_end] + Number(this.mens[this.MP_myid].side) * 10,this.ay[this.mens[this.MP_myid].b_body] + 40,this.mens[this.MP_myid],1);
                              if(this.TraceLineF_nopushers(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe],this.ax[this.mc.b_arm2],this.ay[this.mc.b_arm2]))
                              {
                                 this.ax[this.mc.arm_nade] = this.ax[this.mc.b_arm2];
                                 this.ay[this.mc.arm_nade] = this.ay[this.mc.b_arm2];
                              }
                              else
                              {
                                 this.ax[this.mc.arm_nade] = this.ax[this.mc.b_toe];
                                 this.ay[this.mc.arm_nade] = this.ay[this.mc.b_toe];
                              }
                              this.atox[this.mc.arm_nade] = -this.xx * 10 * (this.mini_scenario_phase / 7) + this.atox[this.mc.b_body];
                              this.atoy[this.mc.arm_nade] = -this.yy * 10 * (this.mini_scenario_phase / 7) + this.atoy[this.mc.b_body];
                           }
                           if(this.mini_scenario_phase == 7)
                           {
                              this.atox[this.mc.arm_nade] = -this.xx * 15 + this.atox[this.mc.b_body];
                              this.atoy[this.mc.arm_nade] = -this.yy * 15 + this.atoy[this.mc.b_body];
                              this.WakeUpAtom(this.mc.arm_nade);
                           }
                        }
                     }
                     if(this.mini_scenario_phase > 15)
                     {
                        this.mini_scenario_cur = -1;
                     }
                  }
                  ++this.mini_scenario_phase;
               }
               if(this.playerstotal > 0)
               {
                  if(this.PSYCHOBLOOD_MODE == 1)
                  {
                     this.i4 = 0;
                     while(this.i4 < 4)
                     {
                        if(this._root["pb" + this.i4].visible)
                        {
                           if(this._root["pb" + this.i4].alpha > 0)
                           {
                              if(Number(this.mens[this.MP_myid].hea) / Number(this.mens[this.MP_myid].hmax) > 0.5 || this.GLOBAL_REGEN_SPEED == 0 || this.GLOBAL_REGEN_DELAY >= 10)
                              {
                                 this._root["pb" + this.i4].alpha -= 0.05 * this.GSPEED2;
                              }
                              if(Boolean(this.mens[this.MP_myid].dead) && this.death_cam != this.MP_myid)
                              {
                                 this._root["pb" + this.i4].alpha = 0;
                              }
                              if(this._root["pb" + this.i4].alpha > 0.6)
                              {
                                 this._root["pb" + this.i4].alpha = 0.6;
                              }
                           }
                           else
                           {
                              this._root["pb" + this.i4].visible = false;
                           }
                        }
                        ++this.i4;
                     }
                  }
                  else if(this.PSYCHOBLOOD_MODE == 2)
                  {
                     this.i4 = 0;
                     while(this.i4 < 5)
                     {
                        if(this._root["pb" + this.i4].visible)
                        {
                           if(this._root["pb" + this.i4].alpha > 0)
                           {
                              if(Number(this.mens[this.MP_myid].hea) / Number(this.mens[this.MP_myid].hmax) > 0.5 || (this.GLOBAL_REGEN_SPEED == 0 || this.GLOBAL_REGEN_DELAY >= 10) && this.mens[this.MP_myid].hea >= 0)
                              {
                                 this._root["pb" + this.i4].alpha -= 0.02 * this.GSPEED2;
                              }
                              else if(this.mens[this.MP_myid].hea >= 0)
                              {
                                 this._root["pb" + this.i4].alpha -= 0.01 * this.GSPEED2;
                              }
                              else
                              {
                                 this._root["pb" + this.i4].alpha -= 0.005 * this.GSPEED2;
                              }
                              if(Boolean(this.mens[this.MP_myid].dead) && this.death_cam != this.MP_myid)
                              {
                                 this._root["pb" + this.i4].alpha = 0;
                              }
                              if(this._root["pb" + this.i4].alpha > 0.6)
                              {
                                 this._root["pb" + this.i4].alpha = 0.6;
                              }
                           }
                           else
                           {
                              this._root["pb" + this.i4].visible = false;
                           }
                        }
                        ++this.i4;
                     }
                  }
               }
               if(this.MP_mode && this.spawn)
               {
                  this.mens[this.MP_myid].hea = 0;
               }
               this.firstframe = false;
               this.get_fps();
            }
            if(this.MP_mode)
            {
               this.mens[this.MP_myid].io = true;
               this.mens[this.MP_myid].visible = true;
               if(Boolean(this.mens[this.MP_myid].dead) || !this.mens[this.MP_myid].isGhost)
               {
                  this.mens[this.MP_myid].alpha = 1;
               }
               else
               {
                  this.mens[this.MP_myid].alpha = 0.5;
               }
               this.mens[this.MP_myid].deadtim = 0;
               this.ENTER_TICKED = true;
            }
            this.c_sim_rt = Number(getTimer()) - this.c_sim_rt;
            if(this.c_sim_rt + this.c_sim_rt2 > 40)
            {
               this.c_sim_stress = true;
            }
            else
            {
               this.c_sim_stress = false;
            }
            this.c_sim_rt2 = getTimer();
            if(this.whitness.visible)
            {
               if(this.whitness.alpha > 2)
               {
                  this.whitness.alpha = 1;
               }
               if(this.whitness.alpha > 0)
               {
                  this.whitness.alpha -= 0.05;
               }
               else
               {
                  this.whitness.alpha = 0;
                  this.whitness.visible = false;
               }
            }
            this.xx = 0;
            if(this.myCursor.currentFrame == 7)
            {
               if(this.mens[this.MP_myid].curwea != -1)
               {
                  this.mc2 = this.guns[this.mens[this.MP_myid].curwea];
                  if(this.mc2.stat_averange_min != this.mc2.stat_averange_max)
                  {
                     this.xx = (Number(this.mc2.av) - Number(this.mc2.stat_averange_min)) * 4;
                  }
                  if(this.mc2.stat_cursor == 0)
                  {
                     this.myCursor.ch1.visible = this.myCursor.ch2.visible = true;
                     this.myCursor.ch3.visible = this.myCursor.ch4.visible = false;
                  }
                  if(this.mc2.stat_cursor == 1)
                  {
                     this.myCursor.ch1.visible = this.myCursor.ch2.visible = this.myCursor.ch4.visible = false;
                     this.myCursor.ch3.visible = true;
                  }
                  if(this.mc2.stat_cursor == 2)
                  {
                     this.myCursor.ch1.visible = this.myCursor.ch2.visible = this.myCursor.ch3.visible = false;
                     this.myCursor.ch4.visible = true;
                  }
               }
               else
               {
                  this.myCursor.ch1.visible = this.myCursor.ch2.visible = this.myCursor.ch3.visible = false;
                  this.myCursor.ch4.visible = true;
               }
               if(this.xx > 0)
               {
                  this.myCursor.ch1.alpha = this.myCursor.ch2.alpha = this.myCursor.ch3.alpha = this.myCursor.ch4.alpha = 0.5 / (this.xx + 1);
               }
               else
               {
                  this.myCursor.ch1.alpha = this.myCursor.ch2.alpha = this.myCursor.ch3.alpha = this.myCursor.ch4.alpha = 1;
               }
               if(this.xx > 1)
               {
                  this.xx = 1;
               }
               this.myCursor.ch1.scaleX = this.myCursor.ch2.scaleX = this.myCursor.ch3.scaleX = this.myCursor.ch4.scaleX = this.myCursor.ch3.scaleY = this.myCursor.ch4.scaleY = this.xx * this.xx + 0.5;
               if(this.TOOLTIPS && !this.ANONYMOUS_MODE)
               {
                  if(this.Math_abs(this.lastcurx - this.myCursor.x - this.game_x) + this.Math_abs(this.lastcury - this.myCursor.y - this.game_y) < 10)
                  {
                     if(!this.tooltip_updated)
                     {
                        this.tooltip_updated = true;
                        this.str = "";
                        this.ok = true;
                        i2 = 0;
                        while(i2 < this.watertotal)
                        {
                           if(this.wa_friction[i2])
                           {
                              if(this.myCursor.x > Number(this.wax[i2]) * this.game_scale + this.game_x)
                              {
                                 if(this.myCursor.x < (this.wax[i2] + this.waw[i2]) * this.game_scale + this.game_x)
                                 {
                                    if(this.myCursor.y > Number(this.way[i2]) * this.game_scale + this.game_y)
                                    {
                                       if(this.myCursor.y < (this.way[i2] + this.wah[i2]) * this.game_scale + this.game_y)
                                       {
                                          if(this.wadamage[i2] > 0)
                                          {
                                             this.str = "<font color=\'#FF0000\'>" + this.ACID_NAME + "</font>\n";
                                             this.str += Number(this.wadamage[i2]) * 30 + " damage per second\n";
                                             this.str += "<font color=\'#FFFF00\'>" + Math.floor(Number(this.mens[this.MP_myid].hmax) / Number(this.wadamage[i2]) / 30 * 10) / 10 + " seconds to die</font>\n";
                                          }
                                          else
                                          {
                                             this.str = this.WATER_NAME;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           i2++;
                        }
                        i2 = 0;
                        while(i2 < this.vehiclestotal)
                        {
                           if(this.vehicles[i2].nick != "")
                           {
                              if(this.Dist2D(Number(this.vehicles[i2].x) * this.game_scale + this.game_x,Number(this.vehicles[i2].y) * this.game_scale + this.game_y,this.myCursor.x,this.myCursor.y) < 150)
                              {
                                 if(this.vehicles[i2].dead)
                                 {
                                    this.str = "Destroyed ";
                                 }
                                 else
                                 {
                                    this.str = "";
                                    this.ok = false;
                                 }
                                 this.str += this.vehicles[i2].nick + "\n";
                                 i = int(this.vehicles[i2].master);
                                 if(i != -1)
                                 {
                                    if(this.mens[i].team == this.mens[this.MP_myid].team)
                                    {
                                       if(i == this.MP_myid)
                                       {
                                          this.str += "<font color=\'#00FF00\'>";
                                       }
                                       else
                                       {
                                          this.str += "<font color=\'#FFFF00\'>";
                                       }
                                    }
                                    else if(this.mens[i].dead)
                                    {
                                       this.str += "<font color=\'#AA3333\'>";
                                    }
                                    else
                                    {
                                       this.str += "<font color=\'#FF0000\'>";
                                    }
                                    if(this.mens[i].team == this.mens[this.MP_myid].team)
                                    {
                                       if(i == this.MP_myid)
                                       {
                                          this.str += "You";
                                       }
                                       else
                                       {
                                          this.str += "Ally";
                                       }
                                    }
                                    else
                                    {
                                       this.str += "Enemy";
                                    }
                                    this.str += "</font>";
                                 }
                                 else if(!this.vehicles[i2].dead)
                                 {
                                    this.str += "Neutral";
                                 }
                              }
                           }
                           i2++;
                        }
                        i = 0;
                        while(i < this.playerstotal)
                        {
                           if(this.mens[i].io)
                           {
                              if(this.mens[i].incar == -1)
                              {
                                 if(this.mens[i].alpha > 0.5)
                                 {
                                    if(this.Dist2D(Number(this.ax[this.mens[i].b_body]) * this.game_scale + this.game_x,Number(this.ay[this.mens[i].b_body]) * this.game_scale + this.game_y,this.myCursor.x,this.myCursor.y) < 50)
                                    {
                                       this.str = this.mens[i].nick + "\n";
                                       if(this.mens[i].team == this.mens[this.MP_myid].team)
                                       {
                                          if(i == this.MP_myid)
                                          {
                                             this.str += "<font color=\'#00FF00\'>";
                                          }
                                          else
                                          {
                                             this.str += "<font color=\'#FFFF00\'>";
                                          }
                                       }
                                       else if(this.mens[i].dead)
                                       {
                                          this.str += "<font color=\'#AA3333\'>";
                                       }
                                       else
                                       {
                                          this.str += "<font color=\'#FF0000\'>";
                                       }
                                       if(this.mens[i].dead)
                                       {
                                          this.str += "Dead ";
                                       }
                                       else if(this.mens[i].dying)
                                       {
                                          this.str += "Dying ";
                                       }
                                       else if(this.mens[i].hunt == -1 && this.mens[i].team != this.mens[this.MP_myid].team && !this.mens[i].isplayer)
                                       {
                                          this.str += "Inactive ";
                                       }
                                       if(this.mens[i].team == this.mens[this.MP_myid].team)
                                       {
                                          if(i == this.MP_myid)
                                          {
                                             this.str += "You";
                                          }
                                          else
                                          {
                                             this.str += "Ally";
                                          }
                                       }
                                       else
                                       {
                                          this.str += "Enemy";
                                       }
                                       if(Boolean(this.mens[i].isplayer) && i != this.MP_myid)
                                       {
                                          this.str += " Player";
                                       }
                                       this.str += "</font>";
                                       if(!this.mens[i].dead)
                                       {
                                          this.ok = false;
                                       }
                                    }
                                 }
                              }
                           }
                           i++;
                        }
                        if(this.ok)
                        {
                           i = 0;
                           while(i < this.gunstotal)
                           {
                              if(this.guns[i].io)
                              {
                                 if(this.guns[i].alpha > 0.5)
                                 {
                                    if(this.guns[i].visible)
                                    {
                                       if(!this.guns[i].forcars)
                                       {
                                          if(this.Dist2D(Number(this.guns[i].x) * this.game_scale + this.game_x,Number(this.guns[i].y) * this.game_scale + this.game_y,this.myCursor.x,this.myCursor.y) < 40)
                                          {
                                             this.str = this.GunModelToGunName(this.guns[i].model) + "\n";
                                             if(this.guns[i].upg != undefined)
                                             {
                                                if(this.guns[i].wep > 0)
                                                {
                                                   if(this.guns[i].upg == 0)
                                                   {
                                                      this.str += "<font color=\'#AAAAAA\'>No upgrades</font>";
                                                   }
                                                   else
                                                   {
                                                      this.str += "<font color=\'#AAAAAA\'>Upgrade Level: " + this.guns[i].upg + "</font>";
                                                   }
                                                }
                                             }
                                             this.str += "\n";
                                             if(this.guns[i].wep > 0)
                                             {
                                                if(this.guns[i].command == -1 || this.guns[i].command == this.mens[this.MP_myid].team)
                                                {
                                                   this.str += "<font color=\'#FFFF00\'>Slot: " + this.guns[i].wep + "</font>";
                                                }
                                                else
                                                {
                                                   this.str += "<font color=\'#FF0000\'>Unknown technology</font>";
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              i++;
                           }
                        }
                        this.myCursor.txt.htmlText = this.str;
                     }
                  }
                  else
                  {
                     this.lastcurmove = 0;
                     this.lastcurx = this.myCursor.x + this.game_x;
                     this.lastcury = this.myCursor.y + this.game_y;
                     this.tooltip_updated = false;
                  }
               }
            }
            if(this.gamechatbox2["item" + this.chat_i3].y > 0)
            {
               this.ok = true;
            }
            else
            {
               this.ok = false;
            }
            this.chat_i = 0;
            while(this.chat_i < 11)
            {
               if(this.gamechatbox2["item" + this.chat_i].visible)
               {
                  targ_a = this.gamechatbox2["item" + this.chat_i].timer > 0 ? (this.gamechatbox2["item" + this.chat_i].y < -18 * 1.5 ? 0.5 : 1) : 0;
                  if(this.DISPLAY_CHAT <= 1)
                  {
                     this.gamechatbox2["item" + this.chat_i].timer -= this.GSPEED2 * 4;
                     if(this.gamechatbox2["item" + this.chat_i].y < -18 * 1.5)
                     {
                        targ_a = 0;
                     }
                  }
                  else
                  {
                     this.gamechatbox2["item" + this.chat_i].timer -= this.GSPEED2;
                  }
                  if(this.gamechatbox2["item" + this.chat_i].alpha > targ_a)
                  {
                     this.gamechatbox2["item" + this.chat_i].alpha = Math.max(targ_a,Number(this.gamechatbox2["item" + this.chat_i].alpha) - Math.max(0.01,0.05 * this.GSPEED2));
                     if(this.gamechatbox2["item" + this.chat_i].alpha <= targ_a)
                     {
                        if(targ_a == 0)
                        {
                           this.gamechatbox2["item" + this.chat_i].visible = false;
                        }
                     }
                  }
                  else
                  {
                     this.gamechatbox2["item" + this.chat_i].alpha = Math.min(targ_a,this.gamechatbox2["item" + this.chat_i].alpha + Math.max(0.01,0.05 * this.GSPEED2));
                  }
               }
               if(this.ok)
               {
                  --this.gamechatbox2["item" + this.chat_i].y;
               }
               ++this.chat_i;
            }
            if(this.herolist.visible)
            {
               i = 0;
               while(i < this.MP_playerstotal)
               {
                  if(i != this.MP_myid && (this.hero[i].f1.text == "Empty" || this.hero[i].f5.text == ""))
                  {
                     if(this.hero[i].f1.text != "Empty")
                     {
                        this.hero[i].f1.text = "Empty";
                     }
                     this.hero[i].prior = -1;
                     this.hero[i].alpha = Math.max(0.2,Number(this.hero[i].alpha) - 0.1);
                  }
                  else
                  {
                     this.hero[i].prior = int(this.hero[i].f3.text) / (int(this.hero[i].f4.text) + 1);
                     this.hero[i].alpha = Math.min(1,this.hero[i].alpha + 0.1);
                  }
                  i++;
               }
               this.ok = true;
               if(this.ok)
               {
                  this.ok = false;
                  i = 0;
                  while(i < this.MP_playerstotal)
                  {
                     i2 = 0;
                     while(i2 < this.MP_playerstotal)
                     {
                        if(i != i2)
                        {
                           if(this.hero[i].prior < this.hero[i2].prior && this.hero[i].y < this.hero[i2].y)
                           {
                              this.yy = this.hero[i].y;
                              this.hero[i].y = this.hero[i2].y;
                              this.hero[i2].y = this.yy;
                              this.ok = true;
                           }
                        }
                        i2++;
                     }
                     i++;
                  }
                  i = 0;
                  while(i < this.MP_playerstotal)
                  {
                     if(this.hero[i].y > 17 + 20 * 8)
                     {
                        this.hero[i].alpha = 0;
                     }
                     i++;
                  }
               }
            }
            if(this.THIS_HINT == this.CURRENT_HINT)
            {
               if(this.CURRENT_HINT != "")
               {
                  if(this.hintf.visible)
                  {
                     if(this.hintf.alpha < 1)
                     {
                        this.hintf.alpha += 0.1;
                     }
                  }
                  else
                  {
                     this.hintf.visible = true;
                     this.hintf.alpha = 0;
                     this.PlaySound_full(this.s_hint_appear);
                  }
               }
            }
            else if(this.hintf.visible)
            {
               if(this.hintf.alpha >= 1)
               {
                  this.PlaySound_full(this.s_hint_disappear);
               }
               if(this.hintf.alpha > 0)
               {
                  this.hintf.alpha -= 0.1;
               }
               else
               {
                  this.hintf.visible = false;
               }
            }
            else
            {
               this.THIS_HINT = this.CURRENT_HINT;
               this.hintf.txt.htmlText = this.CURRENT_HINT;
            }
            if(this.hintf.visible)
            {
               this.hintf.txt.alpha = 0.8 + Math.sin(this.PITIMER) * 0.2;
               this.PITIMER += 0.1;
               if(this.PITIMER > Math.PI * 2)
               {
                  this.PITIMER -= Math.PI * 2;
               }
            }
            this.UpdateGravitatorVol();
            this.DamageSoundLogic(this.GSPEED);
            if(this.DEBUG_MODE)
            {
               try
               {
                  this.debug_screen.x = this.game_x;
                  this.debug_screen.y = this.game_y;
               }
               catch(e:*)
               {
               }
            }
            /*if(this.MP_mode)
            {
               this.ManageGameTimer();
            }*/
            if(this.set_timeouts.length > 0)
            {
               t = getTimer();
               i = 0;
               while(i < this.set_timeouts.length)
               {
                  if(t >= this.set_timeouts[i].t)
                  {
                     f = this.set_timeouts[i].f;
                     this.set_timeouts.splice(i,1);
                     i--;
                     f();
                  }
                  i++;
               }
            }
         }
         catch(e:*)
         {
            SpawnLevelLogicErrorIfNeeded(e,"Some level objects or logic have caused error within game loop");
         }
         try
         {
            this.HandleRespawnAndLevelEnd();
         }
         catch(e:*)
         {
            SpawnLevelLogicErrorIfNeeded(e,"Some level objects or logic are causing error in level change or respawn logic (address: " + respawn_logic_last_addr + ")");
         }
         this.VarChangePreventEnd();
      }
      
      public function SetTimeout(param1:*, param2:*) : void
      {
         this.set_timeouts.push({
            "f":param1,
            "t":getTimer() + param2
         });
      }
      
      public function HandleRespawnAndLevelEnd() : *
      {
         this.respawn_logic_last_addr = 0;
         if(!this.gamemenu.visible)
         {
            if(this.darkness.visible)
            {
               this.respawn_logic_last_addr = 1;
               if(this.mens[this.MP_myid].dead && !this.MP_spectator || this.LEVEL_END_FORCE != "")
               {
                  this.respawn_logic_last_addr = 2;
                  if(!this.MP_mode)
                  {
                     if(this.mens[this.MP_myid].dead)
                     {
                        if(this.MP_fps > 5)
                        {
                           this.MP_fps = 5;
                        }
                     }
                  }
                  this.respawn_logic_last_addr = 3;
                  if(this.darkness.alpha < 1)
                  {
                     this.respawn_logic_last_addr = 4;
                     if(this.LEVEL_END_FORCE == "credits")
                     {
                        this.whitesimple.visible = true;
                        this.whitesimple.alpha += 0.02;
                        if(this.whitesimple.alpha > 1.5)
                        {
                           this.darkness.alpha += 0.01;
                        }
                     }
                     else
                     {
                        if(this.LEVEL_END_FORCE == "complete" && (Number(getTimer()) - this.LAST_BADGE > 8000 || this.darkness.alpha < 0.5))
                        {
                           this.darkness.alpha += 0.1;
                        }
                        if(this.MP_mode)
                        {
                           if(!this.spawn)
                           {
                              if(this.multiplayer_repsawn_timer_speed != 0)
                              {
                                 if(this.MP_type == 1 || this.MP_type == 2 || this.players_online <= 4)
                                 {
                                    this.darkness.alpha += Math.max(0.005,0.01 * this.GSPEED * this.multiplayer_repsawn_timer_speed);
                                 }
                                 else if(this.MP_type == 3)
                                 {
                                    this.darkness.alpha += Math.max(0.005,0.005 * this.GSPEED * this.multiplayer_repsawn_timer_speed);
                                 }
                              }
                           }
                        }
                        else
                        {
                           this.darkness.alpha += 0.01;
                        }
                     }
                     this.whitness.alpha = Math.min(1 - this.darkness.alpha,this.whitness.alpha);
                  }
                  else
                  {
                     this.system_non_stop = false;
                  }
                  this.respawn_logic_last_addr = 5;
                  if(!this.spawn)
                  {
                     if(this.MP_mode && this.MP_type == 2)
                     {
                        if(this.death_cam != -1 && Boolean(this.mens[this.death_cam].dead))
                        {
                           if(this.darkness.alpha > 0.5)
                           {
                              this.darkness.alpha = 0.5;
                           }
                        }
                        else
                        {
                           this.darkness.alpha = 0;
                        }
                     }
                  }
                  this.respawn_logic_last_addr = 6;
                  if(!this.system_non_stop)
                  {
                     if(this.darkness.alpha >= 1)
                     {
                        this.respawn_logic_last_addr = 7;
                        if(this.MP_mode && this.LEVEL_END_FORCE != "exit")
                        {
                           if(!this.MP_spectator)
                           {
                              this.respawn_logic_last_addr = 8;
                              //this.GCTime();
                              this.ok = true;
                              this.i4 = 0;
                              if(this.MP_type == 1 || this.MP_type == 3)
                              {
                                 while(this.ok && this.i4 < 3000)
                                 {
                                    ++this.i4;
                                    this.ok = true;
                                    this.MP_start_x = this.g_minx + 100 + (this.g_maxx - this.g_minx - 200) * Math.random();
                                    this.MP_start_y = this.g_miny + 100 + (this.g_maxy - this.g_miny - 200) * Math.random();
                                    if(this.TracePointNoRagdolls(this.MP_start_x,this.MP_start_y - 50))
                                    {
                                       if(this.TracePointNoRagdolls(this.MP_start_x - 10,this.MP_start_y - 50))
                                       {
                                          if(this.TracePointNoRagdolls(this.MP_start_x + 10,this.MP_start_y - 50))
                                          {
                                             if(!this.TracePointNoRagdolls(this.MP_start_x - 10,this.MP_start_y + 50))
                                             {
                                                if(!this.TracePointNoRagdolls(this.MP_start_x + 10,this.MP_start_y + 50))
                                                {
                                                   if(!this.TracePointNoRagdolls(this.MP_start_x,this.MP_start_y + 50))
                                                   {
                                                      this.ok = false;
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    if(!this.ok)
                                    {
                                       if(this.MP_type == 3)
                                       {
                                          if(this.i4 < 1500)
                                          {
                                             this.ok2 = true;
                                             this.i5 = 0;
                                             while(this.i5 < this.playerstotal)
                                             {
                                                if(this.mens[this.i5].team != this.mens[this.MP_myid].team)
                                                {
                                                   if(!this.mens[this.i5].dead)
                                                   {
                                                      if(!this.mens[this.i5].dying)
                                                      {
                                                         if(this.mens[this.i5].hunt == -1 || this.i4 > 1500 / 2)
                                                         {
                                                            if(this.Math_abs(Number(this.mens[this.i5].x) - this.MP_start_x) + this.Math_abs(Number(this.mens[this.i5].y) - this.MP_start_y) < 500 * 500)
                                                            {
                                                               this.ok2 = false;
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                                ++this.i5;
                                             }
                                             this.ok = this.ok2;
                                          }
                                       }
                                       else if(this.i4 < 1500)
                                       {
                                          this.ok2 = true;
                                          this.i5 = 0;
                                          while(this.i5 < this.gunstotal)
                                          {
                                             if(this.guns[this.i5].picken_by == -1)
                                             {
                                                if(this.guns[this.i5].stat_power > 0)
                                                {
                                                   if(this.Math_abs(Number(this.guns[this.i5].x) - this.MP_start_x) + this.Math_abs(Number(this.guns[this.i5].y) - this.MP_start_y) < 300 * 300)
                                                   {
                                                      this.ok2 = false;
                                                   }
                                                }
                                             }
                                             ++this.i5;
                                          }
                                          this.ok = this.ok2;
                                       }
                                    }
                                    if(!this.ok)
                                    {
                                       this.i2 = 0;
                                       while(this.i2 < this.watertotal)
                                       {
                                          if(this.MP_start_x > Number(this.wax[this.i2]) - 100)
                                          {
                                             if(this.MP_start_x < this.wax[this.i2] + this.waw[this.i2] + 100)
                                             {
                                                if(this.MP_start_y > Number(this.way[this.i2]) - 100)
                                                {
                                                   if(this.MP_start_y < this.way[this.i2] + this.wah[this.i2] + 100)
                                                   {
                                                      this.ok = true;
                                                   }
                                                }
                                             }
                                          }
                                          ++this.i2;
                                       }
                                       this.i2 = 0;
                                       while(this.i2 < this.pushstotal)
                                       {
                                          if(this.MP_start_x > Number(this.pushx[this.i2]) - 100)
                                          {
                                             if(this.MP_start_x < this.pushw[this.i2] + 100)
                                             {
                                                if(this.MP_start_y > Number(this.pushy[this.i2]) - 100)
                                                {
                                                   if(this.MP_start_y < this.pushh[this.i2] + 100)
                                                   {
                                                      this.ok = true;
                                                   }
                                                }
                                             }
                                          }
                                          ++this.i2;
                                       }
                                       if(!this.ok)
                                       {
                                          this.i5 = 0;
                                          while(this.i5 < this.playerstotal)
                                          {
                                             if(this.mens[this.i5].team != this.mens[this.MP_myid].team)
                                             {
                                                if(!this.mens[this.i5].dead)
                                                {
                                                   if(this.Math_abs(Number(this.mens[this.i5].x) - this.MP_start_x) + this.Math_abs(Number(this.mens[this.i5].y) - this.MP_start_y) < 1500 * 1500)
                                                   {
                                                      if(this.TraceLine(this.mens[this.i5].x,Number(this.mens[this.i5].y) - 50,this.MP_start_x,this.MP_start_y - 50) || this.TraceLine(this.mens[this.i5].tarx,this.mens[this.i5].tary,this.MP_start_x,this.MP_start_y - 50))
                                                      {
                                                         this.ok = true;
                                                      }
                                                   }
                                                }
                                             }
                                             ++this.i5;
                                          }
                                       }
                                    }
                                 }
                              }
                              this.GiveStarterGunsDM(this.MP_start_x,this.MP_start_y);
                              this.SetTimeout(function():*
                              {
                                 if(mens[MP_myid].hea > 0)
                                 {
                                    GiveStarterGunsDM(mens[MP_myid].x,mens[MP_myid].y,mens[MP_myid]);
                                 }
                              },500);
                              this.SetTimeout(function():*
                              {
                                 if(mens[MP_myid].hea > 0)
                                 {
                                    GiveStarterGunsDM(mens[MP_myid].x,mens[MP_myid].y,mens[MP_myid]);
                                 }
                              },1000);
                              this.SetTimeout(function():*
                              {
                                 if(mens[MP_myid].hea > 0)
                                 {
                                    GiveStarterGunsDM(mens[MP_myid].x,mens[MP_myid].y,mens[MP_myid]);
                                 }
                              },1500);
                              this.SetTimeout(function():*
                              {
                                 if(mens[MP_myid].hea > 0)
                                 {
                                    GiveStarterGunsDM(mens[MP_myid].x,mens[MP_myid].y,mens[MP_myid]);
                                 }
                              },2000);
                              this.mens[this.MP_myid].lastshotby = -1;
                              this.mens[this.MP_myid].whenlastshot = getTimer();
                              this.mens[this.MP_myid].hea = this.mens[this.MP_myid].hmax;
                              this.mens[this.MP_myid].stability = 1;
                              this.mens[this.MP_myid].sit = 0;
                              this.mens[this.MP_myid].tox = 0;
                              this.mens[this.MP_myid].toy = 0;
                              this.mens[this.MP_myid].inwater = false;
                              this.mens[this.MP_myid].x = this.MP_start_x;
                              this.mens[this.MP_myid].y = this.MP_start_y;
                              this.mens[this.MP_myid].effects.length = 0;
                              this.grenades_total = this.MP_start_grenades_count;
                              this.grenades_port_total = this.MP_start_grenades_port_count;
                              this.grenades_sh_total = this.MP_start_grenades_sh_count;
                              this.UpdateWeps();
                              this.mens[this.MP_myid].hp_head = this.mens[this.MP_myid].hea;
                              this.mens[this.MP_myid].hp_arms = this.mens[this.MP_myid].hea;
                              this.mens[this.MP_myid].hp_legs = this.mens[this.MP_myid].hea;
                              this.mens[this.MP_myid].hp_body = this.mens[this.MP_myid].hea;
                              this.mens[this.MP_myid].curwea = -1;
                              this.mens[this.MP_myid].dead = false;
                              this.mens[this.MP_myid].dying = false;
                              this.mens[this.MP_myid].defih = 0;
                              this.ResetPsychoBlood();
                              this.MP_custom_events += ";spawnef|" + this.r2(this.MP_start_x) + "#" + this.r2(this.MP_start_y - 41);
                              this.Hurt_nopain(this.MP_myid);
                              this.SpawnPlayerImmediately(this.mens[this.MP_myid]);
                              this.u = Number(this.ax[this.mens[this.MP_myid].b_toe]) - this.MP_start_x;
                              this.v = Number(this.ay[this.mens[this.MP_myid].b_toe]) - this.MP_start_y;
                              this.i4 = 0;
                              while(this.i4 < this.atotal)
                              {
                                 if(this.aof[this.i4] == this.MP_myid)
                                 {
                                    this.ax[this.i4] -= this.u;
                                    this.ay[this.i4] -= this.v;
                                    this.lax[this.i4] -= this.u;
                                    this.lay[this.i4] -= this.v;
                                    this.ablood[this.i4] = 0;
                                    this.atox[this.i4] = 0;
                                    this.atoy[this.i4] = 0;
                                    if(this.ax[this.i4] < Number(this.mens[this.MP_myid].x) - this.PLAYER_WIDTH)
                                    {
                                       this.ax[this.i4] = this.lax[this.i4] = Number(this.mens[this.MP_myid].x) - this.PLAYER_WIDTH;
                                    }
                                    if(this.ax[this.i4] > this.mens[this.MP_myid].x + this.PLAYER_WIDTH)
                                    {
                                       this.ax[this.i4] = this.lax[this.i4] = this.mens[this.MP_myid].x + this.PLAYER_WIDTH;
                                    }
                                    if(this.ay[this.i4] < Number(this.mens[this.MP_myid].y) - 82)
                                    {
                                       this.ay[this.i4] = this.lay[this.i4] = Number(this.mens[this.MP_myid].y) - 82;
                                    }
                                    if(this.ay[this.i4] > this.mens[this.MP_myid].y)
                                    {
                                       this.ay[this.i4] = this.lay[this.i4] = this.mens[this.MP_myid].y;
                                    }
                                 }
                                 ++this.i4;
                              }
                              this.tnds = 10;
                              this.game_x = Math.round(-Number(this.ax[this.mens[this.MP_myid].b_toe]) * this.game_scale + this.hscreenX);
                              this.game_y = Math.round(-Number(this.ay[this.mens[this.MP_myid].b_toe]) * this.game_scale + this.hscreenY);
                              this.system_non_stop = true;
                           }
                        }
                        else
                        {
                           this.respawn_logic_last_addr = 9;
                           if(this.talkerch != null)
                           {
                              this.talkerch.stop();
                           }
                           this.respawn_logic_last_addr = 10;
                           this.DropGameTimer();
                           this.respawn_logic_last_addr = 11;
                           if(this.LEVEL_END_FORCE == "exit")
                           {
                              this.LAST_ERROR = "";
                              this.FUN_TIME_SPEND = 0;
                              if(this.MP_mode)
                              {
                                 this.respawn_logic_last_addr = 12;
                                 this.SEND_INTRUDER_LIST();
                                 this.respawn_logic_last_addr = 13;
                                 this.MP_mode = false;
                                 this.respawn_logic_last_addr = 14;
                                 try
                                 {
                                    if(ExternalInterface.available)
                                    {
                                       ExternalInterface.call("L2()");
                                    }
                                 }
                                 catch(e:*)
                                 {
                                 }
                                 gotoAndStop("channel");
                              }
                              else
                              {
                                 this.respawn_logic_last_addr = 15;
                                 try
                                 {
                                    if(ExternalInterface.available)
                                    {
                                       ExternalInterface.call("L2()");
                                    }
                                 }
                                 catch(e:*)
                                 {
                                 }
								 this.SaveGame();
                                 gotoAndStop("campaign");
                              }
                           }
                           this.respawn_logic_last_addr = 16;
                           if(this.LEVEL_END_FORCE == "restart")
                           {
                              this.LAST_ERROR = "";
                              gotoAndStop("loading");
                           }
                           if(this.LEVEL_END_FORCE == "failed")
                           {
                              try
                              {
                                 if(ExternalInterface.available)
                                 {
                                    ExternalInterface.call("L2()");
                                 }
                              }
                              catch(e:*)
                              {
                              }
                              this.FUN_TIME_SPEND = 0;
							  this.SaveGame();
                              gotoAndStop("main");
                           }
                           if(this.LEVEL_END_FORCE == "complete")
                           {
                              try
                              {
                                 if(ExternalInterface.available)
                                 {
                                    ExternalInterface.call("L2()");
                                 }
                              }
                              catch(e:*)
                              {
                              }
                              if(this.MP_mode)
                              {
                                 gotoAndStop("channel");
                              }
                              else
                              {
								 this.SaveGame();
                                 gotoAndStop("campaign");
                              }
                           }
                           if(this.LEVEL_END_FORCE == "credits")
                           {
                              try
                              {
                                 if(ExternalInterface.available)
                                 {
                                    ExternalInterface.call("L2()");
                                 }
                              }
                              catch(e:*)
                              {
                              }
                              if(this.MUSIC_VOLUME <= 0)
                              {
                                 this.MUSIC_VOLUME = this.FX_VOLUME;
                              }
                              gotoAndStop("credits");
                           }
                        }
                     }
                  }
               }
               else if(this.darkness.alpha > 0)
               {
                  this.darkness.alpha -= 0.1;
               }
               else
               {
                  this.darkness.visible = false;
               }
            }
         }
      }
      
      public function GravitatorPlayAgain(param1:*) : void
      {
		 if(this.NONMUTE && this.FX_VOLUME != 0) {
			 this.gravitatorch.removeEventListener(Event.SOUND_COMPLETE,this.GravitatorPlayAgain);
			 this.gravitatorch = this.s_gravitator.play(0,0,this.gravitatorTransform);
			 if(this.gravitatorch == null)
			 {
				this.grav_working = false;
			 }
			 if(this.grav_working)
			 {
				this.gravitatorch.addEventListener(Event.SOUND_COMPLETE,this.GravitatorPlayAgain);
			 }
		 }
      }
      
      public function SongPlayAgain(param1:*) : void
      {
		 if(this.NONMUTE && this.FX_VOLUME != 0) {
			 this.musch.removeEventListener(Event.SOUND_COMPLETE,this.SongPlayAgain);
			 this.musch = this.s_gameplay_song.play(0,0,this.musTransform);
			 if(this.musch == null)
			 {
				this.mus_working = false;
			 }
			 if(this.mus_working)
			 {
				this.musch.addEventListener(Event.SOUND_COMPLETE,this.SongPlayAgain);
			 }
		 }
      }
      
      public function main_song_PlayAgain(param1:*) : void
      {
		 if(this.NONMUTE && this.FX_VOLUME != 0) {
			 this.main_song_ch.removeEventListener(Event.SOUND_COMPLETE,this.main_song_PlayAgain);
			 this.main_song_ch = this.s_main_song.play(0,0,this.main_song_Transform);
			 if(this.main_song_ch == null)
			 {
				this.main_song_working = false;
			 }
			 if(this.main_song_working)
			 {
				this.main_song_ch.addEventListener(Event.SOUND_COMPLETE,this.main_song_PlayAgain);
			 }
		 }
      }
      
      public function am_base_PlayAgain(param1:*) : void
      {
		 if(this.NONMUTE && this.FX_VOLUME != 0) {
			 this.am_base_ch.removeEventListener(Event.SOUND_COMPLETE,this.am_base_PlayAgain);
			 this.am_base_ch = this.s_am_base.play(0,0,this.am_base_Transform);
			 if(this.am_base_ch == null)
			 {
				this.am_base_working = false;
			 }
			 if(this.am_base_working)
			 {
				this.am_base_ch.addEventListener(Event.SOUND_COMPLETE,this.am_base_PlayAgain);
			 }
		 }
      }
      
      public function am_wind_PlayAgain(param1:*) : void
      {
		 if(this.NONMUTE && this.FX_VOLUME != 0) {
			 this.am_wind_ch.removeEventListener(Event.SOUND_COMPLETE,this.am_wind_PlayAgain);
			 this.am_wind_ch = this.s_am_wind.play(0,0,this.am_wind_Transform);
			 if(this.am_wind_ch == null)
			 {
				this.am_wind_working = false;
			 }
			 if(this.am_wind_working)
			 {
				this.am_wind_ch.addEventListener(Event.SOUND_COMPLETE,this.am_wind_PlayAgain);
			 }
		 }
      }
      
      public function UpdateGravitatorVol() : void
      {
         if(this.NONMUTE && this.FX_VOLUME != 0)
         {
            if(this.grav_working)
            {
               this.xx = 0;
               this.yy = 0;
               this.xx2 = 0;
               this.yy2 = 0;
               if(currentFrameLabel == "gaming")
               {
                  this.i = 0;
                  while(this.i < this.decorstotal)
                  {
                     if(this.decors[this.i].currentFrameLabel == "antigravity" || this.decors[this.i].currentFrameLabel == "antigravity_left" || this.decors[this.i].currentFrameLabel == "antigravity_right" || this.decors[this.i].currentFrameLabel == "doomwrath_rapier_active" || this.decors[this.i].currentFrameLabel == "doomwrath_rapier_active2" || this.decors[this.i].currentFrameLabel == "falkok_ship3" || this.decors[this.i].currentFrameLabel == "falkok_ship6")
                     {
                        this.smod = this.dist_to_face / this.Dist3Dm(Number(this.decors[this.i].x) * this.game_scale + this.game_x - 400 - 300,Number(this.decors[this.i].y) * this.game_scale + this.game_y - 200,this.dist_to_face);
                        this.smod2 = this.dist_to_face / this.Dist3Dm(Number(this.decors[this.i].x) * this.game_scale + this.game_x - 400 + 300,Number(this.decors[this.i].y) * this.game_scale + this.game_y - 200,this.dist_to_face);
                        this.xx += this.smod2 * 0.5;
                        this.yy += 0;
                        this.xx2 += this.smod * 0.5;
                        this.yy2 += 0;
                     }
                     ++this.i;
                  }
               }
               if(this.xx < 0.1)
               {
                  if(this.xx2 < 0.1)
                  {
                     if(this.yy < 0.1)
                     {
                        if(this.yy2 < 0.1)
                        {
                           this.xx = 0;
                           this.xx2 = 0;
                           this.yy = 0;
                           this.yy2 = 0;
                        }
                     }
                  }
               }
               this.xx *= this.zero_one(1 - this.darkness.alpha) * Number(this.vol.volume);
               this.xx2 *= this.zero_one(1 - this.darkness.alpha) * Number(this.vol.volume);
               this.yy *= this.zero_one(1 - this.darkness.alpha) * Number(this.vol.volume);
               this.yy2 *= this.zero_one(1 - this.darkness.alpha) * Number(this.vol.volume);
               if(this.xx > 1)
               {
                  this.xx = 1;
               }
               if(this.xx2 > 1)
               {
                  this.xx2 = 1;
               }
               if(this.yy > 1)
               {
                  this.yy = 1;
               }
               if(this.yy2 > 1)
               {
                  this.yy2 = 1;
               }
               this.gravitatorTransform.leftToLeft = this.xx;
               this.gravitatorTransform.leftToRight = this.yy;
               this.gravitatorTransform.rightToRight = this.xx2;
               this.gravitatorTransform.rightToLeft = this.yy2;
               this.gravitatorch.soundTransform = this.gravitatorTransform;
            }
            else
            {
               this.gravitatorch = this.s_gravitator.play(0,0,this.gravitatorTransform);
               if(this.gravitatorch != null)
               {
                  this.grav_working = true;
                  this.gravitatorch.addEventListener(Event.SOUND_COMPLETE,this.GravitatorPlayAgain);
               }
            }
            if(this.mus_working && this.am_wind_working && this.am_base_working && this.main_song_working)
            {
               if(currentFrameLabel == "gaming")
               {
                  this.ok2 = false;
                  this.ok = false;
                  if(this.mens[this.MP_myid].hunt != -1)
                  {
                     this.ok2 = true;
                  }
                  this.i = 0;
                  while(this.i < this.playerstotal && !this.ok)
                  {
                     if(this.mens[this.i].io)
                     {
                        if(!this.mens[this.i].dead)
                        {
                           if(!this.mens[this.i].dying)
                           {
                              if(this.mens[this.i].team != this.mens[this.MP_myid].team)
                              {
                                 if(this.mens[this.i].hunt == this.MP_myid)
                                 {
                                    this.ok = true;
                                 }
                                 if(this.Dist2D(this.mens[this.i].x,this.mens[this.i].y,this.mens[this.MP_myid].x,this.mens[this.MP_myid].y) < 400)
                                 {
                                    this.ok2 = true;
                                 }
                              }
                           }
                        }
                     }
                     ++this.i;
                  }
                  if(this.ok || this.ok2)
                  {
                     this.MUSIC_COLDDOWN = 0;
                  }
                  else if(this.MUSIC_COLDDOWN < 100)
                  {
                     ++this.MUSIC_COLDDOWN;
                  }
                  else
                  {
                     this.CUR_MUSIC_VOLUME -= this.CUR_MUSIC_VOLUME * 0.01;
                  }
                  if(this.MUSIC_COLDDOWN < 100)
                  {
                     if(this.ok)
                     {
                        this.CUR_MUSIC_VOLUME += this.MUSIC_VOLUME * 0.04;
                     }
                     else if(this.CUR_MUSIC_VOLUME < this.MUSIC_VOLUME * 0.4)
                     {
                        this.CUR_MUSIC_VOLUME += this.MUSIC_VOLUME * 0.02;
                     }
                  }
                  if(this.CUR_MUSIC_VOLUME > this.MUSIC_VOLUME)
                  {
                     this.CUR_MUSIC_VOLUME = this.MUSIC_VOLUME;
                  }
                  if(this.CUR_MUSIC_VOLUME < 0)
                  {
                     this.CUR_MUSIC_VOLUME = 0;
                  }
                  if(this.custom_songs.length > 0)
                  {
                     this.CUR_MUSIC_VOLUME = 0;
                  }
                  this.musTransform.leftToLeft = this.CUR_MUSIC_VOLUME * (1 - this.darkness.alpha);
                  this.musTransform.leftToRight = 0;
                  this.musTransform.rightToRight = this.CUR_MUSIC_VOLUME * (1 - this.darkness.alpha);
                  this.musTransform.rightToLeft = 0;
                  if(!this.NOBASE && this.graphics_3d.hitTestPoint(Number(this.mens[this.MP_myid].x) * this.game_scale + this.game_x,(Number(this.mens[this.MP_myid].y) - 41) * this.game_scale + this.game_y,true))
                  {
                     this.wind_base += 0.1;
                  }
                  else
                  {
                     this.wind_base -= 0.1;
                  }
                  if(this.wind_base > 1)
                  {
                     this.wind_base = 1;
                  }
                  if(this.wind_base < 0)
                  {
                     this.wind_base = 0;
                  }
                  if(this.MUSIC_VOLUME > 0)
                  {
                     this.am_base_Transform.leftToLeft = this.FX_VOLUME * (1 - this.darkness.alpha) * (1 - this.CUR_MUSIC_VOLUME / this.MUSIC_VOLUME) * this.wind_base;
                     this.am_base_Transform.leftToRight = 0;
                     this.am_base_Transform.rightToRight = this.FX_VOLUME * (1 - this.darkness.alpha) * (1 - this.CUR_MUSIC_VOLUME / this.MUSIC_VOLUME) * this.wind_base;
                     this.am_base_Transform.rightToLeft = 0;
                     this.am_wind_Transform.leftToLeft = this.FX_VOLUME * (1 - this.darkness.alpha) * (1 - this.CUR_MUSIC_VOLUME / this.MUSIC_VOLUME) * (1 - this.wind_base);
                     this.am_wind_Transform.leftToRight = 0;
                     this.am_wind_Transform.rightToRight = this.FX_VOLUME * (1 - this.darkness.alpha) * (1 - this.CUR_MUSIC_VOLUME / this.MUSIC_VOLUME) * (1 - this.wind_base);
                     this.am_wind_Transform.rightToLeft = 0;
                  }
                  else
                  {
                     this.am_base_Transform.leftToLeft = this.FX_VOLUME * (1 - this.darkness.alpha) * this.wind_base;
                     this.am_base_Transform.leftToRight = 0;
                     this.am_base_Transform.rightToRight = this.FX_VOLUME * (1 - this.darkness.alpha) * this.wind_base;
                     this.am_base_Transform.rightToLeft = 0;
                     this.am_wind_Transform.leftToLeft = this.FX_VOLUME * (1 - this.darkness.alpha) * (1 - this.wind_base);
                     this.am_wind_Transform.leftToRight = 0;
                     this.am_wind_Transform.rightToRight = this.FX_VOLUME * (1 - this.darkness.alpha) * (1 - this.wind_base);
                     this.am_wind_Transform.rightToLeft = 0;
                  }
                  this.main_song_Transform.leftToLeft = 0;
                  this.main_song_Transform.leftToRight = 0;
                  this.main_song_Transform.rightToRight = 0;
                  this.main_song_Transform.rightToLeft = 0;
               }
               else
               {
                  this.musTransform.leftToLeft = 0;
                  this.musTransform.leftToRight = 0;
                  this.musTransform.rightToRight = 0;
                  this.musTransform.rightToLeft = 0;
                  this.am_base_Transform.leftToLeft = 0;
                  this.am_base_Transform.leftToRight = 0;
                  this.am_base_Transform.rightToRight = 0;
                  this.am_base_Transform.rightToLeft = 0;
                  this.am_wind_Transform.leftToLeft = 0;
                  this.am_wind_Transform.leftToRight = 0;
                  this.am_wind_Transform.rightToRight = 0;
                  this.am_wind_Transform.rightToLeft = 0;
                  if(this.main_song_Transform.leftToLeft == 0)
                  {
                     if(this.MUSIC_VOLUME > 0)
                     {
                        this.main_song_ch.stop();
                        this.main_song_ch = this.s_main_song.play(0,0,this.main_song_Transform);
                     }
                  }
                  this.main_song_Transform.leftToLeft = this.MUSIC_VOLUME;
                  this.main_song_Transform.leftToRight = 0;
                  this.main_song_Transform.rightToRight = this.MUSIC_VOLUME;
                  this.main_song_Transform.rightToLeft = 0;
               }
               this.musch.soundTransform = this.musTransform;
               this.am_base_ch.soundTransform = this.am_base_Transform;
               this.am_wind_ch.soundTransform = this.am_wind_Transform;
               this.main_song_ch.soundTransform = this.main_song_Transform;
            }
            else
            {
               if(!this.mus_working)
               {
                  this.musch = this.s_gameplay_song.play(0,0,this.musTransform);
                  if(this.musch != null)
                  {
                     this.mus_working = true;
                     this.musch.addEventListener(Event.SOUND_COMPLETE,this.SongPlayAgain);
                  }
               }
               if(!this.am_wind_working)
               {
                  this.am_wind_ch = this.s_am_wind.play(0,0,this.am_wind_Transform);
                  if(this.am_wind_ch != null)
                  {
                     this.am_wind_working = true;
                     this.am_wind_ch.addEventListener(Event.SOUND_COMPLETE,this.am_wind_PlayAgain);
                  }
               }
               if(!this.am_base_working)
               {
                  this.am_base_ch = this.s_am_base.play(0,0,this.am_base_Transform);
                  if(this.am_base_ch != null)
                  {
                     this.am_base_working = true;
                     this.am_base_ch.addEventListener(Event.SOUND_COMPLETE,this.am_base_PlayAgain);
                  }
               }
               if(!this.main_song_working)
               {
                  this.main_song_ch = this.s_main_song.play(0,0,this.main_song_Transform);
                  if(this.main_song_ch != null)
                  {
                     this.main_song_working = true;
                     this.main_song_ch.addEventListener(Event.SOUND_COMPLETE,this.main_song_PlayAgain);
                  }
               }
            }
            this.gravitatorTransform.volume = 1;
            this.am_base_Transform.volume = 1;
            this.am_wind_Transform.volume = 1;
            this.main_song_Transform.volume = 1;
            this.musTransform.volume = 1;
         }
      }
      
      public function CreateRestoreLoopSounds() : void
      {
         try
         {
            this.musch = this.s_gameplay_song.play(0,0,this.musTransform);
            this.musch.soundTransform.volume = 0;
            this.musch.addEventListener(Event.SOUND_COMPLETE,this.SongPlayAgain);
			
            this.am_base_ch = this.s_am_base.play(0,0,this.am_base_Transform);
            this.am_base_ch.soundTransform.volume = 0;
            this.am_base_ch.addEventListener(Event.SOUND_COMPLETE,this.am_base_PlayAgain);
			
            this.am_wind_ch = this.s_am_wind.play(0,0,this.am_wind_Transform);
            this.am_wind_ch.soundTransform.volume = 0;
            this.am_wind_ch.addEventListener(Event.SOUND_COMPLETE,this.am_wind_PlayAgain);
			
            this.gravitatorch = this.s_gravitator.play(0,0,this.gravitatorTransform);
            this.gravitatorch.soundTransform.volume = 0;
            this.UpdateGravitatorVol();
            this.gravitatorch.addEventListener(Event.SOUND_COMPLETE,this.GravitatorPlayAgain);
            this.talkerch = new SoundChannel();
         }
         catch(e:Error)
         {
         }
      }
      
      public function SetHint(param1:String) : void
      {
         this.CURRENT_HINT = this.ReplaceWithVariables(param1);
      }
      
      public function ReplaceWithVariables(param1:String) : String
      {
         var _loc2_:Vector.<String> = null;
         var _loc3_:* = null;
         var _loc4_:int = 0;
         var _loc5_:* = undefined;
         var _loc6_:Boolean = false;
         _loc2_ = new Vector.<String>();
         for(_loc3_ in this.level_variables)
         {
            if(param1.indexOf(_loc3_) != -1)
            {
               _loc2_.push(_loc3_);
               _loc5_ = _loc3_.length;
               _loc6_ = false;
               _loc4_ = 0;
               while(_loc4_ < _loc2_.length)
               {
                  if(_loc5_ > _loc2_[_loc4_].length)
                  {
                     _loc2_.splice(_loc4_,0,_loc3_);
                     _loc6_ = true;
                     break;
                  }
                  _loc4_++;
               }
               if(!_loc6_)
               {
                  _loc2_.push(_loc3_);
               }
            }
         }
         _loc4_ = 0;
         while(_loc4_ < _loc2_.length)
         {
            _loc3_ = _loc2_[_loc4_];
            param1 = param1.split(_loc3_).join(this.level_variables[_loc3_]);
            _loc4_++;
         }
         return param1;
      }
      
      public function DialogTalk(param1:String) : void
      {
         var SoundClass:Class = null;
         var newSound:Sound = null;
         var targetA:String = param1;
         if(this.NONMUTE)
         {
            try
            {
               this.talkerch.stop();
               SoundClass = getDefinitionByName(targetA) as Class;
               newSound = new SoundClass();
               this.talkerch = newSound.play(0,0,this.vol);
            }
            catch(error:Error)
            {
               talkerch = s_t_switch_denied.play(0,0,vol);
            }
         }
      }
	  
	  public function Colorize(txt:String, color:String) : String {
	    return "<font color=\'" + color + "\'>" + txt + "</font>";
	  }
  
      public function ColorizeSize(txt:String, color:String, sz:int) : String {
		  return "<font color='" + color + "' size='" + sz + "'>" + txt + "</font>";
	  }
      
      public function DialogSay(txt:String, speaker:String) : void
      {
         this.str = "";
         if(speaker == "0")
         {
            speaker = "#AADDFF";
            this.str = this.EXOS_NAME;
         }
         if(speaker == "1")
         {
            speaker = "#AAFFAA";
            this.str = this.MP_mode ? "Marine" : this.CMPG_name;
         }
         if(speaker == "2")
         {
            speaker = "#DDFFAA";
            this.str = this.NOIR_NAME;
         }
         if(speaker == "3")
         {
            speaker = "#FFAAFF";
            this.str = this.PROXY_NAME;
         }
         if(speaker == "4")
         {
            speaker = "#FFAAAA";
            this.str = "Civil Security";
         }
         txt = this.ReplaceWithVariables(txt);
         if(this.str != "")
         {
			this.str = Colorize(this.str, "#FFFFFF") + ": " + Colorize(txt, speaker);
         }
         else
         {
            this.str = Colorize(txt, speaker);
         }
         if(this.NONMUTE)
         {
            this.ChatNewMsg(this.str);
            this.PlaySound_full(this.s_chat);
         }
      }
      
      public function ResetVol() : void
      {
         if(this.NONMUTE)
         {
            this.vol.volume = this.FX_VOLUME;
            this.vol2.volume = this.MUSIC_VOLUME;
            this.vol2Custom.volume = this.CUSTOM_MUSIC_VOLUME;
         }
      }
      
      public function ExpChanged(param1:Number, param2:int, param3:Number, param4:String = "") : void
      {
         var str:String = null;
         var tofixed:String = null;
         var new_val:Number = param1;
         var type:int = param2;
         var added:Number = param3;
         var comment:String = param4;
         var ExpUpdateLevelText:* = function():void
         {
            if(SHOW_EXP_BAR > 1)
            {
               exp_bar.left.text = exp_last_level;
               exp_bar.right.text = exp_last_level + 1;
            }
         };
         var ExpGetLevel:* = function():Number
         {
            return Math.floor(exp_points / exp_points_per_level);
         };
         if(type == this.EXP_TYPE_SYNC_SKILL_POINTS)
         {
            this.exp_bar.inc.text = "";
            this.exp_bar.inc_under.text = "";
         }
         else if(type >= 0 && this.SHOW_EXP_BAR == 2)
         {
            if(this.exp_titles[type].length == 0)
            {
               str = "";
            }
            else
            {
               str = " - " + this.exp_titles[type].split("#").join(comment);
            }
            if(added == Math.floor(added))
            {
               if(added >= 0)
               {
                  this.exp_bar.inc.text = "+" + added + " exp" + str;
               }
               else
               {
                  this.exp_bar.inc.text = added + " exp" + str;
               }
            }
            else if(added >= 0)
            {
               this.exp_bar.inc.text = "+" + added.toFixed(2) + " exp" + str;
            }
            else
            {
               this.exp_bar.inc.text = added.toFixed(2) + " exp" + str;
            }
         }
         else
         {
            tofixed = Math.abs(added / this.SKILL_POINTS_SCALE).toFixed(2);
            if(tofixed == "0.00")
            {
            }
            tofixed = Math.abs(added / this.SKILL_POINTS_SCALE).toFixed(3);
            if(tofixed == "0.000")
            {
            }
            tofixed = Math.abs(added / this.SKILL_POINTS_SCALE).toFixed(4);
            if(added >= 0)
            {
               this.exp_bar.inc.text = "+" + tofixed + " SP";
            }
            else
            {
               this.exp_bar.inc.text = "-" + tofixed + " SP";
            }
         }
         this.exp_points_target = new_val;
         if(this.exp_first_sync_await || this.SHOW_EXP_BAR == 1)
         {
            this.exp_first_sync_await = false;
            this.exp_points = this.exp_points_target;
            this.exp_last_level = ExpGetLevel();
            ExpUpdateLevelText();
            return;
         }
         if(this.exp_timer == uint.MAX_VALUE)
         {
            this.exp_timer = setInterval(function():*
            {
               var _loc1_:* = undefined;
               var _loc2_:* = undefined;
               var _loc3_:* = undefined;
               _loc1_ = exp_points % exp_points_per_level * 7.8;
               if(ExpGetLevel() != exp_last_level)
               {
                  exp_last_level = ExpGetLevel();
                  ExpUpdateLevelText();
                  if(exp_max_level_this_time < exp_last_level)
                  {
                     exp_max_level_this_time = exp_last_level;
                     PlaySound_full(s_exp_level);
                     exp_bar.levelup.visible = true;
                     exp_bar.levelup.gotoAndPlay(1);
                     exp_bar.levelup.txt_container.txt.text = "Level " + exp_last_level;
                  }
               }
               exp_bar.prog.scaleX = _loc1_ / 100;
               exp_bar.prog_end.x = exp_bar.glow.x = 11 + Number(exp_bar.prog.scaleX) * 100;
               exp_bar.inc.x = Math.max(157,Math.min(exp_bar.prog_end.x,800 - 157)) - 263 / 2;
               if(exp_points != exp_points_target)
               {
                  if(!exp_bar.visible)
                  {
                     exp_bar.visible = true;
                     exp_bar_shadow.visible = true;
                  }
                  if(exp_bar.alpha < 0.79)
                  {
                     exp_bar.alpha = Math.min(0.8,exp_bar.alpha + 0.1);
                  }
                  else
                  {
                     _loc3_ = exp_points;
                     if(exp_points < exp_points_target)
                     {
                        exp_bar.glow.alpha = (exp_bar.glow.alpha + 1) / 2;
                        exp_points = Math.min((exp_points * 50 + exp_points_target) / 51 + 0.01,exp_points_target);
                     }
                     else
                     {
                        exp_points = Math.max((exp_points * 50 + exp_points_target) / 51 - 0.01,exp_points_target);
                     }
                     if(exp_points == exp_points_target)
                     {
                        exp_bar.alpha = 1;
                        PlaySound_full(s_exp_event_stop);
                     }
                     else if(exp_points > _loc3_)
                     {
                        if(Math.floor(_loc3_ * 4) != Math.floor(exp_points * 4))
                        {
                           PlaySound_full(s_exp_tick);
                        }
                     }
                  }
               }
               else if(exp_bar.glow.alpha > 0)
               {
                  exp_bar.glow.alpha = Math.max(0,Number(exp_bar.glow.alpha) - 0.02);
               }
               else if(exp_bar.alpha > 0)
               {
                  exp_bar.alpha = Math.max(0,exp_bar.alpha - 0.005);
               }
               else
               {
                  exp_bar.visible = false;
                  exp_bar_shadow.visible = false;
                  clearInterval(exp_timer);
                  exp_timer = uint.MAX_VALUE;
                  if(currentLabel == "gaming")
                  {
                     CheckIfPlayerInfoUpdateNeeded(mens[MP_myid]);
                  }
               }
               if(Boolean(chat_win) && chat_win.visible)
               {
                  if(exp_bar.alpha > 0)
                  {
                     exp_bar_shadow.alpha = exp_bar.alpha = 0;
                  }
               }
               else
               {
                  exp_bar_shadow.alpha = Math.min(1,exp_bar.alpha / 0.8 * 1);
                  exp_bar_shadow.y = exp_bar.y = Math.max(400,mouseY + 50);
               }
               exp_bar.inc_under.x = exp_bar.inc.x + 131 + 5;
               exp_bar.inc_under.alpha = Number(exp_bar.inc.alpha) * 0.5;
               if(type >= 0 && SHOW_EXP_BAR == 2)
               {
                  _loc2_ = exp_points.toFixed(2) + " exp";
               }
               else
               {
                  _loc2_ = (exp_points / SKILL_POINTS_SCALE).toFixed(2) + " SP";
               }
               if(exp_bar.inc_under.text != _loc2_)
               {
                  exp_bar.inc_under.text = _loc2_;
               }
               if(SHOW_EXP_BAR == 3)
               {
                  if(exp_bar.exp_min.x < 0)
                  {
                     exp_bar.exp_min.x = 11 + _loc1_ + 1;
                     exp_bar.exp_max.x = 11 + _loc1_;
                     exp_min_level = exp_last_level;
                     exp_max_level = exp_last_level;
                  }
                  if(exp_last_level == exp_min_level)
                  {
                     if(!exp_bar.exp_min.visible)
                     {
                        exp_bar.exp_min.visible = true;
                     }
                     exp_bar.exp_min.x = Math.min(exp_bar.exp_min.x,11 + _loc1_ + 1);
                  }
                  else
                  {
                     if(exp_last_level < exp_min_level)
                     {
                        exp_bar.exp_min.x = 11 + _loc1_ + 1;
                        exp_min_level = exp_last_level;
                     }
                     if(exp_bar.exp_min.visible)
                     {
                        exp_bar.exp_min.visible = false;
                     }
                  }
                  if(exp_last_level == exp_max_level)
                  {
                     if(!exp_bar.exp_max.visible)
                     {
                        exp_bar.exp_max.visible = true;
                     }
                     exp_bar.exp_max.x = Math.max(exp_bar.exp_max.x,11 + _loc1_);
                  }
                  else
                  {
                     if(exp_last_level > exp_max_level)
                     {
                        exp_bar.exp_max.x = 11 + _loc1_;
                        exp_max_level = exp_last_level;
                     }
                     if(exp_bar.exp_max.visible)
                     {
                        exp_bar.exp_max.visible = false;
                     }
                  }
               }
               else
               {
                  if(exp_bar.exp_min.visible)
                  {
                     exp_bar.exp_min.visible = false;
                  }
                  if(exp_bar.exp_max.visible)
                  {
                     exp_bar.exp_max.visible = false;
                  }
               }
            },16);
         }
      }
      
      public function GivePotentialExpSourceValue(param1:*, param2:*) : void
      {
         param1.exp_potential = Math.min(2,param1.exp_potential + param2);
      }
      
      public function PlayerCanGiveExp(param1:*) : Boolean
      {
         if(param1.exp_potential > 0)
         {
            param1.exp_potential = Math.max(0,Number(param1.exp_potential) - 0.333);
            return true;
         }
         return false;
      }
      
      public function ExpTask(param1:int, param2:String = "", param3:Boolean = false) : void
      {
         var type:int = param1;
         var comment:String = param2;
         var trigger_SP_update:Boolean = param3;
         if(this.MP_spectator)
         {
            return;
         }
         if(this.SHOW_EXP_BAR == 3 || type == this.EXP_TYPE_SYNC_SKILL_POINTS)
         {
            if(trigger_SP_update)
            {
               if(type == this.EXP_TYPE_SYNC_SKILL_POINTS)
               {
                  this.exp_scheduled.push({
                     "type":this.EXP_TYPE_SYNC_SKILL_POINTS,
                     "SHOW_EXP_BAR":3
                  });
                  this.ExpHandleTasks();
               }
               else
               {
                  this.skill_points_change_expect_tries = 5;
                  if(this.skill_points_tim == uint.MAX_VALUE)
                  {
                     this.skill_points_tim = setInterval(function():*
                     {
                        if(skill_points_change_expect_tries > 0)
                        {
                           --skill_points_change_expect_tries;
                           exp_scheduled.push({
                              "type":EXP_TYPE_DEATH_IN_APPROVED,
                              "SHOW_EXP_BAR":3
                           });
                           ExpHandleTasks();
                        }
                        else
                        {
                           --skill_points_change_expect_tries;
                           if(skill_points_change_expect_tries < -30)
                           {
                              clearInterval(skill_points_tim);
                              skill_points_tim = uint.MAX_VALUE;
                           }
                        }
                     },1000);
                  }
               }
            }
         }
         if(!this.exp_alive)
         {
            return;
         }
         if(type >= 0)
         {
            this.exp_scheduled.push({
               "type":type,
               "comment":comment,
               "CUR_CUSTOM_MAP":this.CUR_CUSTOM_MAP,
               "SHOW_EXP_BAR":2
            });
            this.ExpHandleTasks();
         }
      }
      
      public function ExpHandleTasks() : void
      {
         var type:int = 0;
         var comment:String = null;
         var cus_map:String = null;
         var exp_bar_type:int = 0;
         var myRequest:* = undefined;
         var myVariables:* = undefined;
         var exp_task_failed:* = undefined;
         var exp_task_done:* = undefined;
         if(this.exp_busy)
         {
            return;
         }
         if(this.exp_scheduled.length > 0)
         {
            type = int(this.exp_scheduled[0].type);
            comment = this.exp_scheduled[0].comment;
            cus_map = this.exp_scheduled[0].CUR_CUSTOM_MAP;
            exp_bar_type = int(this.exp_scheduled[0].SHOW_EXP_BAR);
            this.exp_scheduled.splice(0,1);
            this.exp_busy = true;
            if(exp_bar_type == 3)
            {
               exp_task_failed = function(param1:IOErrorEvent):void
               {
                  var e:IOErrorEvent = param1;
                  myExpLoader.removeEventListener(Event.COMPLETE,exp_task_done);
                  myExpLoader.removeEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
                  setTimeout(function():*
                  {
                     exp_busy = false;
                     ExpHandleTasks();
                  },5000);
               };
               exp_task_done = function(param1:Event):void
               {
                  var delay:int = 0;
                  var parts:* = undefined;
                  var new_val:Number = NaN;
                  var e:Event = param1;
                  myExpLoader.removeEventListener(Event.COMPLETE,exp_task_done);
                  myExpLoader.removeEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
                  if(SHOW_EXP_BAR == 3)
                  {
                     parts = myExpLoader.data.split("|");
                     new_val = Number(parts[4]) * SKILL_POINTS_SCALE;
                     if(new_val != exp_points_target)
                     {
                        if(!isNaN(new_val) && !isNaN(new_val - exp_points_target))
                        {
                           ExpChanged(new_val,type,new_val - exp_points_target);
                        }
                     }
                  }
                  delay = 1000;
                  if(exp_scheduled.length > 5)
                  {
                     delay /= 2;
                  }
                  if(exp_scheduled.length > 10)
                  {
                     delay /= 2;
                  }
                  setTimeout(function():*
                  {
                     exp_busy = false;
                     ExpHandleTasks();
                  },delay);
               };
               if(this.SHOW_EXP_BAR == exp_bar_type)
               {
                  this.exp_bar.transform.colorTransform = new ColorTransform(0.5,0.75,1,this.exp_bar.alpha,0,0,0,0);
               }
               myRequest = new URLRequest(this.MP_public_stat_server);
               myVariables = new URLVariables();
               myVariables.login = this.def_login;
               myRequest.method = URLRequestMethod.GET;
               myRequest.data = myVariables;
               this.myExpLoader.addEventListener(Event.COMPLETE,exp_task_done);
               this.myExpLoader.addEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
               this.myExpLoader.load(myRequest);
            }
            else if(exp_bar_type == 2)
            {
               exp_task_failed = function(param1:IOErrorEvent):void
               {
                  var e:IOErrorEvent = param1;
                  myExpLoader.removeEventListener(Event.COMPLETE,exp_task_done);
                  myExpLoader.removeEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
                  setTimeout(function():*
                  {
                     exp_busy = false;
                     ExpHandleTasks();
                  },5000);
               };
               exp_task_done = function(param1:Event):void
               {
                  var delay:int = 0;
                  var parts:Array = null;
                  var e:Event = param1;
                  myExpLoader.removeEventListener(Event.COMPLETE,exp_task_done);
                  myExpLoader.removeEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
                  if(myExpLoader.data.charAt(0) != "x")
                  {
                     parts = myExpLoader.data.split("|");
                     if(SHOW_EXP_BAR == 2)
                     {
                        if(parts[0] != "#")
                        {
                           ExpChanged(Number(parts[0]),type,Number(parts[1]),comment);
                        }
                        else
                        {
                           ExpChanged(exp_points_target + Number(parts[1]),type,Number(parts[1]),comment);
                        }
                     }
                  }
                  else
                  {
                     if(myExpLoader.data == "xL")
                     {
                        exp_alive = false;
                        return;
                     }
                     if(!(myExpLoader.data == "xR" || myExpLoader.data == "xPB" || myExpLoader.data == "xSE"))
                     {
                        if(myExpLoader.data != "xTL")
                        {
                           if(myExpLoader.data == "xDL")
                           {
                              if(currentLabel == "gaming")
                              {
                                 if(SHOW_EXP_BAR == 2)
                                 {
                                    DialogSay("Daily experience limit has been reached.","#FFFF00");
                                 }
                                 exp_alive = false;
                                 return;
                              }
                           }
                           else if(currentLabel == "gaming")
                           {
                              if(SHOW_EXP_BAR == 2)
                              {
                                 DialogSay("Could not sync exp points: " + myExpLoader.data,"#FFFF00");
                              }
                           }
                        }
                     }
                  }
                  delay = 1000;
                  if(exp_scheduled.length > 5)
                  {
                     delay /= 2;
                  }
                  if(exp_scheduled.length > 10)
                  {
                     delay /= 2;
                  }
                  setTimeout(function():*
                  {
                     exp_busy = false;
                     ExpHandleTasks();
                  },delay);
               };
               if(this.SHOW_EXP_BAR == exp_bar_type)
               {
                  this.exp_bar.transform.colorTransform = new ColorTransform(1,1,1,this.exp_bar.alpha,0,0,0,0);
               }
               myRequest = new URLRequest(this.MP_exp_server);
               myVariables = new URLVariables();
               if(this.def_login != undefined && this.def_login != "")
               {
                  myVariables.l = this.def_login;
                  myVariables.p = this.def_password;
               }
               myVariables.map_id = cus_map;
               myVariables.type = type;
               myVariables.comment = comment;
               myRequest.method = URLRequestMethod.POST;
               myRequest.data = myVariables;
               this.myExpLoader.addEventListener(Event.COMPLETE,exp_task_done);
               this.myExpLoader.addEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
               this.myExpLoader.load(myRequest);
            }
            return;
         }
      }
      
      public function ExpLevelDone() : void
      {
         if(this.can_get_exp_for_level)
         {
            this.can_get_exp_for_level = false;
            this.ExpTask(this.EXP_TYPE_BEAT_CUSTOM);
         }
      }
      
      public function ExpTrackMyHealing(param1:*) : void
      {
         var mc:* = param1;
         if(this.exp_heal_tracked_players.indexOf(mc) == -1)
         {
            this.exp_heal_tracked_players.push(mc);
            setTimeout(function():*
            {
               if(mc.hea > 0)
               {
                  ExpTask(EXP_TYPE_HEAL_AND_TEAMMATE_SURVIVED_IN_APPROVED,mc.nick);
               }
               exp_heal_tracked_players.splice(exp_heal_tracked_players.indexOf(mc),1);
            },7000);
         }
      }
      
      public function MaybeInfoUpdateFor(param1:*) : void
      {
         var i:* = param1;
         if(this.SHOW_EXP_BAR == 1)
         {
            return;
         }
         if(this.mens[i])
         {
            setTimeout(function():*
            {
               mens[i].info = undefined;
            },3000);
         }
      }
      
      public function CheckIfPlayerInfoUpdateNeeded(param1:*) : void
      {
         var myRequest:* = undefined;
         var myVariables:* = undefined;
         var exp_task_failed:* = undefined;
         var exp_task_done:* = undefined;
         var html:String = null;
         var mc:* = param1;
         exp_task_failed = function(param1:IOErrorEvent):void
         {
            var e:IOErrorEvent = param1;
            myMPlayerInfoLoader.removeEventListener(Event.COMPLETE,exp_task_done);
            myMPlayerInfoLoader.removeEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
            setTimeout(function():*
            {
               player_info_busy = false;
            },5000);
         };
         exp_task_done = function(param1:Event):void
         {
            var html:String = null;
            var e:Event = param1;
            myMPlayerInfoLoader.removeEventListener(Event.COMPLETE,exp_task_done);
            myMPlayerInfoLoader.removeEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
            setTimeout(function():*
            {
               player_info_busy = false;
            },100);
            if(currentLabel == "gaming")
            {
               html = myMPlayerInfoLoader.data;
               if(html.indexOf("<w />") != -1)
               {
                  html = html.split("<w />").join("");
                  if(exp_legens[mc.login_name] == undefined)
                  {
                     exp_legens[mc.login_name] = true;
                     ExpTask(EXP_TYPE_LEGEND,mc.login_name);
                  }
               }
               mc.gui.txt2.htmlText = html;
               mc.gui.txt2.visible = true;
               mc.gui.txt2.alpha = 0.8; //0.5;
               mc.info = {
                  "A": mc.login_name,
                  "B": SHOW_EXP_BAR,
                  "html": myMPlayerInfoLoader.data
               };
            }
         };
         if(!this.MP_mode)
         {
            return;
         }
         if(this.player_info_busy)
         {
            return;
         }
         if(this.SHOW_EXP_BAR == 1)
         {
            if(mc.gui.txt2.visible)
            {
               mc.gui.txt2.visible = false;
            }
            return;
         }
         if(!mc.gui.txt2.visible)
         {
            mc.gui.txt2.visible = true;
         }
         if(!mc.isplayer)
         {
            return;
         }
         if(!mc.visible)
         {
            return;
         }
         if(!mc.gui.visible)
         {
            return;
         }
         if(mc.info != undefined)
         {
            if(mc.info.A == mc.login_name)
            {
               if(mc.info.B == this.SHOW_EXP_BAR)
               {
                  if(mc.gui.txt2.visible)
                  {
                     return;
                  }
               }
            }
         }
         /*if(mc == this.mens[this.MP_myid] && !this.MP_spectator)
         {
            if(this.exp_first_sync_await)
            {
               return;
            }
            html = this.SHOW_EXP_BAR == 2 ? "Level " + this.exp_last_level : (this.exp_points_target / this.SKILL_POINTS_SCALE).toFixed(2).split(".").join(" . ") + " SP";
            if(this.GUEST_ACCESS)
            {
               html = "";
            }
            mc.gui.txt2.htmlText = html;
            mc.gui.txt2.visible = true;
            mc.gui.txt2.alpha = 0.75;
            mc.info = {
               "A":mc.login_name,
               "B":this.SHOW_EXP_BAR,
               "html":html
            };
            return;
         }*/
         this.player_info_busy = true;
         myRequest = new URLRequest(this.MP_exp_server);
         myVariables = new URLVariables();
         if(this.def_login != undefined && this.def_login != "")
         {
            myVariables.l = this.def_login;
            myVariables.p = this.def_password;
         }
		 if(mc == this.mens[this.MP_myid] && !this.MP_spectator) {
			myVariables.A = this.def_login;
		 } else {
			myVariables.A = mc.login_name;
		 }
         myVariables.B = this.SHOW_EXP_BAR;
         myRequest.method = URLRequestMethod.POST;
         myRequest.data = myVariables;
         this.myMPlayerInfoLoader.addEventListener(Event.COMPLETE,exp_task_done);
         this.myMPlayerInfoLoader.addEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
         this.myMPlayerInfoLoader.load(myRequest);
      }
      
      public function UnloadMenuItems() : void
      {
         if (this.menu_buttons) removeChild(this.menu_buttons);
         if (this.menu_buttons2) removeChild(this.menu_buttons2);
         if (this.menu_earth) removeChild(this.earth);
         if (this.flike) removeChild(this.flike);
         removeEventListener(Event.ENTER_FRAME,this.onEnterFrame2);
      }

      public function IsItSafeToGiveFullServerList() : Boolean
      {
         var curURL:String = null;
         curURL = "iframe";
         try
         {
            curURL = String(ExternalInterface.call(" function(){ return (window!=window.top)?\'iframe\':\'normal\'; }"));
         }
         catch(e:Error)
         {
            curURL = "iframe";
         }
         if(curURL == "normal" || curURL == "null")
         {
            if(MovieClip(root).loaderInfo.url.toLowerCase().indexOf("plazmaburst2.com") == -1 && MovieClip(root).loaderInfo.url.indexOf("WebServers/home/") == -1 && MovieClip(root).loaderInfo.url.indexOf("WebServers/home/") == -1 && MovieClip(root).loaderInfo.url.indexOf("Projects Flash") == -1 && MovieClip(root).loaderInfo.url.indexOf("Projects%20Fl") == -1)
            {
               return false;
            }
            return true;
         }
         return false;
      }

      public function LocateMeToMp() : void
      {
		this.allow_mp_connect = true;
		gotoAndStop("loginform");
      }

      public function mov(param1:MouseEvent) : void
      {
         if(!param1.buttonDown)
         {
            this.m_hold = -1;
         }
         this.m = 0;
         while(this.m < this.menu_buttons_tot)
         {
            if(this.menu_buttons["btn" + this.m].visible)
            {
               if(this.menu_buttons2.mouseX > this.menu_buttons["btn" + this.m].x && this.menu_buttons2.mouseX < this.menu_buttons["btn" + this.m].x + 200 && this.menu_buttons2.mouseY > this.menu_buttons["btn" + this.m].y && this.menu_buttons2.mouseY < this.menu_buttons["btn" + this.m].y + 20)
               {
                  this.m_active = this.m;
                  this.menu_buttons["btn" + this.m].btn_over.alpha = Math.min(this.menu_buttons["btn" + this.m].btn_over.alpha + 0.5,1);
               }
            }
            ++this.m;
         }
      }
      
      public function onEnterFrame2(param1:Event) : void
      {
		 if (this.autostart_mp == "1") {
			MP_favor_the_shooter = true;
			UnloadMenuItems();
			LocateMeToMp();
			this.autostart_mp = "0";
		 }
		 for (var i:int=0; i<0; i++) {
		 	var ship:MovieClip = this.earth["sh" + this.i];
			if(!ship.started)
			{
			   if(getTimer() > this.MUSIC_START + 19020 + this.i * 300 / 30 * 30)
			   {
				  ship.started = true;
				  ship.gotoAndPlay(1 + Math.floor(Math.random() * 60));
				  this.xx = Math.random() * Math.PI * 2;
				  this.yy = Math.random() * 200;
				  ship.x = Math.sin(this.xx) * this.yy - 100;
				  ship.y = Math.cos(this.xx) * this.yy + Math.sin(this.xx) * this.yy + 20;
				  ship.scaleX = ship.scaleY = 2.5 + Math.cos(this.xx);
			   }
			}
		 }
         if(this.blink_main == 20)
         {
            this.menu_buttons.txtconsole.htmlText = this.new_nick + "█";
         }
         ++this.blink_main;
         if(this.blink_main > 40)
         {
            this.menu_buttons.txtconsole.htmlText = this.new_nick;
            this.blink_main = 0;
         }
	     if (DRAW_EARTH) {
			 this.earth.x = 400 + Math.sin(this.earth_pos1 * 0.25) * Math.cos(this.earth_pos1 * 0.7) * 100;
			 this.earth.y = 200 + Math.cos(this.earth_pos1) * Math.sin(this.earth_pos1 * 0.6) * 50;
			 this.earth.scaleX = this.earth.scaleY = 1 + Math.sin(this.earth_pos1 * 0.15) * Math.cos(this.earth_pos1 * 0.2) * 0.1;
			 this.earth_pos1 += 0.01 * 30 / stage.frameRate;
		 }
         if(this.darkness.alpha > 0)
         {
            this.darkness.alpha -= 0.1 * 30 / stage.frameRate;
         }
         else
         {
            this.darkness.visible = false;
         }
         this.m_time += 0.01 * 30 / stage.frameRate;
         if(this.m_time > Math.PI * 4)
         {
            this.m_time -= Math.PI * 4;
         }
         if(this.m_active == -1)
         {
            if(this.menu_buttons.alpha > 0.5)
            {
               this.menu_buttons.alpha -= 0.1 * 30 / stage.frameRate;
            }
         }
         else if(this.menu_buttons.alpha < 1)
         {
            this.menu_buttons.alpha += 0.4 * 30 / stage.frameRate;
         }
         if(this.m_active != this.lm_active)
         {
            this.PlaySound_full(this.ss_info);
         }
         this.lm_active = this.m_active;
	     for (var m:int=0; m<menu_buttons_tot; m++)
         {
		    var btn:MovieClip = this.menu_buttons["btn" + m];
            if(this.m_active == m && this.m_hold == -1 || this.m_hold == m)
            {
               btn.alpha = 1;
               btn.btn_over.alpha = Math.min(btn.btn_over.alpha + 0.5,1);
            }
            else
            {
               if(btn.btn_over.alpha > 0)
               {
                  btn.btn_over.alpha -= 0.1 * 30 / stage.frameRate;
               }
               btn.alpha = 0.5;
            }
            btn.ghost.alpha = Number(btn.btn_over.alpha) * (0.3 + Math.sin(this.m_time * 4) * 0.1);
            btn.ghost.z = (Number(btn.ghost.z) - Number(btn.btn_over.alpha) * 100) / 2;
            btn.ghost.x = 106 + Math.sin(this.m_time) * 20;
            btn.ghost.y = 12 + Math.cos(this.m_time * 2) * 10;
         }
      }
      
      public function UpdateMenuHue() : void
      {
         var _loc1_:AdjustColor = null;
         //var _loc2_:ColorMatrixFilter = null;
         var _loc3_:Array = null;
         _loc1_ = new AdjustColor();
         _loc1_.brightness = 0;
         _loc1_.contrast = 0;
         _loc1_.hue = this.menu_hue;
         _loc1_.saturation = 0;
         //_loc2_ = new ColorMatrixFilter(_loc1_.CalculateFinalFlatArray());
         _loc3_ = [];
         //_loc3_.push(_loc2_);
         /*this.earth.filters = _loc3_;
         this.menu_buttons.filters = _loc3_;
         this.errmenu.filters = _loc3_;*/
		  // FILTERS
      }
      
      public function k_down_space(param1:KeyboardEvent) : void
      {
         if(param1.keyCode == 32 || param1.keyCode == 82)
         {
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,this.k_down_space);
            this.myCursor.gotoAndPlay("loading");
            gotoAndStop("loading");
         }
      }
      
      public function NextLevel() : void
      {
         this.PlaySound_full(this.ss_info_act);
         if(this.LEVELS_PASSED < this.LEVELS_TOTAL)
         {
            this.AWARD = true;
            this.CMPG_THIS_LEVEL = this.LEVELS_PASSED;
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,this.k_down_space2);
            gotoAndStop("difch");
         }
         else
         {
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,this.k_down_space2);
            gotoAndStop("credits");
         }
      }
      
      public function UpdateSkinC(param1:int,param2:int) : void
      {
         var _loc2_:* = undefined;
         var _loc3_:* = undefined;
         if(param1 == 0)
         {
            _loc2_ = this.skin0;
         }
         if(param1 == 1)
         {
            _loc2_ = this.skin1;
         }
         /*if(param1 == 0)
         {
            if(this.skin_model[param1] > 49)
            {
               this.skin_model[param1] = 40;
            }
            if(this.skin_model[param1] < 40)
            {
               this.skin_model[param1] = 49;
            }
         }*/
         /*if(param1 == 1)
         {
            if(this.skin_model[param1] > 61)
            {
               this.skin_model[param1] = 60;
            }
            if(this.skin_model[param1] < 60)
            {
               this.skin_model[param1] = 61;
            }
         }*/
		 if(this.skin_model[param1] > 49 && this.skin_model[param1] < 55) {
			 this.skin_model[param1] = 60;
		 }
		 if(this.skin_model[param1] < 60 && this.skin_model[param1] >= 55) {
			 this.skin_model[param1] = 49;
		 }
	 
		 if(this.skin_model[param1] > 61 && this.skin_model[param1] < 65) {
			 this.skin_model[param1] = 69;
		 }
		 if(this.skin_model[param1] < 69 && this.skin_model[param1] >= 65) {
			 this.skin_model[param1] = 61;
		 }
	 
		 if(this.skin_model[param1] > 90) {
			 this.skin_model[param1] = 1;
		 }
		 if(this.skin_model[param1] < 1) {
			 this.skin_model[param1] = 90;
		 }
	 
		 if(this.skin_model[param1] == 5) {
			 this.skin_model[param1] += param2;
		 }
		 if(this.skin_model[param1] == 10) {
			 this.skin_model[param1] += param2;
		 }
		 if(this.skin_model[param1] == 20) {
			 this.skin_model[param1] += param2;
		 }
		 if(this.skin_model[param1] == 30) {
			 this.skin_model[param1] += param2;
		 }	 
	 
         //_loc2_.gotoAndStop(1);
         _loc3_ = this.skin_model[param1];
         _loc2_.head.gotoAndStop(_loc3_);
         if(this.skin_model[param1] >= 60 && this.skin_model[param1] <= 61)
         {
            _loc3_ = 3;
         }
         if(this.skin_model[param1] >= 40 && this.skin_model[param1] <= 48)
         {
            _loc3_ = 1;
         }
	 
 
	 	 
         _loc2_.body.gotoAndStop(_loc3_);
         _loc2_.toe.gotoAndStop(_loc3_);
         _loc2_.leg1_upper.gotoAndStop(_loc3_);
         _loc2_.leg1_middle.gotoAndStop(_loc3_);
         _loc2_.leg1_lower.gotoAndStop(_loc3_);
         _loc2_.leg2_upper.gotoAndStop(_loc3_);
         _loc2_.leg2_middle.gotoAndStop(_loc3_);
         _loc2_.leg2_lower.gotoAndStop(_loc3_);
         _loc2_.arm1_upper.gotoAndStop(_loc3_);
         _loc2_.arm1_lower.gotoAndStop(_loc3_);
         _loc2_.arm2_upper.gotoAndStop(_loc3_);
         _loc2_.arm2_lower.gotoAndStop(_loc3_);
         if(this.skin_color_head[param1] >= this.clrs.length)
         {
            this.skin_color_head[param1] = 0;
         }
         if(this.skin_color_head[param1] < 0)
         {
            this.skin_color_head[param1] = this.clrs.length - 1;
         }
         if(this.skin_color_body[param1] >= this.clrs.length)
         {
            this.skin_color_body[param1] = 0;
         }
         if(this.skin_color_body[param1] < 0)
         {
            this.skin_color_body[param1] = this.clrs.length - 1;
         }
         if(this.skin_color_arms[param1] >= this.clrs.length)
         {
            this.skin_color_arms[param1] = 0;
         }
         if(this.skin_color_arms[param1] < 0)
         {
            this.skin_color_arms[param1] = this.clrs.length - 1;
         }
         if(this.skin_color_legs[param1] >= this.clrs.length)
         {
            this.skin_color_legs[param1] = 0;
         }
         if(this.skin_color_legs[param1] < 0)
         {
            this.skin_color_legs[param1] = this.clrs.length - 1;
         }
		 if(this.skin_color_head[param1] != 0) {
			_loc2_.head.filters = new Array(this.clrs[this.skin_color_head[param1]]);
		 }
		 if(this.skin_color_body[param1] != 0) {
			_loc2_.body.filters = new Array(this.clrs[this.skin_color_body[param1]]);
		 }
		 if(this.skin_color_arms[param1] != 0) {
			 _loc2_.arm1_lower.filters = new Array(this.clrs[this.skin_color_arms[param1]]);
			 _loc2_.arm2_lower.filters = new Array(this.clrs[this.skin_color_arms[param1]]);
		 }
		 if(this.skin_color_legs[param1] != 0) {
			 _loc2_.leg1_upper.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
			 _loc2_.leg1_middle.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
			 _loc2_.leg1_lower.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
			 _loc2_.leg2_upper.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
			 _loc2_.leg2_middle.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
			 _loc2_.leg2_lower.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
			 _loc2_.toe.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
		 }
         if(this.skin_color_arms[param1] != 0) {
			 _loc2_.arm1_upper.filters = new Array(this.clrs[this.skin_color_arms[param1]]);
			 _loc2_.arm2_upper.filters = new Array(this.clrs[this.skin_color_arms[param1]]);
		 }
		// FILTER
      }
      
      public function RefrSkin(param1:int) : void
      {
         this.skin_color_head[param1] = 0;
         this.skin_color_body[param1] = 0;
         this.skin_color_arms[param1] = 0;
         this.skin_color_legs[param1] = 0;
      }
      
      public function k_down_space2(param1:KeyboardEvent) : void
      {
         if(param1.keyCode == 32 || param1.keyCode == 82)
         {
            if(this.camp_score.visible)
            {
               this.PlaySound_full(this.ss_info_act);
               this.camp_score.visible = false;
            }
            else
            {
               this.NextLevel();
            }
         }
      }
      
      public function ColourBuy(cost:int) : String
      {
         if(this.CMPG_money >= cost)
         {
            return "#83EC7D"; // Greenish, can afford
         }
         return "#E63D40"; // Reddish, can't afford
      }
      
      public function UpdateTbl() : void
      {
         var upg_level:int = 0;
         this.creds.text = "$ " + this.CMPG_money;
         this.xx = 186;
         this.yy = this.game.sample.y;
         this.ok = true;
         this.i3 = 0;
         this.i6 = 0;
         this.i = 0;
         while(this.i < this.inventoryC.length)
         {
            if(this.gunsA[this.i] == undefined || this.gunsA[this.i] == null)
            {
               this.gunsA[this.i] = this.MakeGunByClass(this.inventoryC[this.i].mdl,{});
            }
            this.ok = false;
            this.i2 = 0;
            while(this.i2 < this.inventoryA.length && !this.ok)
            {
               if(this.inventoryA[this.i2].mdl == this.inventoryC[this.i].mdl)
               {
                  this.ok = true;
                  this.i3 = this.i2;
               }
               ++this.i2;
            }
            if(this.inventoryC[this.i].mdl == "item_grenade")
            {
               this.i2 = 0;
               while(this.i2 < this.inventoryA.length)
               {
                  if(this.inventoryA[this.i2].mdl == this.inventoryC[this.i].mdl)
                  {
                     ++this.i6;
                  }
                  ++this.i2;
               }
            }
            this.gunsA[this.i].model = this.inventoryC[this.i].mdl;
            upg_level = this.ok ? int(this.inventoryA[this.i3].upg) : 0;
            this.gunsA[this.i].upg = upg_level;
            this.gunsA[this.i].gotoAndStop(1);
            this.gunsA[this.i].x = this.xx;
            this.gunsA[this.i].y = this.yy;
            this.gunsA[this.i].scaleX = 1;
            this.gunsA[this.i].scaleY = 1;
            this.gunsA[this.i].ok = this.ok;
            if(this.ok)
            {
               this.gunsA[this.i].filters = this.game.sample.filters;
            }
            else
            {
               this.gunsA[this.i].filters = this.game.sample_no.filters;
            }
            if(this.gunsAt[this.i] == undefined || this.gunsAt[this.i] == null)
            {
               this.gunsAt[this.i] = this.game.addChild(new shop_tit());
            }
            this.gunsAt[this.i].x = this.xx + (Number(this.game.sample2.x) - Number(this.game.sample.x));
            this.gunsAt[this.i].y = this.yy;
            this.gunsAt[this.i].txt.text = this.GunModelToGunName(this.gunsA[this.i].model);
            this.gunsA[this.i].onmade();
            this.gunsA[this.i].i3 = this.i3;
            if(this.ok && this.inventoryC[this.i].mdl != "item_grenade" && this.inventoryC[this.i].mdl != "gun_defecator")
            {
               if(this.gunsA[this.i].costupg > 0)
               {
                  this.gunsAt[this.i].txt2.htmlText = "Upgrade Level: " + upg_level + "/3";
               }
               else
               {
                  this.gunsAt[this.i].txt2.htmlText = "";
               }
               if(upg_level < 3 && this.gunsA[this.i].costupg > 0)
               {
                  this.gunsAt[this.i].txt3.htmlText = "<font color=\'" + this.ColourBuy(this.gunsA[this.i].costupg) + "\'>Upgrade for $ " + this.gunsA[this.i].costupg + "</font>";
               }
               else
               {
                  this.gunsAt[this.i].txt3.htmlText = "";
               }
            }
            else
            {
               if(this.gunsA[this.i].cost != undefined)
               {
                  this.gunsAt[this.i].txt3.htmlText = "<font color=\'" + this.ColourBuy(this.gunsA[this.i].cost) + "\'>Buy for $ " + this.gunsA[this.i].cost + "</font>";
               }
               else
               {
                  this.gunsAt[this.i].txt3.htmlText = "";
               }
               if(this.inventoryC[this.i].mdl == "item_grenade")
               {
                  if(this.i6 > 0)
                  {
                     this.gunsAt[this.i].txt.text = this.i6 + "x " + this.gunsAt[this.i].txt.text;
                     if(this.i6 > 1)
                     {
                        this.gunsAt[this.i].txt.text += "s";
                     }
                     this.gunsAt[this.i].txt2.htmlText = this.gunsAt[this.i].txt.text;
                  }
                  else
                  {
                     this.gunsAt[this.i].txt2.htmlText = "";
                  }
               }
               else
               {
                  this.gunsAt[this.i].txt2.htmlText = "";
               }
            }
            if(this.ok)
            {
               this.gunsAt[this.i].txt.alpha = 1;
            }
            else
            {
               this.gunsAt[this.i].txt.alpha = 0.6;
            }
            if(this.gunsA[this.i].cost > 0)
            {
               this.gunsAt[this.i].txt4.text = "Item price: $ " + this.gunsA[this.i].cost;
            }
            else
            {
               this.gunsAt[this.i].txt4.text = "";
            }
            if(this.gunsA[this.i].costupg > 0)
            {
               this.gunsAt[this.i].txt5.text = "Upgrade price: $ " + this.gunsA[this.i].costupg;
            }
            else
            {
               this.gunsAt[this.i].txt5.text = "";
            }
            if(this.gunsAl[this.i] == undefined || this.gunsAl[this.i] == null)
            {
               this.gunsAl[this.i] = this.game.addChild(new buy_line());
            }
            this.gunsAl[this.i].x = 0;
            this.gunsAl[this.i].y = this.yy - 9.5;
            if(this.ok && upg_level >= 3 || this.i6 >= 6)
            {
               this.gunsAl[this.i].alpha = 0;
            }
            else
            {
               this.gunsAl[this.i].alpha = 1;
            }
            if(this.firstframe)
            {
               this.gunsAl[this.i].addEventListener(MouseEvent.CLICK,function():*
               {
                  i = 0;
                  while(i < inventoryC.length)
                  {
                     if(gunsAl[i].hitTestPoint(mouseX,mouseY))
                     {
                        if(!gunsA[i].ok || gunsA[i].model == "item_grenade")
                        {
                           if(gunsA[i].model == "item_grenade" && i6 < 6 || gunsA[i].model != "item_grenade")
                           {
                              i7 = 0;
                              i2 = 0;
                              while(i2 < inventoryC.length)
                              {
                                 if(i != i2)
                                 {
                                    if(gunsA[i2].ok)
                                    {
                                       if(gunsA[i2].wep == gunsA[i].wep)
                                       {
                                          i3 = i2;
                                          i7 = gunsA[i2].cost + Number(gunsA[i2].costupg) * Number(gunsA[i2].upg);
                                       }
                                    }
                                 }
                                 ++i2;
                              }
                              if(CMPG_money >= Number(gunsA[i].cost) - i7)
                              {
                                 if(gunsA[i].cost > 0)
                                 {
                                    CMPG_money -= Number(gunsA[i].cost) - i7;
                                    AddItemToHero1(gunsA[i].model,0);
                                    if(i7 > 0)
                                    {
                                       inventoryA.splice(gunsA[i3].i3,1);
                                    }
                                 }
                              }
                           }
                        }
                        else if(gunsA[i].upg < 3)
                        {
                           if(CMPG_money >= gunsA[i].costupg)
                           {
                              if(gunsA[i].costupg > 0)
                              {
                                 CMPG_money -= gunsA[i].costupg;
                                 i2 = 0;
                                 while(i2 < inventoryA.length)
                                 {
                                    if(inventoryA[i2].mdl == inventoryC[i].mdl)
                                    {
                                       inventoryA[i2].upg += 1;
                                    }
                                    ++i2;
                                 }
                              }
                           }
                        }
                     }
                     ++i;
                  }
                  UpdateTbl();
               });
               this.gunsAl[this.i].addEventListener(MouseEvent.MOUSE_OVER,function():*
               {
                  PlaySound_full(ss_info);
               });
               this.gunsAl[this.i].addEventListener(MouseEvent.MOUSE_DOWN,function():*
               {
                  PlaySound_full(ss_info_off);
               });
            }
            this.yy += 17;
            ++this.i;
         }
         this.firstframe = false;
      }
      
      public function ColourBuyB(param1:int) : String
      {
         if(this.CMPG_money >= param1)
         {
            return "#83EC7D";
         }
         return "#E63D40";
      }
      
      public function UpdateTblB() : void
      {
         this.creds.text = "$ " + this.CMPG_money;
         this.xx = 186;
         this.yy = this.game.sample.y;
         this.ok = true;
         this.i3 = 0;
         this.i6 = 0;
         this.i = 0;
         while(this.i < this.inventoryD.length)
         {
            if(this.gunsB[this.i] == undefined || this.gunsB[this.i] == null)
            {
               this.gunsB[this.i] = this.MakeGunByClass(this.inventoryD[this.i].mdl,{});
            }
            this.ok = false;
            this.i2 = 0;
            while(this.i2 < this.inventoryB.length && !this.ok)
            {
               if(this.inventoryB[this.i2].mdl == this.inventoryD[this.i].mdl)
               {
                  this.ok = true;
                  this.i3 = this.i2;
               }
               ++this.i2;
            }
            if(this.inventoryD[this.i].mdl == "item_grenade")
            {
               this.i2 = 0;
               while(this.i2 < this.inventoryB.length)
               {
                  if(this.inventoryB[this.i2].mdl == this.inventoryD[this.i].mdl)
                  {
                     ++this.i6;
                  }
                  ++this.i2;
               }
            }
            this.gunsB[this.i].model = this.inventoryD[this.i].mdl;
            this.gunsB[this.i].upg = this.ok ? this.inventoryB[this.i3].upg : 0;
            this.gunsB[this.i].gotoAndStop(1);
            this.gunsB[this.i].x = this.xx;
            this.gunsB[this.i].y = this.yy;
            this.gunsB[this.i].scaleX = 1;
            this.gunsB[this.i].scaleY = 1;
            this.gunsB[this.i].ok = this.ok;
            if(this.ok)
            {
               this.gunsB[this.i].filters = this.game.sample.filters;
            }
            else
            {
               this.gunsB[this.i].filters = this.game.sample_no.filters;
            }
            if(this.gunsBt[this.i] == undefined || this.gunsBt[this.i] == null)
            {
               this.gunsBt[this.i] = this.game.addChild(new shop_tit());
            }
            this.gunsBt[this.i].x = this.xx + (Number(this.game.sample2.x) - Number(this.game.sample.x));
            this.gunsBt[this.i].y = this.yy;
            this.gunsBt[this.i].txt.text = this.GunModelToGunName(this.gunsB[this.i].model);
            this.gunsB[this.i].onmade();
            this.gunsB[this.i].i3 = this.i3;
            if(this.ok && this.inventoryD[this.i].mdl != "item_grenade" && this.inventoryD[this.i].mdl != "gun_defecator")
            {
               if(this.gunsB[this.i].costupg > 0)
               {
                  this.gunsBt[this.i].txt2.htmlText = "Upgrade Level: " + this.inventoryB[this.i3].upg + "/3";
               }
               else
               {
                  this.gunsBt[this.i].txt2.htmlText = "";
               }
               if(this.inventoryB[this.i3].upg < 3 && this.gunsB[this.i].costupg > 0)
               {
                  this.gunsBt[this.i].txt3.htmlText = "<font color=\'" + this.ColourBuyB(this.gunsB[this.i].costupg) + "\'>Upgrade for $ " + this.gunsB[this.i].costupg + "</font>";
               }
               else
               {
                  this.gunsBt[this.i].txt3.htmlText = "";
               }
            }
            else
            {
               if(this.gunsB[this.i].cost != undefined)
               {
                  this.gunsBt[this.i].txt3.htmlText = "<font color=\'" + this.ColourBuyB(this.gunsB[this.i].cost) + "\'>Buy for $ " + this.gunsB[this.i].cost + "</font>";
               }
               else
               {
                  this.gunsBt[this.i].txt3.htmlText = "";
               }
               if(this.inventoryD[this.i].mdl == "item_grenade")
               {
                  if(this.i6 > 0)
                  {
                     this.gunsBt[this.i].txt.text = this.i6 + "x " + this.gunsBt[this.i].txt.text;
                     if(this.i6 > 1)
                     {
                        this.gunsBt[this.i].txt.text += "s";
                     }
                     this.gunsBt[this.i].txt2.htmlText = this.gunsBt[this.i].txt.text;
                  }
                  else
                  {
                     this.gunsBt[this.i].txt2.htmlText = "";
                  }
               }
               else
               {
                  this.gunsBt[this.i].txt2.htmlText = "";
               }
            }
            if(this.ok)
            {
               this.gunsBt[this.i].txt.alpha = 1;
            }
            else
            {
               this.gunsBt[this.i].txt.alpha = 0.6;
            }
            if(this.gunsB[this.i].cost > 0)
            {
               this.gunsBt[this.i].txt4.text = "Item price: $ " + this.gunsB[this.i].cost;
            }
            else
            {
               this.gunsBt[this.i].txt4.text = "";
            }
            if(this.gunsB[this.i].costupg > 0)
            {
               this.gunsBt[this.i].txt5.text = "Upgrade price: $ " + this.gunsB[this.i].costupg;
            }
            else
            {
               this.gunsBt[this.i].txt5.text = "";
            }
            if(this.gunsBl[this.i] == undefined || this.gunsBl[this.i] == null)
            {
               this.gunsBl[this.i] = this.game.addChild(new buy_line());
            }
            this.gunsBl[this.i].x = 0;
            this.gunsBl[this.i].y = this.yy - 9.5;
            if(this.ok && this.inventoryB[this.i3].upg >= 3 || this.i6 >= 6)
            {
               this.gunsBl[this.i].alpha = 0;
            }
            else
            {
               this.gunsBl[this.i].alpha = 1;
            }
            if(this.firstframe)
            {
               this.gunsBl[this.i].addEventListener(MouseEvent.CLICK,function():*
               {
                  i = 0;
                  while(i < inventoryD.length)
                  {
                     if(gunsBl[i].hitTestPoint(mouseX,mouseY))
                     {
                        if(!gunsB[i].ok || gunsB[i].model == "item_grenade")
                        {
                           if(gunsB[i].model == "item_grenade" && i6 < 6 || gunsB[i].model != "item_grenade")
                           {
                              i7 = 0;
                              i2 = 0;
                              while(i2 < inventoryD.length)
                              {
                                 if(i != i2)
                                 {
                                    if(gunsB[i2].ok)
                                    {
                                       if(gunsB[i2].wep == gunsB[i].wep)
                                       {
                                          i3 = i2;
                                          i7 = gunsB[i2].cost + Number(gunsB[i2].costupg) * Number(gunsB[i2].upg);
                                       }
                                    }
                                 }
                                 ++i2;
                              }
                              if(CMPG_money >= Number(gunsB[i].cost) - i7)
                              {
                                 if(gunsB[i].cost > 0)
                                 {
                                    CMPG_money -= Number(gunsB[i].cost) - i7;
                                    AddItemToHero2(gunsB[i].model,0);
                                    if(i7 > 0)
                                    {
                                       inventoryB.splice(gunsB[i3].i3,1);
                                    }
                                 }
                              }
                           }
                        }
                        else if(gunsB[i].upg < 3)
                        {
                           if(CMPG_money >= gunsB[i].costupg)
                           {
                              if(gunsB[i].costupg > 0)
                              {
                                 CMPG_money -= gunsB[i].costupg;
                                 i2 = 0;
                                 while(i2 < inventoryB.length)
                                 {
                                    if(inventoryB[i2].mdl == inventoryD[i].mdl)
                                    {
                                       inventoryB[i2].upg += 1;
                                    }
                                    ++i2;
                                 }
                              }
                           }
                        }
                     }
                     ++i;
                  }
                  UpdateTblB();
               });
               this.gunsBl[this.i].addEventListener(MouseEvent.MOUSE_OVER,function():*
               {
                  PlaySound_full(ss_info);
               });
               this.gunsBl[this.i].addEventListener(MouseEvent.MOUSE_DOWN,function():*
               {
                  PlaySound_full(ss_info_off);
               });
            }
            this.yy += 17;
            ++this.i;
         }
         this.firstframe = false;
      }
      
      public function onEnterFrameCredits(param1:Event) : void
      {
         if(this.STOP_SCROLL)
         {
            this.credits_stop_frames -= 30 / stage.frameRate;
            if(this.credits_stop_frames <= 0)
            {
               if(this.runner.y > this.credits_low_limit)
               {
                  this.runner.y -= 0.5 * 30 / stage.frameRate;
                  this.credits_target_offset = this.runner.y;
               }
            }
            else
            {
               this.runner.y = this.MorphWithTimeScale(this.runner.y,this.credits_target_offset,0.7,stage.frameRate / 30);
            }
         }
      }
      
      public function CreditsWheel(param1:*) : *
      {
         if(currentFrameLabel == "credits")
         {
            this.credits_target_offset += Number(param1.delta) * 13;
         }
         if(this.credits_target_offset < this.credits_low_limit)
         {
            this.credits_target_offset = this.credits_low_limit;
         }
         if(this.credits_target_offset > this.credits_high_limit)
         {
            this.credits_target_offset = this.credits_high_limit;
         }
         this.credits_stop_frames = 30;
      }
      
      public function MP_UpdateServerList() : void
      {
         var servers_tot:int = 0;
         var i:int = 0;
         var mc:* = undefined;
         while(this.server_list_box.numChildren > 0)
         {
            this.server_list_box.removeChildAt(0);
         }
         servers_tot = this.servers_name.length;
         i = 0;
         while(i < servers_tot)
         {
            mc = new server_list_item();
            this.server_list_box.addChild(mc);
            this.server_list_box["server_btn" + i] = mc;
            this.server_list_box["server_btn" + i].gotoAndStop(this.server_cur == i ? 2 : 1);
            this.server_list_box["server_btn" + i].y = i * 18;
            this.server_list_box["server_btn" + i].txt.mouseEnabled = false;
            this.server_list_box["server_btn" + i].txt.text = this.servers_name[i];
            var anonf5:Function = function():*
            {
               var i2:* = undefined;
               i2 = i;
               server_list_box["server_btn" + i].clickable_area.addEventListener(MouseEvent.CLICK,function(param1:*):*
               {
                  PlaySound_full(ss_info_act);
                  SocketConnectFloodProtect(i2);
               });
            };
			anonf5();
            i++;
         }
      }
      

      
	  public function SocketConnectFloodProtect(param1:*) : void
      {
         if(this.last_loaded_sever_uid != this.servers_uid[param1])
         {
            if(this.MP_socket.connected)
            {
               this.MP_socket.close();
            }
            this.errtxt.text = "";
            this.server_cur = param1;
            this.MP_SERVER_IP = this.servers_ip[this.server_cur];
            this.MP_SERVER_PORT = this.servers_port[this.server_cur];
            this.LAST_SERVER_UID = this.servers_uid[this.server_cur];
            this.last_loaded_sever_uid = this.LAST_SERVER_UID;
            Security.loadPolicyFile("xmlsocket://" + this.MP_SERVER_IP + ":" + this.MP_SERVER_PORT);
            this.MP_socket.connect(this.MP_SERVER_IP,this.MP_SERVER_PORT);
         }
         else
         {
            this.server_cur = param1;
         }
         this.curserver.text = this.MP_SERVER_NAME = this.servers_name[this.server_cur];
         this.MP_UpdateServerList();
      }
      
      public function PopulateServerList(param1:String) : void
      {
         var sr_arr:Array = null;
         var sr_arr2:Array = null;
         var new_server_cur:* = undefined;
         var found_my_server:Boolean = false;
         var str:String = param1;
         this.last_server_list_str = str;
         sr_arr = str.split(";");
         this.servers_name = [];
         this.servers_ip = [];
         this.servers_port = [];
         this.servers_uid = [];
         new_server_cur = 0;
         found_my_server = false;
         this.i = 0;
         while(this.i < sr_arr.length)
         {
            sr_arr2 = sr_arr[this.i].split("|");
            this.servers_name[this.i] = sr_arr2[0];
            this.servers_ip[this.i] = sr_arr2[1];
            this.servers_port[this.i] = sr_arr2[2];
            this.servers_uid[this.i] = sr_arr2[3];
            if(this.servers_uid[this.i] == this.LAST_SERVER_UID)
            {
               new_server_cur = this.i;
               if(this.MP_AUTO_LOGIN)
               {
                  this.GUEST_ACCESS = this.flogin.text == "";
                  this.auto_proceed = true;
                  found_my_server = true;
               }
            }
            ++this.i;
         }
         if(this.MP_AUTO_LOGIN)
         {
            if(!found_my_server)
            {
               if(this.coverup_active)
               {
                  this.coverup_active = false;
                  setTimeout(function():*
                  {
                     errtxt.text = "RECENT SERVER APPEARS TO BE INVISIBLE TO MAIN SERVER. TRY AGAIN?";
                  },50);
               }
            }
         }
         if(!this.login_login.enabled)
         {
            this.login_login.alpha = 1;
            this.login_login.enabled = true;
            this.login_guest.alpha = 1;
            this.login_guest.enabled = true;
         }
         this.SocketConnectFloodProtect(new_server_cur);
      }
      
      public function serv_list_failed(param1:IOErrorEvent) : void
      {
         this.myLoader.removeEventListener(Event.COMPLETE,this.serv_list_done);
         this.myLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.serv_list_failed);
         if(currentLabel == "loginform")
         {
         }
      }
      
      public function serv_list_done(param1:Event) : void
      {
         this.myLoader.removeEventListener(Event.COMPLETE,this.serv_list_done);
         this.myLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.serv_list_failed);
         if(currentLabel == "loginform")
         {
            this.PopulateServerList(this.myLoader.data);
         }
      }
      
      public function ch_clk(param1:MouseEvent) : void
      {
         this.i = 0;
         while(this.i < this.ch_total)
         {
            if(mouseX > this.list.x)
            {
               if(mouseX < this.list.x + 220)
               {
                  if(mouseY > this.list.y + this.i * 23)
                  {
                     if(mouseY < this.list.y + this.i * 23 + 23)
                     {
                        this.MP_channel = this.ch_links[this.i];
                        this.i = this.ch_total;
                        gotoAndStop("channel");
                     }
                  }
               }
            }
            ++this.i;
         }
      }
      
      public function SetMPSets(param1:int) : void
      {
         if(this.GUEST_ACCESS && param1 == 1)
         {
            this.errmenu_mp.visible = true;
            this.errmenu_mp.txt.text = "Guests can\'t play in Ranked Matches. Only spectating is allowed for Guests in Ranked Matches.";
         }
         else
         {
            this.errmenu_mp.visible = false;
         }
         this.simplegui.simple_1.alpha = this.simplegui.simple_2.alpha = this.simplegui.simple_3.alpha = this.simplegui.simple_4.alpha = 0.5;
         this.DefaultMP();
         if(param1 == 1)
         {
            this.MPLIST_APPROVED = 1;
            this.MPLIST_RANKED = 1;
            this.MPLIST_HIDE_FULL = 1;
            this.simplegui.simple_1.alpha = 1;
         }
         else if(param1 == 2)
         {
            this.MPLIST_APPROVED = 1;
            this.MPLIST_RANKED = 3;
            this.MPLIST_HIDE_FULL = 1;
            this.simplegui.simple_2.alpha = 1;
         }
         else if(param1 == 3)
         {
            this.MPLIST_APPROVED = 2;
            this.MPLIST_RANKED = 2;
            this.MPLIST_HIDE_FULL = 1;
            this.simplegui.simple_3.alpha = 1;
         }
         this.MP_default_set = param1;
      }
      

	  public function match_join(mid:int, password:String, spectator:Boolean) : void {
		 this.MP_room = this.ch_links[mid];
		 this.MP_room_name = this.ch_names[mid];
		 this.MP_map_name = this.ch_map[mid];
		 this.MP_app = this.ch_app[mid];
		 this.MP_spectator = spectator;
		 if(this.ch_pass[this.i] == "no")
		 {
		    this.list2.removeEventListener(MouseEvent.CLICK,this.gl_clk);
		    removeEventListener(Event.ENTER_FRAME,this.onEnterFrame_ac2);
		    this.MP_pass = "";
		    gotoAndStop("room");
		 }
		 else
		 {
			if (password != "") {
				this.MP_pass = password;
				gotoAndStop("room");
			} else {
				this.ggpp.visible = true;
			}
		 }
	  }
      
      public function gl_clk(e:MouseEvent) : void
      {
         this.i = 0;
		 while(this.i < this.ch_total)
		 {
			if(mouseX > this.list2.x)
			{
			   if(mouseX < this.list2.x + 735)
			   {
				  if(mouseY > this.list2.y + this.xx + this.i * 32)
				  {
					 if(mouseY < this.list2.y + this.xx + this.i * 32 + 32)
					 {
						var spec:Boolean = mouseX > this.list2.x + 735 - 30;
						match_join(this.i, "", spec);
						break;
					 }
				  }
			   }
			}
			++this.i;
		 }
      }
      
      public function DefaultMP() : void
      {
         this.MPLIST_GAMENAME = "any";
         this.MPLIST_MAPID = "any";
         this.MPLIST_MODE = 6;
         this.MPLIST_PUBLIC = 2;
         this.MPLIST_APPROVED = 2;
         this.MPLIST_RANKED = 2;
         this.MPLIST_WITH_FRIENDS = 2;
         this.MPLIST_NO_ENEMIES = 2;
         this.MPLIST_HIDE_FULL = 1;
      }
      
      public function onEnterFrame_ac2(param1:Event) : void
      {
         if(currentFrameLabel == "channel")
         {
            if(this.ok2)
            {
               this.yy -= 2 * 30 / ((stage.frameRate + 30) / 2);
            }
            if(this.ok)
            {
               this.yy += 2 * 30 / ((stage.frameRate + 30) / 2);
            }
            this.xx += this.yy * 30 / ((stage.frameRate + 30) / 2);
            if(this.xx < -this.ch_total * 32 + 220)
            {
               this.xx = -this.ch_total * 32 + 220;
            }
            if(this.xx > 0)
            {
               this.xx = 0;
            }
            this.i = 0;
            while(this.i < this.ch_total)
            {
               this.temp2[this.i].y = this.xx + this.i * 32;
               ++this.i;
            }
            this.sc_scrool.y = 112 + this.xx / (-this.ch_total * 32 + 220) * (225 - 112);
            if(this.yy > 15)
            {
               this.yy = 15;
            }
            if(this.yy < -15)
            {
               this.yy = -15;
            }
            if(this.yy > 1)
            {
               this.yy = this.yy - 1;
            }
            else if(this.yy < -1)
            {
               this.yy += 1;
            }
            else
            {
               this.yy = 0;
            }
         }
         else
         {
            removeEventListener(Event.ENTER_FRAME,this.onEnterFrame_ac2);
         }
      }
      
      public function sc_upB(param1:MouseEvent) : void
      {
         this.ok = true;
      }
      
      public function sc_upxB(param1:MouseEvent) : void
      {
         this.ok = false;
      }
      
      public function sc_downB(param1:MouseEvent) : void
      {
         this.ok2 = true;
      }
      
      public function sc_downxB(param1:MouseEvent) : void
      {
         this.ok2 = false;
      }
      
      
      public function k_down3(param1:KeyboardEvent) : void
      {
         if(currentLabel == "room")
         {
            if(param1.keyCode == 13)
            {
            }
         }
      }
      
      public function ready_switch(param1:MouseEvent) : void
      {
         if(this.MP_ready)
         {
            this.MP_ready = false;
            this.rready.gotoAndStop(2);
         }
         else
         {
            this.MP_ready = true;
            this.rready.gotoAndStop(1);
         }
      }
      
      public function timerHandler_loading(param1:TimerEvent) : void
      {
         gotoAndStop("gaming");
      }
      
      public function RateMap(param1:int) : void
      {
         var rateserv_list_failed:* = undefined;
         var rateserv_list_done:* = undefined;
         var how:int = param1;
         if(this.nonblockrate)
         {
            rateserv_list_failed = function(param1:IOErrorEvent):void
            {
               myRateLoader.removeEventListener(Event.COMPLETE,rateserv_list_done);
               myRateLoader.removeEventListener(IOErrorEvent.IO_ERROR,rateserv_list_failed);
               nonblockrate = true;
               if(currentLabel == "gaming")
               {
                  DialogSay("Can\'t submit vote right now. Please try again later.","#FFFF00");
               }
            };
            rateserv_list_done = function(param1:Event):void
            {
               myRateLoader.removeEventListener(Event.COMPLETE,rateserv_list_done);
               myRateLoader.removeEventListener(IOErrorEvent.IO_ERROR,rateserv_list_failed);
               if(currentLabel == "gaming")
               {
                  DialogSay(myRateLoader.data,"#FFFF00");
               }
            };
            this.DialogSay("You voted " + how + " stars on this map.","#FFFF00");
            this.nonblockrate = false;
            this.myRequest = new URLRequest(this.MP_mrate_server);
            this.myVariables = new URLVariables();
            if(this.def_login != undefined && this.def_login != "")
            {
               this.myVariables.login = this.def_login;
               this.myVariables.password = this.def_password;
            }
            this.myVariables.m = this.CUR_CUSTOM_MAP;
            this.myVariables.p = how;
            this.myRequest.method = URLRequestMethod.POST;
            this.myRequest.data = this.myVariables;
            this.myRateLoader.addEventListener(Event.COMPLETE,rateserv_list_done);
            this.myRateLoader.addEventListener(IOErrorEvent.IO_ERROR,rateserv_list_failed);
            this.myRateLoader.load(this.myRequest);
         }
      }
      
      public function TakeScreenShot(param1:* = 0, param2:* = 0.75, param3:* = null) : void
      {
         var bitmapData:BitmapData = null;
         var arr:Array = null;
         var arr2:Array = null;
         var arr3:Array = null;
         var arr4:Array = null;
         var i:int = 0;
         var m:Matrix = null;
         var m2:Matrix = null;
         var jpgEncoder:JPGEncoder = null;
         var bytes:ByteArray = null;
         var myScreenShotLoader:* = undefined;
         var that:* = undefined;
         var mc:* = undefined;
         var where:* = param1;
         var scale:* = param2;
         var extra_region:* = param3;
         if(!this.allow_screenshoting)
         {
            return;
         }
         if(this.images_expected > this.images_loaded)
         {
            return;
         }
         if(this.TakeScreenShot_allow)
         {
            this.TakeScreenShot_allow = false;
            setTimeout(function():*
            {
               TakeScreenShot_allow = true;
            },this.TakeScreenShot_delay);
            bitmapData = new BitmapData(400,200,false,4278255615);
            arr = [];
            arr2 = [];
            arr3 = [];
            arr4 = [];
            i = 0;
            while(i < this.playerstotal)
            {
               arr[i] = this.mens[i].gui.visible;
               this.mens[i].gui.visible = false;
               i++;
            }
            i = 0;
            while(i < this.vehiclestotal)
            {
               arr2[i] = this.vehicles[i].gui.visible;
               this.vehicles[i].gui.visible = false;
               if(this.vehicles[i].typ == 6)
               {
                  arr3[i] = this.vehicles[i].visible;
                  this.vehicles[i].visible = false;
               }
               i++;
            }
            i = 0;
            while(i < this.decorstotal)
            {
               if(this.decors[i].txt != undefined && this.decors[i].txt != null)
               {
                  arr4[i] = this.decors[i].txt.text;
                  this.decors[i].txt.text = this.Censored(this.decors[i].txt.text,true);
               }
               else
               {
                  arr4[i] = null;
               }
               i++;
            }
            i = 0;
            while(i < this.flarestotal)
            {
               mc = this.flare[i];
               mc.alpha = this.flare_power[i];
               mc.visible = true;
               i++;
            }
            i = 0;
            while(i < this.ef.length)
            {
               if(this.ef[i])
               {
                  if(this.ef[i].msgtext)
                  {
                     this.ef[i].scaleX = this.ef[i].scaleY = 0;
                  }
               }
               i++;
            }
            bitmapData.lock();
            bitmapData.fillRect(bitmapData.rect,4278255615);
            m = new Matrix();
            if(where == 0)
            {
               m.translate(-(mouseX - this.game_x) / this.game_scale + 200 / scale,-(mouseY - this.game_y) / this.game_scale + 100 / scale);
            }
            else
            {
               scale = 400 / Math.abs(Math.max(extra_region.w,extra_region.h));
               m.translate(-Number(extra_region.x),-Number(extra_region.y));
            }
            m.scale(scale,scale);
            m2 = new Matrix();
            m2.scale(Math.max(400 / 800,scale),Math.max(400 / 800,scale));
            bitmapData.draw(this.sky,m2,this.sky.transform.colorTransform,null,null);
            bitmapData.draw(this.graphics_3d,m,null,null,null);
            bitmapData.draw(this.game,m,null,null,null);
            bitmapData.draw(this.graphics_3d_front,m,null,null,null);
            bitmapData.unlock();
            i = 0;
            while(i < this.playerstotal)
            {
               this.mens[i].gui.visible = arr[i];
               i++;
            }
            i = 0;
            while(i < this.vehiclestotal)
            {
               this.vehicles[i].gui.visible = arr2[i];
               if(this.vehicles[i].typ == 6)
               {
                  this.vehicles[i].visible = arr3[i];
               }
               i++;
            }
            i = 0;
            while(i < this.decorstotal)
            {
               if(arr4[i] != null)
               {
                  this.decors[i].txt.text = arr4[i];
               }
               i++;
            }
            i = 0;
            while(i < this.ef.length)
            {
               if(this.ef[i])
               {
                  if(this.ef[i].msgtext)
                  {
                     this.ef[i].scaleX = this.ef[i].scaleY = 1;
                  }
               }
               i++;
            }
            jpgEncoder = new JPGEncoder(90);
            bytes = jpgEncoder.encode(bitmapData);
            this.myRequest = new URLRequest(this.MP_screenshot_server);
            this.myVariables = new URLVariables();
            if(this.def_login != undefined && this.def_login != "")
            {
               this.myVariables.l = this.def_login;
               this.myVariables.p = this.def_password;
            }
            this.myVariables.map_id = this.MP_map_name;
            this.myVariables.img = Base64.encodeByteArray(bytes);
            this.myRequest.method = URLRequestMethod.POST;
            this.myRequest.data = this.myVariables;
            myScreenShotLoader = this.GetNewURLLoader();
            that = this;
            myScreenShotLoader.addEventListener(Event.COMPLETE,function(param1:*):*
            {
               var r:String = null;
               var bitmap:Bitmap = null;
               var evt:* = param1;
               r = evt.target.data;
               if(r != ".")
               {
                  ChatNewMsg(r);
                  bitmap = new Bitmap(bitmapData);
                  that.addChild(bitmap);
                  bitmap.x = 200;
                  bitmap.y = 100;
                  setTimeout(function():*
                  {
                     that.removeChild(bitmap);
                     bitmapData.dispose();
                  },1000);
                  if(ExternalInterface.available)
                  {
                     ExternalInterface.call("PreviewDone()");
                  }
                  TakeScreenShot_delay = 1000;
               }
               else
               {
                  bitmapData.dispose();
                  TakeScreenShot_delay = 30000;
               }
            });
            myScreenShotLoader.addEventListener(IOErrorEvent.IO_ERROR,function(param1:*):*
            {
               bitmapData.dispose();
               TakeScreenShot_delay = 10000;
            });
            myScreenShotLoader.load(this.myRequest);
            return;
         }
      }
      
      public function k_down_space3(param1:KeyboardEvent) : void
      {
         if(param1.keyCode == 32 || param1.keyCode == 82)
         {
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,this.k_down_space3);
            this.uncncld = false;
            this.PlaySound_full(this.ss_info_act);
            if(this.FORCE_CUSTOM_MAP)
            {
               this.GET_TRIES = 0;
               this.GotoMap(this.CUR_CUSTOM_MAP);
            }
            else
            {
               this.GET_TRIES = 0;
               this.GotoMap("c" + this.CMPG_THIS_LEVEL + "a");
            }
         }
      }
      
      public function onEnterFrame_ac(param1:Event) : void
      {
         if(this.ok2)
         {
            this.yy -= 2;
         }
         if(this.ok)
         {
            this.yy += 2;
         }
         this.xx += this.yy;
         if(this.xx < -this.BADGES_TOTAL * 32 + 296)
         {
            this.xx = -this.BADGES_TOTAL * 32 + 296;
         }
         if(this.xx > 0)
         {
            this.xx = 0;
         }
         this.i = 0;
         while(this.i < this.BADGES_TOTAL)
         {
            this.achive_obj[this.i].y = this.xx + this.i * 32;
            ++this.i;
         }
         this.sc_scrool.y = 98 + this.xx / (-this.BADGES_TOTAL * 32 + 296) * (282 - 98);
         if(this.yy > 15)
         {
            this.yy = 15;
         }
         if(this.yy < -15)
         {
            this.yy = -15;
         }
         if(this.yy > 1)
         {
            this.yy = this.yy - 1;
         }
         else if(this.yy < -1)
         {
            this.yy += 1;
         }
         else
         {
            this.yy = 0;
         }
      }
      
      public function sc_up(param1:MouseEvent) : void
      {
         this.ok = true;
      }
      
      public function sc_upx(param1:MouseEvent) : void
      {
         this.ok = false;
      }
      
      public function sc_down(param1:MouseEvent) : void
      {
         this.ok2 = true;
      }
      
      public function sc_downx(param1:MouseEvent) : void
      {
         this.ok2 = false;
      }
      
      public function intro_done() : void
      {
         if(!this.INTRO_DONE)
         {
            this.StopAllSounds();
            this.INTRO_DONE = true;
            this.main_song_ch = this.s_main_song.play(0,0,this.main_song_Transform);
            if(this.main_song_ch != null)
            {
               this.main_song_working = true;
               this.main_song_ch.addEventListener(Event.SOUND_COMPLETE,this.main_song_PlayAgain);
            }
            gotoAndStop("menu");
         }
      }
      
      public function decode_game_state(param1:String) : String
      {
		 param1 = param1.split(" ").join("");
		 if(param1.indexOf(";") >= 0) {
			 return param1;
		 }
         var _loc2_:* = undefined;
         _loc2_ = "";
         this.i = 0;
         while(this.i < param1.length)
         {
            _loc2_ += String.fromCharCode(param1.charCodeAt(this.i) - 1);
            ++this.i;
         }
         return _loc2_;
      }
      
      public function encode_game_state(param1:String) : String
      {
         var _loc2_:* = undefined;
         _loc2_ = "";
         this.i = 0;
         while(this.i < param1.length)
         {
            _loc2_ += String.fromCharCode(param1.charCodeAt(this.i) + 1);
            ++this.i;
         }
         return _loc2_;
      }
      
      public function GameStateAlert(param1:String) : void
      {
         var s:String = param1;
         if(this.game_state_timer != -1)
         {
            clearInterval(this.game_state_timer);
         }
         this.error_game_state.text = s;
         this.game_state_timer = setTimeout(function():*
         {
            if(currentFrameLabel == "export_progress")
            {
               error_game_state.text = "";
            }
            game_state_timer = -1;
         },3000);
      }
      
      public function __setPerspectiveProjection_(param1:Event) : void
      {
			 root.transform.perspectiveProjection.fieldOfView = 90;
			 root.transform.perspectiveProjection.projectionCenter = new Point(400,200);
			 this.Menu3DProjectionSet = true;
      }
   }
}